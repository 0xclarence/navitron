[["0",{"pageContent":"SUN.io Overview\n​ is a TRON-powered DeFi platform that integrates token swap, liquidity mining, stablecoin swap, and self-governance. Drawing on the strengths of various trading protocols, SUN.io is able to offer high performance, best prices, and enhanced security.\nThis document describes the technical implementation and smart contract logic of the SUN.io protocol. It helps SUN.io developers with open-source contribution while allowing third-party developers to integrate SUN.io's functionality into their own applications.\nNOTE:\nAll code starting with $ runs in a computer terminal; code starting with >>> runs in NodeJS. Readers are assumed to have some basic knowledge in TronWeb, which is used in code cited in this document.StableSwap Overview\nStableSwap protocol keywords: Automated market maker (AMM), liquidity pool and swap\nBackground","metadata":{"loc":{"lines":{"from":1,"to":7}}}}],["1",{"pageContent":"StableSwap protocol keywords: Automated market maker (AMM), liquidity pool and swap\nBackground\nAs stablecoins evolve, the popular TRC20-USDT is no longer alone on TRON. TRON's expanding stablecoin family has welcomed USDJ, TUSD, USDC, USDD, and other new members. The growing market share and variety of stablecoins have given rise to more complex demand for swapping between different stablecoins. SUN.io's StableSwap protocol is designed to provide swap services for stablecoins or tokens of equivalent value, and it offers lower fees and slippage than competitors in the market in the following ways:\nSlippage of StableSwap can be reduced to zero when there are sufficient tokens in the liquidity pool;\nStableSwap will increase the transaction price of a token to avoid depletion of its supply in the liquidity pool.\nMechanism","metadata":{"loc":{"lines":{"from":7,"to":12}}}}],["2",{"pageContent":"StableSwap will increase the transaction price of a token to avoid depletion of its supply in the liquidity pool.\nMechanism\nTo maintain the transaction price at 1, the most straightforward way is to use the equation of a straight line with a slope of -1 (i.e. x + y = k). The price should also be able to adjust itself to avoid liquidity depletion, which requires the constant product formula x * y = k. The StableSwap protocol incorporates both constant sum and constant product. Its model can be simply regarded as the weighted sum of a constant sum and a constant product, as described by the market making formula in the .\n \nAccording to the above formula, token swaps have an impact on the value of \nx \ni\n \n. Take 2pool (USDD, USDT) as an example: suppose the amount before the transaction is \n(\n1\n,\n2\n)\n(x \n1\n​\n ,x \n2\n​\n )\n.  When a user swaps \n1\n′\n−\n1\nx \n1\n′\n \n​\n −x \n1\n​\nUSDD for USDT, the value of \n1\nx \n1\n​\nwill change to \n1\n′\nx \n1\n′\n \n​\n \n. Substitute \n1\n′\nx \n1\n′\n \n​","metadata":{"loc":{"lines":{"from":12,"to":67}}}}],["3",{"pageContent":"(\n1\n,\n2\n)\n(x \n1\n​\n ,x \n2\n​\n )\n.  When a user swaps \n1\n′\n−\n1\nx \n1\n′\n \n​\n −x \n1\n​\nUSDD for USDT, the value of \n1\nx \n1\n​\nwill change to \n1\n′\nx \n1\n′\n \n​\n \n. Substitute \n1\n′\nx \n1\n′\n \n​\ninto the above equation and you will get the new \n2\n′\nx \n2\n′\n \n​\n \n, and \n2\n−\n2\n′\nx \n2\n​\n −x \n2\n′\n \n​\nrepresents the amount of USDT the user will obtain. The values of both \nA\n and \nD\n remain unchanged during the calculation. \nA\n is a constant, and the value of \nD\n can be found with a given \nx \ni\n​\nusing Newton's Method.\n \nLet \n=\n∑\n=\n1\n,\n=\n0\n0\n∏\n=\n1\nS=∑ \ni=1\nn\n​\n x \ni\n​\n ,D \np\n​\n = \nn \nn\n ∏ \ni=1\nn\n​\n x \ni\n​\n \nD \n0\n​\n D \n0\nn\n​\n \n​\n \n, Substitute these expressions into the above equation and you can get:\nThe corresponding contract code is shown below:\ndef get_D(xp: uint256[N_COINS], amp: uint256) -> uint256:\n    S: uint256 = 0\n    for _x in xp:\n        S += _x\n    if S == 0:\n        return 0\n​\n    Dprev: uint256 = 0\n    D: uint256 = S\n    Ann: uint256 = amp * N_COINS\n    for _i in range(255):","metadata":{"loc":{"lines":{"from":67,"to":205}}}}],["4",{"pageContent":"S: uint256 = 0\n    for _x in xp:\n        S += _x\n    if S == 0:\n        return 0\n​\n    Dprev: uint256 = 0\n    D: uint256 = S\n    Ann: uint256 = amp * N_COINS\n    for _i in range(255):\n        D_P: uint256 = D\n        for _x in xp:\n            D_P = D_P * D / (_x * N_COINS)       Dprev = D\n        D = (Ann * S + D_P * N_COINS) * D / ((Ann - 1) * D + (N_COINS + 1) * D_P)\n        if D > Dprev:\n            if D - Dprev <= 1:\n                break\n        else:\n            if Dprev - D <= 1:\n                break\n    return D\n​\nLiquidity Pool\nThe StableSwap contract of SUN.io allows users to swap between stablecoins and add or remove liquidity. Its USDD-USDT liquidity pool, USDJ-TUSD-USDT liquidity pool, and USDC liquidity pool are now available on the TRON MainNet.\nUSDD-USDT pool\nMainNet contract address: TNTfaTpkdd4AQDeqr8SGG7tgdkdjdhbP5c\nUSDJ-TUSD-USDT pool\nMainNet contract address: TKcEU8ekq2ZoFzLSGFYCUY6aocJBX9X31b\nUSDC pool","metadata":{"loc":{"lines":{"from":205,"to":233}}}}],["5",{"pageContent":"USDD-USDT pool\nMainNet contract address: TNTfaTpkdd4AQDeqr8SGG7tgdkdjdhbP5c\nUSDJ-TUSD-USDT pool\nMainNet contract address: TKcEU8ekq2ZoFzLSGFYCUY6aocJBX9X31b\nUSDC pool\nMainNet contract address: TNTfaTpkdd4AQDeqr8SGG7tgdkdjdhbP5c\nInteract with Contract\nWe utilize TronWeb to facilitate interaction with on-chain contracts. First, you need to initialize the TronWeb instance.\nconst TronWeb = require('tronweb')\nconst privateKey = process.env.PRIVATE_KEY\nconst apiKey = process.env.API_KEY\n​\nvar tronWeb = new TronWeb({\n\tfullHost: \"https://api.trongrid.io\",\n\theaders: { \"TRON-PRO-API-KEY\": apiKey },\n\tprivateKey: privateKey,\n      })\nGet Liquidity Pool's Information\nGet a liquidity's token address\nFunction: coins(uint256)\nParameter: The i-th token of the stablecoin pool\n>>> let contract = await tronWeb.getContract('TNTfaTpkdd4AQDeqr8SGG7tgdkdjdhbP5c')\n>>> await contract.methods.coins(0).call() \nTR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t \nGet a liquidity pool's size\nFunction: balances(uint256)","metadata":{"loc":{"lines":{"from":233,"to":258}}}}],["6",{"pageContent":">>> await contract.methods.coins(0).call() \nTR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t \nGet a liquidity pool's size\nFunction: balances(uint256)\nParameter: The i-th token of the stablecoin pool\n>>> let contract = await tronWeb.getContract('TNTfaTpkdd4AQDeqr8SGG7tgdkdjdhbP5c')\n>>> await contract.methods.balances(0).call()\n1000000000000\nGet a liquidity pool's LP token address\nFunction: lp_token()\nParameter: No input parameters\n>>> let contract = await tronWeb.getContract('TNTfaTpkdd4AQDeqr8SGG7tgdkdjdhbP5c')\n>>> await contract.methods.lp_token().call() \nTD3et9gS2pYz46ZC2mkCfYcKQGNwrnBLef \nGet A's value\nFunction: A()\nParameter: No input parameters\n>>> let contract = await tronWeb.getContract('TNTfaTpkdd4AQDeqr8SGG7tgdkdjdhbP5c')\n>>> await contract.methods.A().call()\n300\nExecute Transaction\nGet the amount of Token to swap for\nFunction: get_dy(uint128,uint128,uint256)","metadata":{"loc":{"lines":{"from":258,"to":280}}}}],["7",{"pageContent":">>> await contract.methods.A().call()\n300\nExecute Transaction\nGet the amount of Token to swap for\nFunction: get_dy(uint128,uint128,uint256)\nParameters: In-pool sequence number of the token to be sold, in-pool sequence number of the token to be bought, amount of the token to be sold\n>>> let contract = await tronWeb.getContract('TNTfaTpkdd4AQDeqr8SGG7tgdkdjdhbP5c')\n>>> await contract.methods.get_dy(0, 1, 100).send() \n103\nSwap\nFunction: exchange(uint128,uint128,uint256,uint256)\nParameters: In-pool sequence number of the token to be sold, in-pool sequence number of the token to be bought, amount of the token to be sold, minimum amount expected to get\n>>> let contract = await tronWeb.getContract('TNTfaTpkdd4AQDeqr8SGG7tgdkdjdhbP5c')\n>>> await contract.methods.exchange(0, 1, 100, 99).send() \nAdd & Remove Liquidity\nAdd liquidity\nFunction: add_liquidity(uint256[n],uint256)\nParameters: Amount of all tokens to add, minimum LP token amount expected to get","metadata":{"loc":{"lines":{"from":280,"to":297}}}}],["8",{"pageContent":"Add & Remove Liquidity\nAdd liquidity\nFunction: add_liquidity(uint256[n],uint256)\nParameters: Amount of all tokens to add, minimum LP token amount expected to get\n>>> let contract = await tronWeb.getContract('TNTfaTpkdd4AQDeqr8SGG7tgdkdjdhbP5c')\n>>> await contract.methods.add_liquidity(100, 100, 299).send() \nRemove liquidity\nFunction: remove_liquidity(uint256, uint256[n])\nParameters: LP token amount to remove, minimum token amount expected to get\n>>> let contract = await tronWeb.getContract('TNTfaTpkdd4AQDeqr8SGG7tgdkdjdhbP5c')\n>>> await contract.methods.remove_liquidity(299.9, 100, 100).send() SunSwap Overview\nSunSwap protocol keywords: Automated market maker (AMM), liquidity pool and swap\nBackground","metadata":{"loc":{"lines":{"from":297,"to":309}}}}],["9",{"pageContent":">>> await contract.methods.remove_liquidity(299.9, 100, 100).send() SunSwap Overview\nSunSwap protocol keywords: Automated market maker (AMM), liquidity pool and swap\nBackground\nSunSwap AMM (automated market maker) adopts the most used trading model in the world of DeFi today. Unlike the order book, AMMs utilize the constant product model to calculate tokens in the pool, where trades are automatically executed, and the liquidity supply of the trading pair is ensured.\nAnyone can deposit a token into a pool in exchange for the pool's dedicated token (LP token) of an equivalent value, and thus become a liquidity provider (LP) for the pool.  The amount of the LP token received divided by the pool's total LP reserves represents the liquidity provider's share of assets in the pool, and the liquidity provider can redeem the above assets at any time.  \nMechanism","metadata":{"loc":{"lines":{"from":309,"to":314}}}}],["10",{"pageContent":"Mechanism\nSwapping is based on the constant product formula, with x and y representing the amount of two different tokens (assumed to be token X and token Y), then:\nIf we want to swap X for Y from the liquidity pool, and assume that the amount of X entered is Δx and the amount of Y obtained is Δy, provided that the pool has sufficient funds, then:This means that the product of the two tokens in the liquidity pool remains unchanged after the transaction. In this case, if the volume of a transaction only accounts for a minimal fraction of the liquidity pool's total volume, then the transaction price will approximate the ratio of the two tokens' amount:\nHowever, the price of y in the liquidity pool is \ny\nx\n​\nbefore the swap. This results in a slippage of y's price:","metadata":{"loc":{"lines":{"from":314,"to":321}}}}],["11",{"pageContent":"However, the price of y in the liquidity pool is \ny\nx\n​\nbefore the swap. This results in a slippage of y's price:\nThe larger the transaction volume Δx, the greater the slippage and the more the transaction price deviates from the actual price; likewise, more funds and greater depth in the pool can reduce the slippage and thus lower the losses for users. In actual SunSwap transactions, a 0.3% fee will be deducted before the calculation.\nExample: Suppose the liquidity pool has 100 X and 1 Y. If a user wants to trade 20 X, then the actual amount of X traded will be 19.94 X (net of a 0.3% fee), according to the formula x ∗ y = k:\nLiquidity Pool\nThe SunSwap contract of SUN.io allows users to swap between regular tokens and add and remove liquidity. Its V1 and V2 contracts are now running on the TRON MainNet.\nV1\nFactory contract address: TXk8rQSAvPvBBNtqSoY6nCfsXWCSSpTVQF\nV2\nFactory contract address: TKWJdrQkqHisa1X8HUdHEfREvTzw4pMAaY","metadata":{"loc":{"lines":{"from":321,"to":333}}}}],["12",{"pageContent":"V1\nFactory contract address: TXk8rQSAvPvBBNtqSoY6nCfsXWCSSpTVQF\nV2\nFactory contract address: TKWJdrQkqHisa1X8HUdHEfREvTzw4pMAaY\nRouter contract address: TKzxdSv2FZKQrEqkKVgp5DcwEXBEKMg2Ax\nInteract with Contract\nWe utilize TronWeb to facilitate interaction with on-chain contracts. First, you need to initialize the TronWeb instance.\nconst TronWeb = require('tronweb')\nconst privateKey = process.env.PRIVATE_KEY\nconst apiKey = process.env.API_KEY\n​\nvar tronWeb = new TronWeb({\n\tfullHost: \"https://api.trongrid.io\",\n\theaders: { \"TRON-PRO-API-KEY\": apiKey },\n\tprivateKey: privateKey,\n      })\nGet Liquidity Pool's Information\nGet a liquidity pool's address in V1\nFunction: getExchange(address)\nParameter: Token address\n>>> let contract = await tronWeb.getContract('TXk8rQSAvPvBBNtqSoY6nCfsXWCSSpTVQF')\n>>> await contract.methods.getExchange('TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t').call() \n0x4cAD2750821493b093133B7bf10568bAEc000971\nGet a liquidity pool's address in V2\nFunction: getPair(address, address)","metadata":{"loc":{"lines":{"from":333,"to":357}}}}],["13",{"pageContent":"0x4cAD2750821493b093133B7bf10568bAEc000971\nGet a liquidity pool's address in V2\nFunction: getPair(address, address)\nParameter: token0's address, token1's address\n>>> let contract = await tronWeb.getContract('TKWJdrQkqHisa1X8HUdHEfREvTzw4pMAaY')\n>>> await contract.methods.getPair('TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t', 'TNUC9Qb1rRpS5CbWLmNMxXBjyFoydXjWFR') \n0x4cAD2750821493b093133B7bf10568bAEc000971\nExecute Transactions\nSell TRX to buy Token in V1\nFunction: trxToTokenTransferInput(uint256, uint256, address)\nParameters: minimum Token amount expected to buy, time window, recipient's address\nlet contract = await tronWeb.getContract('TQn9Y2khEsLJW1ChVWFMSMeRDow5KcbLSE')\n>>> await contract.methods.trxToTokenTransferInput(100, 1662825600, 'TQn9Y2khEsLJW1ChVWFMSMeRDow5KcbLSE')\nSell Token to buy TRX in V1\nFunction: tokenToTrxTransferInput(uint256, uint256, uint256, address)\nParameters: Amount of Token to sell, minimum TRX amount expected to buy, time window, recipient's address","metadata":{"loc":{"lines":{"from":357,"to":372}}}}],["14",{"pageContent":"Function: tokenToTrxTransferInput(uint256, uint256, uint256, address)\nParameters: Amount of Token to sell, minimum TRX amount expected to buy, time window, recipient's address\n>>> let contract = await tronWeb.getContract('TQn9Y2khEsLJW1ChVWFMSMeRDow5KcbLSE')\n>>> await contract.methods.tokenToTrxTransferInput(100, 1500, 1662825600, 'TQn9Y2khEsLJW1ChVWFMSMeRDow5KcbLSE') \nSell Token to buy Token in V1\nFunction: tokenToTokenSwapInput( uint256, uint256, uint256, uint256, address)\nParameters: Amount of Token to sell, minimum Token amount expected to buy, minimum Token amount expected to buy, time window, recipient's address\n>>> let contract = await tronWeb.getContract('TQn9Y2khEsLJW1ChVWFMSMeRDow5KcbLSE')\n>>> await contract.methods.tokenToTokenSwapInput(100, 100， 1500，1662825600，'TQn9Y2khEsLJW1ChVWFMSMeRDow5KcbLSE') \nSell Token to buy Token in V2\nFunction: swapExactTokensForTokens( uint, uint, address[], address, uint)","metadata":{"loc":{"lines":{"from":372,"to":382}}}}],["15",{"pageContent":"Sell Token to buy Token in V2\nFunction: swapExactTokensForTokens( uint, uint, address[], address, uint)\nParameters: Amount of Token to sell, minimum Token amount expected to buy, swap route, recipient's address, time window\n>>> let contract = await tronWeb.getContract('TKzxdSv2FZKQrEqkKVgp5DcwEXBEKMg2Ax')\n>>> await contract.methods.swapExactTokensForTokens(1000000000000000000,1000000,['TXYZopYRdj2D9XRtbG411XZZ3kM5VkAeBf','TF17BgPaZYbz8oxbjhriubPDsA7ArKoLX3'],'TF5MekHgFz6neU7zTpX4h2tha3mijDUj3z',1662825600)\nSell TRX to buy Token in V2\nFunction: swapExactETHForTokens(uint, address[], address, uint)\nParameters: Token amount expected to buy, swap route, recipient's address, time window\n>>> let contract = await tronWeb.getContract('TKzxdSv2FZKQrEqkKVgp5DcwEXBEKMg2Ax')\n>>> await contract.methods.swapExactETHForTokens(100000000,1,['TYsbWxNnyTgsZaTFaue9hqpxkU3Fkco94a','TXYZopYRdj2D9XRtbG411XZZ3kM5VkAeBf'],'TF5MekHgFz6neU7zTpX4h2tha5miPDUj3z',1662825600)\nSell Token to buy TRX in V2","metadata":{"loc":{"lines":{"from":382,"to":392}}}}],["16",{"pageContent":"Sell Token to buy TRX in V2\nFunction: swapExactTokensForETH(uint, uint, address[] , address, uint)\nParameters: Amount of Token to sell, minimum TRX amount expected to buy, swap route, buyer's address, time window\n>>> let contract = await tronWeb.getContract('TKzxdSv2FZKQrEqkKVgp5DcwEXBEKMg2Ax')\n>>> await contract.methods.swapExactTokensForETH(1000000,1000000,['TXYZopYRdj2D9XRtbG411XZZ3kM5VkAeBf','TYsbWxNnyTgsZaTFaue9hqpxkU3Fkco94a'],'TF5MekHgFz6neU7zTpX4h2tha5miPDUj3z',1662825600)\nAdd & Remove Liquidity\nAdd liquidity in V1\nFunction: addLiquidity(uint256, uint256, uint256)\nParameters: Minimum liquidity amount expected to get, maximum liquidity amount to add, time window\n>>> let contract = await tronWeb.getContract('TQn9Y2khEsLJW1ChVWFMSMeRDow5KcbLSE')\n>>> await contract.methods.addLiquidity(100， 100， 1662825600) \nRemove liquidity in V1\nFunction: removeLiquidity(uint256, uint256,uint256, uint256)","metadata":{"loc":{"lines":{"from":392,"to":404}}}}],["17",{"pageContent":">>> await contract.methods.addLiquidity(100， 100， 1662825600) \nRemove liquidity in V1\nFunction: removeLiquidity(uint256, uint256,uint256, uint256)\nParameters: Liquidity amount to remove, minimum TRX amount expected to get, minimum token amount expected to get, time window\n>>> let contract = await tronWeb.getContract('TQn9Y2khEsLJW1ChVWFMSMeRDow5KcbLSE')\n>>> await contract.methods.removeLiquidity(100, 100, 100, 1662825600) \nAdd liquidity in V2\nFunction: addLiquidity(address,address,uint,uint,uint,uint,address,uint)\nParameters: tokenA's address, tokenB's address, tokenA's amount expected to add, tokenB's amount expected to add, minimum receiving amount of the tokenA added, minimum receiving amount of the tokenB added, target liquidity pool's address, time window\n>>> let contract = await tronWeb.getContract('TKzxdSv2FZKQrEqkKVgp5DcwEXBEKMg2Ax')","metadata":{"loc":{"lines":{"from":404,"to":413}}}}],["18",{"pageContent":">>> let contract = await tronWeb.getContract('TKzxdSv2FZKQrEqkKVgp5DcwEXBEKMg2Ax')\n>>> await contract.methods.addLiquidity('TXYZopYRdj2D9XRtbG411XZZ3kM5VkAeBf','TF17BgPaZYbz8oxbjhriubPDsA7ArKoLX3',100000000,27661108481018349141,5000000,200000000000000000000,TF5MekHgFz6neU7zTpX4h2tha5miPDUj3z,1662825600)\nRemove liquidity in V2\nName: removeLiquidity(address,address,uint,uint,uint,address,uint)\nParameters: tokenA's address, tokenB's address, amount of liquidity to remove, minimum tokenA amount expected to get, minimum tokenB amount expected to get, token's receiving address, time window\n>>> let contract = await tronWeb.getContract('TKzxdSv2FZKQrEqkKVgp5DcwEXBEKMg2Ax')\n>>> await contract.methods.removeLiquidity('TXYZopYRdj2D9XRtbG411XZZ3kM5VkAeBf','TF17BgPaZYbz8oxbjhriubPDsA7ArKoLX3',100000000,1,1,TF5MekHgFz6neU7zTpX4h2tha5miPDUj3z,1962825600)SunSwap V3 Overview\nKeywords of SunSwap V3: market making model, liquidity pool, and swap\nBackground","metadata":{"loc":{"lines":{"from":413,"to":421}}}}],["19",{"pageContent":"Keywords of SunSwap V3: market making model, liquidity pool, and swap\nBackground\nWhile SunSwap V2 achieved remarkable success in decentralized trading, it also has its limitations. One of its key drawbacks is the underutilization of liquidity. To address this issue, SunSwap V3 introduces a concept called concentrated capital efficiency. This mechanism empowers liquidity providers to concentrate their funds within a specific price range, thereby allowing them to provide liquidity more effectively and earn higher rewards within a price range featuring high price volatility.","metadata":{"loc":{"lines":{"from":421,"to":423}}}}],["20",{"pageContent":"Developed by the SUN.io team, SunSwap V3 was launched in June 2023. It introduces a new trading model called \"concentrated liquidity\". With this new model, liquidity providers can allocate their funds to a specific price range rather than a fixed trading pair, which improves the efficiency of liquidity and offers better prices for traders. SunSwap V3 has also introduced flexible fee tiers, allowing liquidity providers to set different fee rates for different price ranges accordingly, which generates higher returns for liquidity providers and incentivizes them to provide more liquidity.\nMechanism\nThe swap logic can be inferred from the constant product formula. Here, x and y represent the respective reserve balance of the tokens involved (token0 and token1): \nL stands for liquidity, and the liquidity of a pool can be calculated from the reserve balance of the tokens involved. Based on the formula, the product of x and y (denoted as k) remains constant.","metadata":{"loc":{"lines":{"from":424,"to":427}}}}],["21",{"pageContent":"L stands for liquidity, and the liquidity of a pool can be calculated from the reserve balance of the tokens involved. Based on the formula, the product of x and y (denoted as k) remains constant. \nTherefore, we can measure the liquidity of a pool by \nxy\n​\n L is actually the geometric mean of x and y. \nDividing y by x, we can get the prices of token0 and token1. Since the prices of the two tokens in the pool are reciprocal to each other, we'll only use one of them when doing the calculation (SunSwap V3 uses y/x).\n L also indicates the relation between the change of the output amount and the change of p: \np\n​\n \n​\n​Proof：\n \n​\n=\n0\n0\n=\n1\n1\nxy\n​\n = \nx \n0\n​\n y \n0\n​\n \n​\n = \nx \n1\n​\n y \n1\n​\n \n​\n \n，, thus:Contract Addresses\nFactory\nContract address on the Mainnet: TThJt8zaJzJMhCEScH7zWKnp5buVZqys9x\nContract address on Nile Testnet: TUTGcsGDRScK1gsDPMELV2QZxeESWb1Gac\nSwapRouter\nContract address on the Mainnet: TQAvWQpT9H916GckwWDJNhYZvQMkuRL7PN","metadata":{"loc":{"lines":{"from":427,"to":473}}}}],["22",{"pageContent":"Contract address on Nile Testnet: TUTGcsGDRScK1gsDPMELV2QZxeESWb1Gac\nSwapRouter\nContract address on the Mainnet: TQAvWQpT9H916GckwWDJNhYZvQMkuRL7PN \nContract address on Nile Testnet: TFkswj6rUfK3cQtFGzungCkNXxD2UCpEVD NonfungiblePositionManager\nContract address on the Mainnet: TLSWrv7eC1AZCXkRjpqMZUmvgd99cj7pPF\nContract address on Nile Testnet: TPQzqHbCzQfoVdAV6bLwGDos8Lk2UjXz2R\nInteract with Contract\nWe utilize TronWeb to facilitate interaction with on-chain contracts. First, you need to initialize the TronWeb instance.\nconst TronWeb = require('tronweb')\nconst privateKey = process.env.PRIVATE_KEY\nconst apiKey = process.env.API_KEY\n​\nvar tronWeb = new TronWeb({\n\tfullHost: \"https://api.trongrid.io\",\n\theaders: { \"TRON-PRO-API-KEY\": apiKey },\n\tprivateKey: privateKey,\n      })\nMake queries\nQuery the address of the liquidity pool\nName：getPool(address,address,uint24)\nContract called: Factory\nParameters: address of token0, address of token1, and fee rate \nReturned value: address of pool","metadata":{"loc":{"lines":{"from":473,"to":495}}}}],["23",{"pageContent":"Query the address of the liquidity pool\nName：getPool(address,address,uint24)\nContract called: Factory\nParameters: address of token0, address of token1, and fee rate \nReturned value: address of pool\n>>> let contract = await tronWeb.getContract('TThJt8zaJzJMhCEScH7zWKnp5buVZqys9x')\n>>> await contract.methods.getPool('TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t',‘TPYmHEhy5n8TCEfYGqW2rPxsghSfzghPDn’,100).call()\n0x839538A1B5E9B57C639035A453E07C9A4309F9D9\nQuery the details of pool\nName: slot0()\nContract called: the pool contract (accessible via factory)  \nParameters: N/A\nReturned values: 1. current price (which equals sqrtPriceX96 squared divided by 2 to the power of 192); 2. current tick;  3. the latest index of the observation array; 4. maximum cardinality of the observations currently stored; 5. maximum cardinality that is triggered in the observation and is to be stored next; 6. percentage of the current protocol fee in the swap fee at the time of withdrawal; 7. whether the pool is locked","metadata":{"loc":{"lines":{"from":495,"to":507}}}}],["24",{"pageContent":">>> let contract = await tronWeb.getContract('TSUUVjysXV8YqHytSNjfkNXnnB49QDvZpx')\n>>> await contract.methods.slot0().call()\n[\n  sqrtPriceX96: BigNumber { _hex: '0x4714a6b4d8e3d1ab6bcfbe0c', _isBigNumber: true },\n  tick: -25629,\n  observationIndex: 0,\n  observationCardinality: 1,\n  observationCardinalityNext: 1,\n  feeProtocol: 0,\n  unlocked: true\n]\n​\nQuery a user’s tokenId\n​\nName: tokenOfOwnerByIndex(address,uint256) \nContract called: NonfungiblePositionManager\nParameters: user's address, user's nth proof of liquidity\nReturned value: tokenId\n>>> let contract = await tronWeb.getContract('TLSWrv7eC1AZCXkRjpqMZUmvgd99cj7pPF')\n>>> await contract.methods.tokenOfOwnerByIndex('TF5MekHgFz6neU7zTpX4h2tha5miPDUj3z',0).call()\n1\nQuery the details of a user’s liquidity\nName: positions(uint256)\nContract called: NonfungiblePositionManager \nParameter: tokenId","metadata":{"loc":{"lines":{"from":508,"to":532}}}}],["25",{"pageContent":"1\nQuery the details of a user’s liquidity\nName: positions(uint256)\nContract called: NonfungiblePositionManager \nParameter: tokenId\nReturned values: 1. nonce; 2. address authorized by the tokenId; 3. address of token0 in the pool; 4. address of token1 in the pool; 5. fee rate in the pool; 6. lowest price for the position selected; 7. highest price for the position selected; 8. liquidity; 9. 10. fee growth in all positions at the time the latest change was made to a single position; 11. 12. amount of uncollected tokens owed by this position as of the previous calculation\n>>> let contract = await tronWeb.getContract('TLSWrv7eC1AZCXkRjpqMZUmvgd99cj7pPF')\n>>> await contract.methods.positions (1).call()\n[\n  nonce: 0\n  operator: T9yD14Nj9j7xAB4dbGeiX9h8unkKHxuWwb\n  token0: TF9io9LGyjuK3uTpr73pAaQ5m9scxd9xvr\n  token1: TK8E3sFhBt3EB6gTT6d6co8RMB6DFUnNwE\n  fee: 3000\n  tickLower: -283380\n  tickUpper: -269520\n  liquidity: 1390641886550414128\n  feeGrowthInside0LastX128: 0","metadata":{"loc":{"lines":{"from":532,"to":549}}}}],["26",{"pageContent":"token1: TK8E3sFhBt3EB6gTT6d6co8RMB6DFUnNwE\n  fee: 3000\n  tickLower: -283380\n  tickUpper: -269520\n  liquidity: 1390641886550414128\n  feeGrowthInside0LastX128: 0\n  feeGrowthInside1LastX128: 540564213145032425660083902\n  tokensOwed0: 0\n  tokensOwed1: 0\n]\nExecute transactions\nMake a transaction\nName: exactInput(ExactInputParams) \nContract called: SwapRouter\nParameters: [encode of the path, user's address, deadline]\n>>> let contract = await tronWeb.getContract('TQAvWQpT9H916GckwWDJNhYZvQMkuRL7PN')\n>>> await contract.methods.exactInput(['0xe518c608a37e2a262050e10be0c9d03c7a0877f3000bb843c42f702b0a11565c46e34022aab677d7bd8ae3','TF5MekHgFz6neU7zTpX4h2tha5miPDUj3z',1662825600])\nAdd liquidity\nName: increaseLiquidity(IncreaseLiquidityParams) \nContract called: NonfungiblePositionManager\nParameters: [tokenId, amount of token0 to be added, amount of token1 to be added, minimum amount of token0 to be added, minimum amount of token1 to be added, deadline]","metadata":{"loc":{"lines":{"from":549,"to":569}}}}],["27",{"pageContent":"Parameters: [tokenId, amount of token0 to be added, amount of token1 to be added, minimum amount of token0 to be added, minimum amount of token1 to be added, deadline]\n>>> let contract = await tronWeb.getContract('TLSWrv7eC1AZCXkRjpqMZUmvgd99cj7pPF')\n>>> await contract.methods.increaseLiquidity(1,'1000000000000000000','1000000000000000000'，1，1，1662825600)\nReduce liquidity\nName: decreaseLiquidity(DecreaseLiquidityParams) \nContract called: NonfungiblePositionManager\nParameters: [tokenId, liquidity to be removed, minimum amount of token0 to be obtained, minimum amount of token1 to be obtained, deadline]\n>>> let contract = await tronWeb.getContract('TLSWrv7eC1AZCXkRjpqMZUmvgd99cj7pPF')\n>>> await contract.methods.decreaseLiquidity(1,'1390641886550414128',1，1，1662825600)\nCollect rewards\nName: collect(CollectParams)\nContract called: NonfungiblePositionManager\nParameters: [tokenId, address to receive rewards, maximum amount of token0 reward, maximum amount of token1 reward]","metadata":{"loc":{"lines":{"from":569,"to":581}}}}],["28",{"pageContent":"Name: collect(CollectParams)\nContract called: NonfungiblePositionManager\nParameters: [tokenId, address to receive rewards, maximum amount of token0 reward, maximum amount of token1 reward]\n>>> let contract = await tronWeb.getContract('TLSWrv7eC1AZCXkRjpqMZUmvgd99cj7pPF')\n>>> await contract.methods.collect(1,'TF5MekHgFz6neU7zTpX4h2tha5miPDUj3z',‘100000000000000000000000000’，‘100000000000000000000000000’)Smart Router\nA tool that provides better trading strategy\nBackground\nTo help users boost returns, SUN.io has rolled out the Smart Router feature, which plays an essential role in the following aspects: \nExecuting trades at the best price: The Smart Router finds the best price for traders by choosing the optimal path to execute trades based on the price difference across markets. This means users get more favorable trade prices at execution to maximize returns.","metadata":{"loc":{"lines":{"from":581,"to":589}}}}],["29",{"pageContent":"Enhancing liquidity: The Smart Router utilizes the liquidity of different markets to provide better depth and liquidity for traders. By executing trades across multiple liquidity pools, it reduces slippage and market shocks, thus offering an enhanced trading experience. \nImproving liquidity utilization: The Smart Router helps improve the utilization of liquidity. By channeling liquidity from highly liquid markets to less liquid ones, it helps improve the overall utilization of liquidity and enables the completion of more trades. \nMechanism\nHow the Smart Router works","metadata":{"loc":{"lines":{"from":590,"to":593}}}}],["30",{"pageContent":"Mechanism\nHow the Smart Router works\nSUN.io's Smart Router algorithm service retrieves data from SunSwap V1, SunSwap V2, SunSwap V3, PSM, and SunCurve by utilizing the contract image built on the server. It sorts trade paths by the amount of the token users can obtain and displays the top three as options for users. The contract of the Smart Router is a nested contract through which the liquidity pools on SunSwap V1, SunSwap V2, SunSwap V3, PSM, and SunCurve can be called to complete trades.\nSmart Router Contract\nContract address on Mainnet: TFVisXFaijZfeyeSjCEVkHfex7HGdTxzF9\nContract address on Nile testnet: TB6xBCixqRPUSKiXb45ky1GhChFJ7qrfFj\nSmart Router Algorithm Service\nSmart Router algorithm service URL: ​\nContract Interaction\nWe utilize TronWeb to facilitate interaction with on-chain contracts. First, you need to initialize the TronWeb instance.\nconst TronWeb = require('tronweb')\nconst privateKey = process.env.PRIVATE_KEY\nconst apiKey = process.env.API_KEY\n​","metadata":{"loc":{"lines":{"from":593,"to":606}}}}],["31",{"pageContent":"const TronWeb = require('tronweb')\nconst privateKey = process.env.PRIVATE_KEY\nconst apiKey = process.env.API_KEY\n​\nvar tronWeb = new TronWeb({\n\tfullHost: \"https://api.trongrid.io\",\n\theaders: { \"TRON-PRO-API-KEY\": apiKey },\n\tprivateKey: privateKey,\n      })\nGet Smart Router Info\nSmart Router algorithm service endpoint\nName: ​\nType: GET\nParameters:\nName\nDescription\nfromToken\nAddress of fromToken\ntoToken\nAddress of toToken\namountIn\nAmount of the token to be swapped\ntypeList\nTypes available for the swap\n(PSM,CURVE,CURVE_COMBINATION,WTRX,SUNSWAP_V1,SUN\n_V2,SUNSWAP_V3)\nReturn\n​\nName\nDescription\namountIn\nAmount of the token entered (divided by precision)\namountOut\nAmount of the token that can be swapped for, calculated by the Smart Router (divided by precision)\nInUsd\nUSD price of the entered token\nOutUsd\nUSD price of the token to be swapped for\nimpact\nPrice impact\nfee\nTransaction fee\ntokens\nAddresses of the tokens that the path from fromToken to toToken involves\nsymbols","metadata":{"loc":{"lines":{"from":606,"to":650}}}}],["32",{"pageContent":"OutUsd\nUSD price of the token to be swapped for\nimpact\nPrice impact\nfee\nTransaction fee\ntokens\nAddresses of the tokens that the path from fromToken to toToken involves\nsymbols\nSymbols of the tokens that the path from fromToken to toToken involves\npoolFees\nTransaction fees of the liquidity pools that the path from fromToken to toToken involves\n(0 is displayed for non-SunSwap V3 pools)\npoolVersions\nVersions of the liquidity pools that the path from fromToken to toToken involves\nstepAmountsOut\nAmounts of the tokens obtained from each pool along the path from fromToken to toToken\n​\n>>> curl 'https://rot.endjgfsv.link/swap/router?fromToken=TWrZRHY9aKQZcyjpovdH6qeCEyYZrRQDZt&toToken=TG9XJ75ZWcUw69W8xViEJZQ365fRupGkFP&amountIn=100000000000000000&typeList=PSM,CURVE,CURVE_COMBINATION,WTRX,SUNSWAP_V1,SUNSWAP_V2,SUNSWAP_V3'","metadata":{"loc":{"lines":{"from":650,"to":668}}}}],["33",{"pageContent":"{\"code\":0,\"message\":\"SUCCESS\",\"data\":[{\"amountIn\":\"0.100000000000000000\",\"amountOut\":\"0.00340809\",\"inUsd\":\"0.000552211279796638800000000000000000\",\"outUsd\":\"102.28490008408047256262147451\",\"impact\":\"-0.004658\",\"fee\":\"0.001019799010000000\",\"tokens\":[\"TWrZRHY9aKQZcyjpovdH6qeCEyYZrRQDZt\",\"TGfVzt44kg6ZJ4fUqpHzJy3Jb37YMf8pMH\",\"TGjgvdTWWrybVLaVeFqSyVqJQWjxqRYbaK\",\"TG9XJ75ZWcUw69W8xViEJZQ365fRupGkFP\"],\"symbols\":[\"SUN\",\"HT\",\"USDD\",\"BTC\"],\"poolFees\":[\"100\",\"10000\",\"100\",\"0\"],\"poolVersions\":[\"v3\",\"v3\",\"v3\"],\"stepAmountsOut\":[\"0.204301041106368782\",\"0.306491628388168604\",\"0.00340809\"]},{\"amountIn\":\"0.100000000000000000\",\"amountOut\":\"0.00315241\",\"inUsd\":\"0.000552211279796638800000000000000000\",\"outUsd\":\"94.61133417076900038177793499\",\"impact\":\"-0.000471\",\"fee\":\"0.001593109000000000\",\"tokens\":[\"TWrZRHY9aKQZcyjpovdH6qeCEyYZrRQDZt\",\"TYsbWxNnyTgsZaTFaue9hqpxkU3Fkco94a\",\"T9yD14Nj9j7xAB4dbGeiX9h8unkKHxuWwb\",\"TF17BgPaZYbz8oxbjhriubPDsA7ArKoLX3\",\"TG9XJ75ZWcUw69W8xViEJZQ365fRupGkFP\"],\"symbols\":[\"SUN\",\"WTR","metadata":{"loc":{"lines":{"from":669,"to":669}}}}],["34",{"pageContent":"Y9aKQZcyjpovdH6qeCEyYZrRQDZt\",\"TYsbWxNnyTgsZaTFaue9hqpxkU3Fkco94a\",\"T9yD14Nj9j7xAB4dbGeiX9h8unkKHxuWwb\",\"TF17BgPaZYbz8oxbjhriubPDsA7ArKoLX3\",\"TG9XJ75ZWcUw69W8xViEJZQ365fRupGkFP\"],\"symbols\":[\"SUN\",\"WTRX\",\"TRX\",\"JST\",\"BTC\"],\"poolFees\":[\"0\",\"0\",\"0\",\"10000\",\"0\"],\"poolVersions\":[\"v2\",\"v2\",\"v1\",\"v3\"],\"stepAmountsOut\":[\"9.406036\",\"9.406036\",\"5797.537373084257622564\",\"0.00315241\"]},{\"amountIn\":\"0.100000000000000000\",\"amountOut\":\"0.00311306\",\"inUsd\":\"0.000552211279796638800000000000000000\",\"outUsd\":\"93.43034692621015170250621534\",\"impact\":\"-0.000305\",\"fee\":\"0.001019799010000000\",\"tokens\":[\"TWrZRHY9aKQZcyjpovdH6qeCEyYZrRQDZt\",\"TRz7J6dD2QWxBoumfYt4b3FaiRG23pXfop\",\"TGjgvdTWWrybVLaVeFqSyVqJQWjxqRYbaK\",\"TG9XJ75ZWcUw69W8xViEJZQ365fRupGkFP\"],\"symbols\":[\"SUN\",\"TUSD\",\"USDD\",\"BTC\"],\"poolFees\":[\"10000\",\"100\",\"100\",\"0\"],\"poolVersions\":[\"v3\",\"v3\",\"v3\"],\"stepAmountsOut\":[\"0.279484570175183752\",\"0.279951568868017126\",\"0.00311306\"]}]}","metadata":{"loc":{"lines":{"from":669,"to":669}}}}],["35",{"pageContent":"Trade Execution\nTrade\nName: swapExactInput( address[], string[], uint256[], uint24[], SwapData)\nParameters: array of paths, array of pool versions, array of lengths of adjacent pool versions, array of fee rates, [amount of the token to be swapped, minimum acceptable amount of the token obtained from the swap, address to receive the token obtained from the swap, deadline].\n​\n>>> let contract = await tronWeb.getContract('TQAvWQpT9H916GckwWDJNhYZvQMkuRL7PN')\n>>> await router.swapExactInput(\n                    ['TWrZRHY9aKQZcyjpovdH6qeCEyYZrRQDZt','TGfVzt44kg6ZJ4fUqpHzJy3Jb37YMf8pMH','TGjgvdTWWrybVLaVeFqSyVqJQWjxqRYbaK','TG9XJ75ZWcUw69W8xViEJZQ365fRupGkFP'],\n                    ['v3'],\n                    [4],\n                    [100,10000,100,0],\n                    ['100000000000000000','1', 'TF5MekHgFz6neU7zTpX4h2tha5miPDUj3z',1662825600]\n                ).send({feeLimit: 10000 * 1e6,shouldPollResponse: true});\nSmart Mining V1\nSmart Mining V1: A flexible on-demand mining mode","metadata":{"loc":{"lines":{"from":670,"to":684}}}}],["36",{"pageContent":").send({feeLimit: 10000 * 1e6,shouldPollResponse: true});\nSmart Mining V1\nSmart Mining V1: A flexible on-demand mining mode\nBackground\nAs one of the digital financial derivatives on SUN.io, mining provides crypto holders with stable, secure and reliable services for investment product subscription and redemption. Smart Mining V1, also known as flexible mining, is an important part of SUN.io's mining service. It distributes rewards according to the share of users' staked assets in the mining pool's total stake amount. And users can redeem their assets anytime.\n Explanation\nSUN.io's mining service distributes token rewards at an even inflation rate within a certain period of time, as shown in the graph below.\nChanges in the total staked assets in the mining pool at the time point ti will lead to changes in rewards for individual users, who are rewarded according to the following formula:r \nt\n​\ndenotes the expansion factor of token rewards,  \nt \ni\n​","metadata":{"loc":{"lines":{"from":684,"to":697}}}}],["37",{"pageContent":"t\n​\ndenotes the expansion factor of token rewards,  \nt \ni\n​\ndenotes the i-th change, \nS \ni\n​\ndenotes the total staked assets during the period from ti−1 to ti, and \nU \ni\n​\ndenotes users' staked assets during the period from  \n−\n1\nt \ni−1\n​\nto \nt \ni\n​\n \n.\nAccording to the above formula, changes in the mining pool’s total staked assets will affect the distribution of rewards for all users. In order to avoid high gas fees incurred from updating the reward distribution for every user, the above formula is altered to the following one:\nWhen the total staked assets in the mining pool have changed while the users' staked assets have not during the period from starti to endi, only the following summation formula needs to be updated:\n​\nContract code\nmodifier updateReward(address account) {\n    rewardPerTokenStored = rewardPerToken();\n    lastUpdateTime = lastTimeRewardApplicable();\n    if (canNext && block.timestamp > periodFinish && DURATION_NEXT > 0) {","metadata":{"loc":{"lines":{"from":697,"to":730}}}}],["38",{"pageContent":"rewardPerTokenStored = rewardPerToken();\n    lastUpdateTime = lastTimeRewardApplicable();\n    if (canNext && block.timestamp > periodFinish && DURATION_NEXT > 0) {\n        rewardRate = rewardNext.div(DURATION_NEXT);\n        uint256 nextRound = (block.timestamp - periodFinish) / DURATION_NEXT + 1;\n        periodFinish = periodFinish.add(nextRound * DURATION_NEXT);\n        rewardPerTokenStored = rewardPerToken();\n        lastUpdateTime = lastTimeRewardApplicable();\n        rewardNow = rewardNext;\n        DURATION = DURATION_NEXT;\n        emit RewardAdded(nextRound * rewardNext);\n    }\n    if (account != address(0)) {\n        userInfo[account].rewards = earned(account);\n        userInfo[account].rewardPerTokenPaid = rewardPerTokenStored;\n    }\n    _;\n}\nMining pools\n2pool farm\nMainnet contract address:TFpg63byqDwniXnyxVYpSzBfWGBwZExM9J\nUSDD-USDT V2 farm\nMainnet contract address:TCkNadwxyik1D66qCGmavuneowDRXPgdkL","metadata":{"loc":{"lines":{"from":730,"to":752}}}}],["39",{"pageContent":"}\n    _;\n}\nMining pools\n2pool farm\nMainnet contract address:TFpg63byqDwniXnyxVYpSzBfWGBwZExM9J\nUSDD-USDT V2 farm\nMainnet contract address:TCkNadwxyik1D66qCGmavuneowDRXPgdkL\nContract interaction We use TronWeb to interact with contracts. One can easily interact with online contracts after initializing TronWeb instances.\nconst TronWeb = require('tronweb')\nconst privateKey = process.env.PRIVATE_KEY\nconst apiKey = process.env.API_KEY\n​\nvar tronWeb = new TronWeb({\n\tfullHost: \"https://api.trongrid.io\",\n\theaders: { \"TRON-PRO-API-KEY\": apiKey },\n\tprivateKey: privateKey,\n      })\n     \nGet mining pool information\nView addresses of fixed-term/on-demand mining pools\nFunction: reward_contract()\n>>> let contract = await tronWeb.getContract('TFpg63byqDwniXnyxVYpSzBfWGBwZExM9J')\n>>> await contract.methods.reward_contract().call()\nTWHM9Lkf78pHy68yhxdP8SUaRpn1hgaCpS\n  View rewards of on-demand mining pools\nFunction:earned(address)\nParameter: user's address","metadata":{"loc":{"lines":{"from":752,"to":779}}}}],["40",{"pageContent":">>> await contract.methods.reward_contract().call()\nTWHM9Lkf78pHy68yhxdP8SUaRpn1hgaCpS\n  View rewards of on-demand mining pools\nFunction:earned(address)\nParameter: user's address\n>>> let contract = await tronWeb.getContract('TUgVp8FzZcFLHwruuncXaQo2js5Ym2GqSj')\n>>> await contract.methods.earned('TF5MekHgFz6neU7zTpX4h2tha5miPDUj3z').call()\n1000000000000000000\nTransaction execution\nDeposit\nFunction：deposit(uint256)\nParameter：Deposit amount\n>>> let contract = await tronWeb.getContract('TFpg63byqDwniXnyxVYpSzBfWGBwZExM9J')\n>>> await contract.methods.deposit(1000000000000000000).send()\nWithdrawalFunction：withdraw(uint256)\nParameter：Withdrawal amount\n>>> let contract = await tronWeb.getContract('TFpg63byqDwniXnyxVYpSzBfWGBwZExM9J')\n>>> await contract.methods.withdraw(1000000000000000000).send()Smart Mining V2\nSmart Mining V2: A high-yield fixed-term mining mode\nBackground","metadata":{"loc":{"lines":{"from":779,"to":798}}}}],["41",{"pageContent":">>> await contract.methods.withdraw(1000000000000000000).send()Smart Mining V2\nSmart Mining V2: A high-yield fixed-term mining mode\nBackground\nAs one of the digital financial derivatives on SUN.io, mining provides crypto holders with stable, secure, and reliable services for subscription and redemption of investment products. Smart Mining V2, also known as fixed-term mining, is an important part of SUN.io's mining service. It converts a user's staked assets to virtual assets of a certain amount according to the amount of assets staked and the staking duration. The total virtual stake is defined as the total amount of virtual assets converted from all users' staked assets. Users are rewarded based on their virtual assets' proportion in the total virtual stake, and they are only allowed to redeem their assets during a specified period of time.\nExplanation\nReward Distribution\nSuppose the stake amount of a token is \"amount\". The token's lock-up duration \nDuration \nlock\n​","metadata":{"loc":{"lines":{"from":798,"to":807}}}}],["42",{"pageContent":"Explanation\nReward Distribution\nSuppose the stake amount of a token is \"amount\". The token's lock-up duration \nDuration \nlock\n​\nmeets the following condition: \n<\n=\n<\n=\nDuration \nmin\n​\n <=Duration \nlock\n​\n <=Duration \nmax\n​\n \n。 where \nDuration \nmax\n​\nis 1080 days, \nDuration \nmin\n​\nis 30 days, and the maximum acceleration rate\nℎ\nweight \nmax\n​\nis 1400% (magnifying by \n12\ne \n12\ntimes). The veToken is calculated in the following way： \nHere,\nbalance \nveToken\n​\n \nrefers to the amount of a user's virtual assets. According to the reward distribution formula (2) of Smart Mining V1, the user's rewards are calculated in the following way:\nHere,  \nr \nt\n​\ndenotes the expansion factor of the reward token,  \nt \ni\n​\ndenotes the i-th change,  \nT \ni\n​\ndenotes the total virtual stake at the time \n−\n1\nt \ni−1\n​\n \nto \nt \ni\n​\n \n, and \nbalance \nveToken\n​\ndenotes the amount of the user's virtual assets at the time  \n−\n1\nt \ni−1\n​\n \nto \nt \ni\n​\n \n.\nContract code","metadata":{"loc":{"lines":{"from":807,"to":893}}}}],["43",{"pageContent":"−\n1\nt \ni−1\n​\n \nto \nt \ni\n​\n \n, and \nbalance \nveToken\n​\ndenotes the amount of the user's virtual assets at the time  \n−\n1\nt \ni−1\n​\n \nto \nt \ni\n​\n \n.\nContract code\nfunction calculateBoostedBalance(uint256 amount, uint256 lockDuration) public view returns (uint256) {\n    if (lockDuration == 0) {\n        return amount;\n    }\n    uint256 boostWeight = lockDuration.mul(BOOST_WEIGHT).div(DURATION_FACTOR);\n    return amount.add(amount.mul(boostWeight).div(PRECISION_FACTOR));\n}\nRedemption Time of Fixed-Term Mining\n​\nDuration \nlock\n​\ndenotes the length of a lock-up period, \nDuration \nmaintenance\n​\ndenotes the length of a cooling-off period for re-staking, \nt \nstake\n​\ndenotes the time when the assets are staked, and \nt \nnow\n​\ndenotes the current time. Assets can be redeemed when the following conditions are both met: \nrewards denotes the total amount of rewards, \nrewards \nprev\n​\ndenotes the amount of settled rewards, \nt \nlastAction\n​\ndenotes the time of the last settlement, and \nDuration \nreward\n​","metadata":{"loc":{"lines":{"from":893,"to":958}}}}],["44",{"pageContent":"rewards denotes the total amount of rewards, \nrewards \nprev\n​\ndenotes the amount of settled rewards, \nt \nlastAction\n​\ndenotes the time of the last settlement, and \nDuration \nreward\n​\ndenotes the lock-up duration during which the rewards are not settled yet. \nDuration \noverdue\n​\ndenotes the duration of time that is after the last lock-up period and shorter than a lock-up period. The user's rewards are calculated in the following way: \nContract code\nfunction overdueDuration(address account) public view returns (bool, uint256, uint256){\n    uint256 duration = userInfo[account].lockDuration;\n    if (duration == 0) {\n        return (true, 0, 0);\n    }\n    uint256 totalTime = block.timestamp.sub(userInfo[account].lockStartTime);\n    uint256 round = totalTime.div(duration);\n    uint256 overdue = totalTime.mod(duration);\n    if (round < 1 || overdue > maintenanceDuration || block.timestamp < userInfo[account].lastActionTime) {\n        return (false, 0, 0);\n    }\n​","metadata":{"loc":{"lines":{"from":958,"to":987}}}}],["45",{"pageContent":"uint256 overdue = totalTime.mod(duration);\n    if (round < 1 || overdue > maintenanceDuration || block.timestamp < userInfo[account].lastActionTime) {\n        return (false, 0, 0);\n    }\n​\n    uint256 rewardsDuration = block.timestamp.sub(userInfo[account].lastActionTime);\n    return (true, rewardsDuration, overdue);\n}\nMining pools\nUSDD_USDT LOCK V2 farm\nMainnet contract address:TY1mxnpL18oDP8hsSrrxNZgUMj71pcyFS8\n2pool LOCK farm\nMainnet contract address:TJmn1bjmNfE2F1sw2x6P224i8sFQj5mnbg\nContract interaction \nWe use TronWeb to interact with contracts. One can easily interact with online contracts after initializing TronWeb instances.\nconst TronWeb = require('tronweb')\nconst privateKey = process.env.PRIVATE_KEY\nconst apiKey = process.env.API_KEY\n​\nvar tronWeb = new TronWeb({\n\tfullHost: \"https://api.trongrid.io\",\n\theaders: { \"TRON-PRO-API-KEY\": apiKey },\n\tprivateKey: privateKey,\n      })\n     \nGet mining pool information\nView addresses of fixed-term/on-demand mining pools","metadata":{"loc":{"lines":{"from":987,"to":1013}}}}],["46",{"pageContent":"fullHost: \"https://api.trongrid.io\",\n\theaders: { \"TRON-PRO-API-KEY\": apiKey },\n\tprivateKey: privateKey,\n      })\n     \nGet mining pool information\nView addresses of fixed-term/on-demand mining pools\nFunction: sub_pool()\n>>> let contract = await tronWeb.getContract('TJmn1bjmNfE2F1sw2x6P224i8sFQj5mnbg')\n>>> await contract.methods.sub_pool().call()\nTUgVp8FzZcFLHwruuncXaQo2js5Ym2GqSj\n  View rewards of on-demand mining pools\nFunction:earned(address)\nParameter: user's addres\n>>> let contract = await tronWeb.getContract('TUgVp8FzZcFLHwruuncXaQo2js5Ym2GqSj')\n>>> await contract.methods.earned('TF5MekHgFz6neU7zTpX4h2tha5miPDUj3z').call()\n1000000000000000000\nTransaction execution\nDeposit\nFunction：deposit(uint256)\nParameter：Deposit amount\n>>> let contract = await tronWeb.getContract('TJmn1bjmNfE2F1sw2x6P224i8sFQj5mnbg')\n>>> await contract.methods.deposit(1000000000000000000).send()\nWithdrawal\nFunction：withdraw(uint256)\nParameter：Withdrawal amount","metadata":{"loc":{"lines":{"from":1013,"to":1038}}}}],["47",{"pageContent":">>> await contract.methods.deposit(1000000000000000000).send()\nWithdrawal\nFunction：withdraw(uint256)\nParameter：Withdrawal amount\n>>> let contract = await tronWeb.getContract('TJmn1bjmNfE2F1sw2x6P224i8sFQj5mnbg')\n>>> await contract.methods.withdraw(1000000000000000000).send()​\nGovernance Mining\nGovernance Mining: A mining mode that gives users more governance rights and rewards\nBackground\nAs one of the digital financial derivatives on SUN.io, mining provides crypto holders with stable, secure, and reliable services for subscription and redemption of investment products. Governance mining is an important part of SUN.io's mining service. As shown in the graph below, the reward distributed to users is closely related to the number of veSun tokens they hold and the weights of the liquidity pools. And users are free to redeem their assets at any time.Explanation\nAfter a user stakes tokens in a liquidity pool, a corresponding amount of virtual stake value will be generated:​\nL \nuser\n​","metadata":{"loc":{"lines":{"from":1038,"to":1051}}}}],["48",{"pageContent":"After a user stakes tokens in a liquidity pool, a corresponding amount of virtual stake value will be generated:​\nL \nuser\n​\nrepresents the real value staked by the user. \nL \ntotal\n​\nis the total value staked in a liquidity pool. \nveSun \nuser\n​\nis the number of veSun tokens held by the user. \nveSun \ntotal\n​\nis the total number of veSun tokens issued by SUN.io. As shown in formula (1), if the user holds enough veSun, then the virtue stake is indicated as \nL \nuser\n​\n \n; if the user holds 0 veSun, then it is indicated as \nL \nuser\n​\n* 0.4, meaning that the reward for holding veSUN can be amplified by 2.5 times.\n \n​\nW \ngauge\n​\nrepresents the weekly gauge weight of the pool. \nW \ntype\n​\nis the weight of the pool type. \nW \ntotal\n​\nis the total weight of the pool for the week and \nr \nt\n​","metadata":{"loc":{"lines":{"from":1051,"to":1093}}}}],["49",{"pageContent":"​\nW \ngauge\n​\nrepresents the weekly gauge weight of the pool. \nW \ntype\n​\nis the weight of the pool type. \nW \ntotal\n​\nis the total weight of the pool for the week and \nr \nt\n​\nis the expansion factor of the reward token. According to the reward distribution formula (2) of Smart Mining V1, the user's rewards are calculated in the following way:Here, V represents the final expansion factor of the reward token. \nt \ni\n​\nrepresents the i-th change.  \nT \ni\n​\nrepresents the total virtual stake at the time \n−\n1\nt \ni−1\n​\nto \nt \ni\n​\n \n. \nS \nuser\n​\nrepresents the user's virtual stake value at the time  \n−\n1\nt \ni−1\n​\nto \nt \ni\n​\n \n. \nContract code\ndef _checkpoint(addr: address):\n    Controller(_controller).checkpoint_gauge(convert(self.controller_key, bytes32))\n    _working_balance: uint256 = self.working_balances[addr]\n    _working_supply: uint256 = self.working_supply\n​\n    if block.timestamp > _period_time:\n        prev_week_time: uint256 = _period_time","metadata":{"loc":{"lines":{"from":1093,"to":1151}}}}],["50",{"pageContent":"_working_balance: uint256 = self.working_balances[addr]\n    _working_supply: uint256 = self.working_supply\n​\n    if block.timestamp > _period_time:\n        prev_week_time: uint256 = _period_time\n        week_time: uint256 = min((_period_time + WEEK) / WEEK * WEEK, block.timestamp)\n​\n        for i in range(500):\n            dt: uint256 = week_time - prev_week_time\n            w: uint256 = Controller(_controller).gauge_relative_weight(convert(self.controller_key, bytes32), prev_week_time / WEEK * WEEK)\n​\n            if _working_supply > 0:\n                if prev_future_epoch >= prev_week_time and prev_future_epoch < week_time:\n                    _integrate_inv_supply += rate * w * (prev_future_epoch - prev_week_time) / _working_supply\n                    rate = new_rate\n                    _integrate_inv_supply += rate * w * (week_time - prev_future_epoch) / _working_supply\n                else:\n                    _integrate_inv_supply += rate * w * dt / _working_supply","metadata":{"loc":{"lines":{"from":1151,"to":1168}}}}],["51",{"pageContent":"else:\n                    _integrate_inv_supply += rate * w * dt / _working_supply\n            if week_time == block.timestamp:\n                break\n            prev_week_time = week_time\n            week_time = min(week_time + WEEK, block.timestamp)\n​\n    _period += 1\n    self.period = _period\n    self.period_timestamp[_period] = block.timestamp\n    self.integrate_inv_supply[_period] = _integrate_inv_supply\n      self.integrate_fraction[addr] += _working_balance * (_integrate_inv_supply - self.integrate_inv_supply_of[addr]) / 10 ** 18\n    self.integrate_inv_supply_of[addr] = _integrate_inv_supply\n    self.integrate_checkpoint_of[addr] = block.timestamp\nMining Pools\nOld 3pool farm\nMainnet contract address:TCpu3GnK6PPZV9ama85mRP97YqRuVXdcSd\nSUN-TRX farm\nMainnet contract address:TAkrcKsS5FW9f3ZfzvWy6Zvsz9uEjUxPoV\nOld USDC farm\nMainnet contract address:TJ3Qnm9VhzJzhcxk49ZpHBRatD1bsD4xYq\nUSDT-SUN V2 farm\nMainnet contract address:TPx8BXTgiB1tiL9A9BZuz67bZBvFGYdJS8","metadata":{"loc":{"lines":{"from":1168,"to":1190}}}}],["52",{"pageContent":"Old USDC farm\nMainnet contract address:TJ3Qnm9VhzJzhcxk49ZpHBRatD1bsD4xYq\nUSDT-SUN V2 farm\nMainnet contract address:TPx8BXTgiB1tiL9A9BZuz67bZBvFGYdJS8\nBTT-USDT V2 farm\nMainnet contract address:TEULJy4MJeRUTMPGTTvsBkmDPM4PEsMBTw\nUSDT-TRX farm\nMainnet contract address:TSRhvs1R2hoNf5PuMG4nUrDa4XVBqBaKgF\nUSDJ-TRX farm\nMainnet contract address:TGJ8LcijTaLmzBhqtp2jWQ1DRCpCWPAmD1\nTUSD-TRX farm\nMainnet contract address:TBPEX4Bu3rc8RAvv3qTBFVvSVAFNttinqe\nUSDC-TRX farm\nMainnet contract address:TDsuMrbQ8wHrM8cKpxFczBbaxhJwpmwRHr\nWBTT-TRX farm\nMainnet contract address:TH1XkkkPa7aF1oi7xqFYuUdXR1UvTEd4Ld\nBTT-TRX farm\nMainnet contract address:TVjuRFx5dUn4u386DJRJS8zxgWKKcPocXo\nNFT-TRX farm\nMainnet contract address:TViH23SgGKWfX4EHB4Q7UMeo1wgvfSvyPS\nWIN-TRX farm\nMainnet contract address:TBd8sxVK47adcaLZgbqvN5LTUQGEpawXnx\nJST-TRX farm\nMainnet contract address:TFw58b9t55FsmFeZHjLooS3SkMYDKXZoW7\nUSDT-TRX V2 farm\nMainnet contract address:TUnkvMyZKt4HT2qGWaMwy35c9QTmjiMCWL\nNFT-USDT V2 farm","metadata":{"loc":{"lines":{"from":1190,"to":1216}}}}],["53",{"pageContent":"JST-TRX farm\nMainnet contract address:TFw58b9t55FsmFeZHjLooS3SkMYDKXZoW7\nUSDT-TRX V2 farm\nMainnet contract address:TUnkvMyZKt4HT2qGWaMwy35c9QTmjiMCWL\nNFT-USDT V2 farm\nMainnet contract address:TSYJHJA5rDYhaiadNXDqA6Fk6sq1yqZKwT\nWIN-USDT V2 farm\nMainnet contract address:TEHtYRLUTGLq4Z5Pyy5C7LYZBBVVcRuvUU\nJST-USDT V2 farm\nMainnet contract address:TKAQajxhQscgakWaokd7uNeTxwBp97xhSD\nUSDD-USDT V2 farm\nMainnet contract address:TCkNadwxyik1D66qCGmavuneowDRXPgdkL\nUSDD-TRX farm\nMainnet contract address:TCpXumigVHd2iuSkotNgkSduKqksUfpcvc\n3poolnew farm\nMainnet contract address:THZgwb6LTg9LydbLw6gT4YMdu9y4nA5dnp\nUsdd2pool farm\nMainnet contract address:TBSRZYLZ2pguF3EqLz86Kt9hZ4eqKEQMSY\n2pool farm\nMainnet contract address:TFpg63byqDwniXnyxVYpSzBfWGBwZExM9J\nUSDD_USDT LOCK V2 farm\nMainnet contract address:TY1mxnpL18oDP8hsSrrxNZgUMj71pcyFS8\n2pool LOCK farm\nMainnet contract address:TJmn1bjmNfE2F1sw2x6P224i8sFQj5mnbg\nContract interaction","metadata":{"loc":{"lines":{"from":1216,"to":1240}}}}],["54",{"pageContent":"USDD_USDT LOCK V2 farm\nMainnet contract address:TY1mxnpL18oDP8hsSrrxNZgUMj71pcyFS8\n2pool LOCK farm\nMainnet contract address:TJmn1bjmNfE2F1sw2x6P224i8sFQj5mnbg\nContract interaction \nWe use TronWeb to interact with contracts. One can easily interact with online contracts after initializing TronWeb instances.\nconst TronWeb = require('tronweb')\nconst privateKey = process.env.PRIVATE_KEY\nconst apiKey = process.env.API_KEY\n​\nvar tronWeb = new TronWeb({\n\tfullHost: \"https://api.trongrid.io\",\n\theaders: { \"TRON-PRO-API-KEY\": apiKey },\n\tprivateKey: privateKey,\n      })\n     \nTransaction execution\nView Governance Rewards\nFunction：claimable_tokens(address)\nParameter: user's address\n>>> let contract = await tronWeb.getContract('TJmn1bjmNfE2F1sw2x6P224i8sFQj5mnbg')\n>>> await contract.methods.claimable_tokens('TF5MekHgFz6neU7zTpX4h2tha5miPDUj3z').send()\nDeposit\nFunction：deposit(uint256)\nParameter：Deposit amount\n>>> let contract = await tronWeb.getContract('TJmn1bjmNfE2F1sw2x6P224i8sFQj5mnbg')","metadata":{"loc":{"lines":{"from":1240,"to":1265}}}}],["55",{"pageContent":"Deposit\nFunction：deposit(uint256)\nParameter：Deposit amount\n>>> let contract = await tronWeb.getContract('TJmn1bjmNfE2F1sw2x6P224i8sFQj5mnbg')\n>>> await contract.methods.deposit(1000000000000000000).send()\nWithdrawalFunction：withdraw(uint256)\nParameter：Withdrawal amount\n>>> let contract = await tronWeb.getContract('TJmn1bjmNfE2F1sw2x6P224i8sFQj5mnbg')\n>>> await contract.methods.withdraw(1000000000000000000).send()","metadata":{"loc":{"lines":{"from":1265,"to":1273}}}}],["56",{"pageContent":"SUN\nV2.0\nLast\nupdated:\nJune\n28,\n2023\n1\nIntroduction\nSUN.io\nwas\nfounded\nto\nfoster\nthe\ngrowth\nof\nTRON’s\nDeFi\necosystem.\nThanks\nto\nthe\ncommunity\nand\nopen-source\nsmart\ncontracts,\nSUN.io\nhas\nestablished\nties\nwith\nother\nDeFi\nprojects\non\nthe\nTRON\npublic\nchain\nthrough\ndecentralized\nliquidity\nmining.\nUp\nto\nnow,\nSUN.io\nhas\ngone\nthrough\nseveral\niterations\nand\nacquired\nJustSwap.\nThe\nupgraded\nSUN.io\nplatform\nintegrates\nsuch\nfunctions\nas\ntoken\nswaps,\nliquidity\nmining,\nstablecoin\nswaps\nand\ndecentralized\nautonomous\norganisation\n(DAO)\non\nthe\nTRON\npublic\nchain,\nfocusing\non\nbuilding\nTRON’s\nDeFi\necosystem\nwith\ndecentralized\nexchanges\n(DEX)\nat\nits\ncore.\nAs\nthe\nnative\ntoken\nof\nSUN.io,\nSUN\nplays\nan\nimportant\nrole\nin\nplatform\ngovernance,\nbuying\nback\nand\nburning\nrewards,\noffering\nrewards\nto\nliquidity\nproviders\nand\nother\nfeatures,\nand\naligns\nwith\nTRON’s\naspiration\nto\nbring\ncommon\nbenefits\nto\nall\nusers.\n1.1\nVision\nSUN.io\naims\nto\nbuild\nan\nintegrated\nDEX\necosystem\nwith\na\nhigh\nlevel\nof\nfunctionality,\nprofitability","metadata":{"loc":{"lines":{"from":1,"to":150}}}}],["57",{"pageContent":"other\nfeatures,\nand\naligns\nwith\nTRON’s\naspiration\nto\nbring\ncommon\nbenefits\nto\nall\nusers.\n1.1\nVision\nSUN.io\naims\nto\nbuild\nan\nintegrated\nDEX\necosystem\nwith\na\nhigh\nlevel\nof\nfunctionality,\nprofitability\nand\nsecurity\nby\nleveraging\nmultiple\ntransaction\nprotocols.\nIt\nprovides\nvarious\nincentives\nfor\nparticipants,\nincluding\nrewards\nof\ntransaction\nfees\noffered\nto\nliquidity\nmarket\nmakers,\nliquidity\nmining\nof\nLP\nTokens\nand\nstaking\nrewards\nof\nthe\nSUN\ntoken.\nMeanwhile,\nthe\nburning\nmechanism\nof\nSUN\nand\nthe\nvoting\nrights\nof\nSUN\nholders\ntogether\nform\na\nclosed-loop\necosystem.\n1.2\nMarket\nProspects\nDeFi\nstarted\nto\nrise\nin\npopularity\nin\n2020\nand\ngradually\ntakes\nthe\nmain\nstage\nin\nblockchain.\nIt\nsaw\ncontinued\nrobust\ngrowth\nin\n2021\nand\nhas\nbecome\none\nof\nthe\nlargest\napplications\nof\nthis\nindustry.","metadata":{"loc":{"lines":{"from":150,"to":270}}}}],["58",{"pageContent":"Figure\n1\nTVL\nof\nthe\nDeFi\nMarket\nThe\noverall\ntrend\nof\nthe\ntotal\nvalue\nlocked\n(TVL)\ndirectly\nreflects\nthe\ndevelopment\nof\nthe\nDeFi\nmarket.\nAccording\nto\nthe\nlatest\nstatistics\npublished\nby\nDeFi\nLlama\n(as\nof\nOctober\n25,\n2021),\nthe\nTVL\nof\nDeFi\nprojects\nwitnessed\nexponential\ngrowth\nsince\nthe\nbeginning\nof\n2021,\nreaching\n$240\nbillion\nat\nits\npeak.\nA\ngrowing\nnumber\nof\norganisations\nare\npromoting\ngreater\nTVL\ngrowth\nthrough\ndeveloping\nmature\nand\nsecure\nprotocols.\nIn\naddition,\nmassive\nearnings\ngenerated\nby\nthe\nDeFi\nsector\nare\nencouraging\nindividual\ninvestors\nto\nmigrate\nfrom\ncentralized\nplatforms\nto\nthe\nDeFi\nspace.\nDriven\nby\nincreased\nadoption\namong\nall\ninvestors,\nDeFi\nis\nentering\na\nnew\nstage\nof\ngrowth.\n1.3\nSolutions\nof\nSUN\nSUN.io,\nthe\nfirst\nplatform\nthat\nintegrates\non-chain\ntoken\nswaps,\nliquidity\nmining,\nstablecoin\nswaps\nand\nDAO\non\nthe\nTRON\npublic\nchain,\nprovides\nusers\nwith\ndiversified\none-stop\nservices:\n●\nEfficient\nand\nsecure\nswaps\namong\nany\ntokens\nwith\nthe\nbest\nprices—\nSunSwap\n●\nEfficient\nswaps","metadata":{"loc":{"lines":{"from":272,"to":427}}}}],["59",{"pageContent":"stablecoin\nswaps\nand\nDAO\non\nthe\nTRON\npublic\nchain,\nprovides\nusers\nwith\ndiversified\none-stop\nservices:\n●\nEfficient\nand\nsecure\nswaps\namong\nany\ntokens\nwith\nthe\nbest\nprices—\nSunSwap\n●\nEfficient\nswaps\namong\nstablecoins\nwith\nlow\nslippage\nand\nfees—\nStablecoin\npool\n●\nUser-governed\nliquidity\nmining\nthat\ncan\nbe\nboosted—\nGovernance\nmining\n●\nSUN\ntoken\nstaking\nrewards—\nRewards\nfrom\nvoting\nrights\n(veSUN)\n2\nGovernance\nMechanism\n2.1\nEconomic\nModel","metadata":{"loc":{"lines":{"from":427,"to":492}}}}],["60",{"pageContent":"Figure\n2\nDistribution\nof\nthe\nSUN\nToken\nThere\nare\nno\npre-mining,\ntokens\nreserved\nfor\nteams,\ncornerstone\ninvestment,\nor\nprivate\nplacement\nfor\nthe\nSUN\ntoken.\nInstead,\nvarious\nfunctions\nand\nmechanisms\nof\nthe\necosystem\nguarantee\nthat\nthe\nSUN\ntoken\ncan\nbe\ndistributed\nin\na\nfair\nand\nsustained\nway.\nThe\ndistribution\nof\nSUN\nhas\ngone\nthrough\ntwo\nphases—\nV1\nand\nV2—\nas\nfollows:\nDistribution\nof\nSUN\ntokens\n(V1):\n●\nGenesis\nMining\n9.3%\n●\nOfficial\nMining\n15.6%\n●\nJustLend\nMining\n1.2%\n●\nCentury\nMining\n2.4%\nDistribution\nof\nSUN\ntokens\n(V2):\n●\nGenesis\nMining\n4.2%\n●\nGovernance\nMining\n19.1%\n●\nveCRV\nAirdrop\n1.0%\nApart\nfrom\nthe\ntokens\ndistributed\nabove,\n47.2%\nof\nthe\nSUN\ntokens\nremain\nundistributed.\nGoing\nforward,\nthe\nSUN\nplatform\nwill\ntake\non\nmore\nfeatures\nas\nthe\necosystem\ngrows,\nand\nthe\nnumber\nof\nuse\ncases\nfor\nthe\nSUN\ntoken\nwill\nfurther\nincrease,\nincentivising\nusers\nto\nmake\na\nsustained\ncontribution\nto\nthe\ngrowth\nof\nthe\necosystem.\n2.2\nBurning","metadata":{"loc":{"lines":{"from":494,"to":646}}}}],["61",{"pageContent":"The\nnewest\nprotocol\nof\nSunSwap\nsupports\nthe\nbuyback\nand\nburning\nof\na\ncertain\namount\nof\nrewards\nfrom\ntransaction\nfees\non\nDEX.\nBuyback\nMethod:\nThrough\nsmart\ncontracts,\na\nproportion\nof\nthe\ntransaction\nfees\n(accounting\nfor\n0.05%\nof\neach\ntransaction)\nis\nreserved\nas\nLP\nTokens,\nwhich\nare\nthen\nswapped\nfor\nSUN\nat\na\npre-determined\nexchange\nrate\nand\nstored\nin\na\ndesignated\naddress\nto\nbe\nburned.\nBurning\nMethod:\nThe\nSUN\ntokens\nstored\nin\nthe\nabove-mentioned\naddress\nwill\nbe\nburned,\nby\ntransferring\nthose\ntokens\nbought\nback\nwithin\na\nmonth\nto\nthe\nblackhole\naddress\nof\nTRON\n(T9yD14Nj9j7xAB4dbGeiX9h8unkKHxuWwb)\neach\nmonth.\n2.3\nIncentives\n2.3.1\nSUN\nGovernance\nMining\nIn\nthe\nmarket\nmaker\nmechanism\nof\nSunSwap,\nthe\ndepth\nof\nthe\ntransaction\npool\nmainly\ncomes\nfrom\nliquidity\nproviders\n(LPs).\nThe\nswap\nmechanism\nin\nthe\nstablecoin\npool\nalso\nrequires\nusers’\nefforts\nto\nprovide\nliquidity\nso\nas\nto\nmaintain\nstable\nprices\nfor\nswaps.\nAs\na\nresult,\nthe\ngovernance\nmining\nof\nthe\nSUN\nplatform\nnow\nsupports\nstaking\nLP\nTokens\nfor","metadata":{"loc":{"lines":{"from":648,"to":804}}}}],["62",{"pageContent":"stablecoin\npool\nalso\nrequires\nusers’\nefforts\nto\nprovide\nliquidity\nso\nas\nto\nmaintain\nstable\nprices\nfor\nswaps.\nAs\na\nresult,\nthe\ngovernance\nmining\nof\nthe\nSUN\nplatform\nnow\nsupports\nstaking\nLP\nTokens\nfor\nmining\non\nSunSwap\nand\nin\nthe\nstablecoin\npool.\nIn\nthe\nmeantime,\nusers\ncan\nparticipate\nin\nvoting\nto\ndetermine\nthe\nweight\nof\na\nmining\npool,\nand\nstake\nSUN\nto\nget\nveSUN\nas\na\nboost\nmultiplier\nfor\nmining,\nwhich\ncan\nmotivate\nusers\nto\nhold\nSUN\nfor\na\nlonger\nterm.\nThe\nSUN\nplatform\nactively\npromotes\nmore\nusers\nto\nprovide\nliquidity\nthrough\na\nvariety\nof\nways.\n2.3.2\nSUN\nStaking\nRewards\nThe\nSUN\nplatform\nallows\nusers\nto\nstake\nSUN\nto\nobtain\nveSUN.\nBased\non\nthe\namount\nof\nveSUN\nusers\nhold,\nthe\nplatform\ndelivers\n50%\nof\nthe\ntransaction\nfees\ngenerated\nin\nthe\nstablecoin\npool\nto\nveSUN\nholders.\n3\nUnderlying\nTechnology\n3.1\nSunSwap\nAMM\nModel\nSunSwap\nadopts\nthe\nAMM\n(Automated\nMarket\nMaker)\nmodel,\nthe\nmost\nwidely-used\ntransaction\nmodel\nin\nDeFi.\nUnlike\nan\norder\nbook\nof\na\ntraditional\nexchange,\nthe\nAMM\nuses\na","metadata":{"loc":{"lines":{"from":804,"to":971}}}}],["63",{"pageContent":"Technology\n3.1\nSunSwap\nAMM\nModel\nSunSwap\nadopts\nthe\nAMM\n(Automated\nMarket\nMaker)\nmodel,\nthe\nmost\nwidely-used\ntransaction\nmodel\nin\nDeFi.\nUnlike\nan\norder\nbook\nof\na\ntraditional\nexchange,\nthe\nAMM\nuses\na\nconstant-product\nmathematical\nformula\nto\ndetermine\nthe\nprices\nof\nassets,\nso\nthat\ntransactions\ncan\nbe\ndone\nin\nan\nautomatic\nway\nand\nthe\nliquidity\nof\ntrading\npairs\ncan\nbe\nsafeguarded.\nA\nfew\ndefinitions\nrelated\nto\nthe\nAMM\nmodel\nare\nclarified\nas\nfollows:","metadata":{"loc":{"lines":{"from":971,"to":1042}}}}],["64",{"pageContent":"●\nLiquidity:\nthe\nsum\nof\nthe\ntwo\ntokens\nin\nthe\nsmart\ncontracts\nof\na\ntrading\npair.\nWe\ncan\nincrease\n(provide)\nliquidity\nby\nstaking\nthe\ntwo\ntokens\nat\nthe\nsame\ntime.\n●\nLiquidity\nPool:\nthe\npool\nof\nliquidity,\ni.e.\na\ncollection\nof\nassets\nin\nthe\nAMM.\nSunSwap\nis\nable\nto\nmatch\norders\nthrough\nAMM\nin\nthe\nliquidity\npool.\n●\nLiquidity\nProvider\n(LP):\nusers\nwho\nprovide\nliquidity\nto\nthe\npool.\n●\nLP\nToken:\nA\ntrading\npair\nitself\nis\na\nTRC-20\nsmart\ncontract,\nwhose\ntokens\nrepresent\nthe\nsupply\nof\nliquidity\nand\nare\nreferred\nto\nas\nLP\nTokens.\nWhen\nLPs\nare\noffering\nliquidity,\nSunSwap\nwill\nmint\ntokens\nand\ngrant\nthem\nto\nLPs;\nit\nwill\nburn\nLP\nTokens\nwhen\nLPs\nwithdraw\nliquidity.\n●\nLiquidity\nPool\nShare\n(LPS):\nthe\nproportion\nof\nLP\nTokens\nin\ncirculation\nheld\nby\neach\nLP,\nshowing\nthe\ncontribution\nrate\nof\neach\nLP\nto\nthe\ntotal\nliquidity.\n·\n3.1.1\nCreating\nLiquidity:\nWhen\na\nliquidity\npool\nis\nfirst\ncreated,\nthe\noriginal\namount\nof\nthe\ntwo\ntokens\nboth\nstands\nat\n0.\nIn\norder\nto\nmake\ntransactions\npossible,\nLPs\nhave\nto\nstake\na","metadata":{"loc":{"lines":{"from":1044,"to":1220}}}}],["65",{"pageContent":"liquidity.\n·\n3.1.1\nCreating\nLiquidity:\nWhen\na\nliquidity\npool\nis\nfirst\ncreated,\nthe\noriginal\namount\nof\nthe\ntwo\ntokens\nboth\nstands\nat\n0.\nIn\norder\nto\nmake\ntransactions\npossible,\nLPs\nhave\nto\nstake\na\ncertain\namount\nof\nthe\ntwo\ntokens\nto\ninitiate\nthe\nliquidity\npool.\nThe\nfirst\nLP\nis\nthe\none\nwho\nsets\nthe\noriginal\nprice\nof\nliquidity\nand\ngains\nhis/her\nLPS.\nThe\nprices\nof\nthe\ntwo\ntokens\nin\nthe\npool\nare\ndetermined\nby\nthe\nrelative\namount\nof\none\ntoken\ncompared\nto\nthe\nother.\nThis\nmeans\nthat\nthe\ntotal\namount\nof\nthe\ntwo\nremains\nthe\nsame,\nbut\nthe\namount\nof\neach\ntoken\nwill\nchange\nafter\neach\ntransaction,\nleading\nto\nchanges\nin\nprices\nas\nwell.\nThe\nadjustments\nin\nprices\nare\nbased\non\nthe\nformula\nbelow:\n(k\nrepresents\na\nconstant)\n푥\n×\n푦\n=\n푘\n3.1.1.1\nSunSwap\nV1\n&\nV1.5\nand\nin\nthe\nformula\nabove\nrefer\nto\nthe\namount\nof\nthe\ntwo\ntokens\nrespectively.\nAccording\nto\nthe\n푥\n푦\nsmart\ncontracts\nof\nV1\nand\nV1.5,\none\nof\nthe\ntokens\nhas\nto\nbe\nTRX.\nThis\nis\nwhy,\nin\nthis\nsection\n(3.1),\ntoken\nX\nrefers\nto\nTRX.\nIf\nthe\nfirst\nLP\nprovides\nan","metadata":{"loc":{"lines":{"from":1220,"to":1408}}}}],["66",{"pageContent":"two\ntokens\nrespectively.\nAccording\nto\nthe\n푥\n푦\nsmart\ncontracts\nof\nV1\nand\nV1.5,\none\nof\nthe\ntokens\nhas\nto\nbe\nTRX.\nThis\nis\nwhy,\nin\nthis\nsection\n(3.1),\ntoken\nX\nrefers\nto\nTRX.\nIf\nthe\nfirst\nLP\nprovides\nan\namount\nof\nand\nof\nthe\ntwo\ntokens,\nand\nthe\nLP\nTokens\nare\n,\nthen:\n푥\n0\n푦\n0\n푠\n0\n푠\n0\n=\n푥\n0\ne.g.\nIf\n=100,000,\n=1,000,\nthen\n=100,000,\nwhich\nmeans\nthat\nafter\nstaking\ntoken\nX\n(TRX)\nand\n푥\n0\n푦\n0\n푠\n0\ntoken\nY,\nusers\ncan\nget\n100,000\nLP\nTokens,\nand\nthe\ntotal\namount\nof\nLP\nTokens\nin\nthe\nliquidity\npool\nis\n100,000\nas\nwell.\nTherefore,\nthe\nfirst\nLP\nholds\na\n100%\nLPS.\nMeanwhile,\nin\nthe\nliquidity\npool,\nthe\nrelative\nprice\nof\ntoken\nY\nto\ntoken\nX\nis:\n1\nY=\n100,000/1,000=100\nX.\nFor\nexample,\nif\ntoken\nX\n푥\n0\n/\n푦\n0\n=\nis\nTRX\nand\nY\nis\nSUN,\nthen\n1\nSUN\n=\n100\nTRX.","metadata":{"loc":{"lines":{"from":1408,"to":1566}}}}],["67",{"pageContent":"3.1.1.2\nSunSwap\nV2\nand\nrepresent\nthe\namount\nof\ntwo\ndifferent\ntokens.\nIf\nthe\nfirst\nLP\nprovides\nan\namount\nof\nand\n푥\n푦\n푥\n0\nof\nthe\ntwo\ntokens,\nand\nthe\nLP\nTokens\nobtained\nare\n,\nthen:\n푦\n0\n푠\n0\n푠\n0\n*\n=\n푥\n0\n*\n*\n푦\n0\n*\n−\n1000\nNotes:","metadata":{"loc":{"lines":{"from":1568,"to":1621}}}}],["68",{"pageContent":"①\nThe\nmark\n*\nmeans\nthat\nthe\nvalue\nis\nthe\nreal\nvalue\nwithout\nomitting\ndecimal\nplaces.\nFor\nexample,\nif\n=10,\nand\nthe\ndecimal\nplaces\nof\nall\nLP\nTokens\nare\n18,\nthen\n=\n.\n푠\n0\n푠\n0\n*\n1\n0\n1\n9\n②\nTo\nprevent\nusers\nfrom\ncompletely\nremoving\nall\nliquidity,\nthe\ndeducted\n1,000\n(decimal\nplaces\nomitted.\nThe\nreal\nvalue\nis\n1000/\n)\nLP\nTokens\nwill\nbe\ndeposited\ninto\na\nblackhole\n10\n1\n8\n=\n10\n−\n1\n5\naddress.\ne.g.\nSuppose\n=10\n(decimal\nplaces:\n18),\n=10\n(decimal\nplaces:\n18),\nwe\nhave\n=10\n-\n,\nwhich\n푥\n0\n푦\n0\n푠\n0\n \n1\n0\n−\n1\n5\nmeans\nthat\nusers\ncan\nget\n10\n-\nLP\nTokens\nafter\nstaking\ntoken\nX\nand\nY.\nAlso,\nthe\ntotal\nliquidity\n \n1\n0\n−\n1\n5\nof\nthe\nliquidity\npool\nis\n10\nas\nwell,\nso\nthe\nfirst\nLP\nholds\na\n100%\nLPS\n(with\nfew\ntokens\ndeposited\ninto\nthe\nblackhole\naddress).\nMeanwhile,\nin\nthe\nliquidity\npool,\nthe\nrelative\nprice\nof\ntoken\nY\nto\ntoken\nX\nis:\n1\nY=\n100,000/1,000=100\nX.\nFor\nexample,\nif\ntoken\nX\nis\nTRX\nand\nY\nis\nSUN,\nthen\n1\nSUN\n=\n100\n푥\n0\n/\n푦\n0\n=\nTRX.\n3.1.1.3\nSunSwap\nV3\nSunSwap\nV3\nadopts\na\nconcentrated\nliquidity\nmodel\nbased\non\nconstant","metadata":{"loc":{"lines":{"from":1623,"to":1834}}}}],["69",{"pageContent":"X\nis:\n1\nY=\n100,000/1,000=100\nX.\nFor\nexample,\nif\ntoken\nX\nis\nTRX\nand\nY\nis\nSUN,\nthen\n1\nSUN\n=\n100\n푥\n0\n/\n푦\n0\n=\nTRX.\n3.1.1.3\nSunSwap\nV3\nSunSwap\nV3\nadopts\na\nconcentrated\nliquidity\nmodel\nbased\non\nconstant\nproduct,\nintroducing\nthe\nidea\nof\nvirtual\nliquidity\nto\nSunSwap\nV2.\nThe\nformula\nfor\nthis\nmarket\nmaker\nmodel\nis\nthe\nfollowing:\n（\n푥\n+\n푥\n_\n푣\n푖\n푟\n푡\n푢\n푎\n푙\n）\n*\n(\n푦\n+\n푦\n_\n푣\n푖\n푟\n푡\n푢\n푎\n푙\n)\n=\n퐿\n2\nIt\nis\nclear\nfrom\nthe\nmechanism\nof\nconcentrated\nliquidity\nthat\nx_virtual\nand\ny_virtual\ncorrelate\nwith\np_upper\nand\np_lower\n.\nThe\nformula\nfor\nthe\nconcentrated\nliquidity\nmodel\ncan\nthen\nbe\nderived\nas\nthe\nfollowing:\n（\n푥\n+\n퐿\n푃\n푢\n푝\n푝\n푒\n푟\n）\n*\n(\n푦\n+\n퐿\n*\n푃\n푙\n표\n푤\n푒\n푟\n)\n=\n퐿\n2\nIt\ncan\nbe\ninferred\nfrom\nthe\nformula\nthat\nV3\nallows\nusers\nto\nprovide\nliquidity\nwithin\na\ncertain\nprice\nrange,\nas\nillustrated\nbelow:\nFigure\n3\nSimulation\nof\nreal\nliquidity","metadata":{"loc":{"lines":{"from":1834,"to":2013}}}}],["70",{"pageContent":"SunSwap\nV3\ncalculates\nliquidity\nbased\non\nthe\nformula\nL=\n푥푦\nSunSwap\nV3\ncalculates\nprices\nbased\non\nthe\nformula\n푝\n=\n푦\n/\n푥\nIt\ncan\nbe\ninferred\nfrom\nthe\nabove\nformulas\nthat\n∆\n푥\n=\n（\n1\n푝\n푐\n−\n1\n푝\n푏\n）\n퐿\nNote:\nrepresents\nthe\namount\nof\ntoken0\nadded;\nand\nrepresent\nthe\nrespective\nprice\nof\nb\nand\n∆\n푥\n푝\n푏\n푝\n푐\nc\nin\nFigure\n3.\n∆\n푦\n=\n（\n푝\n푐\n−\n푝\n푎\n）\n퐿\nNote:\nrepresents\nthe\namount\nof\ntoken1\nadded;\nand\nrepresent\nthe\nrespective\nprice\nof\na\nand\n∆\n푦\n푝\n푎\n푝\n푐\nc\nin\nFigure\n3.\nTwo\nliquidity\nformulas\ncan\nbe\nthereby\nderived:\nL=\n∆\n푥\n푝\n푏\n푝\n푐\n푝\n푏\n−\n푝\n푐\nL=\n∆\n푦\n푝\n푐\n−\n푝\n푎\nTake\nthe\nminimum\nof\nthe\ntwo\nL\nvalues\nas\nthe\nliquidity\nobtained.\nExample:\nAdd\n1\nX\nand\n5,000\nY\nto\na\nspot\npool\nwhere\n1\nX\n=\n5,000\nY.\nSet\nthe\nlower\nlimit\nof\nthe\nprice\nrange\nto\n4,545\nY\nand\nthe\nupper\nlimit\nto\n5,500\nY.\nThe\nliquidity\nobtained\nis\ncalculated\nas\nfollows:\n,\n=\n,\n=\n.\n푝\n푐\n=\n5\n0\n0\n0\n/\n1\n≈\n7\n0\n.\n7\n1\n푝\n푏\n5\n5\n0\n0\n/\n1\n≈\n7\n4\n.\n1\n6\n푝\n푎\n4\n5\n4\n5\n/\n1\n≈\n6\n7\n.\n4\n2\n;\noutput\nL\nin\nQ64.96\nformat,\nL=1519437308014769733632.\n퐿\n=\n \nΔ\n푥\n푝\n푏\n푝\n푐\n푝\n푏\n−\n푝\n푐\n=\n1\n푋\n*\n7\n4\n.\n1\n6\n*\n7\n0","metadata":{"loc":{"lines":{"from":2015,"to":2282}}}}],["71",{"pageContent":",\n=\n.\n푝\n푐\n=\n5\n0\n0\n0\n/\n1\n≈\n7\n0\n.\n7\n1\n푝\n푏\n5\n5\n0\n0\n/\n1\n≈\n7\n4\n.\n1\n6\n푝\n푎\n4\n5\n4\n5\n/\n1\n≈\n6\n7\n.\n4\n2\n;\noutput\nL\nin\nQ64.96\nformat,\nL=1519437308014769733632.\n퐿\n=\n \nΔ\n푥\n푝\n푏\n푝\n푐\n푝\n푏\n−\n푝\n푐\n=\n1\n푋\n*\n7\n4\n.\n1\n6\n*\n7\n0\n.\n7\n1\n7\n4\n.\n1\n6\n−\n7\n0\n.\n7\n1\n;\nthen\noutput\nL\nin\nQ64.96\nformat,\nL=1517882343751509868544.\nTake\n퐿\n=\n∆\n푦\n푝\n푐\n−\n푝\n푎\n=\n5\n0\n0\n0\n푌\n7\n0\n.\n7\n1\n−\n6\n7\n.\n4\n2\nthe\nminimum\nof\nthe\ntwo\nvalues,\nand\nthe\nliquidity\nis\n1517882343751509868544.\n3.1.2\nIncreasing\nLiquidity:\nWhen\nthere\nis\nexisting\nliquidity\nin\nthe\npool,\nadditional\nliquidity\ncan\nbe\nadded\naccording\nto\nthe\nratio\nof\nthe\namount\nof\ntoken\nX\nto\ntoken\nY,\nand\nLP\nTokens\nwill\nbe\nminted\nbased\non\nthis\nratio\nas\nwell.","metadata":{"loc":{"lines":{"from":2282,"to":2461}}}}],["72",{"pageContent":"Suppose\nthe\ncurrent\namount\nof\ntoken\nX\nis\n,\nthat\nof\ntoken\nY\n,\nand\nthat\nof\nLP\nTokens\n푥\n푐\n푢\n푟\n푟\n푒\n푛\n푡\n푦\n푐\n푢\n푟\n푟\n푒\n푛\n푡\n;\nthe\nnewly-added\namount\nof\ntoken\nX\nis\nand\nY\n(under\ncommon\ncircumstances,\n푠\n푐\n푢\n푟\n푟\n푒\n푛\n푡\n푥\n푎\n푑\n푑\n푦\n푎\n푑\n푑\n/\n=\n/\n,\nso\nliquidity\nis\nadded\nbased\non\nthe\nsame\nratio),\nand\nthe\namount\nof\nnew\n푥\n푐\n푢\n푟\n푟\n푒\n푛\n푡\n푥\n푎\n푑\n푑\n푦\n푐\n푢\n푟\n푟\n푒\n푛\n푡\n푦\n푎\n푑\n푑\nLP\nTokens\nis\n,\nthen\nwe\nhave:\n푠\n푎\n푑\n푑\n푠\n푎\n푑\n푑\n=\n푚푖푛\n(\n푥\n푎푑푑\n푥\n푐푢푟푟푒푛푡\n,\n푦\n푎푑푑\n푦\n푐푢푟푟푒푛푡\n)\n×\n \n푠\n푐\n푢\n푟\n푟\n푒\n푛\n푡\nE.g.\nIf\nanother\nuser\nadds\n2000\nX\nand\n20\nY\nto\nthe\nliquidity\npool,\nhe/she\ncan\nget\n2000\nLP\nTokens.\n3.1.3\nWithdrawing\nLiquidity:\nWhen\na\nuser\nwithdraws\nliquidity,\nhe/she\ncan\nget\nX\nand\nY\naccording\nto\nthe\nsame\nratio.\nSuppose\nthe\ncurrent\namount\nof\ntoken\nX\nis\n,\nthat\nof\ntoken\nY\n,\nthat\nof\nLP\nTokens\n,\n푥\n푐\n푢\n푟\n푟\n푒\n푛\n푡\n푦\n푐\n푢\n푟\n푟\n푒\n푛\n푡\n푠\n푐\n푢\n푟\n푟\n푒\n푛\n푡\nand\nthe\namount\nof\nLP\nTokens\nto\nbe\nremoved\nis\n,\nthen\nthe\nuser\ncan\nget\nan\namount\nof\n푠\n푟\n푒\n푚\n표\n푣\n푒\n푥\n푤\n푖\n푡\nℎ\n푑\n푟\n푎\n푤\nand\nof\nthe\ntwo\ntokens\nrespectively,\nas\nshown:\n푦\n푤\n푖\n푡\nℎ\n푑\n푟\n푎\n푤\n,\n푥\n푤\n푖\n푡\nℎ\n푑\n푟\n푎\n푤\n=\n푠","metadata":{"loc":{"lines":{"from":2463,"to":2752}}}}],["73",{"pageContent":"the\namount\nof\nLP\nTokens\nto\nbe\nremoved\nis\n,\nthen\nthe\nuser\ncan\nget\nan\namount\nof\n푠\n푟\n푒\n푚\n표\n푣\n푒\n푥\n푤\n푖\n푡\nℎ\n푑\n푟\n푎\n푤\nand\nof\nthe\ntwo\ntokens\nrespectively,\nas\nshown:\n푦\n푤\n푖\n푡\nℎ\n푑\n푟\n푎\n푤\n,\n푥\n푤\n푖\n푡\nℎ\n푑\n푟\n푎\n푤\n=\n푠\n푟푒푚표푣푒\n푠\n푐푢푟푟푒푛푡\n×\n \n푥\n푐\n푢\n푟\n푟\n푒\n푛\n푡\n푦\n푤\n푖\n푡\nℎ\n푑\n푟\n푎\n푤\n=\n푠\n푟푒푚표푣푒\n푠\n푐푢푟푟푒푛푡\n×\n \n푦\n푐\n푢\n푟\n푟\n푒\n푛\n푡\n3.1.4\nSwapping\nSwapping\nis\nalso\nbased\non\nthe\nconstant\nproduct\nformula,\nwith\nand\nrepresenting\nthe\namount\nof\n푥\n푦\ntoken\nX\nand\ntoken\nY:\n(k\nrepresents\na\nconstant)\n푥\n×\n푦\n=\n푘\nIf\nthe\nuser\nwants\nto\nswap\ntoken\nX\nfor\nY\nin\nthe\nliquidity\npool,\nsuppose\nthe\namount\nof\nX\nto\nbe\nswapped\nis\nand\nthe\namount\nof\nY\ngained\n,\nthen:\n∆\n푥\n∆\n푦\n（\n푥\n+\n∆\n푥\n)\n×\n(\n푦\n−\n∆\n푦\n)\n=\n푘\n∆\n푦\n=\n푦\n−\n푘\n푥\n+\n∆\n푥\n=\n∆\n푥\n \n×\n \n푦\n푥\n+\n∆\n푥\nAs\nis\nshown,\nthe\nproduct\nof\nthe\ntotal\namount\nof\nX\nand\nY\nalways\nremains\nthe\nsame\nbefore\nand\nafter\nthe\ntransaction.\nThis\nmeans\nthat\nthe\nprice\nof\nthis\ntransaction\ncan\nbe\nseen\nas\nthe\nratio\nof\nthe\namount","metadata":{"loc":{"lines":{"from":2752,"to":2994}}}}],["74",{"pageContent":"of\ntoken\nX\nto\nthat\nof\nY,\ngiven\nthat\nthe\namount\nin\nthis\ntransaction\nis\nrelatively\nsmall\ncompared\nto\nthe\ntotal\ntokens\nof\nthe\nliquidity\npool.\n푝\n푟\n푖\n푐\n푒\n푦\n=\n∆\n푥\n∆\n푦\n=\n푥\n+\n∆\n푥\n푦\n \n≈\n푥\n푦\nDuring\nan\nactual\ntransaction,\n0.3%\nwill\nbe\ndeducted\nas\ntransaction\nfees,\nbefore\nthe\nfollowing\ncalculation\nis\ndone\nbased\non\nthe\nconstant-product\ninvariant.\nE.g.\nThere\nare\n100\nX\nand\n1\nY\nin\nthe\nliquidity\npool.\nIf\none\nwishes\nto\ntrade\n20\nX\nthrough\nthe\nswapping\nmechanism,\nthen\nthe\nactual\namount\nto\nbe\nswapped\nis\n19.94\nX\n(0.3%\ndeducted\nas\nfees).\nAccording\nto\nthe\nformula\n,\nwe\nhave:\n푥\n×\n푦\n=\n푘\n（\n1\n0\n0\n+\n1\n9\n.\n9\n4\n）\n×\n（\n1\n−\n∆\n푦\n）\n=\n1\n0\n0\n∆\n푦\n=\n0\n.\n1\n6\n6\n2\nThis\nmeans\none\ncan\nswap\n20\nX\nfor\n0.1662\nY.\n3.2\nSUN\nStableSwap\nModel\nThe\nswap\nfor\nstablecoins\non\nSUN\nadopts\na\ntotally\ndifferent\nmodel\nfrom\nSunSwap:\nStableSwap.\nWith\nthe\ndevelopment\nof\nstablecoins,\napart\nfrom\nthe\nmainstream\nUSDT,\nother\nstablecoins\ncan\nalso\nbe\ntraded\non\nthe\nTRON\npublic\nchain,\nlike\nUSDJ,\nTUSD\nand\nUSDC.\nThe\ngrowing\nmarket\nshare\nand\nvariety\nof\nstablecoins","metadata":{"loc":{"lines":{"from":2996,"to":3206}}}}],["75",{"pageContent":"of\nstablecoins,\napart\nfrom\nthe\nmainstream\nUSDT,\nother\nstablecoins\ncan\nalso\nbe\ntraded\non\nthe\nTRON\npublic\nchain,\nlike\nUSDJ,\nTUSD\nand\nUSDC.\nThe\ngrowing\nmarket\nshare\nand\nvariety\nof\nstablecoins\nhave\ngiven\nrise\nto\nthe\nmassive\nand\nmultifarious\ndemand\nfrom\nusers\nfor\nswapping\nstablecoins.\nThe\nunique\nStableSwap\nmodel,\nthanks\nto\nits\nlow\nfees\nand\nlow\nprice\nslippage,\nbecomes\nthe\nbest\nchoice\nfor\nusers\nto\nswap\nstablecoins.\n3.2.1\nHow\nStableSwap\nWorks\n(two-token\ncase)\nThe\ncore\nof\nthe\nStableSwap\nmodel\nis\nto\nlower\nprice\nslippage\nwhile\nensuring\nthat\nthe\nliquidity\npool\ncan\nprovide\nliquidity\nat\nany\nprice.\nTo\nachieve\nthis\nend,\nwe\ncombined\nthe\nconstant\nsum\nwith\nthe\nconstant\nproduct\nformula.\nThough\nStableSwap\nsupports\nmultiple-token\nmarket\nmaking,\nwe\nwill\nexplain\nhow\nthis\nmodel\nworks\ntaking\ntwo-token\nmarket\nmaking\nas\nan\nexample\nbecause\nit\nis\neasier\nfor\nyou\nto\nunderstand.\nThe\nconstant\nsum\nformula\nis\nas\nfollows:\n.\n(const.\nrefers\nto\na\nconstant)\n푥\n+\n푦\n=\n푐\n표\n푛\n푠\n푡\nAs\nthe\nslope\nof\nthis\nlinear\nfunction\nis","metadata":{"loc":{"lines":{"from":3206,"to":3373}}}}],["76",{"pageContent":"making\nas\nan\nexample\nbecause\nit\nis\neasier\nfor\nyou\nto\nunderstand.\nThe\nconstant\nsum\nformula\nis\nas\nfollows:\n.\n(const.\nrefers\nto\na\nconstant)\n푥\n+\n푦\n=\n푐\n표\n푛\n푠\n푡\nAs\nthe\nslope\nof\nthis\nlinear\nfunction\nis\ninvariable,\ntransactions\ncome\nwith\nzero\nslippage.\nIf\nyou\nhave\ntwo\ntokens\nX\nand\nY,\nselling\nof\ncoin\nX\nwill\nlead\nto\nbuying\n=\nof\ncoin\nY,\nwhich\nmeans\nthe\n푑\n푥\n−\n푑\n푦\n푑\n푥\nprice\ndetermined\nas\nis\nalways\nthe\nsame.\nHowever,\nthis\nmarket\nmaker\nmodel\nhas\nits\n−\n푑\n푥\n/\n푑\n푦\nproblem\n-\nthe\nexhaustion\nof\nliquidity.\nSuppose\nconst.\n=\n10,\nif\na\nuser\nsells\n10\nX,\nthen\nthere\nwould\nbe\nzero\nY\nin\nthe\nliquidity\npool.\nOn\nthe\nother\nhand,\nthe\nconstant\nproduct\nfunction\nis\n.\n푥\n×\n푦\n=\n푐\n표\n푛\n푠\n푡","metadata":{"loc":{"lines":{"from":3373,"to":3515}}}}],["77",{"pageContent":"As\nthe\ncurve\nof\nthis\nfunction\nextends\nalong\nthe\ncoordinate\naxes\ninfinitely,\nthe\nliquidity\nof\nany\ntoken\ncan\nnever\nbe\nzero,\nwhich\nmeans\nusers\ncan\nalways\ntrade\none\nasset\nfor\nthe\nother\nasset.\nHowever,\nthe\nslope\nof\nthis\ncurve\nis\never-changing,\nleading\nto\nchanges\nin\nprices.\nIn\nthis\nway,\nusers\ncan\nnever\ncomplete\nall\nswaps\nat\na\nconstant\nprice,\nsuffering\nfrom\nslippage\ninstead.\nWe\ncan\ntake\na\nlook\nat\nthe\nfigure\nbelow\nto\nbetter\ncompare\nthe\nfeatures\nof\nthe\ntwo\nformulas.\nFigure\n4\nConstant\nsum\nand\nconstant\nproduct\nmodels\nTo\nbetter\nleverage\nthe\nadvantages\nof\nboth,\nStableSwap\nintegrates\nthe\ntwo\nformulas.\nThus,\nwe\nintroduced\nthe\nsum\nof\nthe\nconstant\nsum\nand\nconstant\nproduct:\nAs\nis\nα\n（\n푥\n+\n푦\n）\n+\nβ\n(\n푥\n푦\n)\n=\n푐\n표\n푛\n푠\n푡\n.\nshown\nin\nFigure\n4,\nthis\ncurve\nstands\nbetween\nthe\nconstant\nsum\nand\nthe\nconstant\nproduct\nfunction,\nlike\na\npan\nmapped\nto\nthe\ntwo-dimensional\nsurface.","metadata":{"loc":{"lines":{"from":3517,"to":3674}}}}],["78",{"pageContent":"Figure\n5\nHybrid\nconstant\nfunction\nmodel\nWhen\ntrading\nwithin\nthe\nrange\nof\nthe\n“bottom\nof\nthe\npan”,\nusers\nget\nto\nenjoy\nrelatively\nstable\nprices\nand\nthus\navoid\nslippage.\nThis\nalso\nmeans\nthat\nthe\nmarket\nmaker\nmodel\nis\nnot\nsuitable\nfor\nassets\nwith\nvolatile\nprices,\nbut\nonly\nfor\nthe\nswap\nof\nstablecoins.\nFor\nliquidity\nproviders,\nStableSwap\ndramatically\nreduces\nthe\nrisk\nof\nimpermanent\nloss,\nwhich\nis\ngreatly\nlower\nthan\nthe\nconstant\nproduct\nmodel\nas\nlong\nas\nthe\nprices\nare\nwithin\nthe\n“bottom\nof\nthe\npan”.\nEven\nif\nthe\nprices\nmove\nto\nthe\ntwo\nsides\nof\nthe\n“pan”,\narbitrageurs\nwill\nquickly\nengage\nin\narbitrage\nto\npull\nthe\nprices\nback\nto\nthe\n“bottom”.\nMeanwhile,\nthe\ntwo\nsides\nof\nthe\n“pan”\nextend\nalong\nthe\ntwo\naxes\ninfinitely,\navoiding\nthe\nexhaustion\nof\nliquidity.\nAt\nany\nprice,\nno\nasset\nwill\nbe\nzero,\nthough\nthere\nmay\nbe\nhigh\nslippage.\n3.2.2\nHow\nStableSwap\nWorks\n(multiple-token\ncase)\nIn\nthis\nsection,\nwe\nwill\nintroduce\nthe\nmodel\nmore\ndetailedly\non\nhow\nexactly\nStableSwap\nworks\nin\nthe\ncase\nof\nmultiple","metadata":{"loc":{"lines":{"from":3676,"to":3842}}}}],["79",{"pageContent":"there\nmay\nbe\nhigh\nslippage.\n3.2.2\nHow\nStableSwap\nWorks\n(multiple-token\ncase)\nIn\nthis\nsection,\nwe\nwill\nintroduce\nthe\nmodel\nmore\ndetailedly\non\nhow\nexactly\nStableSwap\nworks\nin\nthe\ncase\nof\nmultiple\ntokens.\nThe\nconstant\nsum\nfunction\ncan\nbe\ngeneralized\nfor\nany\nnumber\nof\ntokens\nhaving\na\nlinear\ninvariant:\n푥\n푖\n=\n푐\n표\n푛\n푠\n푡\nThe\ngeneralization\nalso\ngoes\nfor\nthe\nconstant\nproduct\ninvariant:\n푖\n=\n1\n푛\n∏\n푥\n푖\n푤\n푖\n=\n푐\n표\n푛\n푠\n푡\n.","metadata":{"loc":{"lines":{"from":3842,"to":3922}}}}],["80",{"pageContent":"refers\nto\nthe\nreserve\nof\neach\nasset,\nthe\nweight\nof\neach\nasset\nand\n.\na\nconstant\n.\n푥\n푖\n푤\n푖\n푐\n표\n푛\n푠\n푡\nIn\nactual\nuse\ncases,\nthe\nformulas\nare\nsimplified\nas\nthe\ntwo\nfundamental\nones:\n&\n푖\n=\n1\n푛\n∑\n푥\n푖\n=\n퐷\n푖\n=\n1\n푛\n \n∏\n푥\n푖\n=\n(\n퐷\n푛\n)\n푛\nrepresents\nthe\ntotal\nsupply\nof\ntokens\nin\nthe\nliquidity\npool\nwhen\nthe\nprice\n(or\namount)\nof\nall\n퐷\ntokens\nis\nthe\nsame;\nrefers\nto\nhow\nmany\ntypes\nof\ntokens\nthere\nare\nin\nthe\npool.\n푛\nBased\non\nthe\ntwo\nformulas,\nwe\nintroduced\n,\nthe\nweight\nof\nthe\nconstant\nsum\ninvariant.\nWhen\nχ\n,\nthe\nformula\nis\nthe\nconstant\nproduct\none;\nwhen\n,\nit\nis\nthe\nconstant\nsum\ninvariant;\nwhen\nχ\n=\n0\nχ\n→\n∞\nassumes\na\nvalue\nin\nbetween,\nit\nis\nthe\ncombination\nof\nthe\ntwo.\nχ\nIn\naddition,\nconsidering\nthe\nnumber\nof\ndifferent\ntokens\nmay\nvary,\nwe\nmultiply\nthe\ntwo\nsides\nof\n푛\nthe\nequation\nby\n,\nthen\nadd\nthe\nconstant\nproduct\nfunction\nand\nget\nthe\nfollowing:\nχ\n퐷\n푛\n−\n1\nχ\n퐷\n푛\n−\n1\n∑\n푥\n푖\n+\n∏\n푥\n푖\n=\nχ\n퐷\n푛\n+\n(\n퐷\n푛\n)\n푛\nIn\naddition,\nto\nallow\nto\nbe\nadjusted\nwhen\nthe\nprice\ndeviates\nfrom\n1\nby\na\nlarge\nmargin,\nwe\nχ\nintroduced\nthe","metadata":{"loc":{"lines":{"from":3924,"to":4153}}}}],["81",{"pageContent":"function\nand\nget\nthe\nfollowing:\nχ\n퐷\n푛\n−\n1\nχ\n퐷\n푛\n−\n1\n∑\n푥\n푖\n+\n∏\n푥\n푖\n=\nχ\n퐷\n푛\n+\n(\n퐷\n푛\n)\n푛\nIn\naddition,\nto\nallow\nto\nbe\nadjusted\nwhen\nthe\nprice\ndeviates\nfrom\n1\nby\na\nlarge\nmargin,\nwe\nχ\nintroduced\nthe\nconstant\n퐴\nand\nvariable\n.\nWe\ncan\nget\n,\nby\nmultiplying\n퐴\nand\n,\nwith\n∏\n푥\n푖\n(\n퐷\n푛\n)\n푛\nχ\n=\n퐴\n∏\n푥\n푖\n(\n퐷\n푛\n)\n푛\n \n∏\n푥\n푖\n(\n퐷\n푛\n)\n푛\nbeing\nthe\nbalance\nlevel\nof\nliquidity\nin\nthe\npool.\n∏\n푥\n푖\n(\n퐷\n푛\n)\n푛\nWhen\nthe\ndistribution\nof\ntokens\nin\nthe\nliquidity\npool\nis\ncompletely\nbalanced,\n;\n∏\n푥\n푖\n(\n퐷\n푛\n)\n푛\n=\n1\n,\n \nχ\n=\n퐴\nwhile\nand\nboth\nare\nclose\nto\nzero\nwhen\nthe\ndistribution\nis\nextremely\nunbalanced,\nso\nthe\n \n∏\n푥\n푖\n(\n퐷\n푛\n)\n푛\nχ\nfunction\nbecomes\nthe\nconstant\nproduct\none.\nAs\nthe\nconstant\nsum\nfunction\nonly\napplies\nto\nthe\ncase\nwhen\nthe\nrelative\nprice\nhas\nno\nvolatility\nand\nstands\nat\n1,\nit\ndoes\nnot\nsuit\nthe\nscenario\nof\nextreme\nunbalanced\ndistribution\nof\ntokens\nin\nthe\npool\nwith\nthe\nprice\ndeviating\nfrom\n1\nby\na\nsharp\nmargin.\nSubstitute\ninto\nthe\nequation,\nand\nwe\ncan\nget\nthe\nmarket\nmaker\nfunction\nin\nthe\nend:\nχ\n퐴\n푛\n푛\n∑\n푥\n푖\n+\n퐷\n=\n퐴\n퐷","metadata":{"loc":{"lines":{"from":4153,"to":4397}}}}],["82",{"pageContent":"distribution\nof\ntokens\nin\nthe\npool\nwith\nthe\nprice\ndeviating\nfrom\n1\nby\na\nsharp\nmargin.\nSubstitute\ninto\nthe\nequation,\nand\nwe\ncan\nget\nthe\nmarket\nmaker\nfunction\nin\nthe\nend:\nχ\n퐴\n푛\n푛\n∑\n푥\n푖\n+\n퐷\n=\n퐴\n퐷\n푛\n푛\n+\n퐷\n푛\n+\n1\n푛\n푛\n∏\n푥\n푖","metadata":{"loc":{"lines":{"from":4397,"to":4451}}}}],["83",{"pageContent":"Based\non\nthe\nfunction,\nthe\nswap\nof\ntokens\ncan\nimpact\non\nthe\nvalue\nof\n.\nTake\nUSDT,\nUSDJ\nand\n푥\n푖\nTUSD\nin\n3pool\nfor\nexample.\nLet’s\nsuppose\nthe\nsupply\nof\nthe\nthree\ntokens\nis\nrespectively.\n푥\n1\n,\n \n푥\n2\n \n,\n \n푥\n3\nThe\nvalue\nof\nwill\nbecome\nwhen\nwe\nsell\n)\nUSDT\nto\nget\nUSDJ.\nIf\nwe\nsubstitute\ninto\n푥\n1\n푥\n1\n，\n(\n푥\n1\n，\n−\n푥\n1\n푥\n1\n，\nthe\nequation\nabove,\nwe\ncan\ncalculate\nand\nis\nthe\nnumber\nof\nUSDJ\ntokens\nobtained.\n푥\n2\n，\n,\n푥\n2\n−\n푥\n2\n，\nDuring\nthis\nprocess,\n퐴\nand\n퐷\nboth\nremain\nthe\nsame.\nBut\nthis\ndoes\nnot\nmean\n퐴\nand\n퐷\nare\nalways\ninvariable.\nWhen\nLPs\nincrease\nor\nreduce\nliquidity\nof\nthe\npool,\n퐷\nwill\nchange\naccordingly.\nBased\non\nthe\nformula\nabove,\nthe\nnew\n푥\nwill\nbe\nused\nto\ncalculate\nthe\nnew\n퐷\n.\n퐷\nwill\nbe\ngreater\nif\nliquidity\nrises,\nand\nsmaller\nif\nliquidity\nnarrows.\nAs\nis\nshown\nin\nFigure\n5,\nwith\n퐴\nunchanged,\nhigher\n퐷\nwill\nmove\nthe\ncurve\nupwards,\nwith\nthe\n“bottom\nof\nthe\npan”\nlarger\nthan\nbefore,\nvice\nversa.\nFigure\n6\nChanges\nof\n퐷\n퐴\nis\nan\nadjustable\nparameter.\nWhen\n퐷\nremains\nthe\nsame,\nwe\ncan\nsee\nfrom\nFigure\n6\nhow\nthe","metadata":{"loc":{"lines":{"from":4453,"to":4668}}}}],["84",{"pageContent":"will\nmove\nthe\ncurve\nupwards,\nwith\nthe\n“bottom\nof\nthe\npan”\nlarger\nthan\nbefore,\nvice\nversa.\nFigure\n6\nChanges\nof\n퐷\n퐴\nis\nan\nadjustable\nparameter.\nWhen\n퐷\nremains\nthe\nsame,\nwe\ncan\nsee\nfrom\nFigure\n6\nhow\nthe\nchange\nof\n퐴\ninfluences\nthe\nmarket\nmaking\ncurve.\nThe\ngreater\n퐴\nis,\nthe\nmore\nthe\ncurve\napproaches\nthe\nconstant\nsum\ncurve,\nand\nthe\nlarger\nthe\narea\nof\nthe\n“bottom\nof\nthe\npan”,\notherwise,\nthe\ncloser\nthe\ncurve\nis\nto\nthe\nconstant\nproduct\ncurve,\nthe\nsmaller\nthe\n\"bottom\nof\nthe\npan\"\narea.","metadata":{"loc":{"lines":{"from":4668,"to":4757}}}}],["85",{"pageContent":"Figure\n7\nChanges\nof\n퐴\n3.3\nBenefits\nfor\nveSUN\nHolders\nAt\npresent,\nthe\nSUN\nplatform\nallows\nusers\nto\nstake\nSUN\nin\nexchange\nfor\nveSUN.\nUsers\nwho\nhold\nveSUN\nenjoy\nthe\nfollowing\nbenefits:\n●\nget\nrewards\nfrom\ntransaction\nfees\nin\nthe\nstablecoin\npool\n●\nboost\nliquidity\npool\nmining\n●\nvote\nfor\nthe\nweights\nof\nliquidity\npools\n3.3.1\nHow\nto\nGet\nveSUN\nUsers\ncan\nget\nveSUN\nby\nstaking\nSUN.\nThe\ndetails\nare\nas\nfollows:\nIf\nSUN\nis\nstaked\nfor\na\nduration\nof\n(\n=4\nyears),\nthen\nwe\nhave\n푡\n1\n푡\n1\n≤\n푡\n푚\n푎\n푥\n퐴\n푚\n표\n푢\n푛\n푡\n푣\n푒\n푆\n푈\n푁\n=\n퐴\n푚\n표\n푢\n푛\n푡\n푆\n푈\n푁\n푡\n1\n푡\n푚\n푎\n푥\nThis\nmeans\nthat\nveSUN\n(voting\nrights)\nshares\na\nlinear\nrelationship\nwith\nthe\namount\nof\nSUN\nand\nthe\nstaking\nduration\n(\n).\nis\na\nreal-time\nvalue,\nwhich\nmeans\nthat\nas\ntime\npasses,\nwill\ndecrease,\nso\n푡\n1\n푡\n1\n푡\n1\nthe\namount\nof\nveSUN\nwill\nbe\nsmaller\naccordingly.\nveSUN\nwill\nbecome\nzero\nif\nSUN\nis\nunstaked.","metadata":{"loc":{"lines":{"from":4759,"to":4936}}}}],["86",{"pageContent":"3.3.2\nGet\nRewards\nfrom\nTransaction\nFees\nThe\nplatform\ngrants\n50%\nof\nthe\ntransaction\nfees\nin\nall\nstablecoin\npools\nto\nveSUN\nholders\nin\nthe\nform\nof\nTUSD.\nAt\npresent,\nwe\ntake\nmultiple\nsnapshots\nof\nthe\namount\nof\nveSUN\nheld\nby\nusers\nwithin\neach\nround\n(from\nThursday\n00:00\nto\nTuesday\n00:00\nnext\nweek).\nAfter\nthe\nround\nends,\nthe\nweighted\nTUSD\nrewards\nwill\nbe\ncalculated\nand\nrewarded\nto\nusers\nin\nproportion\nto\ntheir\nveSUN\nholdings\nby\ntriggering\nsmart\ncontracts.\n3.3.3\nBoost\nLiquidity\nPool\nMining\nUnlike\nordinary\nliquidity\nmining,\nthe\ngovernance\nmining\nof\nSUN\ntakes\ninto\nconsideration\nveSUN\nand\nintroduces\na\nnew\nconcept,\nvirtual\nbalance\n,\nto\nthe\ncalculation\nof\nthe\ninput\nof\nusers.\n푏\n푢\n*\nThe\nvalue\nof\nis\nrelated\nto\nthe\nuser’s\nreal\nbalance\n,\nthe\ntotal\nliquidity\nin\nthe\nliquidity\npool\n,\nthe\n푏\n푢\n*\n푏\n푢\n푆\namount\nof\nveSUN\nheld\nby\nthe\nuser\nand\nthe\namount\nof\nveSUN\non\nthe\nwhole\nplatform\n퐴\n푚\n표\n푢\n푛\n푡\n푢\n,\nas\nshown:\n퐴\n푀\n푂\n푈\n푁\n푇\n푏\n푢\n*\n=\n푚\n푖\n푛\n(\n0\n.\n4\n푏\n푢\n+\n0\n.\n6\n푆\n퐴\n푚\n표\n푢\n푛\n푡\n푢\n퐴\n푀\n푂\n푈\n푁\n푇\n,\n \n푏\n푢\n)\nBased\non\nthis","metadata":{"loc":{"lines":{"from":4938,"to":5147}}}}],["87",{"pageContent":"of\nveSUN\nheld\nby\nthe\nuser\nand\nthe\namount\nof\nveSUN\non\nthe\nwhole\nplatform\n퐴\n푚\n표\n푢\n푛\n푡\n푢\n,\nas\nshown:\n퐴\n푀\n푂\n푈\n푁\n푇\n푏\n푢\n*\n=\n푚\n푖\n푛\n(\n0\n.\n4\n푏\n푢\n+\n0\n.\n6\n푆\n퐴\n푚\n표\n푢\n푛\n푡\n푢\n퐴\n푀\n푂\n푈\n푁\n푇\n,\n \n푏\n푢\n)\nBased\non\nthis\nformula,\nthe\nvirtual\nbalance\nonly\nrepresents\n0.4\ntimes\nthe\nactual\nbalance\nif\na\n푏\n푢\n*\n푏\n푢\nuser\ndoes\nnot\nhold\nany\nveSUN,\nbut\nif\nthe\nuser\nholds\nenough\nveSUN,\n,\nat\nits\nmaximum\ncan\nbe\n푏\n푢\n*\nequal\nto\n.\n푏\n푢\nAs\nthe\nmining\nrewards\nare\ndistributed\nbased\non\nthe\nvirtual\nbalance,\nwith\nthe\nsame\nactual\nbalance,\nveSUN\nholders\ncan\nboost\ntheir\nmining\nspeed\nup\nto\n2.5\ntimes\nthat\nof\nnon-veSUN\nholders.\nIn\naddition,\nthe\nvalue\nof\nthe\namount\nof\nveSUN\nis\nstored\nin\nsmart\ncontracts\nand\nis\nonly\nchanged\nwhen\nusers\ndeposit\nor\nwithdraw\ntokens,\nor\nclaim\nrewards.\n3.3.4\nVote\nfor\nthe\nWeights\nof\nLiquidity\nPools\nUsers\ncan\nleverage\nveSUN\nto\nvote\nfor\nmining\nof\ndifferent\nliquidity\npools.\nSnapshots\nof\nthe\nvotes\nwill\nbe\ntaken\neach\nweek\nto\ndetermine\nthe\nweights\nof\npools\nfor\nthe\nnext\nweek.\nWith\nthe\nvalue\nof\nveSUN\ndecreasing\nall\nthe","metadata":{"loc":{"lines":{"from":5147,"to":5366}}}}],["88",{"pageContent":"veSUN\nto\nvote\nfor\nmining\nof\ndifferent\nliquidity\npools.\nSnapshots\nof\nthe\nvotes\nwill\nbe\ntaken\neach\nweek\nto\ndetermine\nthe\nweights\nof\npools\nfor\nthe\nnext\nweek.\nWith\nthe\nvalue\nof\nveSUN\ndecreasing\nall\nthe\ntime,\nusers\ncan\nvote\naccording\nto\nthe\npercentage\nof\nveSUN\nthey\nhold.\nTo\nprevent\nusers\nfrom\nchanging\ntheir\nvotes\ntoo\nfrequently,\nthey\nare\nonly\nallowed\nto\nchange\ntheir\nvotes\n10\ndays\nafter\nvoting\nin\na\nmining\npool.\nAs\nthis\nfeature\nonly\nrequires\nthe\nvalue\nfrom\nthe\nveSUN\nsmart\ncontracts,\nother\nuse\ncases\nfor\nveSUN\nwill\nnot\nbe\naffected.","metadata":{"loc":{"lines":{"from":5366,"to":5459}}}}],["89",{"pageContent":"4\nMilestones\n4.1\nSUN\n1.0\n4.1.1\nGenesis\nMining\nIn\nSeptember\n2020,\nGenesis\nMining\nwas\ninitiated,\nallowing\nusers\nto\nstake\nTRX\nin\nsmart\ncontracts\nto\nget\nSUNOLD.\nAfter\nthis\nmining\nstage\nended,\nSUNOLD\nwas\ndelivered\nto\nusers\nautomatically\nthrough\nsmart\ncontracts.\n4.1.2\nOfficial\nMining\nIn\nthe\nmiddle\nof\nSeptember\n2020,\nofficial\nmining\noffered\nmultiple\nmining\npools\nincluding\nTRX,\nJST,\nUSDT,\nSUNOLD,\nUSDJ,\nWIN,\nBTT,\nquality\ncommunity\nprojects\nand\nliquidity\nmining\npools,\nwhere\nusers\ncould\nengage\nin\nmining\nthrough\nstaking.\n4.1.3\nJustLend\nMining\nIn\nDecember\n2020,\nthe\nSUN\nplatform\nsupported\nmining\nby\ndepositing\nTRX,\nJST,\nUSDT,\nSUNOLD,\nUSDJ,\nWIN,\nBTC,\nETH\nand\nWBTT.\n4.1.4\nCentury\nMining\nIn\nMarch\n2021,\nthe\nCentury\nMining\nwas\ninitiated,\nsupporting\nthe\nmining\nof\nSUNOLD,\nTRX,\nJST,\nBTT\nand\nWIN\nby\nstaking\nLP\nTokens\non\nJustSwap\nand\ndepositing\njTokens\non\nJustLend.\n4.2\nSUN\n2.0\n4.2.1\nSUN\nRedenomination\nPlan\nIn\nMay\n2021,\nto\nlower\nthe\nthreshold\nfor\nusers\nto\nhold\ntokens\nand\npromote\nthe\nSUN\necosystem,\nthe\nSUN","metadata":{"loc":{"lines":{"from":5461,"to":5619}}}}],["90",{"pageContent":"LP\nTokens\non\nJustSwap\nand\ndepositing\njTokens\non\nJustLend.\n4.2\nSUN\n2.0\n4.2.1\nSUN\nRedenomination\nPlan\nIn\nMay\n2021,\nto\nlower\nthe\nthreshold\nfor\nusers\nto\nhold\ntokens\nand\npromote\nthe\nSUN\necosystem,\nthe\nSUN\ntokens\nwere\nredenominated\nat\na\nratio\nof\n1:1000\nand\nthe\ntotal\nsupply\nchanged\nfrom\n19,900,730\nto\n19,900,730,000,\nwhile\nthe\nmarket\ncap\nof\nSUN\nis\nmaintained.\nTo\nbetter\ndifferentiate\nthe\nold\nand\nnew\ntokens,\nwe\nrefer\nto\nthe\nold\nSUN\ntokens\nas\nSUNOLD\nand\nrename\nthe\nnew\ntokens\nas\nSUN,\nassuming\na\nbrand\nnew\nlogo.\n4.2.2\nPlatform\nUpgrading\nIn\nMay\n2021,\nthe\nSUN\nplatform\nwas\nupgraded\nto\nthe\nfirst\nintegrated\nplatform\nof\nstablecoin\nswapping,\ntoken\nmining\nand\nDAO.","metadata":{"loc":{"lines":{"from":5619,"to":5730}}}}],["91",{"pageContent":"At\nthe\npreliminary\nstage\nof\nits\ninitiation,\nSUN\nintroduced\nthe\n3pool\nswap\npool,\nsupporting\nthe\nswap\namong\nUSDT,\nUSDJ\nand\nTUSD.\nThe\nlater\nupgraded\nplatform\nenjoys\nadvantages\nof\nlow\ntransaction\nfees,\nslippage\nand\nimpermanent\nloss,\nwith\nhigher\nefficiency\nand\nsecurity.\n4.2.3\nBrand-New\nMining\nModel\nIn\nJune\n2021,\nSUN\n2.0\nintroduced\nnew\nmining\nmodels\nof\n3pool\nLP,\nSUN-TRX\nLP,\nSUN\nStake\nand\nSUN\nStake\n&\nLock,\nwith\ntwo\nphases:\nGenesis\nMining\nand\nGovernance\nMining.\nDuring\nGovernance\nMining,\nusers\ncould\nstake\nSUN\nto\nget\nvoting\nrights\n(veSUN),\nand\nvote\nto\ndecide\nthe\nweights\nof\ndifferent\nliquidity\npools\nin\nmining.\n4.2.4\nNew\nStablecoin\nPool\n-\nUSDC\nPool\nIn\nAugust\n2021,\nthe\nplatform\nlaunched\na\nnew\nstablecoin\npool:\nUSDC\nPool\n(USDC+3SUN).\nThe\nliquidity\nmining\npool\nof\nUSDC\nLP\narrived\nat\nthe\nsame\ntime,\nwhere\nusers\ncould\nstake\ntokens\nto\nparticipate\nin\ngovernance\nmining\nand\ngain\nrewards.\n4.2.5\nSecond\nPhase\nof\nGovernance\nMining\nOn\nSeptember\n15,\n2021,\nthe\nsecond\nphase\nof\nSUN\nGovernance\nMining\nwent\nlive,","metadata":{"loc":{"lines":{"from":5732,"to":5892}}}}],["92",{"pageContent":"users\ncould\nstake\ntokens\nto\nparticipate\nin\ngovernance\nmining\nand\ngain\nrewards.\n4.2.5\nSecond\nPhase\nof\nGovernance\nMining\nOn\nSeptember\n15,\n2021,\nthe\nsecond\nphase\nof\nSUN\nGovernance\nMining\nwent\nlive,\nduring\nwhich\nthe\nrole\nof\nveSUN\n(voting\nrights\nusers\nobtained\nby\nlocking\nSUN)\nwas\nfurther\nexploited\non\nthe\nSUN\nplatform.\nThe\nmain\nuse\ncases\nfor\nveSUN\nare:\nobtaining\nTUSD\nrewards,\nboosting\nliquidity\npool\nmining\nand\nvoting\nto\ndetermine\nthe\nweights\nof\nliquidity\npools\nin\nmining.\n4.2.6\nAcquisition\nof\nJustSwap\nIn\nOctober\n2021,\nSUN\ncompleted\nthe\nacquisition\nof\nJustSwap,\nwhich\nmarks\nour\nbrand\nupgrade\nand\nefforts\nto\nbuild\nthe\nlargest\ndecentralized\nexchange\non\nTRON.\n5\nFuture\nPlans\n5.1\nOptimize\nUser\nExperience\n5.1.1\nImprove\nAsset\nUtilization\nEfficiency\nThe\nSUN\nplatform\nwill\noptimize\nour\ncurrent\nAMM\nprogram\nand\nStableSwap\nmodels,\nenhancing\nfeatures\nsuch\nas\nliquidity\npooling,\norders\nwithin\ncertain\nprice\nranges,\nlimit\norders\nand\nproviding\nliquidity\nfor\na\nspecific\ntoken.\nThrough\ntechnological\nupgrading\nand","metadata":{"loc":{"lines":{"from":5892,"to":6043}}}}],["93",{"pageContent":"and\nStableSwap\nmodels,\nenhancing\nfeatures\nsuch\nas\nliquidity\npooling,\norders\nwithin\ncertain\nprice\nranges,\nlimit\norders\nand\nproviding\nliquidity\nfor\na\nspecific\ntoken.\nThrough\ntechnological\nupgrading\nand\nbusiness\nmodel\ninnovation,\nwe\ncan\nhelp\nusers\nreduce\ntheir\nimpermanent\nloss.\n5.1.2\nFacilitate\nTrading\nAcross\nChains","metadata":{"loc":{"lines":{"from":6043,"to":6085}}}}],["94",{"pageContent":"Going\nforward,\nSUN\nwill\nconnect\nmultiple\nheterogeneous\nblockchain\nnetworks\nand\nrealize\nthe\ncross-chain\nswap\nof\nassets.\nWe\nwill\noffer\nusers\na\nmore\nconvenient,\ncost-effective\nand\nsecure\nway\nto\ntrade\nassets\nacross\nvarious\nblockchains.\n5.1.3\nOptimize\nUser\nExperience\nTo\ncater\nto\nusers’\npreferences\nand\nenhance\ninteractions,\nSUN\nwill\nboost\nuser\nexperience\nby\nupgrading\nour\nproduct\nportfolio\nin\nterms\nof\ntheir\navailability,\noperability\nand\nsecurity.\n5.2\nExpand\nProduct\nEcosystem\n5.2.1\nProvide\nDiverse\nDEX\nProducts\nBased\non\ncurrent\nproducts\nand\nuser\nprofiles,\nwe\nwill\nintroduce\nother\nDEX\nproducts\nlike\nsmart\nroutes,\norders\nwithin\ncertain\nprice\nranges,\nlimit\norders,\nmarket\nmaking\nfor\na\nspecific\ntoken,\nmargin\ntrading\nand\nfutures\ntrading\nto\nprovide\nthe\nplatform\nwith\nmore\ndiverse\nuse\ncase\nscenarios\nand\nimprove\nthe\nutilization\nratio\nof\nusers’\nassets.\n5.2.2\nBuild\na\nOne-Stop\nDeFi\nPlatform\nBased\non\ncurrent\nDEX\nproducts,\nthe\nSUN\nplatform\nwill\nprovide\nour\nusers,\nincluding\nmarket\nmakers,\ntraders\nand","metadata":{"loc":{"lines":{"from":6087,"to":6233}}}}],["95",{"pageContent":"and\nimprove\nthe\nutilization\nratio\nof\nusers’\nassets.\n5.2.2\nBuild\na\nOne-Stop\nDeFi\nPlatform\nBased\non\ncurrent\nDEX\nproducts,\nthe\nSUN\nplatform\nwill\nprovide\nour\nusers,\nincluding\nmarket\nmakers,\ntraders\nand\narbitrageurs,\nwith\nmore\nchoices,\nhigher\nprofitability\nand\nmore\nconvenient\none-stop\nservices\nby\nway\nof\nsmart\nroutes,\ninvestment\nplan\nrecommendation\nand\nintegration\nof\nmultiple\nmodels,\ncombined\nwith\nother\nlending\nand\ninsurance\nproducts.\n5.2.3\nJoin\nHands\nto\nMake\nDeFi\nProsper\nApart\nfrom\ndeveloping\nproprietary\nproducts,\nwe\nalso\nhope\nto\nwork\nwith\nmore\ndevelopers\nand\npartners\nto\nbuild\na\nbetter\necosystem\nof\nSUN.\nThrough\nIDO,\nfund\ninvestment\nand\nproject\nincubators,\nwe\ncan\njointly\ncontribute\nto\nthe\nprosperity\nof\nDeFi\nwith\nall-round\nsupport\nof\nfunds,\ntechnology\nand\nother\nresources.\n5.3\nGrant\nValue\nto\nUsers\n5.3.1\nLong-Term\nMining\nProgram\nTo\nincentivize\nusers\nparticipating\nin\nthe\nSUN\necosystem,\nwe\nwill\ncontinue\nto\nlaunch\nmining\nprograms,\nincluding\nbut\nnot\nlimited\nto\nliquidity\nmining,\nSUN-staked\nmining,","metadata":{"loc":{"lines":{"from":6233,"to":6381}}}}],["96",{"pageContent":"5.3.1\nLong-Term\nMining\nProgram\nTo\nincentivize\nusers\nparticipating\nin\nthe\nSUN\necosystem,\nwe\nwill\ncontinue\nto\nlaunch\nmining\nprograms,\nincluding\nbut\nnot\nlimited\nto\nliquidity\nmining,\nSUN-staked\nmining,\netc.\n5.3.2\nPromote\nDAO\nProgram","metadata":{"loc":{"lines":{"from":6381,"to":6413}}}}],["97",{"pageContent":"The\nSUN\nplatform\nwill\nadvance\nits\ndecentralized\nautonomous\norganization\n(DAO)\nprogram.\nWith\nSUN\nas\nthe\nsole\ngovernance\ntoken,\nthe\nplatform\ngrants\nusers\nthe\nright\nto\ndetermine\nfuture\ndevelopment\npaths\nof\nall\nproducts.\n5.3.3\nMaintain\nToken\nValue\nIn\nthe\nfuture,\ntransaction\nfees\nwill\nonly\naccount\nfor\na\nfraction\nof\nthe\nrevenue\nof\nthe\nSUN\nplatform,\nwhile\nrevenue\nfrom\nother\nproducts\nwill\nbe\nbought\nback,\nburned\nand\nredistributed,\nalong\nwith\nfuture\nR&D,\nto\nmaintain\nthe\nvalue\nof\nthe\nSUN\ntoken,\nbringing\nbenefits\nto\nusers\nin\na\nsustained\nway.","metadata":{"loc":{"lines":{"from":6415,"to":6500}}}}]]