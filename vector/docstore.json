[["0",{"pageContent":"APENFT Docs\n\nBACKGROUND\nAPENFT was born with the mission to register world-class artworks as NFTs on blockchain.\nWe aim to build a bridge between top-notch artists and blockchain,\nand to support the growth of native crypto NFT artists.\nPREDICTION\n1%\nBack in 2000, the Internet industry accounted for less than 1% of the world economy, and no Internet company entered the list of the Fortune Global 500.\n36%\nAt present, however, that figure has soared to over 36%, and more than half of the Fortune 500 companies are Internet enterprises.\n50%\nThat trend also applies to NFT. We estimate 50% of the world's top-notch artists and artworks to be recorded as NFTs in the following decade. And that's where APENFT can come into play.","metadata":{"loc":{"lines":{"from":1,"to":13}}}}],["1",{"pageContent":"MISSION\nLike how blockchain democratizes finance like never before, APENFT, by turning top artists and art pieces into NFTs,\nnot only upgrades the way artworks are hosted, but also transforms them from being elite-exclusive items to something\nthat truly belongs to the people and mirrors their aspirations. APENFT is the art for everyone.","metadata":{"loc":{"lines":{"from":15,"to":18}}}}],["2",{"pageContent":"NFT TOKEN ERC721/TRC721\nAll NFT works will fulfill the ERC-721/TRC-721 contract and save the relevant information permanently in BTFS and other systems, which cannot be tampered.\nAPENFT OFFICIAL TOKEN\nContract Address has been issued on below public chains:\nAPENFT Contract on Tron:\nTFczxzPhnThNSqr5by8tvxsdCFRRz6cPNq\nAPENFT Contract on Ethereum:\n0x198d14f2ad9ce69e76ea330b374de4957c3f850a\nAPENFT Contract on Binance Smart Chain:\n0x20ee7b720f4e4c4ffcb00c4065cdae55271aecca\nAPENFT Contract on Huobi ECO Chain:\n0x1A5364F782DbED4f69043B02b5c3870a10C23Ed5\nAPENFT signed a strategic partnership with just.network. Check our NFT mapping release address on Ethereum: 0x198d14f2ad9ce69e76ea330b374de4957c3f850a\nReserve Address is: https://tronscan.io/#/address/TPAhuJkffadYymqiKDmKviFmgVrSACXC3P\nPlease pay attention to identify the contract address information and use the official addressed to participate in the governance of APENFT.\n\nABOUT US\nAbout APENFT(NFT) Token","metadata":{"loc":{"lines":{"from":20,"to":37}}}}],["3",{"pageContent":"ABOUT US\nAbout APENFT(NFT) Token\n\n\nAPENFT(NFT) token is the official governance token issued by APENFT Foundation. It is a decentralized digital asset that is backed by ERC-20/TRC-20 protocols, and serves as proof of rights on APENFT. NFT holders can vote, share profits, and receive NFT airdrops. The total supply of NFT is 999,990,000,000,000. Nowadays, NFT is traded on over 27 CEXs and DEXs including OKX, Huobi, Kucoin, Bybit, Uniswap, Pancakeswap and Sunswap.\n\nAPENFT Marketplace，as an important node for the foundation to lay out the NFT field，is a multichain metaverse gamefi and NFT trading platform, built on BSC,TRON and Ethereum layer-1 protocol with BTFS decentralized storage, and interoperable via BitTorrent Chain.This thriving platform will be an important support for the value of the NFT token.","metadata":{"loc":{"lines":{"from":37,"to":43}}}}],["4",{"pageContent":"A\nP\nE\nN\nF\nT\nW\nh\ni\nt\ne\nP\na\np\ne\nr\nV\n1\n.\n1\nM\na\ny\n2\n0\n2\n1","metadata":{"loc":{"lines":{"from":1,"to":27}}}}],["5",{"pageContent":"1\nF\no\nr\ne\nw\no\nr\nd\n:\nM\na\nk\ne\na\nr\nt\nw\no\nr\nk\ns\na\nc\nc\ne\ns\ns\ni\nb\nl\ne\nt\no\na\nl\nl\nA\nr\nt\ni\ns\nt\nh\ne\nw\ne\na\nl\nt\nh\no\nf\nm\na\nn\nk\ni\nn\nd\n,\ny\ne\nt\ni\nt\ni\ns\no\nf\nt\ne\nn\ni\nn\nt\nh\ne\nh\na\nn\nd\ns\no\nf\na\nf\ne\nw\n.\nT\no\ne\nn\ns\nu\nr\ne\ne\nq\nu\na\nl\na\nc\nc\ne\ns\ns\nt\no\na\nr\nt\nw\no\nr\nk\ns\n,\nw\ne\nn\ne\ne\nd\na\nb\ne\nt\nt\ne\nr\nt\nr\na\nd\ni\nn\ng\ns\ny\ns\nt\ne\nm\na\nn\nd\nt\nh\ne\ni\nn\nn\no\nv\na\nt\ni\no\nn\no\nf\nt\ne\nc\nh\nn\no\nl\no\ng\ny\n.\nT\nh\ne\nu\nn\np\nr\ne\nc\ne\nd\ne\nn\nt\ne\nd\nm\na\nr\nr\ni\na\ng\ne\nb\ne\nt\nw\ne\ne\nn\nb\nl\no\nc\nk\nc\nh\na\ni\nn\na\nn\nd\na\nr\nt\nw\no\nr\nk\ns\n,\nw\nh\ne\nr\ne\nN\nF\nT\nt\ne\nc\nh\nn\no\nl\no\ng\ny\ni\ns\na\np\nr\ni\nm\ne\nr\ne\np\nr\ne\ns\ne\nn\nt\na\nt\ni\nv\ne\n,\ni\ns\nr\ne\ns\nh\na\np\ni\nn\ng\nt\nh\ne\na\nr\nt\nw\no\nr\nl\nd\n,\nm\na\nk\ni\nn\ng\na\nr\nt\nw\no\nr\nk\ns\na\nc\nc\ne\ns\ns\ni\nb\nl\ne\na\ng\na\ni\nn\nf\no\nr\na\nl\nl\n.\nT\nh\ne\ng\nr\no\nw\ni\nn\ng\nm\na\nr\nk\ne\nt\ne\nc\no\nn\no\nm\ny\nh\na\ns\np\nu\ns\nh\ne\nd\nu\np\np\ne\no\np\nl\ne\n'\ns\nd\ne\nm\na\nn\nd\nf\no\nr\na\nr\nt\nw\no\nr\nk\ns\na\nn\nd\nm\na\nn\ny\no\nf\nt\nh\ne\nm\na\nr\ne\na\nl\nr\ne\na\nd\ny\nc\no\nl\nl\ne\nc\nt\ni\nn\ng\na\nr\nt\nw\no\nr\nk\ns\n.\nH\no\nw\ne\nv\ne\nr\n,\nt\nh\ne\ni\nn\nt\nr\ni\nn\ns\ni\nc\nd\nr\na\nw\nb\na\nc\nk\ns\nw\ni\nt\nh\nt\nh\ne\nt\nr\na\nd\ni\nt\ni\no\nn\na\nl\nt\nr\na\nd\ni\nn\ng\nm\na\nr\nk\ne\nt\nr\ne\nm\na\ni\nn\nu\nn\nr\ne","metadata":{"loc":{"lines":{"from":29,"to":527}}}}],["6",{"pageContent":"m\na\nr\ne\na\nl\nr\ne\na\nd\ny\nc\no\nl\nl\ne\nc\nt\ni\nn\ng\na\nr\nt\nw\no\nr\nk\ns\n.\nH\no\nw\ne\nv\ne\nr\n,\nt\nh\ne\ni\nn\nt\nr\ni\nn\ns\ni\nc\nd\nr\na\nw\nb\na\nc\nk\ns\nw\ni\nt\nh\nt\nh\ne\nt\nr\na\nd\ni\nt\ni\no\nn\na\nl\nt\nr\na\nd\ni\nn\ng\nm\na\nr\nk\ne\nt\nr\ne\nm\na\ni\nn\nu\nn\nr\ne\ns\no\nl\nv\ne\nd\na\nn\nd\nh\na\nv\ne\nt\nh\nu\ns\nc\na\nu\ns\ne\nd\ng\nr\ne\na\nt\nd\ni\nf\nf\ni\nc\nu\nl\nt\ny\nf\no\nr\nt\nh\ne\nm\na\ns\ns\ne\ns\nw\nh\no\nw\ni\ns\nh\nt\no\nt\nr\na\nd\ne\na\nr\nt\nw\no\nr\nk\ns\n.\nF\ni\nr\ns\nt\na\nn\nd\nf\no\nr\ne\nm\no\ns\nt\n,\no\nr\nd\ni\nn\na\nr\ny\np\ne\no\np\nl\ne\nc\na\nn\nn\no\nt\na\nf\nf\no\nr\nd\nt\no\np\nu\nr\nc\nh\na\ns\ne\na\nr\nt\nw\no\nr\nk\ns\n.\nA\nr\nt\ne\nn\nt\nh\nu\ns\ni\na\ns\nt\ns\nm\nu\ns\nt\nh\na\nv\ne\nt\nh\no\nu\ng\nh\nt\no\nf\nt\nh\ne\ni\nd\ne\na\no\nf\no\nw\nn\ni\nn\ng\nc\ne\nr\nt\na\ni\nn\na\nr\nt\np\ni\ne\nc\ne\ns\na\nt\no\nn\ne\np\no\ni\nn\nt\no\nr\na\nn\no\nt\nh\ne\nr\n.\nY\ne\nt\n,\nt\nh\ne\ne\nx\nt\nr\ne\nm\ne\ns\nc\na\nr\nc\ni\nt\ny\no\nf\np\nr\ne\nm\ni\nu\nm\na\nr\nt\nw\no\nr\nk\ns\nh\na\ns\nd\nr\ni\nv\ne\nn\nu\np\nt\nh\ne\np\nr\ni\nc\ne\ns\na\nt\na\nu\nc\nt\ni\no\nn\ns\nt\no\nr\ne\nc\no\nr\nd\nh\ni\ng\nh\ns\n.\nM\no\ns\nt\np\ne\no\np\nl\ne\na\nr\ne\nt\nh\ne\nr\ne\nf\no\nr\ne\nl\ne\nf\nt\nd\ni\ns\nc\no\nu\nr\na\ng\ne\nd\nb\ny\nt\nh\ne\ns\nt\na\ng\ng\ne\nr\ni\nn\ng\na\nm\no\nu\nn\nt\no\nf\nm\no\nn\ne\ny\n,\na\nn\nd\nd\ne\np\nr\ni\nv\ne\nd\no\nf\no\np\np\no\nr\nt\nu\nn\ni\nt\ni\ne\ns\no\nf\ne\nn\nj\no\ny\ni","metadata":{"loc":{"lines":{"from":527,"to":1026}}}}],["7",{"pageContent":"M\no\ns\nt\np\ne\no\np\nl\ne\na\nr\ne\nt\nh\ne\nr\ne\nf\no\nr\ne\nl\ne\nf\nt\nd\ni\ns\nc\no\nu\nr\na\ng\ne\nd\nb\ny\nt\nh\ne\ns\nt\na\ng\ng\ne\nr\ni\nn\ng\na\nm\no\nu\nn\nt\no\nf\nm\no\nn\ne\ny\n,\na\nn\nd\nd\ne\np\nr\ni\nv\ne\nd\no\nf\no\np\np\no\nr\nt\nu\nn\ni\nt\ni\ne\ns\no\nf\ne\nn\nj\no\ny\ni\nn\ng\nt\nh\ne\nv\na\nl\nu\ne\na\np\np\nr\ne\nc\ni\na\nt\ni\no\nn\no\nf\nt\nh\ne\na\nr\nt\nw\no\nr\nk\nm\na\nr\nk\ne\nt\n.\nS\ne\nc\no\nn\nd\n,\ne\nx\np\ne\nr\nt\ns\nf\ni\nn\nd\ni\nt\nd\ni\nf\nf\ni\nc\nu\nl\nt\nt\no\nt\ne\nl\nl\nr\ne\na\nl\na\nr\nt\nw\no\nr\nk\ns\nf\nr\no\nm\nc\no\nu\nn\nt\ne\nr\nf\ne\ni\nt\ns\n.\nP\nr\ne\nv\ni\no\nu\ns\nl\ny\ne\nx\np\ne\nr\nt\ns\nu\ns\nu\na\nl\nl\ny\nd\ni\ns\nt\ni\nn\ng\nu\ni\ns\nh\nr\ne\na\nl\na\nr\nt\np\ni\ne\nc\ne\ns\nb\ny\na\ns\ns\ne\ns\ns\ni\nn\ng\nt\nh\ne\nc\no\nm\nm\no\nn\np\nr\na\nc\nt\ni\nc\ne\ns\no\nf\nt\nh\ne\ni\nr\nc\nr\ne\na\nt\no\nr\ns\na\nn\nd\nt\nh\ne\nt\no\nu\nc\nh\no\nf\np\na\np\ne\nr\ns\n,\nb\nu\nt\nr\na\np\ni\nd\na\nd\nv\na\nn\nc\ne\nm\ne\nn\nt\ni\nn\nf\na\nb\nr\ni\nc\na\nt\ni\no\nn\nt\ne\nc\nh\nn\no\nl\no\ng\ny\nh\na\ns\nm\na\nd\ne\ni\nt\ne\nv\ne\nn\nh\na\nr\nd\ne\nr\nf\no\nr\np\nr\no\nf\ne\ns\ns\ni\no\nn\na\nl\ns\nt\no\nd\no\ns\no\n,\nt\nh\ne\nr\ne\nb\ny\nc\no\nm\np\nr\no\nm\ni\ns\ni\nn\ng\nt\nh\ne\nt\nr\nu\ns\nt\na\nn\nd\na\nu\nt\nh\ne\nn\nt\ni\nc\ni\nt\ny\no\nf\nt\nh\ne\nm\na\nr\nk\ne\nt\n.\nB\ne\ns\ni\nd\ne\ns\n,\nt\nr\na\nn\ns\na\nc\nt\ni\no\nn\ns\ni\nn\nt\nh\ne\na\nr\nt\nm\na\nr\nk\ne\nt\na\nr\ne\np\nr\ni\nv\na\nt\ne\na","metadata":{"loc":{"lines":{"from":1026,"to":1525}}}}],["8",{"pageContent":",\nt\nh\ne\nr\ne\nb\ny\nc\no\nm\np\nr\no\nm\ni\ns\ni\nn\ng\nt\nh\ne\nt\nr\nu\ns\nt\na\nn\nd\na\nu\nt\nh\ne\nn\nt\ni\nc\ni\nt\ny\no\nf\nt\nh\ne\nm\na\nr\nk\ne\nt\n.\nB\ne\ns\ni\nd\ne\ns\n,\nt\nr\na\nn\ns\na\nc\nt\ni\no\nn\ns\ni\nn\nt\nh\ne\na\nr\nt\nm\na\nr\nk\ne\nt\na\nr\ne\np\nr\ni\nv\na\nt\ne\na\nn\nd\na\nm\nb\ni\ng\nu\no\nu\ns\ni\nn\nn\na\nt\nu\nr\ne\n,\nm\na\nk\ni\nn\ng\nt\nh\ne\na\nu\nt\nh\ne\nn\nt\ni\nc\na\nt\ni\no\nn\no\nf\na\nr\nt\nw\no\nr\nk\ns\ne\nv\ne\nn\nh\na\nr\nd\ne\nr\n.\nF\ni\nn\na\nl\nl\ny\n,\nt\nr\na\nn\ns\na\nc\nt\ni\no\nn\ns\na\nr\ne\nn\no\nt\nt\nr\na\nn\ns\np\na\nr\ne\nn\nt\n.\nI\nn\nt\nh\ne\nt\nr\na\nd\ni\nt\ni\no\nn\na\nl\na\nr\nt\nm\na\nr\nk\ne\nt\nw\nh\ne\nr\ne\nt\nr\na\nn\ns\na\nc\nt\ni\no\nn\ns\na\nr\ne\ni\nn\nv\ni\ns\ni\nb\nl\ne\n,\nn\ne\ni\nt\nh\ne\nr\nt\nh\ne\nb\nu\ny\ne\nr\no\nr\ns\ne\nl\nl\ne\nr\nc\na\nn\ng\ne\nt\na\nc\nc\nu\nr\na\nt\ne\ni\nn\nf\no\nr\nm\na\nt\ni\no\nn\n,\nw\nh\ni\nc\nh\ni\ns\no\nn\nl\ny\na\nv\na\ni\nl\na\nb\nl\ne\nt\nh\nr\no\nu\ng\nh\nt\nh\ni\nr\nd\n-\np\na\nr\nt\ny\na\ng\ne\nn\nc\ni\ne\ns\n.\nT\nh\ni\ns\nm\na\nk\ne\ns\nb\no\nt\nh\ns\ni\nd\ne\ns\np\na\ns\ns\ni\nv\ne\nt\nh\nr\no\nu\ng\nh\no\nu\nt\nt\nh\ne\nt\nr\na\nn\ns\na\nc\nt\ni\no\nn\n.\nM\no\nn\ne\ny\na\nn\nd\nt\nh\ne\na\nr\nt\nw\no\nr\nk\nm\nu\ns\nt\ng\no\nt\nh\nr\no\nu\ng\nh\nt\nh\ne\ni\nn\nt\ne\nr\nm\ne\nd\ni\na\nr\ny\ns\ne\nv\ne\nr\na\nl\nt\ni\nm\ne\ns\nb\ne\nf\no\nr\ne\nr\ne\na\nc\nh\ni\nn\ng\nt\nh\ne\ne\nn\nd\nr\ne\nc\ne\ni\nv\ne\nr\ns\n,\nw\nh\ni\nc\nh\ne\nn\na\nb","metadata":{"loc":{"lines":{"from":1525,"to":2024}}}}],["9",{"pageContent":"o\nn\n.\nM\no\nn\ne\ny\na\nn\nd\nt\nh\ne\na\nr\nt\nw\no\nr\nk\nm\nu\ns\nt\ng\no\nt\nh\nr\no\nu\ng\nh\nt\nh\ne\ni\nn\nt\ne\nr\nm\ne\nd\ni\na\nr\ny\ns\ne\nv\ne\nr\na\nl\nt\ni\nm\ne\ns\nb\ne\nf\no\nr\ne\nr\ne\na\nc\nh\ni\nn\ng\nt\nh\ne\ne\nn\nd\nr\ne\nc\ne\ni\nv\ne\nr\ns\n,\nw\nh\ni\nc\nh\ne\nn\na\nb\nl\ne\ns\nt\nh\ne\nt\nh\ni\nr\nd\n-\np\na\nr\nt\ny\nt\no\np\no\nc\nk\ne\nt\nh\nu\ng\ne\np\nr\no\nf\ni\nt\n.\nT\nh\ne\na\nr\nt\nw\no\nr\nk\ni\ns\nh\ne\nn\nc\ne\no\nv\ne\nr\np\nr\ni\nc\ne\nd\na\nn\nd\nt\nh\ne\nm\na\nr\nk\ne\nt\nb\ne\nc\no\nm\ne\ns\ni\nr\nr\ne\ng\nu\nl\na\nr\ni\nn\nt\nh\ne\np\nr\no\nc\ne\ns\ns\n.","metadata":{"loc":{"lines":{"from":2024,"to":2227}}}}],["10",{"pageContent":"2\nT\nh\ne\na\nd\nv\ne\nn\nt\na\nn\nd\na\nd\nv\na\nn\nc\ne\ns\no\nf\nb\nl\no\nc\nk\nc\nh\na\ni\nn\nt\ne\nc\nh\nn\no\nl\no\ng\ny\na\nd\nd\nr\ne\ns\ns\ne\ns\nt\nh\ne\nm\no\ns\nt\ni\nm\np\no\nr\nt\na\nn\nt\ni\ns\ns\nu\ne\ni\nn\nh\nu\nm\na\nn\nh\ni\ns\nt\no\nr\ny\n—\nt\nr\nu\ns\nt\ni\nn\ne\nq\nu\ni\nv\na\nl\ne\nn\nt\ne\nx\nc\nh\na\nn\ng\ne\ns\n,\nt\nh\na\nn\nk\ns\nt\no\ni\nt\ns\nm\na\nn\ny\na\nd\nv\na\nn\nt\na\ng\ne\ns\ns\nu\nc\nh\na\ns\n“\nd\ne\nc\ne\nn\nt\nr\na\nl\ni\nz\ne\nd\n”\nd\na\nt\na\ns\nt\no\nr\na\ng\ne\n,\no\np\ne\nn\na\nn\nd\nt\nr\na\nn\ns\np\na\nr\ne\nn\nt\ni\nn\nf\no\nr\nm\na\nt\ni\no\nn\nt\nh\na\nt\nc\na\nn\nn\no\nt\nb\ne\nt\na\nm\np\ne\nr\ne\nd\nw\ni\nt\nh\n,\nd\na\nt\na\ns\ne\nc\nu\nr\ni\nt\ny\n,\na\nn\nd\nl\no\nw\nc\no\ns\nt\n,\ne\nt\nc\n.\nT\nh\ne\na\np\np\nl\ni\nc\na\nt\ni\no\nn\no\nf\nb\nl\no\nc\nk\nc\nh\na\ni\nn\nt\ne\nc\nh\nn\no\nl\no\ng\ny\ni\nn\nt\nh\ne\na\nr\nt\nw\no\nr\nk\nm\na\nr\nk\ne\nt\ni\ns\ng\ni\nv\ni\nn\ng\nb\ni\nr\nt\nh\nt\no\na\nd\ni\ng\ni\nt\na\nl\nr\ne\nv\no\nl\nu\nt\ni\no\nn\ni\nn\na\nr\nt\n.\nF\ni\nr\ns\nt\n,\nt\nh\ne\ns\nh\na\nr\ni\nn\ng\nm\ne\nc\nh\na\nn\ni\ns\nm\no\nf\nt\nh\ne\nd\ni\ng\ni\nt\na\nl\ne\nc\no\nn\no\nm\ny\ni\ns\ni\nn\nt\ne\ng\nr\na\nt\ne\nd\ni\nn\nt\no\nt\nh\ne\na\nr\nt\nw\no\nr\nk\nm\na\nr\nk\ne\nt\n.\nB\nl\no\nc\nk\nc\nh\na\ni\nn\nt\ne\nc\nh\nn\no\nl\no\ng\ny\ni\ns\na\nb\nl\ne\nt\no\ng\ni\nv\ne\na\ns\ne\nc\no\nn\nd\nl\ni\nf\ne\nt\no\na\nr\nt\nw\no\nr\nk\ns\ni\nn\nt\nh\ne\nd\ni\ng\ni\nt\na\nl\nw\no\nr\nl\nd\n.\nT\nh\ni","metadata":{"loc":{"lines":{"from":2229,"to":2727}}}}],["11",{"pageContent":"r\na\nt\ne\nd\ni\nn\nt\no\nt\nh\ne\na\nr\nt\nw\no\nr\nk\nm\na\nr\nk\ne\nt\n.\nB\nl\no\nc\nk\nc\nh\na\ni\nn\nt\ne\nc\nh\nn\no\nl\no\ng\ny\ni\ns\na\nb\nl\ne\nt\no\ng\ni\nv\ne\na\ns\ne\nc\no\nn\nd\nl\ni\nf\ne\nt\no\na\nr\nt\nw\no\nr\nk\ns\ni\nn\nt\nh\ne\nd\ni\ng\ni\nt\na\nl\nw\no\nr\nl\nd\n.\nT\nh\ni\ns\ni\ns\na\nc\nh\ni\ne\nv\ne\nd\nb\ny\nm\na\np\np\ni\nn\ng\nt\nh\ne\nd\ni\ng\ni\nt\na\nl\nc\no\nn\nt\ne\nn\nt\no\nf\na\nn\ny\na\nr\nt\np\ni\ne\nc\ne\no\nn\nt\no\nb\nl\no\nc\nk\nc\nh\na\ni\nn\ns\nt\no\nf\no\nr\nm\nu\nn\ni\nq\nu\ne\nd\ni\ng\ni\nt\na\nl\nc\no\nl\nl\ne\nc\nt\ni\nb\nl\ne\ns\no\nf\na\ns\ns\ne\nt\nn\na\nt\nu\nr\ne\n.\nI\nn\nt\nh\ni\ns\nc\na\ns\ne\n,\nN\nF\nT\ni\ns\nt\nh\ne\na\ns\ns\ne\nt\ne\nn\nt\ni\nt\ny\no\nf\nt\nh\ne\nd\ni\ng\ni\nt\na\nl\nc\no\nn\nt\ne\nn\nt\n,\nw\nh\ni\nc\nh\ne\nf\nf\ne\nc\nt\ni\nv\ne\nl\ny\ne\nn\na\nb\nl\ne\ns\nv\na\nl\nu\ne\ne\nx\nc\nh\na\nn\ng\ne\no\nf\nd\ni\ng\ni\nt\na\nl\nc\no\nn\nt\ne\nn\nt\n,\ne\nx\nt\ne\nn\nd\ni\nn\ng\nt\nh\ne\nb\ne\nn\ne\nf\ni\nt\ns\nw\ni\nt\nh\na\nw\ni\nd\ne\nr\np\no\np\nu\nl\na\nt\ni\no\nn\n,\na\nn\nd\nl\ni\nb\ne\nr\na\nt\ni\nn\ng\nb\no\nt\nh\nt\nh\ne\np\nr\no\nd\nu\nc\nt\ni\nv\ne\nf\no\nr\nc\ne\ns\na\nn\nd\nt\nh\ne\nr\ne\nl\na\nt\ni\no\nn\ns\no\nf\np\nr\no\nd\nu\nc\nt\ni\no\nn\ni\nn\nt\nh\ne\na\nr\nt\ni\nn\nd\nu\ns\nt\nr\ny\n.\nS\ne\nc\no\nn\nd\n,\na\nn\na\nr\nt\nm\na\nr\nk\ne\nt\nb\na\ns\ne\nd\no\nn\nt\nr\nu\ns\nt\na\nm\no\nn\ng\nm\na\nc\nh\ni\nn\ne\ns\ni\ns\ne\ns\nt\na\nb\nl\ni\ns\nh\ne\nd\n.\nI\nn\nf\no\nr\nm\na\nt\ni","metadata":{"loc":{"lines":{"from":2727,"to":3226}}}}],["12",{"pageContent":"t\ni\no\nn\ns\no\nf\np\nr\no\nd\nu\nc\nt\ni\no\nn\ni\nn\nt\nh\ne\na\nr\nt\ni\nn\nd\nu\ns\nt\nr\ny\n.\nS\ne\nc\no\nn\nd\n,\na\nn\na\nr\nt\nm\na\nr\nk\ne\nt\nb\na\ns\ne\nd\no\nn\nt\nr\nu\ns\nt\na\nm\no\nn\ng\nm\na\nc\nh\ni\nn\ne\ns\ni\ns\ne\ns\nt\na\nb\nl\ni\ns\nh\ne\nd\n.\nI\nn\nf\no\nr\nm\na\nt\ni\no\nn\nr\ne\nl\na\nt\ni\nn\ng\nt\no\na\nn\na\nr\nt\nw\no\nr\nk\ns\nu\nc\nh\na\ns\ni\nt\ns\ns\no\nu\nr\nc\ne\n,\nk\ne\ny\nd\ne\nt\na\ni\nl\ns\n,\nd\ne\nl\ni\nv\ne\nr\ny\np\nr\no\nc\ne\ns\ns\na\nn\nd\nt\nr\na\nn\ns\na\nc\nt\ni\no\nn\nh\ni\ns\nt\no\nr\ny\nw\ni\nl\nl\nb\ne\nd\ni\ng\ni\nt\na\nl\ni\nz\ne\nd\na\nn\nd\ns\nt\no\nr\ne\nd\ni\nn\nt\nh\ne\nb\nl\no\nc\nk\nc\nh\na\ni\nn\n-\nb\na\ns\ne\nd\nt\nr\na\nd\ni\nn\ng\ns\ny\ns\nt\ne\nm\n.\nO\nn\nc\ne\ni\nt\ni\ns\nd\no\nn\ne\n,\na\nl\nl\nt\nh\ne\ni\nn\nf\no\nr\nm\na\nt\ni\no\nn\nw\ni\nl\nl\nb\ne\ni\nm\nm\nu\nt\na\nb\nl\ne\na\nn\nd\nu\nn\nf\no\nr\ng\ne\na\nb\nl\ne\n,\nw\nh\ni\nc\nh\nc\na\nn\ne\nf\nf\ne\nc\nt\ni\nv\ne\nl\ny\np\nr\ne\nv\ne\nn\nt\nc\no\nu\nn\nt\ne\nr\nf\ne\ni\nt\na\nr\nt\nw\no\nr\nk\ns\na\nn\nd\nf\nr\na\nu\nd\ns\n.\nU\nn\nd\ne\nr\np\ni\nn\nn\ne\nd\nb\ny\nt\nr\nu\ns\nt\n,\nt\nh\ne\na\nr\nt\nm\na\nr\nk\ne\nt\ni\ns\nm\no\nr\ne\ns\ne\nc\nu\nr\ne\n,\no\nf\nf\ne\nr\ni\nn\ng\nb\ne\nn\ne\nf\ni\nt\ns\nt\no\nc\no\nl\nl\ne\nc\nt\no\nr\ns\na\nn\nd\no\nt\nh\ne\nr\ns\nt\na\nk\ne\nh\no\nl\nd\ne\nr\ns\nf\nr\no\nm\na\nr\nt\nm\nu\ns\ne\nu\nm\ns\n,\ng\na\nl\nl\ne\nr\ni\ne\ns\n,\na\nn\nd\na\nu\nc\nt\ni\no\nn\nh\no\nu\ns\ne\ns\n.\nT\nh\ni\nr\nd\n,","metadata":{"loc":{"lines":{"from":3226,"to":3725}}}}],["13",{"pageContent":"u\nr\ne\n,\no\nf\nf\ne\nr\ni\nn\ng\nb\ne\nn\ne\nf\ni\nt\ns\nt\no\nc\no\nl\nl\ne\nc\nt\no\nr\ns\na\nn\nd\no\nt\nh\ne\nr\ns\nt\na\nk\ne\nh\no\nl\nd\ne\nr\ns\nf\nr\no\nm\na\nr\nt\nm\nu\ns\ne\nu\nm\ns\n,\ng\na\nl\nl\ne\nr\ni\ne\ns\n,\na\nn\nd\na\nu\nc\nt\ni\no\nn\nh\no\nu\ns\ne\ns\n.\nT\nh\ni\nr\nd\n,\na\nt\nr\na\nn\ns\np\na\nr\ne\nn\nt\na\nn\nd\no\np\ne\nn\nt\nr\na\nd\ni\nn\ng\ns\ny\ns\nt\ne\nm\ni\ns\nc\nr\ne\na\nt\ne\nd\n.\nB\nl\no\nc\nk\nc\nh\na\ni\nn\nd\na\nt\na\ni\ns\nv\ni\ns\ni\nb\nl\ne\nt\no\nu\ns\ne\nr\ns\nw\no\nr\nl\nd\n-\nw\ni\nd\ne\na\nn\nd\na\nc\nc\ne\ns\ns\ni\nb\nl\ne\nt\no\nc\ne\nn\nt\nr\na\nl\nm\na\nn\na\ng\ne\nm\ne\nn\nt\ns\ny\ns\nt\ne\nm\ns\na\nn\nd\nd\na\nt\na\nb\na\ns\ne\nc\na\nt\na\nl\no\ng\ns\n.\nE\nv\ne\nr\ny\nu\ns\ne\nr\ni\ns\nt\nh\ne\nw\ni\nt\nn\ne\ns\ns\nt\no\nt\nr\na\nn\ns\na\nc\nt\ni\no\nn\ns\n,\nw\nh\ni\nc\nh\ne\nn\ns\nu\nr\ne\ns\nh\ni\ng\nh\nt\nr\na\nn\ns\np\na\nr\ne\nn\nc\ny\ni\nn\nt\nh\ne\ns\ny\ns\nt\ne\nm\n.\nT\nh\ne\nr\ne\nf\no\nr\ne\n,\nt\nh\ne\na\nr\nt\nm\na\nr\nk\ne\nt\nw\ni\nl\nl\nb\ne\nf\na\ni\nr\ne\nr\na\nn\nd\ne\nv\ne\nr\nm\no\nr\ne\nr\no\nb\nu\ns\nt\n,\na\nt\nt\nr\na\nc\nt\ni\nn\ng\nm\no\nr\ne\na\nr\nt\ni\ns\nt\ns\n,\nc\no\nl\nl\ne\nc\nt\no\nr\ns\n,\nd\ne\na\nl\ne\nr\ns\n,\na\nn\nd\nm\na\nj\no\nr\na\nr\nt\ni\nn\ns\nt\ni\nt\nu\nt\ni\no\nn\ns\n.\nT\nh\ne\nr\ni\ns\ne\no\nf\nN\nF\nT\ni\ns\na\np\nr\ni\nm\ne\ne\nx\na\nm\np\nl\ne\no\nf\nt\nh\ne\nm\na\nr\nr\ni\na\ng\ne\nb\ne\nt\nw\ne\ne\nn\nb\nl\no\nc\nk\nc\nh\na\ni\nn\na\nn\nd\na\nr\nt\n,\na\nt","metadata":{"loc":{"lines":{"from":3725,"to":4224}}}}],["14",{"pageContent":"s\n,\nd\ne\na\nl\ne\nr\ns\n,\na\nn\nd\nm\na\nj\no\nr\na\nr\nt\ni\nn\ns\nt\ni\nt\nu\nt\ni\no\nn\ns\n.\nT\nh\ne\nr\ni\ns\ne\no\nf\nN\nF\nT\ni\ns\na\np\nr\ni\nm\ne\ne\nx\na\nm\np\nl\ne\no\nf\nt\nh\ne\nm\na\nr\nr\ni\na\ng\ne\nb\ne\nt\nw\ne\ne\nn\nb\nl\no\nc\nk\nc\nh\na\ni\nn\na\nn\nd\na\nr\nt\n,\na\nt\nt\nr\na\nc\nt\ni\nn\ng\nu\nn\np\nr\ne\nc\ne\nd\ne\nn\nt\ne\nd\np\nu\nb\nl\ni\nc\na\nt\nt\ne\nn\nt\ni\no\nn\n.\nI\nn\nt\nh\ne\nf\no\nr\ne\ns\ne\ne\na\nb\nl\ne\nf\nu\nt\nu\nr\ne\n,\nt\nh\ne\nN\nF\nT\nb\no\no\nm\nw\ni\nl\nl\nc\no\nn\nt\ni\nn\nu\ne\nt\no\ng\nr\no\nw\na\nn\nd\nt\nr\na\nn\ns\nf\no\nr\nm\nt\nh\ne\nw\na\ny\nh\no\nw\nc\no\nn\nc\ne\np\nt\ns\na\nn\nd\nv\na\nl\nu\ne\ns\na\nr\ne\ne\nx\nc\nh\na\nn\ng\ne\nd\nb\ne\nt\nw\ne\ne\nn\nb\nl\no\nc\nk\nc\nh\na\ni\nn\na\nn\nd\nt\nh\ne\nr\ne\na\nl\nw\no\nr\nl\nd\n.\nI\nn\n2\n0\n2\n0\n,\nt\nh\ne\no\nv\ne\nr\na\nl\nl\nt\nr\na\nd\ni\nn\ng\nv\na\nl\nu\ne\no\nf\nN\nF\nT\nt\nr\ni\np\nl\ne\nd\n,\nr\ne\na\nc\nh\ni\nn\ng\n$\n2\n5\n0\nm\ni\nl\nl\ni\no\nn\n.\nI\nn\nM\na\nr\nc\nh\n2\n0\n2\n1\na\nl\no\nn\ne\n,\nt\nh\ne\nt\no\nt\na\nl\ns\na\nl\ne\ns\no\nf\nN\nF\nT\ns\nu\nr\np\na\ns\ns\ne\nd\n$\n2\n2\n0\nm\ni\nl\nl\ni\no\nn\n.\nI\nt\ni\ns\np\nr\ne\nd\ni\nc\nt\ne\nd\nt\nh\na\nt\ni\nn\nt\nh\ne\nn\ne\nx\nt\nd\ne\nc\na\nd\ne\n,\n5\n0\n%\no\nf\nt\nh\ne\nt\no\np\n1\n0\n0\na\nr\nt\ni\ns\nt\ns\na\nn\nd\na\nr\nt\nw\no\nr\nk\ns\ni\nn\nt\nh\ne\nw\no\nr\nl\nd\nw\ni\nl\nl\nb\ne\nr\ne\ng\ni\ns\nt\ne\nr\ne\nd\na\ns\nN\nF\nT\ns\n.\nT\nh\ne\nf\nl\na\nr\ni\nn\ng\nN\nF\nT","metadata":{"loc":{"lines":{"from":4224,"to":4723}}}}],["15",{"pageContent":"e\nd\nt\nh\na\nt\ni\nn\nt\nh\ne\nn\ne\nx\nt\nd\ne\nc\na\nd\ne\n,\n5\n0\n%\no\nf\nt\nh\ne\nt\no\np\n1\n0\n0\na\nr\nt\ni\ns\nt\ns\na\nn\nd\na\nr\nt\nw\no\nr\nk\ns\ni\nn\nt\nh\ne\nw\no\nr\nl\nd\nw\ni\nl\nl\nb\ne\nr\ne\ng\ni\ns\nt\ne\nr\ne\nd\na\ns\nN\nF\nT\ns\n.\nT\nh\ne\nf\nl\na\nr\ni\nn\ng\nN\nF\nT\nt\nr\na\nd\ni\nn\ng\nm\na\nr\nk\ne\nt\ni\ns\nc\na\nl\nl\ni\nn\ng\nf\no\nr\nt\nh\ne\nf\no\nu\nn\nd\ni\nn\ng\no\nf\nA\nP\nE\nN\nF\nT\n,\nw\nh\no\ns\ne\nm\ni\ns\ns\ni\no\nn\ni\ns\nt\no\nr\ne\ng\ni\ns\nt\ne\nr\nw\no\nr\nl\nd\n-\nc\nl\na\ns\ns\na\nr\nt\nw\no\nr\nk\ns\na\ns\nN\nF\nT\ns\no\nn\n-\nc\nh\na\ni\nn\na\nn\nd\nb\ne\nt\nh\ne\nA\nR\nK\nF\nu\nn\nd\ns","metadata":{"loc":{"lines":{"from":4723,"to":4940}}}}],["16",{"pageContent":"3\ni\nn\nt\nh\ne\nN\nF\nT\ns\np\na\nc\ne\n.\nA\nP\nE\nN\nF\nT\na\ni\nm\ns\nt\no\nb\nu\ni\nl\nd\na\nb\nr\ni\nd\ng\ne\nb\ne\nt\nw\ne\ne\nn\nt\no\np\n-\nn\no\nt\nc\nh\na\nr\nt\ni\ns\nt\ns\na\nn\nd\nb\nl\no\nc\nk\nc\nh\na\ni\nn\na\nn\nd\ns\nu\np\np\no\nr\nt\nt\nh\ne\ng\nr\no\nw\nt\nh\no\nf\nn\na\nt\ni\nv\ne\nc\nr\ny\np\nt\no\nN\nF\nT\na\nr\nt\ni\ns\nt\ns\n.\nT\nh\ni\ns\ni\ns\nt\nh\ne\ni\nd\ne\na\nb\ne\nh\ni\nn\nd\nA\nP\nE\nN\nF\nT\n.\nA\nn\ne\nx\nc\ne\nl\nl\ne\nn\nt\nt\ne\na\nm\ng\na\nt\nh\ne\nr\ns\ne\nx\nc\ne\nl\nl\ne\nn\nt\np\ne\no\np\nl\ne\n.\nA\nP\nE\nN\nF\nT\n’\ns\nt\ne\na\nm\nm\ne\nm\nb\ne\nr\ns\nc\no\nm\ne\nf\nr\no\nm\nw\no\nr\nl\nd\n-\nr\ne\nn\no\nw\nn\ne\nd\na\nu\nc\nt\ni\no\nn\nh\no\nu\ns\ne\ns\ns\nu\nc\nh\na\ns\nC\nh\nr\ni\ns\nt\ni\ne\n’\ns\na\nn\nd\nS\no\nt\nh\ne\nb\ny\n’\ns\nw\nh\no\na\nr\ne\na\nl\ns\no\na\nc\nt\ni\nv\ne\ni\nn\nt\nh\ne\nN\nF\nT\ni\nn\nd\nu\ns\nt\nr\ny\n.\nO\nu\nr\nm\ne\nm\nb\ne\nr\ns\nh\na\nv\ne\nr\ni\nc\nh\ne\nx\np\ne\nr\ni\ne\nn\nc\ne\ni\nn\nb\no\nt\nh\nt\nr\na\nd\ni\nt\ni\no\nn\na\nl\na\nn\nd\nd\ni\ng\ni\nt\na\nl\na\nr\nt\ns\n.\nT\nh\ne\ni\nr\np\na\nr\nt\ni\nc\ni\np\na\nt\ni\no\nn\nw\ni\nl\nl\ne\nn\na\nb\nl\ne\nu\ns\nt\no\nk\ne\ne\np\nd\ni\ns\nc\no\nv\ne\nr\ni\nn\ng\nN\nF\nT\na\nr\nt\ni\ns\nt\ns\na\nr\no\nu\nn\nd\nt\nh\ne\nw\no\nr\nl\nd\n,\nb\ne\nt\nt\ne\nr\ne\nm\np\no\nw\ne\nr\nA\nP\nE\nN\nF\nT\n,\na\nn\nd\nf\nu\ne\nl\nA\nP\nE\nN\nF\nT\n’\ns\nr\ni\ns\ne\ni\nn\nt\nh\ne\nc\nr\ny\np\nt\no\na\nr\nt\nw\no\nr\nl\nd\n.\nR\ne\ng\ni\ns\nt\ne\nr\ni\nn","metadata":{"loc":{"lines":{"from":4942,"to":5440}}}}],["17",{"pageContent":"v\ne\nr\ni\nn\ng\nN\nF\nT\na\nr\nt\ni\ns\nt\ns\na\nr\no\nu\nn\nd\nt\nh\ne\nw\no\nr\nl\nd\n,\nb\ne\nt\nt\ne\nr\ne\nm\np\no\nw\ne\nr\nA\nP\nE\nN\nF\nT\n,\na\nn\nd\nf\nu\ne\nl\nA\nP\nE\nN\nF\nT\n’\ns\nr\ni\ns\ne\ni\nn\nt\nh\ne\nc\nr\ny\np\nt\no\na\nr\nt\nw\no\nr\nl\nd\n.\nR\ne\ng\ni\ns\nt\ne\nr\ni\nn\ng\na\nr\nt\nw\no\nr\nk\ns\na\ns\nN\nF\nT\ns\nu\ns\nh\ne\nr\ns\ni\nn\na\nn\ne\nw\ne\nr\na\nw\nh\ne\nr\ne\nt\nr\na\nd\ni\nt\ni\no\nn\na\nl\na\nr\nt\nw\no\nr\nk\ns\na\nr\ne\na\nl\ni\ng\nn\ne\nd\nw\ni\nt\nh\nc\nr\ny\np\nt\no\nt\ne\nc\nh\nn\no\nl\no\ng\ny\n.\nI\nt\ni\ns\nj\nu\ns\nt\nt\nh\ne\nb\ne\ng\ni\nn\nn\ni\nn\ng\no\nf\na\ns\np\nl\ne\nn\nd\ni\nd\nc\nh\na\np\nt\ne\nr\nw\ni\nt\nh\nt\nh\ne\nf\no\nu\nn\nd\ni\nn\ng\no\nf\nA\nP\nE\nN\nF\nT\na\ns\nt\nh\ne\np\nr\ne\nl\nu\nd\ne\n.\nA\ng\nr\ne\na\nt\nj\no\nu\nr\nn\ne\ny\nw\nh\ne\nr\ne\n“\na\nr\nt\nw\no\nr\nk\ns\na\nr\ne\na\nc\nc\ne\ns\ns\ni\nb\nl\ne\nf\no\nr\na\nl\nl\n”\nh\na\ns\nn\no\nw\nb\ne\ng\nu\nn\n.","metadata":{"loc":{"lines":{"from":5440,"to":5757}}}}],["18",{"pageContent":"-\n1\n-\nT\na\nb\nl\ne\no\nf\nC\no\nn\nt\ne\nn\nt\ns\nF\no\nr\ne\nw\no\nr\nd\n:\nM\na\nk\ne\na\nr\nt\nw\no\nr\nk\ns\na\nc\nc\ne\ns\ns\ni\nb\nl\ne\nt\no\na\nl\nl\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\nI\n1\n.\nT\nh\ne\nD\ne\nv\ne\nl\no\np\nm\ne\nn\nt\no\nf\nN\nF\nT\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n1\n1\n.\n1\n.\nW\nh\na\nt\ni\ns\nN\nF\nT\n?\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n1\n1\n.\n2\n.\nV\na\nl\nu\ne\no\nf\nN\nF\nT\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n2\n1\n.\n2\n.\n1\n.\nN\nF\nT\nr\ne\nv\no\nl\nu\nt\ni\no\nn\ni\nz\ne\nd\nt\nh\ne\nt\nr\na\nd\ni\nt\ni\no\nn\na\nl\nf\ni\nn\ne\na\nr\nt\nt\nr\na\nd\ni\nn\ng\nm\no\nd","metadata":{"loc":{"lines":{"from":5759,"to":6257}}}}],["19",{"pageContent":".\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n2\n1\n.\n2\n.\n1\n.\nN\nF\nT\nr\ne\nv\no\nl\nu\nt\ni\no\nn\ni\nz\ne\nd\nt\nh\ne\nt\nr\na\nd\ni\nt\ni\no\nn\na\nl\nf\ni\nn\ne\na\nr\nt\nt\nr\na\nd\ni\nn\ng\nm\no\nd\ne\nl\ns\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n2\n1\n.\n2\n.\n2\n.\nI\nn\nn\no\nv\na\nt\ni\nv\ne\nc\ni\nr\nc\nu\nl\na\nt\ni\no\nn\n,\nc\no\nl\nl\ne\nc\nt\ni\nn\ng\n,\nu\ns\ne\na\nn\nd\nf\nl\ne\nx\ni\nb\ni\nl\ni\nt\ny\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n3\n1\n.\n2\n.\n3\n.\nA\nc\nh\ni\ne\nv\ni\nn\ng\na\nr\nt\nw\no\nr\nk\nt\nr\na\nc\ne\na\nb\ni\nl\ni\nt\ny\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n4\n1\n.\n2\n.\n4\n.\nB\nu\ni\nl\nd\ni\nn\ng\na\nn\ne\nw\ni\nn\nc\nr\ne\nm\ne\nn\nt\na\nl\na\nr\nt\nm\na\nr\nk\ne\nt\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n4\n1\n.\n3\n.\nN\nF\nT\nt\no\nd\na\ny\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.","metadata":{"loc":{"lines":{"from":6257,"to":6756}}}}],["20",{"pageContent":".\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n4\n1\n.\n3\n.\nN\nF\nT\nt\no\nd\na\ny\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n5\n1\n.\n3\n.\n1\n.\nP\no\nl\ni\nc\ny\n:\nB\nl\no\nc\nk\nc\nh\na\ni\nn\nt\ne\nc\nh\nn\no\nl\no\ng\ny\ni\ns\nb\ne\nc\no\nm\ni\nn\ng\na\nn\ne\nw\nh\ni\ng\nh\ng\nr\no\nu\nn\nd\ni\nn\ng\nl\no\nb\na\nl\nc\no\nm\np\ne\nt\ni\nt\ni\no\nn\n5\n1\n.\n3\n.\n2\n.\nE\nc\no\nn\no\nm\ny\n:\nS\ni\ng\nn\ni\nf\ni\nc\na\nn\nt\ny\ne\na\nr\n-\no\nn\n-\ny\ne\na\nr\ni\nn\nc\nr\ne\na\ns\ne\ni\nn\nt\nh\ne\nn\nu\nm\nb\ne\nr\no\nf\nt\nr\na\nd\ne\nr\ns\na\nn\nd\nt\nr\na\nd\ni\nn\ng\nv\no\nl\nu\nm\ne\n5\n1\n.\n3\n.\n3\n.\nC\nu\nl\nt\nu\nr\ne\n:\nM\no\nr\ne\na\nn\nd\nm\no\nr\ne\np\ne\no\np\nl\ne\na\nr\ne\nn\no\nt\ni\nc\ni\nn\ng\nN\nF\nT\na\np\np\nl\ni\nc\na\nt\ni\no\nn\ns\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n6\n1\n.\n3\n.\n4\n.\nT\ne\nc\nh\nn\no\nl\no\ng\ny\n:\nN\nF\nT\ni\ns\nb\ne\ni\nn\ng\nu\ns\ne\nd\ni\nn\nm\na\nn\ny\na\nr\ne\na\ns\ni\nn\nr\ne\na\nl\nl\ni\nf\ne\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.","metadata":{"loc":{"lines":{"from":6756,"to":7255}}}}],["21",{"pageContent":"t\ni\no\nn\ns\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n6\n1\n.\n3\n.\n4\n.\nT\ne\nc\nh\nn\no\nl\no\ng\ny\n:\nN\nF\nT\ni\ns\nb\ne\ni\nn\ng\nu\ns\ne\nd\ni\nn\nm\na\nn\ny\na\nr\ne\na\ns\ni\nn\nr\ne\na\nl\nl\ni\nf\ne\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n7\n2\n.\nA\nb\no\nu\nt\nA\nP\nE\nN\nF\nT\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n8\n3\n.\nM\ni\ns\ns\ni\no\nn\n,\nV\ni\ns\ni\no\nn\na\nn\nd\nV\na\nl\nu\ne\no\nf\nA\nP\nE\nN\nF\nT\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n9\n3\n.\n1\n.\nM\ni\ns\ns\ni\no\nn\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n9\n3\n.\n2\n.\nV\ni\ns\ni\no\nn\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.","metadata":{"loc":{"lines":{"from":7255,"to":7754}}}}],["22",{"pageContent":".\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n9\n3\n.\n2\n.\nV\ni\ns\ni\no\nn\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n9\n3\n.\n3\n.\nV\na\nl\nu\ne\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n9\n4\n.\nS\nt\nr\ne\nn\ng\nt\nh\ns\no\nf\nA\nP\nE\nN\nF\nT\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n1\n0\n4\n.\n1\n.\nA\nd\nv\na\nn\nc\ne\nd\nt\ne\nc\nh\nn\no\nl\no\ng\ny\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.","metadata":{"loc":{"lines":{"from":7754,"to":8253}}}}],["23",{"pageContent":".\n.\n.\n.\n.\n.\n.\n.\n.\n1\n0\n4\n.\n1\n.\nA\nd\nv\na\nn\nc\ne\nd\nt\ne\nc\nh\nn\no\nl\no\ng\ny\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n1\n0\n4\n.\n2\n.\nF\ni\nn\na\nn\nc\ni\na\nl\nm\nu\ns\nc\nl\ne\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n1\n0\n4\n.\n3\n.\nE\nx\nt\ne\nn\ns\ni\nv\ne\np\na\nr\nt\nn\ne\nr\ns\nh\ni\np\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n1\n1\n5\n.\nA\nP\nE\nN\nF\nT\nE\nc\no\ns\ny\ns\nt\ne\nm\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n1\n2\n5\n.\n1\n.\nC\na\np\na\nb\ni\nl\ni\nt\ni\ne\ns\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.","metadata":{"loc":{"lines":{"from":8253,"to":8752}}}}],["24",{"pageContent":".\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n1\n2\n5\n.\n1\n.\nC\na\np\na\nb\ni\nl\ni\nt\ni\ne\ns\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n1\n2\n5\n.\n1\n.\n1\n.\nT\nu\nr\nn\na\nr\nt\nw\no\nr\nk\ns\na\nn\nd\na\nr\nt\ni\ns\nt\ns\ni\nn\nt\no\nN\nF\nT\ns\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n1\n2\n5\n.\n1\n.\n2\n.\nR\ne\nd\ne\nf\ni\nn\ne\nt\nh\ne\nv\na\nl\nu\ne\no\nf\na\nr\nt\nw\no\nr\nk\ns\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n1\n2\n5\n.\n1\n.\n3\n.\nC\nu\nl\nt\ni\nv\na\nt\ne\na\nn\nd\ni\nn\nc\nu\nb\na\nt\ne\nN\nF\nT\na\nr\nt\ni\ns\nt\ns\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.","metadata":{"loc":{"lines":{"from":8752,"to":9251}}}}],["25",{"pageContent":".\n1\n2\n5\n.\n1\n.\n3\n.\nC\nu\nl\nt\ni\nv\na\nt\ne\na\nn\nd\ni\nn\nc\nu\nb\na\nt\ne\nN\nF\nT\na\nr\nt\ni\ns\nt\ns\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n1\n2\n5\n.\n1\n.\n4\n.\nS\nu\np\np\no\nr\nt\na\nr\nt\ni\ns\nt\ns\na\nn\nd\nr\ne\nl\ne\nv\na\nn\nt\ni\nn\ns\nt\ni\nt\nu\nt\ni\no\nn\ns\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n1\n2\n5\n.\n1\n.\n5\n.\nI\nn\nd\nu\ns\nt\nr\ny\na\nn\nd\np\no\nl\ni\nc\ny\nr\ne\ns\ne\na\nr\nc\nh\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n1\n2\n5\n.\n2\n.\nN\no\nd\ne\ns\ne\nt\nt\ni\nn\ng\ns\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n1\n2\n5\n.\n2\n.\n1\n.\nA\nr\nt\nw\no\nr\nk\ns\na\nn\nd\na\nr\nt\ni\ns\nt\ns\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.","metadata":{"loc":{"lines":{"from":9251,"to":9750}}}}],["26",{"pageContent":".\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n1\n2\n5\n.\n2\n.\n1\n.\nA\nr\nt\nw\no\nr\nk\ns\na\nn\nd\na\nr\nt\ni\ns\nt\ns\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n1\n3\n5\n.\n2\n.\n2\n.\nC\no\nm\nm\nu\nn\ni\nt\ni\ne\ns\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n1\n3\n5\n.\n2\n.\n3\n.\nC\no\nm\nm\ni\nt\nt\ne\ne\no\nf\ne\nx\np\ne\nr\nt\ns\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n1\n3","metadata":{"loc":{"lines":{"from":9750,"to":10191}}}}],["27",{"pageContent":"-\n2\n-\n5\n.\n2\n.\n4\n.\nI\nn\ns\nt\ni\nt\nu\nt\ni\no\nn\ns\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n1\n3\n6\n.\nR\no\na\nd\nm\na\np\no\nf\nA\nP\nE\nN\nF\nT\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n1\n4\n6\n.\n1\n.\nP\nh\na\ns\ne\n1\n:\nB\nu\ni\nl\nd\nt\nh\ne\ni\nn\nf\nr\na\ns\nt\nr\nu\nc\nt\nu\nr\ne\no\nf\nt\nh\ne\nN\nF\nT\ne\nc\no\ns\ny\ns\nt\ne\nm\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n1\n4\n6\n.\n2\n.\nP\nh\na\ns\ne\n2\n:\nA\nc\nh\ni\ne\nv\ne\na\ns\nt\nr\no\nn\ng\nc\ni\nr\nc\nu\nl\na\nt\ni\no\nn\no\nf\nN\nF\nT\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n1\n4\n6\n.\n3\n.\nP\nh\na\ns\ne\n3\n:\nE\nn\nr\ni\nc\nh\nt\nh\ne\nb\nu\ns\ni\nn\ne\ns\ns\ne\ns\no\nf\nA\nP\nE\nN\nF\nT\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n1\n5\n6\n.\n4\n.\nP\nh\na","metadata":{"loc":{"lines":{"from":10193,"to":10691}}}}],["28",{"pageContent":".\n.\n.\n1\n4\n6\n.\n3\n.\nP\nh\na\ns\ne\n3\n:\nE\nn\nr\ni\nc\nh\nt\nh\ne\nb\nu\ns\ni\nn\ne\ns\ns\ne\ns\no\nf\nA\nP\nE\nN\nF\nT\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n1\n5\n6\n.\n4\n.\nP\nh\na\ns\ne\n4\n:\nS\ne\nc\nu\nr\ne\nt\nh\ne\nk\ne\ny\nt\no\na\nu\nt\nh\no\nr\ni\nz\na\nt\ni\no\nn\na\nn\nd\nc\no\nn\nf\ni\nr\nm\na\nt\ni\no\nn\no\nf\nt\nh\ne\nd\ni\ng\ni\nt\na\nl\nw\no\nr\nl\nd\n1\n5\n7\n.\nA\nP\nE\nN\nF\nT\n'\ns\ng\no\nv\ne\nr\nn\na\nn\nc\ne\nt\no\nk\ne\nn\nN\nF\nT\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n1\n6\n7\n.\n1\n.\nD\ne\nf\ni\nn\ni\nt\ni\no\nn\no\nf\nN\nF\nT\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n1\n6\n7\n.\n2\n.\nA\nl\nl\no\nc\na\nt\ni\no\nn\no\nf\nN\nF\nT\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n1\n6\n7\n.\n3\n.\nB\nu\ns\ni\nn\ne\ns","metadata":{"loc":{"lines":{"from":10691,"to":11190}}}}],["29",{"pageContent":".\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n1\n6\n7\n.\n3\n.\nB\nu\ns\ni\nn\ne\ns\ns\nm\no\nd\ne\nl\no\nf\nN\nF\nT\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n1\n6\n7\n.\n4\n.\nR\ne\nw\na\nr\nd\nm\ne\nc\nh\na\nn\ni\ns\nm\no\nf\nN\nF\nT\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n1\n6\n7\n.\n4\n.\n1\n.\nD\nE\nF\nI\na\ni\nr\nd\nr\no\np\na\nn\nd\nm\ni\nn\ni\nn\ng\nr\ne\nw\na\nr\nd\ns\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n1\n6\n7\n.\n4\n.\n2\n.\nG\no\nv\ne\nr\nn\na\nn\nc\ne\nr\ne\nw\na\nr\nd\ns\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.","metadata":{"loc":{"lines":{"from":11190,"to":11689}}}}],["30",{"pageContent":".\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n1\n6\n7\n.\n4\n.\n2\n.\nG\no\nv\ne\nr\nn\na\nn\nc\ne\nr\ne\nw\na\nr\nd\ns\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n1\n7\n7\n.\n4\n.\n3\n.\nA\nc\nt\ni\nv\ni\nt\ny\nr\ne\nw\na\nr\nd\ns\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n1\n7\n7\n.\n4\n.\n4\n.\nN\nF\nT\na\ni\nr\nd\nr\no\np\na\nn\nd\nm\ni\nn\ni\nn\ng\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n1\n7\n8\n.\nA\nb\no\nu\nt\nA\nP\nE\nN\nF\nT\nT\ne\na\nm\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n1\n7\n8\n.\n1\n.\nA\nP\nE\nN\nF\nT\nC\nh","metadata":{"loc":{"lines":{"from":11689,"to":12188}}}}],["31",{"pageContent":"F\nT\nT\ne\na\nm\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n1\n7\n8\n.\n1\n.\nA\nP\nE\nN\nF\nT\nC\nh\na\ni\nr\nm\na\nn\n:\nS\nt\ne\nv\ne\nZ\n.\nL\ni\nu\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n1\n7\n8\n.\n2\n.\nP\na\nr\nt\nn\ne\nr\ns\nf\nr\no\nm\na\nr\nt\ns\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n1\n7\n8\n.\n3\n.\nO\nt\nh\ne\nr\nm\ne\nm\nb\ne\nr\ns\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n1\n7\n9\n.\nA\nP\nE\nN\nF\nT\n'\ns\nC\no\nl\nl\ne\nc\nt\ni\no\nn\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.","metadata":{"loc":{"lines":{"from":12188,"to":12687}}}}],["32",{"pageContent":".\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n1\n7\n9\n.\nA\nP\nE\nN\nF\nT\n'\ns\nC\no\nl\nl\ne\nc\nt\ni\no\nn\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n1\n9\n9\n.\n1\n.\nP\na\nb\nl\no\nP\ni\nc\na\ns\ns\no\n:\nF\ne\nm\nm\ne\nn\nu\ne\nc\no\nu\nc\nh\né\ne\na\nu\nc\no\nl\nl\ni\ne\nr\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n1\n9\n9\n.\n2\n.\nA\nn\nd\ny\nW\na\nr\nh\no\nl\n:\nT\nh\nr\ne\ne\nS\ne\nl\nf\n-\nP\no\nr\nt\nr\na\ni\nt\ns\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n2\n0\n9\n.\n3\n.\nB\ne\ne\np\nl\ne\n:\nO\nC\nE\nA\nN\nF\nR\nO\nN\nT\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n2\n1\n9\n.\n4\n.\nP\na\nk\n：\nC\nu\nb\ne\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.","metadata":{"loc":{"lines":{"from":12687,"to":13186}}}}],["33",{"pageContent":".\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n2\n1\n9\n.\n4\n.\nP\na\nk\n：\nC\nu\nb\ne\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n2\n2\n9\n.\n5\n.\nB\no\nr\ni\ns\nA\nr\nt\nz\ny\nb\na\ns\nh\ne\nf\nf\n：\nT\nh\ne\nC\no\nm\np\nu\nt\ne\nr\ni\nn\nS\no\nc\ni\ne\nt\ny\nA\np\nr\ni\nl\n2\nn\nd\n,\n1\n9\n6\n5\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n2\n3\n9\n.\n6\n.\nB\ne\ne\np\nl\ne\n：\nF\ni\nr\ns\nt\nt\ni\nm\ne\nt\no\nr\ne\nl\ne\na\ns\ne\nN\nF\nT\na\nr\nt\nw\no\nr\nk\ns\ni\nn\nt\nh\ne\np\nh\ny\ns\ni\nc\na\nl\nf\no\nr\nm\n(\n5\np\ni\ne\nc\ne\ns\n)\n.\n.\n.\n.\n.\n2\n4\n1\n0\n.\nO\nt\nh\ne\nr\nI\nn\nf\no\nr\nm\na\nt\ni\no\nn\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n2\n5\n1\n1\n.\nD\nI\nS\nC\nL\nA\nI\nM\nE\nR\nS\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.","metadata":{"loc":{"lines":{"from":13186,"to":13685}}}}],["34",{"pageContent":"2\n5\n1\n1\n.\nD\nI\nS\nC\nL\nA\nI\nM\nE\nR\nS\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n2\n6","metadata":{"loc":{"lines":{"from":13685,"to":13799}}}}],["35",{"pageContent":"1\n1\n.\nT\nh\ne\nD\ne\nv\ne\nl\no\np\nm\ne\nn\nt\no\nf\nN\nF\nT\n1\n.\n1\n.\nW\nh\na\nt\ni\ns\nN\nF\nT\n?\nM\no\ns\nt\nl\ny\nk\nn\no\nw\nn\na\ns\nN\nF\nT\n,\n\"\nN\no\nn\n-\nF\nu\nn\ng\ni\nb\nl\ne\nT\no\nk\ne\nn\n\"\ni\ns\na\nn\no\nn\n-\nf\nu\nn\ng\ni\nb\nl\ne\na\ns\ns\ne\nt\nt\nh\na\nt\ni\ns\nu\nn\ni\nq\nu\ne\na\nn\nd\nc\na\nn\nn\no\nt\nb\ne\ns\np\nl\ni\nt\n.\nN\nF\nT\nc\na\nn\nb\ne\nc\no\nn\nn\ne\nc\nt\ne\nd\nt\no\nr\ne\na\nl\n-\nw\no\nr\nl\nd\no\nb\nj\ne\nc\nt\ns\n.\nN\nF\nT\np\nr\no\nv\ni\nd\ne\ns\nt\nh\ne\no\nw\nn\ne\nr\no\nf\nt\nh\ne\nn\na\nt\ni\nv\ne\nd\ni\ng\ni\nt\na\nl\na\ns\ns\ne\nt\ns\n(\na\ns\ns\ne\nt\ns\no\nn\nl\ny\ne\nx\ni\ns\nt\ni\nn\no\nr\no\nr\ni\ng\ni\nn\na\nt\ne\nf\nr\no\nm\nt\nh\ne\nd\ni\ng\ni\nt\na\nl\nw\no\nr\nl\nd\n)\nw\ni\nt\nh\np\nr\no\no\nf\no\nf\no\nw\nn\ne\nr\ns\nh\ni\np\n,\nw\nh\ni\nc\nh\nc\na\nn\nl\ni\nv\ne\no\nu\nt\ns\ni\nd\ne\no\nf\na\nc\ne\nn\nt\nr\na\nl\ni\nz\ne\nd\ns\ne\nr\nv\ne\nr\no\nr\nr\ne\np\no\ns\ni\nt\no\nr\ny\n.\nI\nn\nE\nc\no\nn\no\nm\ni\nc\ns\n,\nf\nu\nn\ng\ni\nb\nl\ne\na\ns\ns\ne\nt\ns\nr\ne\nf\ne\nr\nt\no\na\ns\ns\ne\nt\ns\ns\nu\nc\nh\na\ns\nc\nu\nr\nr\ne\nn\nc\ni\ne\ns\n,\ns\nt\no\nc\nk\ns\n,\nb\no\nn\nd\ns\na\nn\nd\np\nr\ne\nc\ni\no\nu\ns\nm\ne\nt\na\nl\ns\n.\nF\nu\nn\ng\ni\nb\nl\ne\na\ns\ns\ne\nt\ns\na\nr\ne\nd\ni\nv\ni\ns\ni\nb\nl\ne\na\nn\nd\ni\nn\nt\ne\nr\nc\nh\na\nn\ng\ne\na\nb\nl\ne\n.\nA\ns\ns\ne\nt\ns\no\nf\nt\nh\ne\ns\na\nm\ne\nn\no\nm\ni\nn\na\nl\nv\na\nl\nu\ne\na\nn\nd\na\nt\nt\nr\ni\nb\nu\nt\ne\ns\nc\na\nn\nb\ne","metadata":{"loc":{"lines":{"from":13801,"to":14299}}}}],["36",{"pageContent":"o\nu\ns\nm\ne\nt\na\nl\ns\n.\nF\nu\nn\ng\ni\nb\nl\ne\na\ns\ns\ne\nt\ns\na\nr\ne\nd\ni\nv\ni\ns\ni\nb\nl\ne\na\nn\nd\ni\nn\nt\ne\nr\nc\nh\na\nn\ng\ne\na\nb\nl\ne\n.\nA\ns\ns\ne\nt\ns\no\nf\nt\nh\ne\ns\na\nm\ne\nn\no\nm\ni\nn\na\nl\nv\na\nl\nu\ne\na\nn\nd\na\nt\nt\nr\ni\nb\nu\nt\ne\ns\nc\na\nn\nb\ne\nc\no\nn\ns\ni\nd\ne\nr\ne\nd\nt\nh\ne\ns\na\nm\ne\n.\nI\nn\nt\nh\ni\ns\ns\ne\nn\ns\ne\n,\nt\nh\ne\ny\na\nr\ne\nm\no\nr\ne\no\nf\na\ns\ny\nm\nb\no\nl\na\nn\nd\na\ns\ns\ne\nt\ns\nt\nh\ne\nm\ns\ne\nl\nv\ne\ns\nd\no\nn\n'\nt\nc\na\nr\nr\ny\nm\nu\nc\nh\nv\na\nl\nu\ne\n.\nN\no\nn\n-\nf\nu\nn\ng\ni\nb\nl\ne\na\ns\ns\ne\nt\ns\n,\ns\nu\nc\nh\na\ns\nh\no\nu\ns\ne\ns\n,\nc\na\nr\ns\n,\nf\nu\nr\nn\ni\nt\nu\nr\ne\n,\na\nr\nt\nw\no\nr\nk\n,\nd\na\nt\na\na\ns\ns\ne\nt\ns\na\nn\nd\nt\nh\ne\nv\na\ns\nt\nm\na\nj\no\nr\ni\nt\ny\no\nf\no\nt\nh\ne\nr\na\ns\ns\ne\nt\ns\n,\na\nr\ne\nn\ne\ni\nt\nh\ne\nr\nd\ni\nv\ni\ns\ni\nb\nl\ne\nn\no\nr\ni\nn\nt\ne\nr\nc\nh\na\nn\ng\ne\na\nb\nl\ne\n.\nI\nt\n'\ns\nr\na\nt\nh\ne\nr\no\nb\nv\ni\no\nu\ns\nt\nh\na\nt\nm\no\ns\nt\na\ns\ns\ne\nt\ns\ni\nn\nt\nh\ne\nr\ne\na\nl\nw\no\nr\nl\nd\na\nr\ne\nn\no\nn\n-\nf\nu\nn\ng\ni\nb\nl\ne\n,\ns\nu\nc\nh\na\ns\na\nr\nt\nw\no\nr\nk\n,\nv\ni\nd\ne\no\ng\na\nm\ne\ni\nt\ne\nm\ns\na\nn\nd\nI\nD\ns\n.\nF\nu\nn\ng\ni\nb\nl\ne\nT\no\nk\ne\nn\ns\nV\nS\nN\no\nn\n-\nf\nu\nn\ng\ni\nb\nl\ne\nT\no\nk\ne\nn\ns\nF\nu\nn\ng\ni\nb\nl\ne\nT\no\nk\ne\nn\nN\no\nn\n-\nF\nu\nn\ng\ni\nb\nl\ne\nT\no\nk\ne\nn\nI\nn\nt\ne\nr\nc\nh\na\nn\ng\ne\na\nb\ni\nl\ni","metadata":{"loc":{"lines":{"from":14299,"to":14798}}}}],["37",{"pageContent":"i\nd\ne\no\ng\na\nm\ne\ni\nt\ne\nm\ns\na\nn\nd\nI\nD\ns\n.\nF\nu\nn\ng\ni\nb\nl\ne\nT\no\nk\ne\nn\ns\nV\nS\nN\no\nn\n-\nf\nu\nn\ng\ni\nb\nl\ne\nT\no\nk\ne\nn\ns\nF\nu\nn\ng\ni\nb\nl\ne\nT\no\nk\ne\nn\nN\no\nn\n-\nF\nu\nn\ng\ni\nb\nl\ne\nT\no\nk\ne\nn\nI\nn\nt\ne\nr\nc\nh\na\nn\ng\ne\na\nb\ni\nl\ni\nt\ny\nF\nT\ns\no\nf\nt\nh\ne\ns\na\nm\ne\nt\ny\np\ne\na\nr\ne\ni\nn\nt\ne\nr\nc\nh\na\nn\ng\ne\na\nb\nl\ne\na\nn\nd\nt\nh\ne\ni\nr\nv\na\nl\nu\ne\ni\ns\nn\no\nt\na\nf\nf\ne\nc\nt\ne\nd\n.\nN\no\nn\n-\ni\nn\nt\ne\nr\nc\nh\na\nn\ng\ne\na\nb\ni\nl\ni\nt\ny\nN\nF\nT\ns\no\nf\nt\nh\ne\ns\na\nm\ne\nt\ny\np\ne\na\nr\ne\nn\no\nt\ni\nn\nt\ne\nr\nc\nh\na\nn\ng\ne\na\nb\nl\ne\n.\nU\nn\ni\nf\no\nr\nm\ni\nt\ny\nF\nT\ns\no\nf\nt\nh\ne\ns\na\nm\ne\nt\ny\np\ne\ns\nh\na\nr\ne\nt\nh\ne\ns\na\nm\ne\ns\np\ne\nc\ni\nf\ni\nc\na\nt\ni\no\nn\ns\na\nn\nd\na\nl\nl\nt\no\nk\ne\nn\ns\na\nr\ne\ni\nd\ne\nn\nt\ni\nc\na\nl\n.\nU\nn\ni\nq\nu\ne\nn\ne\ns\ns\nE\na\nc\nh\nN\nF\nT\ni\ns\nu\nn\ni\nq\nu\ne\n.\nD\ni\nv\ni\ns\ni\nb\ni\nl\ni\nt\ny\nF\nT\ns\nc\na\nn\nb\ne\ns\np\nl\ni\nt\ni\nn\nt\no\ns\nm\na\nl\nl\ne\nr\nu\nn\ni\nt\ns\no\nf\ne\nq\nu\na\nl\nv\na\nl\nu\ne\n.\nI\nn\nd\ni\nv\ni\ns\ni\nb\ni\nl\ni\nt\ny\nN\nF\nT\ns\na\nr\ne\ni\nn\nd\ni\nv\ni\ns\ni\nb\nl\ne\na\nn\nd\no\nn\ne\nt\no\nk\ne\nn\ns\ne\nr\nv\ne\ns\na\ns\na\nb\na\ns\ni\nc\nu\nn\ni\nt\n.\nC\no\nn\nv\ne\nn\ni\ne\nn\nc\ne\nF\nT\ns\na\nr\ne\ne\na\ns\ny\nt\no\ns\np\nl\ni\nt\na\nn\nd\ne\nx\nc\nh\na\nn\ng\ne\n.\nS\ne\nc\nu\nr\ni\nt\ny\nT\no\nk\ne\nn\ns\na\nr\ne","metadata":{"loc":{"lines":{"from":14798,"to":15297}}}}],["38",{"pageContent":"r\ne\ni\nn\nd\ni\nv\ni\ns\ni\nb\nl\ne\na\nn\nd\no\nn\ne\nt\no\nk\ne\nn\ns\ne\nr\nv\ne\ns\na\ns\na\nb\na\ns\ni\nc\nu\nn\ni\nt\n.\nC\no\nn\nv\ne\nn\ni\ne\nn\nc\ne\nF\nT\ns\na\nr\ne\ne\na\ns\ny\nt\no\ns\np\nl\ni\nt\na\nn\nd\ne\nx\nc\nh\na\nn\ng\ne\n.\nS\ne\nc\nu\nr\ni\nt\ny\nT\no\nk\ne\nn\ns\na\nr\ne\nu\nn\ni\nq\nu\ne\na\nn\nd\nc\na\nn\nb\ne\nu\ns\ne\nd\ni\nn\na\nv\na\nr\ni\ne\nt\ny\no\nf\ns\ne\nt\nt\ni\nn\ng\ns\n,\ns\nu\nc\nh\na\ns\ng\na\nm\ni\nn\ng\n.\nE\nR\nC\n-\n2\n0\n/\nT\nR\nC\n-\n2\n0\nS\nt\na\nn\nd\na\nr\nd\ns\no\nn\nE\nt\nh\ne\nr\ne\nu\nm\np\nr\no\nt\no\nc\no\nl\na\nn\nd\nT\nR\nO\nN\np\nr\no\nt\no\nc\no\nl\nt\nh\na\nt\ns\nu\np\np\no\nr\nt\nt\nh\ne\nl\na\nu\nn\nc\nh\no\nf\nO\nM\nG\n,\nS\nN\nC\n,\nT\nR\nX\na\nn\nd\no\nt\nh\ne\nr\nt\no\nk\ne\nn\ns\n.\nE\nR\nC\n-\n7\n2\n1\n/\nT\nR\nC\n-\n7\n2\n1\nN\ne\nw\np\nr\no\nt\no\nc\no\nl\ns\no\nn\nE\nt\nh\ne\nr\ne\nu\nm\na\nn\nd\nT\nR\nO\nN\nt\nh\na\nt\ns\nu\np\np\no\nr\nt\nt\nh\ne\nl\na\nu\nn\nc\nh\no\nf\nN\nF\nT\n(\ne\n.\ng\n.\ne\nn\nc\nr\ny\np\nt\ne\nd\nc\no\nl\nl\ne\nc\nt\ni\nb\nl\ne\ns\n)\n.","metadata":{"loc":{"lines":{"from":15297,"to":15648}}}}],["39",{"pageContent":"2\nB\na\ns\ne\nd\no\nn\nt\nh\ne\na\nb\no\nv\ne\n-\nm\ne\nn\nt\ni\no\nn\ne\nd\nf\ne\na\nt\nu\nr\ne\ns\n,\nN\nF\nT\nc\na\nn\nb\ne\nu\ns\ne\nd\nt\no\nm\na\np\na\ns\ns\ne\nt\ns\no\nn\n-\nc\nh\na\ni\nn\na\nn\nd\ni\ns\na\nl\ns\no\na\nu\nn\ni\nq\nu\ne\nd\ni\ng\ni\nt\na\nl\nc\no\nl\nl\ne\nc\nt\ni\nb\nl\ne\ni\nt\ns\ne\nl\nf\n.\nC\nu\nr\nr\ne\nn\nt\nl\ny\n,\nm\no\ns\nt\nN\nF\nT\np\nr\no\nj\ne\nc\nt\ns\na\nr\ne\nf\no\nr\nd\ni\ng\ni\nt\na\nl\nc\no\nl\nl\ne\nc\nt\ni\nb\nl\ne\ns\n,\nv\ni\nd\ne\no\ng\na\nm\ne\na\ns\ns\ne\nt\ns\na\nn\nd\nv\ni\nr\nt\nu\na\nl\nw\no\nr\nl\nd\ns\n,\nw\ni\nt\nh\nw\ne\nl\nl\n-\ne\ns\nt\na\nb\nl\ni\ns\nh\ne\nd\ne\nc\no\ns\ny\ns\nt\ne\nm\ns\na\nn\nd\nt\nr\na\nd\ni\nn\ng\np\nl\na\nt\nf\no\nr\nm\ns\n.\nT\no\nk\ne\nn\nm\ni\nn\nt\ni\nn\ng\na\nn\nd\nt\nr\na\nd\ni\nn\ng\np\nl\na\nt\nf\no\nr\nm\ns\na\nl\nl\no\nw\ny\no\nu\nt\no\ne\na\ns\ni\nl\ny\nc\nr\ne\na\nt\ne\nN\nF\nT\nt\no\nk\ne\nn\ns\n,\nv\ni\ne\nw\nN\nF\nT\nc\no\nn\nt\nr\na\nc\nt\ns\na\nn\nd\nt\nr\na\nd\ne\nN\nF\nT\ns\n.\nM\na\np\np\ni\nn\ng\nA\ns\ns\ne\nt\ns\nT\nh\nr\no\nu\ng\nh\nN\nF\nT\nN\nF\nT\ns\nm\na\nr\nt\nc\no\nn\nt\nr\na\nc\nt\ns\nr\ne\nc\no\nr\nd\nd\na\nt\na\no\nf\na\np\nr\no\nj\ne\nc\nt\nt\no\no\nn\nt\nh\ne\nb\nl\no\nc\nk\nc\nh\na\ni\nn\n.\nT\nh\ni\ns\nd\na\nt\na\nc\na\nn\ne\ni\nt\nh\ne\nr\nb\ne\nt\nh\no\ns\ne\nt\nh\na\nt\nn\ne\ne\nd\nt\no\nb\ne\ns\nt\no\nr\ne\nd\ni\nn\na\nd\ne\nc\ne\nn\nt\nr\na\nl\ni\nz\ne\nd\nw\na\ny\n(\ne\n.\ng\n.\np\nr\no\np\ne\nr\nt\ni\ne\ns\nt\nh\na\nt\nr\ne\np\nr\ne\ns\ne\nn\nt","metadata":{"loc":{"lines":{"from":15650,"to":16148}}}}],["40",{"pageContent":"b\nl\no\nc\nk\nc\nh\na\ni\nn\n.\nT\nh\ni\ns\nd\na\nt\na\nc\na\nn\ne\ni\nt\nh\ne\nr\nb\ne\nt\nh\no\ns\ne\nt\nh\na\nt\nn\ne\ne\nd\nt\no\nb\ne\ns\nt\no\nr\ne\nd\ni\nn\na\nd\ne\nc\ne\nn\nt\nr\na\nl\ni\nz\ne\nd\nw\na\ny\n(\ne\n.\ng\n.\np\nr\no\np\ne\nr\nt\ni\ne\ns\nt\nh\na\nt\nr\ne\np\nr\ne\ns\ne\nn\nt\nv\ni\nd\ne\no\ng\na\nm\ne\na\ns\ns\ne\nt\ns\n)\no\nr\ne\nx\nt\ne\nr\nn\na\nl\nl\ni\nn\nk\ns\nt\no\ns\np\ne\nc\ni\nf\ni\nc\nr\ne\ns\no\nu\nr\nc\ne\ns\n.\n1\n.\n2\n.\nV\na\nl\nu\ne\no\nf\nN\nF\nT\n1\n.\n2\n.\n1\n.\nN\nF\nT\nr\ne\nv\no\nl\nu\nt\ni\no\nn\ni\nz\ne\nd\nt\nh\ne\nt\nr\na\nd\ni\nt\ni\no\nn\na\nl\nf\ni\nn\ne\na\nr\nt\nt\nr\na\nd\ni\nn\ng\nm\no\nd\ne\nl\ns\nD\ni\ng\ni\nt\na\nl\na\nr\nt\ng\ne\nn\ne\nr\na\nl\nl\ny\nr\ne\nf\ne\nr\ns\nt\no\na\nr\nt\ni\ns\nt\ni\nc\nw\no\nr\nk\nc\nr\ne\na\nt\ne\nd\nu\ns\ni\nn\ng\nd\ni\ng\ni\nt\na\nl\nt\ne\nc\nh\nn\no\nl\no\ng\ny\n.\nU\nn\nl\ni\nk\ne\nt\nr\na\nd\ni\nt\ni\no\nn\na\nl\na\nr\nt\nw\no\nr\nk\n,\nd\ni\ng\ni\nt\na\nl\na\nr\nt\ni\ns\nm\no\nr\ne\nf\nl\ne\nx\ni\nb\nl\ne\nw\nh\ne\nn\ni\nt\nc\no\nm\ne\ns\nt\no\nt\nh\ne\nf\no\nr\nm\no\nf\ne\nx\np\nr\ne\ns\ns\ni\no\nn\n.\nT\nh\ne\no\nr\ni\ng\ni\nn\na\nl\nc\na\nr\nr\ni\ne\nr\no\nf\nd\ni\ng\ni\nt\na\nl\na\nr\nt\ni\ns\nd\na\nt\na\n.\nA\ns\nt\nh\ne\nc\na\nr\nr\ni\ne\nr\no\nf\nd\ni\ng\ni\nt\na\nl\na\nr\nt\n,\nd\na\nt\na\nc\na\nn\nb\ne\ne\na\ns\ni\nl\ny\nr\ne\np\nl\ni\nc\na\nt\ne\nd\na\nn\nd\ns\np\nr\ne\na\nd\nb\nu\nt\nl\na\nc\nk\ns\na\ns\ns\ne\nt\np\nr\no\np\ne\nr\nt\ny\n.\nT\nh\ni\ns\nl\ne\na\nd\ns","metadata":{"loc":{"lines":{"from":16148,"to":16647}}}}],["41",{"pageContent":"a\nr\nt\ni\ns\nd\na\nt\na\n.\nA\ns\nt\nh\ne\nc\na\nr\nr\ni\ne\nr\no\nf\nd\ni\ng\ni\nt\na\nl\na\nr\nt\n,\nd\na\nt\na\nc\na\nn\nb\ne\ne\na\ns\ni\nl\ny\nr\ne\np\nl\ni\nc\na\nt\ne\nd\na\nn\nd\ns\np\nr\ne\na\nd\nb\nu\nt\nl\na\nc\nk\ns\na\ns\ns\ne\nt\np\nr\no\np\ne\nr\nt\ny\n.\nT\nh\ni\ns\nl\ne\na\nd\ns\nt\no\nt\nh\ne\nb\ni\ng\ng\ne\ns\nt\nd\ni\nf\nf\ne\nr\ne\nn\nc\ne\nb\ne\nt\nw\ne\ne\nn\nd\ni\ng\ni\nt\na\nl\na\nr\nt\na\nn\nd\nt\nr\na\nd\ni\nt\ni\no\nn\na\nl\na\nr\nt\nb\nu\ns\ni\nn\ne\ns\ns\nm\no\nd\ne\nl\ns\n:\nw\nh\ne\nn\ni\nt\nc\no\nm\ne\ns\nt\no","metadata":{"loc":{"lines":{"from":16647,"to":16830}}}}],["42",{"pageContent":"3\nt\nr\na\nd\ni\nt\ni\no\nn\na\nl\nf\ni\nn\ne\na\nr\nt\n,\no\nn\ne\nc\na\nn\nt\nr\na\nd\ne\nt\nh\ne\na\nc\nt\nu\na\nl\na\nr\nt\nw\no\nr\nk\n,\nw\nh\ne\nr\ne\na\ns\ni\nt\ni\ns\nd\ni\nf\nf\ni\nc\nu\nl\nt\nt\no\nt\nr\na\nd\ne\nt\nh\ne\np\nh\ny\ns\ni\nc\na\nl\nd\ni\ng\ni\nt\na\nl\na\nr\nt\nw\no\nr\nk\n.\nT\nh\ne\nw\na\ny\ni\nn\nw\nh\ni\nc\nh\nd\ni\ng\ni\nt\na\nl\na\nr\nt\nw\no\nr\nk\ns\na\nr\ne\nd\ni\ns\nt\nr\ni\nb\nu\nt\ne\nd\na\nl\ns\no\nl\ne\na\nd\ns\nt\no\nc\no\np\ny\nr\ni\ng\nh\nt\ni\ns\ns\nu\ne\ns\n,\na\ns\nt\nh\ne\nc\no\np\ny\nr\ni\ng\nh\nt\ni\nn\nf\no\nr\nm\na\nt\ni\no\nn\ni\ns\ne\na\ns\ni\nl\ny\nl\no\ns\nt\ni\nn\nt\nh\ne\np\nr\no\nc\ne\ns\ns\no\nf\nd\ni\ns\ns\ne\nm\ni\nn\na\nt\ni\no\nn\n.\nS\no\nm\ne\nt\ni\nm\ne\ns\nu\ns\ne\nr\ns\na\nn\nd\na\nr\nt\nl\no\nv\ne\nr\ns\nc\na\nn\n'\nt\nf\ni\nn\nd\nt\nh\ne\np\nr\no\np\ne\nr\nw\na\ny\nt\no\np\na\ny\nf\no\nr\na\nr\nt\nw\no\nr\nk\nw\nh\ne\nn\nt\nh\ne\ny\nw\na\nn\nt\nt\no\n.\nM\no\nr\ne\no\nv\ne\nr\n,\nd\ni\ng\ni\nt\na\nl\na\nr\nt\nw\no\nr\nk\ns\na\nr\ne\nc\ni\nr\nc\nu\nl\na\nt\ne\nd\ni\nn\nt\ne\nr\nn\na\nt\ni\no\nn\na\nl\nl\ny\n.\nI\nt\nm\na\ny\nb\ne\nd\ni\nf\nf\ni\nc\nu\nl\nt\nf\no\nr\nt\nr\na\nd\ni\nt\ni\no\nn\na\nl\ni\nn\ns\nt\ni\nt\nu\nt\ni\no\nn\ns\nt\no\np\nr\no\nv\ni\nd\ne\na\nm\na\nr\nk\ne\nt\np\nl\na\nc\ne\nf\no\nr\ns\nu\nc\nh\nt\nr\na\nd\ni\nn\ng\n.\nN\nF\nT\nc\na\nn\ns\ne\nr\nv\ne\na\ns\na\nt\nr\na\nn\ns\na\nc\nt\ni\no\nn\na\nl\n‘\ne\nn\nt\ni\nt\ny\n'\nf\no\nr\nd\ni\ng\ni\nt\na\nl\na\nr\nt\nb\ny\nm\na\np\np\ni\nn","metadata":{"loc":{"lines":{"from":16832,"to":17330}}}}],["43",{"pageContent":"i\nt\nu\nt\ni\no\nn\ns\nt\no\np\nr\no\nv\ni\nd\ne\na\nm\na\nr\nk\ne\nt\np\nl\na\nc\ne\nf\no\nr\ns\nu\nc\nh\nt\nr\na\nd\ni\nn\ng\n.\nN\nF\nT\nc\na\nn\ns\ne\nr\nv\ne\na\ns\na\nt\nr\na\nn\ns\na\nc\nt\ni\no\nn\na\nl\n‘\ne\nn\nt\ni\nt\ny\n'\nf\no\nr\nd\ni\ng\ni\nt\na\nl\na\nr\nt\nb\ny\nm\na\np\np\ni\nn\ng\nt\nh\ne\nf\ni\nl\ne\no\nf\na\nc\ne\nr\nt\na\ni\nn\nd\ni\ng\ni\nt\na\nl\na\nr\nt\nw\no\nr\nk\n,\nm\na\nk\ni\nn\ng\ni\nt\na\np\ne\nr\nf\ne\nc\nt\nd\ni\ng\ni\nt\na\nl\na\nr\nt\nc\na\nr\nr\ni\ne\nr\n.\nI\nn\nt\no\nd\na\ny\n'\ns\nm\na\nr\nk\ne\nt\n,\nw\ne\na\nr\ne\ns\ne\ne\ni\nn\ng\nN\nF\nT\nb\ne\ni\nn\ng\nc\no\nm\nb\ni\nn\ne\nd\nw\ni\nt\nh\nd\ni\ng\ni\nt\na\nl\na\nr\nt\n,\nc\nr\ne\na\nt\ni\nn\ng\na\nn\ne\nw\nb\nu\ns\ni\nn\ne\ns\ns\nm\no\nd\ne\nl\nw\nh\ne\nr\ne\nN\nF\nT\ni\ns\nt\nr\na\nd\ne\nd\na\ns\nt\nh\ne\nd\ni\ng\ni\nt\na\nl\na\nr\nt\nw\no\nr\nk\ni\nt\ns\ne\nl\nf\n.\nI\nn\ns\nu\nc\nh\nt\nr\na\nd\ni\nn\ng\n,\nN\nF\nT\ni\ns\nn\no\nt\no\nn\nl\ny\nt\nr\na\nd\ne\nd\na\ns\nc\no\np\ny\nr\ni\ng\nh\nt\no\nr\no\nw\nn\ne\nr\ns\nh\ni\np\n,\nb\nu\nt\na\nl\ns\no\ns\ne\nr\nv\ne\ns\na\ns\na\nu\nn\ni\nq\nu\ne\nl\ni\nn\nk\nb\ne\nt\nw\ne\ne\nn\nt\nh\ne\na\nr\nt\ni\ns\nt\na\nn\nd\nt\nh\ne\nc\no\nl\nl\ne\nc\nt\no\nr\n.\nN\nF\nT\ni\ns\nw\nh\na\nt\nt\nh\ne\na\nr\nt\ni\ns\nt\na\nc\nk\nn\no\nw\nl\ne\nd\ng\ne\ns\nt\no\nb\ne\nt\nh\ne\ne\ns\ns\ne\nn\nc\ne\no\nf\nh\ni\ns\nw\no\nr\nk\n.\nI\nn\nt\nh\ne\np\na\ns\nt\n,\na\nn\na\nr\nt\ni\ns\nt\nw\na\ns\no\nn\nl\ny\np\na\ni\nd\no\nn\nc\ne\nw\nh\ne\nn\nh\ni\ns\nw","metadata":{"loc":{"lines":{"from":17330,"to":17829}}}}],["44",{"pageContent":"c\nt\no\nr\n.\nN\nF\nT\ni\ns\nw\nh\na\nt\nt\nh\ne\na\nr\nt\ni\ns\nt\na\nc\nk\nn\no\nw\nl\ne\nd\ng\ne\ns\nt\no\nb\ne\nt\nh\ne\ne\ns\ns\ne\nn\nc\ne\no\nf\nh\ni\ns\nw\no\nr\nk\n.\nI\nn\nt\nh\ne\np\na\ns\nt\n,\na\nn\na\nr\nt\ni\ns\nt\nw\na\ns\no\nn\nl\ny\np\na\ni\nd\no\nn\nc\ne\nw\nh\ne\nn\nh\ni\ns\nw\no\nr\nk\nw\na\ns\ns\no\nl\nd\nb\ny\nh\ni\nm\nf\no\nr\nt\nh\ne\nf\ni\nr\ns\nt\nt\ni\nm\ne\n.\nW\nh\ne\nn\nh\ni\ns\nw\no\nr\nk\nc\nh\na\nn\ng\ne\nd\nh\na\nn\nd\ns\na\ng\na\ni\nn\na\nn\nd\nw\na\ns\ns\no\nl\nd\nf\no\nr\na\nn\ne\nx\no\nr\nb\ni\nt\na\nn\nt\np\nr\ni\nc\ne\n,\nt\nh\ne\na\nr\nt\ni\ns\nt\nc\no\nu\nl\nd\nn\n'\nt\nb\ne\nn\ne\nf\ni\nt\nf\nr\no\nm\ni\nt\n.\nN\nF\nT\nh\na\ns\nc\nh\na\nn\ng\ne\nd\nt\nh\ne\ns\ni\nt\nu\na\nt\ni\no\nn\nb\ny\no\nf\nf\ne\nr\ni\nn\ng\nd\ni\ng\ni\nt\na\nl\na\nr\nt\ni\ns\nt\ns\nt\nh\ne\ns\np\ne\nc\ni\na\nl\nr\ni\ng\nh\nt\nt\no\np\nr\no\nf\ni\nt\nf\nr\no\nm\nt\nh\ne\ni\nr\nw\no\nr\nk\nw\nh\ne\nn\ni\nt\ni\ns\ns\no\nl\nd\nf\no\nr\nt\nh\ne\ns\ne\nc\no\nn\nd\nt\ni\nm\ne\n.\n1\n.\n2\n.\n2\n.\nI\nn\nn\no\nv\na\nt\ni\nv\ne\nc\ni\nr\nc\nu\nl\na\nt\ni\no\nn\n,\nc\no\nl\nl\ne\nc\nt\ni\nn\ng\n,\nu\ns\ne\na\nn\nd\nf\nl\ne\nx\ni\nb\ni\nl\ni\nt\ny\nN\nF\nT\nh\na\ns\ns\nc\na\nr\nc\ni\nt\ny\na\nn\nd\na\ns\ns\ne\nt\np\nr\no\np\ne\nr\nt\ny\n.\nN\nF\nT\nb\ne\nc\no\nm\ne\ns\na\nd\ni\ng\ni\nt\na\nl\nc\no\nl\nl\ne\nc\nt\ni\nb\nl\ne\na\ns\ni\nt\nm\na\np\ns\nt\nh\ne\nd\na\nt\na\n.\nA\ns\nw\ni\nt\nh\nt\nr\na\nd\ni\nt\ni\no\nn\na\nl\nc\no\nl\nl\ne\nc\nt\ni\nb\nl\ne\ns\n,\np\ne\no","metadata":{"loc":{"lines":{"from":17829,"to":18328}}}}],["45",{"pageContent":"r\nc\ni\nt\ny\na\nn\nd\na\ns\ns\ne\nt\np\nr\no\np\ne\nr\nt\ny\n.\nN\nF\nT\nb\ne\nc\no\nm\ne\ns\na\nd\ni\ng\ni\nt\na\nl\nc\no\nl\nl\ne\nc\nt\ni\nb\nl\ne\na\ns\ni\nt\nm\na\np\ns\nt\nh\ne\nd\na\nt\na\n.\nA\ns\nw\ni\nt\nh\nt\nr\na\nd\ni\nt\ni\no\nn\na\nl\nc\no\nl\nl\ne\nc\nt\ni\nb\nl\ne\ns\n,\np\ne\no\np\nl\ne\nc\no\nl\nl\ne\nc\nt\nf\no\nr\np\na\ns\ns\ni\no\nn\n,\ns\no\nc\ni\na\nl\nn\ne\ne\nd\ns\n,\nc\nu\nl\nt\nu\nr\na\nl\ni\nd\ne\nn\nt\ni\nt\ny\na\nn\nd\no\nt\nh\ne\nr\np\nu\nr\np\no\ns\ne\ns\n.\nC\no\nl\nl\ne\nc\nt\no\nr\ns\na\nr\ne\no\nf\nt\ne\nn\na\nb\nl\ne\nt\no\nr\ne\na\nc\nh\na\nc\no\nn\ns\ne\nn\ns\nu\ns\nw\ni\nt\nh\ni\nn\nt\nh\ne\ns\na\nm\ne\nc\nu\nl\nt\nu\nr\ne\nc\ni\nr\nc\nl\ne\na\nn\nd\na\nr\ne\nw\ni\nl\nl\ni\nn\ng\nt\no\np\na\ny\na\nl\no\nt\nm\no\nr\ne\nt\nh\na\nn\nw\nh\na\nt\nn\no\nn\n-\nc\no\nl\nl\ne\nc\nt\no\nr\ns\nc\na\nn\ni\nm\na\ng\ni\nn\ne\nf\no\nr\na\nr\na\nr\ne\nc\no\nl\nl\ne\nc\nt\ni\nb\nl\ne\n.\nT\nh\ni\ns\np\nh\ne\nn\no\nm\ne\nn\no\nn\ni\ns\nn\no\nn\ne\nw\ns\ni\nn\nm\na\nn\ny\nc\nu\nl\nt\nu\nr\ne\ni\nn\nd\nu\ns\nt\nr\ni\ne\ns\n(\ne\n.\ng\n.\nf\na\nn\ne\nc\no\nn\no\nm\ny\na\nn\nd\na\nu\nd\ni\no\np\nh\ni\nl\ne\ns\n)\n,\na\nn\nd\nt\nh\ne\nN\nF\nT\nc\nr\ny\np\nt\no\n-\nc\no\nl\nl\ne\nc\nt\ni\nb\nl\ne\ns\nm\na\nr\nk\ne\nt\ni\ns\nn\no\ne\nx\nc\ne\np\nt\ni\no\nn\n.\nT\nh\na\nn\nk\ns\nt\no\nb\nl\no\nc\nk\nc\nh\na\ni\nn\n'\ns\no\np\ne\nn\nd\na\nt\na\na\nn\nd\nt\no\nk\ne\nn\n'\ns\np\nr\no\ng\nr\na\nm\nm\na\nb\nl\ne\na\ns\ns\ne\nt\nn\na\nt\nu\nr\ne\n,\nN\nF\nT\nc\no","metadata":{"loc":{"lines":{"from":18328,"to":18827}}}}],["46",{"pageContent":"-\nc\no\nl\nl\ne\nc\nt\ni\nb\nl\ne\ns\nm\na\nr\nk\ne\nt\ni\ns\nn\no\ne\nx\nc\ne\np\nt\ni\no\nn\n.\nT\nh\na\nn\nk\ns\nt\no\nb\nl\no\nc\nk\nc\nh\na\ni\nn\n'\ns\no\np\ne\nn\nd\na\nt\na\na\nn\nd\nt\no\nk\ne\nn\n'\ns\np\nr\no\ng\nr\na\nm\nm\na\nb\nl\ne\na\ns\ns\ne\nt\nn\na\nt\nu\nr\ne\n,\nN\nF\nT\nc\no\nl\nl\ne\nc\nt\ni\nb\nl\ne\ns\ne\nn\nj\no\ny\na\nw\ne\nl\nl\n-\ne\ns\nt\na\nb\nl\ni\ns\nh\ne\nd\n,\nt\nr\na\nn\ns\np\na\nr\ne\nn\nt\n,\nr\ne\nl\ni\na\nb\nl\ne\na\nn\nd\nc\no\ns\nt\n-\ne\nf\nf\ne\nc\nt\ni\nv\ne\ns\ne\nc\no\nn\nd\na\nr\ny\nm\na\nr\nk\ne\nt\n.\nT\nh\ne\nm\na\nr\nk\ne\nt\na\nl\nl\no\nw\ns\nu\ns\ne\nr\ns\nt\no\nt\nr\na\nd\ne\na\nn\nd\nt\nr\na\nn\ns\nf\ne\nr\nN\nF\nT\nc\no\nl\nl\ne\nc\nt\ni\nb\nl\ne\ns\nc\no\nn\nv\ne\nn\ni\ne\nn\nt\nl\ny\na\nn\nd\na\nu\nc\nt\ni\no\nn\nt\nh\ne\ni\nr\nc\no\nl\nl\ne\nc\nt\ni\nb\nl\ne\ns\na\nt\na\nf\nr\na\nc\nt\ni\no\nn\no\nf\nt\nh\ne\nc\no\ns\nt\n.\nN\nF\nT\nc\no\nl\nl\ne\nc\nt\ni\nb\nl\ne\ns\nh\na\nv\ne\na\nn\na\nd\nv\na\nn\nt\na\ng\ne\no\nv\ne\nr\nt\nr\na\nd\ni\nt\ni\no\nn\na\nl\nc\no\nl\nl\ne\nc\nt\ni\nb\nl\ne\ns\ni\nn\nt\nr\na\nd\ni\nn\ng\na\nn\nd\nc\ni\nr\nc\nu\nl\na\nt\ni\no\nn\n,\nw\nh\ni\nc\nh\nc\na\nn\nh\ne\nl\np\nt\no\nk\ne\ne\np\nt\nh\ne\nm\na\nr\nk\ne\nt\na\nc\nt\ni\nv\ne\n.\nS\no\nm\ne\nN\nF\nT\nc\no\nl\nl\ne\nc\nt\ni\nb\nl\ne\ns\na\nr\ne\ns\no\nl\nd\ni\nn\nm\ny\ns\nt\ne\nr\ny\nb\no\nx\ne\ns\n,\nw\nh\ni\nc\nh\ns\nt\ni\nm\nu\nl\na\nt\ne\ns\nc\ni\nr\nc\nu\nl\na\nt\ni\no\nn\na\nn\nd\ni\nn\nc\nr\ne\na\ns\ne\ns\nt\nh\ne\ni\nr\np\nr","metadata":{"loc":{"lines":{"from":18827,"to":19326}}}}],["47",{"pageContent":"e\nm\na\nr\nk\ne\nt\na\nc\nt\ni\nv\ne\n.\nS\no\nm\ne\nN\nF\nT\nc\no\nl\nl\ne\nc\nt\ni\nb\nl\ne\ns\na\nr\ne\ns\no\nl\nd\ni\nn\nm\ny\ns\nt\ne\nr\ny\nb\no\nx\ne\ns\n,\nw\nh\ni\nc\nh\ns\nt\ni\nm\nu\nl\na\nt\ne\ns\nc\ni\nr\nc\nu\nl\na\nt\ni\no\nn\na\nn\nd\ni\nn\nc\nr\ne\na\ns\ne\ns\nt\nh\ne\ni\nr\np\nr\ni\nc\ne\ns\n.\nH\na\nv\ni\nn\ng\nb\ne\ne\nn\np\nr\no\nv\ne\nn\nb\ny\nt\nh\ne\nm\na\nr\nk\ne\nt\nt\no\nb\ne\na\nn\ne\nf\nf\ne\nc\nt\ni\nv\ne\nw\na\ny\nt\no","metadata":{"loc":{"lines":{"from":19326,"to":19477}}}}],["48",{"pageContent":"4\np\nr\no\nm\no\nt\ne\nd\ne\ns\ni\nr\ne\na\nn\nd\np\nu\nr\nc\nh\na\ns\ne\ns\nf\nr\no\nm\nt\nh\ne\nu\ns\ne\nr\ns\n,\nt\nh\ni\ns\nb\nu\ns\ni\nn\ne\ns\ns\nm\no\nd\ne\nl\nc\na\nn\ng\nr\ne\na\nt\nl\ny\ns\nt\ni\nm\nu\nl\na\nt\ne\nm\na\nr\nk\ne\nt\nc\ni\nr\nc\nu\nl\na\nt\ni\no\nn\n.\nF\no\nr\ne\nx\na\nm\np\nl\ne\n,\nw\ni\nt\nh\nt\nh\ne\nN\nB\nA\nT\no\np\nS\nh\no\nt\nP\na\nc\nk\ns\n,\nu\ns\ne\nr\ns\nh\na\nv\ne\nt\nh\ne\nc\nh\na\nn\nc\ne\nt\no\ng\ne\nt\na\nr\na\nr\ne\nc\no\nl\nl\ne\nc\nt\ni\nb\nl\ne\nw\no\nr\nt\nh\nt\ne\nn\ns\no\nf\nt\nh\no\nu\ns\na\nn\nd\ns\no\nf\nd\no\nl\nl\na\nr\ns\n,\nw\nh\ni\nc\nh\na\nt\nt\nr\na\nc\nt\ne\nd\nm\na\nn\ny\np\ne\no\np\nl\ne\n.\nT\nh\ne\nb\ni\ng\ng\ne\ns\nt\nd\ni\nf\nf\ne\nr\ne\nn\nc\ne\nf\nr\no\nm\nt\nr\na\nd\ni\nt\ni\no\nn\na\nl\nc\no\nl\nl\ne\nc\nt\ni\nb\nl\ne\ns\ni\ns\nt\nh\na\nt\ns\no\nm\ne\nN\nF\nT\nc\no\nl\nl\ne\nc\nt\ni\nb\nl\ne\ns\na\nr\ne\nm\nu\nl\nt\ni\n-\np\nu\nr\np\no\ns\ne\n.\nF\ni\nr\ns\nt\nl\ny\n,\ni\nn\nt\nh\ne\nc\no\nn\nt\ne\nx\nt\no\nf\ng\na\nm\ne\ns\n,\na\nn\nN\nF\nT\ni\ns\nm\no\nr\ne\nt\nh\na\nn\nj\nu\ns\nt\na\nc\no\nl\nl\ne\nc\nt\ni\nb\nl\ne\n.\nI\nt\nc\na\nn\nb\ne\nu\ns\ne\nd\ni\nn\nt\nh\ne\ng\na\nm\ne\na\nn\nd\nh\na\ns\nv\na\nl\nu\ne\ni\nn\nt\nh\ne\nv\ni\nr\nt\nu\na\nl\nw\no\nr\nl\nd\n.\nS\ne\nc\no\nn\nd\nl\ny\n,\na\ns\nb\nl\no\nc\nk\nc\nh\na\ni\nn\nd\na\nt\na\ni\ns\nt\nr\na\nn\ns\np\na\nr\ne\nn\nt\na\nn\nd\nr\ne\nl\ni\na\nb\nl\ne\n,\nd\ni\nf\nf\ne\nr\ne\nn\nt\na\np\np\nl\ni\nc\na\nt\ni\no\nn\ns\nc\na\nn\nw\no\nr\nk\nt\no","metadata":{"loc":{"lines":{"from":19479,"to":19977}}}}],["49",{"pageContent":"u\ne\ni\nn\nt\nh\ne\nv\ni\nr\nt\nu\na\nl\nw\no\nr\nl\nd\n.\nS\ne\nc\no\nn\nd\nl\ny\n,\na\ns\nb\nl\no\nc\nk\nc\nh\na\ni\nn\nd\na\nt\na\ni\ns\nt\nr\na\nn\ns\np\na\nr\ne\nn\nt\na\nn\nd\nr\ne\nl\ni\na\nb\nl\ne\n,\nd\ni\nf\nf\ne\nr\ne\nn\nt\na\np\np\nl\ni\nc\na\nt\ni\no\nn\ns\nc\na\nn\nw\no\nr\nk\nt\no\ng\ne\nt\nh\ne\nr\nt\no\ns\nh\no\nw\nc\na\ns\ne\nN\nF\nT\nc\no\nl\nl\ne\nc\nt\ni\nb\nl\ne\ns\n.\nF\no\nr\ne\nx\na\nm\np\nl\ne\n,\ni\nn\nt\nh\ne\nC\nr\ny\np\nt\no\nv\no\nx\ne\nl\ns\nv\ni\nr\nt\nu\na\nl\nw\no\nr\nl\nd\n,\nu\ns\ne\nr\ns\nc\na\nn\ns\nh\no\nw\nc\na\ns\ne\nN\nF\nT\na\nr\nt\nw\no\nr\nk\nt\nh\ne\ny\no\nw\nn\n.\n1\n.\n2\n.\n3\n.\nA\nc\nh\ni\ne\nv\ni\nn\ng\na\nr\nt\nw\no\nr\nk\nt\nr\na\nc\ne\na\nb\ni\nl\ni\nt\ny\nI\nn\nt\nh\ne\nt\nr\na\nd\ni\nt\ni\no\nn\na\nl\nc\no\nl\nl\ne\nc\nt\ni\nb\nl\ne\nm\na\nr\nk\ne\nt\n,\nt\nh\ne\nr\ne\ni\ns\no\nf\nt\ne\nn\na\nc\no\nn\nc\ne\nr\nn\nt\nh\na\nt\nw\nh\ne\nn\no\nn\ne\np\nu\nr\nc\nh\na\ns\ne\ns\na\nn\na\nr\nt\nw\no\nr\nk\n,\nt\nh\ne\ni\nt\ne\nm\nm\na\ny\nb\ne\nd\ne\ne\nm\ne\nd\nt\no\nb\ne\nf\na\nk\ne\nb\ny\na\nn\na\nu\nt\nh\ne\nn\nt\ni\nc\na\nt\no\nr\na\nn\nd\nl\no\ns\ne\ni\nt\ns\nv\na\nl\nu\ne\n.\nI\nn\nt\nh\ne\nr\ne\na\nl\nw\no\nr\nl\nd\n,\np\ne\no\np\nl\ne\n'\ns\nj\nu\nd\ng\nm\ne\nn\nt\ns\na\nr\ne\ne\na\ns\ni\nl\ny\ni\nn\nf\nl\nu\ne\nn\nc\ne\nd\nb\ny\no\nt\nh\ne\nr\ns\n.\nT\nh\ne\nc\no\ns\nt\no\nf\na\nu\nt\nh\ne\nn\nt\ni\nc\na\nt\ni\no\nn\ni\ns\ne\nx\nt\nr\ne\nm\ne\nl\ny\nl\no\nw\n.\nS\no\nm\ne\nt\ni\nm\ne\ns\nt\nh\ne\np\nr\ni\nc\ne\no","metadata":{"loc":{"lines":{"from":19977,"to":20476}}}}],["50",{"pageContent":"e\no\np\nl\ne\n'\ns\nj\nu\nd\ng\nm\ne\nn\nt\ns\na\nr\ne\ne\na\ns\ni\nl\ny\ni\nn\nf\nl\nu\ne\nn\nc\ne\nd\nb\ny\no\nt\nh\ne\nr\ns\n.\nT\nh\ne\nc\no\ns\nt\no\nf\na\nu\nt\nh\ne\nn\nt\ni\nc\na\nt\ni\no\nn\ni\ns\ne\nx\nt\nr\ne\nm\ne\nl\ny\nl\no\nw\n.\nS\no\nm\ne\nt\ni\nm\ne\ns\nt\nh\ne\np\nr\ni\nc\ne\no\nf\na\nn\ni\nt\ne\nm\nc\na\nn\nc\nh\na\nn\ng\ne\nd\nr\na\ns\nt\ni\nc\na\nl\nl\ny\nb\ne\nc\na\nu\ns\ne\no\nf\na\nc\no\nm\nm\ne\nn\nt\nb\ny\na\nc\ne\nl\ne\nb\nr\ni\nt\ny\n.\nN\nF\nT\n,\nh\no\nw\ne\nv\ne\nr\n,\ni\ns\nd\ni\nf\nf\ne\nr\ne\nn\nt\n.\nO\nn\nc\ne\nt\nh\ne\nN\nF\nT\ni\ns\nr\ne\ng\ni\ns\nt\ne\nr\ne\nd\no\nn\nt\nh\ne\nb\nl\no\nc\nk\nc\nh\na\ni\nn\na\nn\nd\nt\nh\ne\np\nu\nb\nl\ni\nc\no\nf\nf\ne\nr\ni\nn\ng\ni\ns\nc\no\nm\np\nl\ne\nt\ne\nd\n,\na\nl\nl\nd\na\nt\na\nc\na\nn\nb\ne\nv\ne\nr\ni\nf\ni\ne\nd\np\nu\nb\nl\ni\nc\nl\ny\na\nn\nd\ni\nn\nd\ne\np\ne\nn\nd\ne\nn\nt\nl\ny\n.\nW\nh\ne\nn\nt\nh\ne\nd\na\nt\na\nc\na\nn\n'\nt\nb\ne\nt\na\nm\np\ne\nr\ne\nd\n,\ni\nt\ns\na\nu\nt\nh\ne\nn\nt\ni\nc\ni\nt\ny\nc\na\nn\n'\nt\nb\ne\nc\nh\na\nl\nl\ne\nn\ng\ne\nd\n,\ne\ni\nt\nh\ne\nr\n.\nI\nt\ns\na\nu\nt\nh\ne\nn\nt\ni\nc\ni\nt\ny\no\nn\nl\ny\ng\nr\no\nw\ns\ns\nt\nr\no\nn\ng\ne\nr\nw\ni\nt\nh\nt\ni\nm\ne\n.\nT\nh\ni\ns\na\nl\ns\no\ne\nn\ns\nu\nr\ne\ns\nt\nh\ne\na\nr\nt\nw\no\nr\nk\ni\nn\nt\ne\nl\nl\ne\nc\nt\nu\na\nl\np\nr\no\np\ne\nr\nt\ny\ni\ns\np\nr\no\nt\ne\nc\nt\ne\nd\ne\nf\nf\ni\nc\ni\ne\nn\nt\nl\ny\n.\nC\no\nm\np\na\nr\ne\nd\nt\no\nt\nr\na\nd\ni\nt\ni\no\nn\na\nl\nI\nP\np\nr\no\nt\ne\nc","metadata":{"loc":{"lines":{"from":20476,"to":20975}}}}],["51",{"pageContent":"m\ne\n.\nT\nh\ni\ns\na\nl\ns\no\ne\nn\ns\nu\nr\ne\ns\nt\nh\ne\na\nr\nt\nw\no\nr\nk\ni\nn\nt\ne\nl\nl\ne\nc\nt\nu\na\nl\np\nr\no\np\ne\nr\nt\ny\ni\ns\np\nr\no\nt\ne\nc\nt\ne\nd\ne\nf\nf\ni\nc\ni\ne\nn\nt\nl\ny\n.\nC\no\nm\np\na\nr\ne\nd\nt\no\nt\nr\na\nd\ni\nt\ni\no\nn\na\nl\nI\nP\np\nr\no\nt\ne\nc\nt\ni\no\nn\n,\na\nm\na\nj\no\nr\ni\nm\np\nr\no\nv\ne\nm\ne\nn\nt\nm\na\nd\ne\nb\ny\nN\nF\nT\ni\ns\na\nu\nt\no\nm\na\nt\ni\no\nn\n.\nU\ns\ni\nn\ng\ns\nm\na\nr\nt\nc\no\nn\nt\nr\na\nc\nt\ns\n,\nN\nF\nT\ns\ne\nm\np\no\nw\ne\nr\na\nr\nt\ni\ns\nt\ns\nb\ny\na\nl\nl\no\nw\ni\nn\ng\nt\nh\ne\nm\nt\no\nd\ni\ns\nt\nr\ni\nb\nu\nt\ne\nr\no\ny\na\nl\nt\ni\ne\ns\na\nn\nd\np\nr\no\nt\ne\nc\nt\nt\nh\ne\ni\nr\ni\nn\nt\ne\nl\nl\ne\nc\nt\nu\na\nl\np\nr\no\np\ne\nr\nt\ny\n.\nI\nn\no\nt\nh\ne\nr\nw\no\nr\nd\ns\n,\ni\nn\nt\nh\ne\nw\no\nr\nl\nd\no\nf\nb\nl\no\nc\nk\nc\nh\na\ni\nn\n,\nN\nF\nT\np\nr\no\nt\ne\nc\nt\ns\nt\nh\ne\na\nr\nt\ni\ns\nt\ns\n'\nc\no\np\ny\nr\ni\ng\nh\nt\n,\nw\nh\ni\nc\nh\nf\nu\nr\nt\nh\ne\nr\ni\nn\nc\nr\ne\na\ns\ne\ns\nt\nh\ne\nv\na\nl\nu\ne\no\nf\nN\nF\nT\na\nr\nt\nw\no\nr\nk\ns\n.\nA\ns\nN\nF\nT\ns\na\nr\ne\nu\nn\ni\nq\nu\ne\na\nn\nd\nt\nr\na\nn\ns\nf\ne\nr\na\nb\nl\ne\n,\no\nn\ne\nc\na\nn\nu\ns\ne\nt\nh\ne\nm\nt\no\np\nr\no\nv\ne\nh\ni\ns\n/\nh\ne\nr\no\nw\nn\ne\nr\ns\nh\ni\np\ni\nn\nc\na\ns\ne\no\nf\nf\no\nr\ng\ne\nr\ny\no\nr\ni\nn\nf\nr\ni\nn\ng\ne\nm\ne\nn\nt\n.\nA\n'\nm\na\nr\nk\ne\nd\n'\nN\nF\nT\ni\ns\nu\nn\ni\nq\nu\ne\na\nn\nd\nt\nh\ne\nr\ne\nf\no\nr\ne\na\nl\nl\nt\nh\ne\nm","metadata":{"loc":{"lines":{"from":20975,"to":21474}}}}],["52",{"pageContent":"n\nu\ns\ne\nt\nh\ne\nm\nt\no\np\nr\no\nv\ne\nh\ni\ns\n/\nh\ne\nr\no\nw\nn\ne\nr\ns\nh\ni\np\ni\nn\nc\na\ns\ne\no\nf\nf\no\nr\ng\ne\nr\ny\no\nr\ni\nn\nf\nr\ni\nn\ng\ne\nm\ne\nn\nt\n.\nA\n'\nm\na\nr\nk\ne\nd\n'\nN\nF\nT\ni\ns\nu\nn\ni\nq\nu\ne\na\nn\nd\nt\nh\ne\nr\ne\nf\no\nr\ne\na\nl\nl\nt\nh\ne\nm\no\nr\ne\nv\na\nl\nu\na\nb\nl\ne\n.\n1\n.\n2\n.\n4\n.\nB\nu\ni\nl\nd\ni\nn\ng\na\nn\ne\nw\ni\nn\nc\nr\ne\nm\ne\nn\nt\na\nl\na\nr\nt\nm\na\nr\nk\ne\nt\nA\ns\no\nf\nt\nh\ni\ns\nM\na\nr\nc\nh\n,\n2\n0\n2\n1\n,\nt\nh\ne\nc\nu\nm\nu\nl\na\nt\ni\nv\ne\nt\nr\na\nd\ni\nn\ng\nv\no\nl\nu\nm\ne\no\nf\nN\nF\nT\na\nr\nt\nw\no\nr\nk\ns\nr\ne\na\nc\nh\ne\nd\n$\n5\n4\n6\nm\ni\nl\nl\ni\no\nn\nw\ni\nt\nh\nt\nh\ne\nt\no\nt\na\nl\nt\nr\na\nn\ns\na\nc\nt\ni\no\nn\nc\no\nu\nn\nt\ne\nx\nc\ne\ne\nd\ni\nn\ng\n1\n9\n0\nk\n.\nT\nh\ne\nN\nF\nT\ni\nn\nd\nu\ns\nt\nr\ny\nc\no\nn\nt\ni\nn\nu\ne\nd\nt\no\nt\nh\nr\ni\nv\ne\ni\nn\nQ\n1\n2\n0\n2\n1\n,\nw\ni\nt\nh\ns\ni\ng\nn\ni\nf\ni\nc\na\nn\nt\ng\nr\no\nw\nt\nh\ni\nn\nt\nh\ne\nn\nu\nm\nb\ne\nr\no\nf\nt\nr\na\nn\ns\na\nc\nt\ni\no\nn\ns\n,","metadata":{"loc":{"lines":{"from":21474,"to":21828}}}}],["53",{"pageContent":"5\nt\nr\na\nn\ns\na\nc\nt\ni\no\nn\nv\no\nl\nu\nm\ne\n,\nn\nu\nm\nb\ne\nr\no\nf\na\nc\nt\ni\nv\ne\nw\na\nl\nl\ne\nt\ns\na\nn\nd\nn\nu\nm\nb\ne\nr\no\nf\nt\nr\na\nd\ne\nr\ns\nc\no\nm\np\na\nr\ne\nd\nt\no\nQ\n4\n2\n0\n2\n0\n,\ni\nn\nc\nl\nu\nd\ni\nn\ng\na\n2\n,\n0\n5\n3\n%\ni\nn\nc\nr\ne\na\ns\ne\ni\nn\nt\nr\na\nn\ns\na\nc\nt\ni\no\nn\nv\no\nl\nu\nm\ne\na\nn\nd\na\n1\n2\n9\n%\ni\nn\nc\nr\ne\na\ns\ne\ni\nn\nt\nh\ne\nn\nu\nm\nb\ne\nr\no\nf\nt\nr\na\nd\ne\nr\ns\n.\nA\nt\nt\nh\ne\ns\na\nm\ne\nt\ni\nm\ne\n,\nl\ni\nk\ne\nD\ne\nF\ni\n,\nN\nF\nT\nh\na\ns\nt\nh\ne\np\no\nt\ne\nn\nt\ni\na\nl\nt\no\nb\ne\nL\ne\ng\no\nb\nr\ni\nc\nk\ns\n,\nb\ne\ni\nn\ng\na\nb\nl\ne\nt\no\nc\no\nm\nb\ni\nn\ne\nw\ni\nt\nh\no\nt\nh\ne\nr\ns\ni\nn\nt\nh\ne\ne\nc\no\ns\ny\ns\nt\ne\nm\n.\nI\nn\nt\nh\ne\nw\no\nr\nl\nd\no\nf\nb\nl\no\nc\nk\nc\nh\na\ni\nn\n,\nN\nF\nT\nc\na\nn\nb\ne\nc\no\nm\nb\ni\nn\ne\nd\nw\ni\nt\nh\nm\na\nn\ny\ne\nl\ne\nm\ne\nn\nt\ns\n,\ni\nn\nc\nl\nu\nd\ni\nn\ng\nl\ne\nn\nd\ni\nn\ng\na\nn\nd\ng\na\nm\ni\nn\ng\n.\nI\nf\nw\ne\nc\na\nn\nt\na\np\ni\nn\nt\no\nN\nF\nT\n'\ns\ne\nc\no\nn\no\nm\ni\nc\nv\na\nl\nu\ne\n,\nw\ne\nc\na\nn\ne\nn\ns\nu\nr\ne\ni\nt\ns\nc\no\nn\ns\nt\na\nn\nt\nl\ni\nq\nu\ni\nd\ni\nt\ny\n.\nI\nn\nt\nh\ne\nr\ne\na\nl\nw\no\nr\nl\nd\n,\nN\nF\nT\nc\na\nn\nb\ne\nc\no\nm\nb\ni\nn\ne\nd\nw\ni\nt\nh\ns\no\nm\ne\np\nh\ny\ns\ni\nc\na\nl\na\ns\ns\ne\nt\ns\n,\ns\nu\nc\nh\na\ns\np\nr\no\np\ne\nr\nt\ny\n,\ns\ne\nc\nu\nr\ni\nt\ni\ne\ns\n,\ni\nn\ns\nu\nr\na\nn\nc\ne\n,\ne\nt\nc\n.\nN\no\nt\no","metadata":{"loc":{"lines":{"from":21830,"to":22328}}}}],["54",{"pageContent":"y\n.\nI\nn\nt\nh\ne\nr\ne\na\nl\nw\no\nr\nl\nd\n,\nN\nF\nT\nc\na\nn\nb\ne\nc\no\nm\nb\ni\nn\ne\nd\nw\ni\nt\nh\ns\no\nm\ne\np\nh\ny\ns\ni\nc\na\nl\na\ns\ns\ne\nt\ns\n,\ns\nu\nc\nh\na\ns\np\nr\no\np\ne\nr\nt\ny\n,\ns\ne\nc\nu\nr\ni\nt\ni\ne\ns\n,\ni\nn\ns\nu\nr\na\nn\nc\ne\n,\ne\nt\nc\n.\nN\no\nt\no\nn\nl\ny\nt\nh\na\nt\n,\nN\nF\nT\ni\ns\na\nl\ns\no\nb\ne\nc\no\nm\ni\nn\ng\nm\no\nr\ne\na\nn\nd\nm\no\nr\ne\na\nc\nc\ne\ns\ns\ni\nb\nl\ne\n,\na\ns\na\np\na\ni\nn\nt\ni\nn\ng\n,\ng\nr\na\nf\nf\ni\nt\ni\no\nr\na\nt\no\ny\nc\na\nn\nb\ne\na\nn\nN\nF\nT\n.\nI\nf\nt\nh\ne\ns\ne\na\ns\ns\ne\nt\ns\nc\na\nn\nb\ne\ns\nu\nc\nc\ne\ns\ns\nf\nu\nl\nl\ny\n“\nN\nF\nT\n-\ne\nd\n\"\n,\nt\nh\ne\nm\na\nr\nk\ne\nt\ne\nx\np\na\nn\ns\ni\no\nn\nt\no\nc\no\nm\ne\nw\ni\nl\nl\nb\ne\ne\nx\nt\nr\na\no\nr\nd\ni\nn\na\nr\ny\n.\n1\n.\n3\n.\nN\nF\nT\nt\no\nd\na\ny\n1\n.\n3\n.\n1\n.\nP\no\nl\ni\nc\ny\n:\nB\nl\no\nc\nk\nc\nh\na\ni\nn\nt\ne\nc\nh\nn\no\nl\no\ng\ny\ni\ns\nb\ne\nc\no\nm\ni\nn\ng\na\nn\ne\nw\nh\ni\ng\nh\ng\nr\no\nu\nn\nd\ni\nn\ng\nl\no\nb\na\nl\nc\no\nm\np\ne\nt\ni\nt\ni\no\nn\nP\nr\ne\ns\ni\nd\ne\nn\nt\nX\ni\nJ\ni\nn\np\ni\nn\ng\nn\no\nt\ne\nd\na\nt\nt\nh\ne\n1\n8\nt\nh\nC\no\nl\nl\ne\nc\nt\ni\nv\ne\nS\nt\nu\nd\ny\no\nf\nt\nh\ne\nC\nh\ni\nn\ne\ns\ne\nP\no\nl\ni\nt\ni\nc\na\nl\nB\nu\nr\ne\na\nu\nt\nh\na\nt\nb\nl\no\nc\nk\nc\nh\na\ni\nn\ns\nh\no\nu\nl\nd\nb\ne\na\nn\ni\nm\np\no\nr\nt\na\nn\nt\nb\nr\ne\na\nk\nt\nh\nr\no\nu\ng\nh\nf\no\nr\ni\nn\nd\ne\np\ne\nn\nd\ne\nn\nt\ni\nn\nn\no\nv\na\nt\ni\no\nn\no\nf","metadata":{"loc":{"lines":{"from":22328,"to":22827}}}}],["55",{"pageContent":"d\ny\no\nf\nt\nh\ne\nC\nh\ni\nn\ne\ns\ne\nP\no\nl\ni\nt\ni\nc\na\nl\nB\nu\nr\ne\na\nu\nt\nh\na\nt\nb\nl\no\nc\nk\nc\nh\na\ni\nn\ns\nh\no\nu\nl\nd\nb\ne\na\nn\ni\nm\np\no\nr\nt\na\nn\nt\nb\nr\ne\na\nk\nt\nh\nr\no\nu\ng\nh\nf\no\nr\ni\nn\nd\ne\np\ne\nn\nd\ne\nn\nt\ni\nn\nn\no\nv\na\nt\ni\no\nn\no\nf\nc\no\nr\ne\nt\ne\nc\nh\nn\no\nl\no\ng\ni\ne\ns\na\nn\nd\nu\nr\ng\ne\nd\nt\no\na\nc\nc\ne\nl\ne\nr\na\nt\ne\nt\nh\ne\nd\ne\nv\ne\nl\no\np\nm\ne\nn\nt\no\nf\nb\nl\no\nc\nk\nc\nh\na\ni\nn\nt\ne\nc\nh\nn\no\nl\no\ng\ny\na\nn\nd\ni\nn\nd\nu\ns\nt\nr\ni\na\nl\ni\nn\nn\no\nv\na\nt\ni\no\nn\n.\nA\nl\nt\nh\no\nu\ng\nh\nt\nh\ne\nm\na\nj\no\nr\ni\nt\ny\no\nf\ns\no\nv\ne\nr\ne\ni\ng\nn\ns\na\nc\nr\no\ns\ns\nt\nh\ne\nw\no\nr\nl\nd\na\nr\ne\nc\na\nu\nt\ni\no\nu\ns\na\nb\no\nu\nt\nc\nr\ny\np\nt\no\nc\nu\nr\nr\ne\nn\nc\ni\ne\ns\n,\nm\no\ns\nt\no\nf\nt\nh\ne\nm\ns\nt\ni\nl\nl\ns\nu\np\np\no\nr\nt\nt\nh\ne\na\np\np\nl\ni\nc\na\nt\ni\no\nn\no\nf\nb\nl\no\nc\nk\nc\nh\na\ni\nn\nt\ne\nc\nh\nn\no\nl\no\ng\ny\n.\nB\nl\no\nc\nk\nc\nh\na\ni\nn\nt\ne\nc\nh\nn\no\nl\no\ng\ny\ni\ns\nb\ne\nc\no\nm\ni\nn\ng\na\nn\ne\nw\nh\ni\ng\nh\ng\nr\no\nu\nn\nd\ni\nn\ng\nl\no\nb\na\nl\nc\no\nm\np\ne\nt\ni\nt\ni\no\nn\na\ns\nA\nI\n,\nt\nh\ne\nI\nn\nt\ne\nr\nn\ne\nt\no\nf\nT\nh\ni\nn\ng\ns\na\nn\nd\nc\nl\no\nu\nd\nc\no\nm\np\nu\nt\ni\nn\ng\no\nn\nc\ne\nw\na\ns\n.\n1\n.\n3\n.\n2\n.\nE\nc\no\nn\no\nm\ny\n:\nS\ni\ng\nn\ni\nf\ni\nc\na\nn\nt\ny\ne\na\nr\n-\no\nn\n-\ny\ne\na\nr\ni\nn\nc\nr\ne\na\ns\ne\ni\nn\nt\nh\ne\nn\nu\nm\nb\ne","metadata":{"loc":{"lines":{"from":22827,"to":23326}}}}],["56",{"pageContent":",\nt\nh\ne\nI\nn\nt\ne\nr\nn\ne\nt\no\nf\nT\nh\ni\nn\ng\ns\na\nn\nd\nc\nl\no\nu\nd\nc\no\nm\np\nu\nt\ni\nn\ng\no\nn\nc\ne\nw\na\ns\n.\n1\n.\n3\n.\n2\n.\nE\nc\no\nn\no\nm\ny\n:\nS\ni\ng\nn\ni\nf\ni\nc\na\nn\nt\ny\ne\na\nr\n-\no\nn\n-\ny\ne\na\nr\ni\nn\nc\nr\ne\na\ns\ne\ni\nn\nt\nh\ne\nn\nu\nm\nb\ne\nr\no\nf\nt\nr\na\nd\ne\nr\ns\na\nn\nd\nt\nr\na\nd\ni\nn\ng\nv\no\nl\nu\nm\ne\nI\nn\nQ\n1\n2\n0\n2\n1\n,\nt\nh\ne\nr\ne\nw\ne\nr\ne\nm\no\nr\ne\nt\nh\na\nn\n1\n4\n0\n,\n0\n0\n0\na\nc\nt\ni\nv\ne\nw\na\nl\nl\ne\nt\ns\na\nn\nd\nm\no\nr\ne\nt\nh\na\nn\n7\n0\n,\n0\n0\n0\nb\nu\ny\ne\nr\ns\no\nn\nt\nh\ne\nN\nF\nT\nm\na\nr\nk\ne\nt\np\nl\na\nc\ne\n,\nw\ni\nt\nh\n1\n3\n1\nt\ni\nm\ne\ns\nm\no\nr\ne\nt\nr\na\nn\ns\na\nc\nt\ni\no\nn\ns\nt\nh\na\nn\nQ\n1\n2\n0\n2\n0\na\nn\nd\n2\n0\nt\ni\nm\ne\ns\nm\no\nr\ne\nt\nh\na\nn\nQ\n4\n2\n0\n2\n0\n.\nG\nr\no\nw\nt\nh\nh\na\ns\nb\ne\ne\nn\nr\na\np\ni\nd\na\nc\nr\no\ns\ns\nt\nh\ne\ns\ne\nc\nt\no\nr\na\nn\nd\nc\no\nm\nm\nu\nn\ni\nt\ny\na\nc\nt\ni\nv\ni\nt\ny\na\nl\ns\no\ni\nn\nc\nr\ne\na\ns\ne\nd\ns\ni\ng\nn\ni\nf\ni\nc\na\nn\nt\nl\ny\n.","metadata":{"loc":{"lines":{"from":23326,"to":23683}}}}],["57",{"pageContent":"6\nT\no\nt\na\nl\nN\nF\nT\nt\nr\na\nn\ns\na\nc\nt\ni\no\nn\nv\no\nl\nu\nm\ne\na\nn\nd\nn\nu\nm\nb\ne\nr\no\nf\nt\nr\na\nn\ns\na\nc\nt\ni\no\nn\ns\nw\ni\nt\nh\ni\nn\nt\nh\ne\nl\na\ns\nt\ny\ne\na\nr\n.\nW\ni\nt\nh\nc\no\nu\nn\nt\nl\ne\ns\ns\na\np\np\nl\ni\nc\na\nt\ni\no\nn\na\nn\nd\nt\ne\nc\nh\nn\no\nl\no\ng\ny\np\no\ns\ns\ni\nb\ni\nl\ni\nt\ni\ne\ns\n,\nN\nF\nT\nc\no\nu\nl\nd\nb\ne\nc\no\nm\ne\nm\no\nr\ne\na\nn\nd\nm\no\nr\ne\na\nt\nt\nr\na\nc\nt\ni\nv\ne\na\ns\nw\ne\nm\no\nv\ne\nf\no\nr\nw\na\nr\nd\ni\nn\nt\nh\ne\nd\ni\ng\ni\nt\na\nl\ne\nr\na\n.\nA\nc\nc\no\nr\nd\ni\nn\ng\nt\no\nN\no\nn\nF\nu\nn\ng\ni\nb\nl\ne\n.\nc\no\nm\n,\nN\nF\nT\n'\ns\nt\no\nt\na\nl\nm\na\nr\nk\ne\nt\nc\na\np\ni\nt\na\nl\ni\nz\na\nt\ni\no\nn\nr\ne\na\nc\nh\ne\nd\n$\n2\n1\n0\nm\ni\nl\nl\ni\no\nn\ni\nn\n2\n0\n1\n9\na\nn\nd\nw\na\ns\ne\nx\np\ne\nc\nt\ne\nd\nt\no\ng\nr\no\nw\nb\ny\n5\n0\n%\nt\no\n$\n3\n2\n0\nm\ni\nl\nl\ni\no\nn\ni\nn\n2\n0\n2\n0\n.\nT\nh\ne\nn\nu\nm\nb\ne\nr\nw\na\ns\na\nl\ns\no\ne\nx\np\ne\nc\nt\ne\nd\nt\no\nc\no\nn\nt\ni\nn\nu\ne\nt\no\nc\nl\ni\nm\nb\nb\ny\n1\n2\n5\n%\nt\no\n$\n7\n1\n0\nm\ni\nl\nl\ni\no\nn\ni\nn\n2\n0\n2\n1\n.\n2\n0\n1\n7\n-\n2\n0\n2\n1\nN\nF\nT\nT\no\nt\na\nl\nM\na\nr\nk\ne\nt\nC\na\np\ni\nt\na\nl\ni\nz\na\nt\ni\no\nn\na\nn\nd\nF\no\nr\ne\nc\na\ns\nt\n(\ni\nn\nU\nS\n$\n)\n1\n.\n3\n.\n3\n.\nC\nu\nl\nt\nu\nr\ne\n:\nM\no\nr\ne\na\nn\nd\nm\no\nr\ne\np\ne\no\np\nl\ne\na\nr\ne\nn\no\nt\ni\nc\ni\nn\ng\nN\nF\nT\na\np\np\nl\ni\nc\na\nt\ni\no\nn\ns\nT\nh\ne\nn\nu\nm\nb\ne\nr\no","metadata":{"loc":{"lines":{"from":23685,"to":24183}}}}],["58",{"pageContent":"t\nC\na\np\ni\nt\na\nl\ni\nz\na\nt\ni\no\nn\na\nn\nd\nF\no\nr\ne\nc\na\ns\nt\n(\ni\nn\nU\nS\n$\n)\n1\n.\n3\n.\n3\n.\nC\nu\nl\nt\nu\nr\ne\n:\nM\no\nr\ne\na\nn\nd\nm\no\nr\ne\np\ne\no\np\nl\ne\na\nr\ne\nn\no\nt\ni\nc\ni\nn\ng\nN\nF\nT\na\np\np\nl\ni\nc\na\nt\ni\no\nn\ns\nT\nh\ne\nn\nu\nm\nb\ne\nr\no\nf\ns\ne\na\nr\nc\nh\nq\nu\ne\nr\ni\ne\ns\nf\no\nr\nN\nF\nT\nh\na\ns\ni\nn\nc\nr\ne\na\ns\ne\nd\nd\nr\na\ns\nt\ni\nc\na\nl\nl\ny\ni\nn\n2\n0\n2\n1\n.\nA\nc\nc\no\nr\nd\ni\nn\ng\nt\no\nG\no\no\ng\nl\ne\nT\nr\ne\nn\nd\ns\n,\ng\nl\no\nb\na\nl\nl\ny\n,\nt\nh\ne\nn\nu\nm\nb\ne\nr\no\nf\ns\ne\na\nr\nc\nh\nq\nu\ne\nr\ni\ne\ns\nf\no\nr\nk\ne\ny\nw\no\nr\nd\ns\n\"\nN\nF\nT\n\"\na\nn\nd\n\"\nN\no\nn\n-\nf\nu\nn\ng\ni\nb\nl\ne\nt\no\nk\ne\nn\n\"\nh\na\ns\nb\ne\ne\nn\ni\nn\nc\nr\ne\na\ns\ni\nn\ng\ng\nr\ne\na\nt\nl\ny\ni\nn\n2\n0\n2\n1\n,\ni\nn\nd\ni\nc\na\nt\ni\nn\ng\nt\nh\ne\ng\nr\no\nw\ni\nn\ng\np\no\np\nu\nl\na\nr\ni\nt\ny\na\nn\nd\nv\ni\ns\ni\nb\ni\nl\ni\nt\ny\no\nf\nt\nh\ne\nN\nF\nT\ne\nc\no\ns\ny\ns\nt\ne\nm\n.","metadata":{"loc":{"lines":{"from":24183,"to":24519}}}}],["59",{"pageContent":"7\nG\nl\no\nb\na\nl\ns\ne\na\nr\nc\nh\nq\nu\ne\nr\ni\ne\ns\nf\no\nr\n\"\nN\nF\nT\n\"\na\nn\nd\n\"\nn\no\nn\n-\nf\nu\nn\ng\ni\nb\nl\ne\nt\no\nk\ne\nn\n\"\no\nn\nG\no\no\ng\nl\ne\n(\n2\n0\n1\n8\n-\n2\n0\n2\n1\n)\n1\n.\n3\n.\n4\n.\nT\ne\nc\nh\nn\no\nl\no\ng\ny\n:\nN\nF\nT\ni\ns\nb\ne\ni\nn\ng\nu\ns\ne\nd\ni\nn\nm\na\nn\ny\na\nr\ne\na\ns\ni\nn\nr\ne\na\nl\nl\ni\nf\ne\nT\nh\ne\nb\nl\no\nc\nk\nc\nh\na\ni\nn\n-\nb\na\ns\ne\nd\nN\nF\nT\nw\na\ns\nc\nr\ne\na\nt\ne\nd\nt\no\ng\ni\nv\ne\nd\ni\ng\ni\nt\na\nl\na\ns\ns\ne\nt\ns\na\nu\nn\ni\nq\nu\ne\nm\na\nr\nk\ne\nr\n.\nN\nF\nT\na\nl\ns\no\np\nr\no\nv\ni\nd\ne\ns\na\nc\nr\no\ns\ns\n-\nb\no\nr\nd\ne\nr\nc\nl\ne\na\nr\ni\nn\ng\na\nn\nd\ns\ne\nt\nt\nl\ne\nm\ne\nn\nt\np\nl\na\nt\nf\no\nr\nm\n,\ne\nn\na\nb\nl\ni\nn\ng\nn\no\nn\n-\nf\nu\nn\ng\ni\nb\nl\ne\nd\ni\ng\ni\nt\na\nl\na\ns\ns\ne\nt\ns\nt\no\nb\ne\nm\na\np\np\ne\nd\no\nn\nt\no\nt\nh\ne\nc\nh\na\ni\nn\nf\no\nr\ne\nx\nc\nh\na\nn\ng\ni\nn\ng\n.\nN\nF\nT\ni\ns\nv\na\nl\nu\na\nb\nl\ne\nb\ne\nc\na\nu\ns\ne\ni\nt\n'\ns\na\nu\nt\nh\ne\nn\nt\ni\nc\n,\nt\nr\na\nn\ns\nf\ne\nr\na\nb\nl\ne\na\nn\nd\np\nr\no\nv\ni\nd\ne\ns\no\nw\nn\ne\nr\ns\nh\ni\np\n.\nS\nt\na\nt\ni\ns\nt\ni\nc\ns\ns\nh\no\nw\nt\nh\na\nt\n,\ni\nn\nt\nh\ne\ng\nl\no\nb\na\nl\nN\nF\nT\nm\na\nr\nk\ne\nt\n,\nt\nh\ne\nt\no\np\n3\nN\nF\nT\na\np\np\nl\ni\nc\na\nt\ni\no\nn\ns\na\nr\ne\nc\no\nl\nl\ne\nc\nt\ni\no\nn\n,\na\nr\nt\ns\na\nn\nd\ns\np\no\nr\nt\ns\n.\nT\nh\ne\ny\na\nc\nc\no\nu\nn\nt\ne\nd\nf\no\nr\n4\n8\n%\n,\n4\n3\n%\na\nn\nd\n4\n%\no","metadata":{"loc":{"lines":{"from":24521,"to":25019}}}}],["60",{"pageContent":"i\nn\nt\nh\ne\ng\nl\no\nb\na\nl\nN\nF\nT\nm\na\nr\nk\ne\nt\n,\nt\nh\ne\nt\no\np\n3\nN\nF\nT\na\np\np\nl\ni\nc\na\nt\ni\no\nn\ns\na\nr\ne\nc\no\nl\nl\ne\nc\nt\ni\no\nn\n,\na\nr\nt\ns\na\nn\nd\ns\np\no\nr\nt\ns\n.\nT\nh\ne\ny\na\nc\nc\no\nu\nn\nt\ne\nd\nf\no\nr\n4\n8\n%\n,\n4\n3\n%\na\nn\nd\n4\n%\no\nf\nt\nh\ne\ng\nl\no\nb\na\nl\nN\nF\nT\nm\na\nr\nk\ne\nt\ni\nn\nQ\n1\n2\n0\n2\n1\n,\nw\ni\nt\nh\nr\ne\ns\np\ne\nc\nt\ni\nv\ne\nm\na\nr\nk\ne\nt\ns\ni\nz\ne\no\nf\n$\n9\n6\n0\nm\ni\nl\nl\ni\no\nn\n,\n$\n8\n6\n0\nm\ni\nl\nl\ni\no\nn\na\nn\nd\n$\n0\n.\n8\nb\ni\nl\nl\ni\no\nn\n.\nN\nF\nT\nM\na\nr\nk\ne\nt\nC\no\nm\np\no\ns\ni\nt\ni\no\nn\n,\nQ\n1\n2\n0\n2\n1","metadata":{"loc":{"lines":{"from":25019,"to":25237}}}}],["61",{"pageContent":"8\n2\n.\nA\nb\no\nu\nt\nA\nP\nE\nN\nF\nT\nA\nP\nE\nN\nF\nT\nw\na\ns\no\nf\nf\ni\nc\ni\na\nl\nl\ny\nr\ne\ng\ni\ns\nt\ne\nr\ne\nd\ni\nn\nS\ni\nn\ng\na\np\no\nr\ne\no\nn\nM\na\nr\nc\nh\n2\n9\n,\n2\n0\n2\n1\nt\no\nm\ne\ne\nt\no\np\np\no\nr\nt\nu\nn\ni\nt\ni\ne\ns\na\nn\nd\na\nd\nd\nr\ne\ns\ns\np\na\ni\nn\np\no\ni\nn\nt\ns\ni\nn\nt\nh\ne\ni\nn\nd\nu\ns\nt\nr\ny\n.\nT\nh\ne\np\nr\ne\ns\ni\nd\ne\nn\nt\no\nf\nA\nP\nE\nN\nF\nT\n,\nS\nt\ne\nv\ne\nZ\n.\nL\ni\nu\n,\nh\no\nl\nd\ns\na\nb\na\nc\nh\ne\nl\no\nr\ni\nn\nE\nl\ne\nc\nt\nr\ni\nc\na\nl\nE\nn\ng\ni\nn\ne\ne\nr\ni\nn\ng\nf\nr\no\nm\nZ\nh\ne\nj\ni\na\nn\ng\nU\nn\ni\nv\ne\nr\ns\ni\nt\ny\na\nn\nd\na\nn\nM\nB\nA\ni\nn\nF\ni\nn\na\nn\nc\ne\nf\nr\no\nm\nC\no\nl\nu\nm\nb\ni\na\nB\nu\ns\ni\nn\ne\ns\ns\nS\nc\nh\no\no\nl\n.\nH\ne\nh\na\ns\ne\nx\nt\ne\nn\ns\ni\nv\ne\ne\nx\np\ne\nr\ni\ne\nn\nc\ne\ni\nn\nt\nh\ne\ni\nn\nt\ne\nr\nn\na\nt\ni\no\nn\na\nl\nc\na\np\ni\nt\na\nl\nm\na\nr\nk\ne\nt\ns\n,\np\nr\ne\nv\ni\no\nu\ns\nl\ny\ns\np\ne\nn\nt\no\nv\ne\nr\n2\n0\ny\ne\na\nr\ns\nw\no\nr\nk\ni\nn\ng\nf\no\nr\nm\na\nj\no\nr\nf\ni\nn\na\nn\nc\ni\na\nl\ni\nn\ns\nt\ni\nt\nu\nt\ni\no\nn\ns\ni\nn\nc\nl\nu\nd\ni\nn\ng\nF\ni\nd\ne\nl\ni\nt\ny\nI\nn\nt\ne\nr\nn\na\nt\ni\no\nn\na\nl\n,\nS\na\nl\no\nm\no\nn\nS\nm\ni\nt\nh\nB\na\nr\nn\ne\ny\n,\nN\no\nm\nu\nr\na\nI\nn\nt\ne\nr\nn\na\nt\ni\no\nn\na\nl\n,\nA\nn\nt\nF\ni\nn\na\nn\nc\ni\na\nl\nG\nr\no\nu\np\n,\ne\nt\nc\n.\nP\nr\ni\no\nr\nt\no\nt\nh\ni\ns\n,\nS\nt\ne\nv\ne\nh\na\ns\ns\nu\nc\nc\ne\ns\ns\nf\nu\nl\nl\ny","metadata":{"loc":{"lines":{"from":25239,"to":25737}}}}],["62",{"pageContent":"t\ni\no\nn\na\nl\n,\nS\na\nl\no\nm\no\nn\nS\nm\ni\nt\nh\nB\na\nr\nn\ne\ny\n,\nN\no\nm\nu\nr\na\nI\nn\nt\ne\nr\nn\na\nt\ni\no\nn\na\nl\n,\nA\nn\nt\nF\ni\nn\na\nn\nc\ni\na\nl\nG\nr\no\nu\np\n,\ne\nt\nc\n.\nP\nr\ni\no\nr\nt\no\nt\nh\ni\ns\n,\nS\nt\ne\nv\ne\nh\na\ns\ns\nu\nc\nc\ne\ns\ns\nf\nu\nl\nl\ny\ne\ns\nt\na\nb\nl\ni\ns\nh\ne\nd\na\nn\nd\nm\na\nn\na\ng\ne\nd\ni\nn\ns\nt\ni\nt\nu\nt\ni\no\nn\na\nl\ne\nq\nu\ni\nt\ny\nb\nu\ns\ni\nn\ne\ns\ns\nf\no\nr\na\nn\nu\nm\nb\ne\nr\no\nf\nC\nh\ni\nn\ne\ns\ne\ns\ne\nc\nu\nr\ni\nt\ni\ne\ns\nf\ni\nr\nm\ns\n.\nC\no\nr\ne\nb\nu\ns\ni\nn\ne\ns\ns\ne\ns\no\nf\nA\nP\nE\nN\nF\nT\ni\nn\nc\nl\nu\nd\ne\n:\ni\nn\nv\ne\ns\nt\ni\nn\ng\ni\nn\nt\no\np\nN\nF\nT\np\nl\na\nt\nf\no\nr\nm\ns\na\nn\nd\na\nr\nt\nw\no\nr\nk\ns\n,\ni\nn\nc\nu\nb\na\nt\ni\nn\ng\nl\ne\na\nd\ni\nn\ng\nN\nF\nT\na\nr\nt\ni\ns\nt\ns\nt\no\nb\nu\ni\nl\nd\na\nb\nr\ni\nd\ng\ne\nb\ne\nt\nw\ne\ne\nn\nw\no\nr\nl\nd\n-\nc\nl\na\ns\ns\na\nr\nt\ni\ns\nt\ns\na\nn\nd\nt\nh\ne\nN\nF\nT\nw\no\nr\nl\nd\n;\ns\np\no\nn\ns\no\nr\ni\nn\ng\ng\na\nl\nl\ne\nr\ni\ne\ns\n,\no\nr\ng\na\nn\ni\nz\ni\nn\ng\na\nr\nt\ne\nx\nh\ni\nb\ni\nt\ni\no\nn\ns\no\nr\np\nu\nb\nl\ni\nc\na\nt\ni\no\nn\ns\n,\na\nn\nd\ns\ne\nt\nt\ni\nn\ng\nu\np\na\nw\na\nr\nd\ns\nt\no\ns\nu\np\np\no\nr\nt\na\nr\nt\nc\nr\ne\na\nt\ni\no\nn\na\nn\nd\nc\nr\ni\nt\ni\nc\ni\ns\nm\n;\ne\ns\nt\na\nb\nl\ni\ns\nh\ni\nn\ng\na\nr\nt\nc\no\nl\nl\ne\nc\nt\ni\no\nn\ns\n,\ne\nt\nc\n.\nB\ny\na\np\np\nl\ny\ni\nn\ng\nb\nl\no\nc\nk\nc\nh\na\ni\nn\nt\ne\nc\nh\nn\no\nl","metadata":{"loc":{"lines":{"from":25737,"to":26236}}}}],["63",{"pageContent":"g\nu\np\na\nw\na\nr\nd\ns\nt\no\ns\nu\np\np\no\nr\nt\na\nr\nt\nc\nr\ne\na\nt\ni\no\nn\na\nn\nd\nc\nr\ni\nt\ni\nc\ni\ns\nm\n;\ne\ns\nt\na\nb\nl\ni\ns\nh\ni\nn\ng\na\nr\nt\nc\no\nl\nl\ne\nc\nt\ni\no\nn\ns\n,\ne\nt\nc\n.\nB\ny\na\np\np\nl\ny\ni\nn\ng\nb\nl\no\nc\nk\nc\nh\na\ni\nn\nt\ne\nc\nh\nn\no\nl\no\ng\ny\ni\nn\nt\no\nt\nh\ne\nN\nF\nT\nw\no\nr\nl\nd\n,\nA\nP\nE\nN\nF\nT\ne\nx\np\na\nn\nd\ns\nt\nh\ne\nu\ns\ne\nc\na\ns\ne\ns\no\nf\nb\nl\no\nc\nk\nc\nh\na\ni\nn\n.\nA\nP\nE\nN\nF\nT\np\nu\nr\nc\nh\na\ns\ne\ns\nw\ne\nl\nl\n-\nk\nn\no\nw\nn\nt\nr\na\nd\ni\nt\ni\no\nn\na\nl\na\nn\nd\nN\nF\nT\na\nr\nt\nw\no\nr\nk\ns\na\ns\nu\nn\nd\ne\nr\nl\ny\ni\nn\ng\na\ns\ns\ne\nt\ns\n,\na\nn\nd\nw\no\nr\nk\ns\nt\no\ni\nm\np\nr\no\nv\ne\nt\nh\ne\nN\nF\nT\nt\nr\na\nd\ni\nn\ng\ns\nt\na\nn\nd\na\nr\nd\n.\nI\nt\np\nr\no\nv\ni\nd\ne\ns\ns\nu\np\np\no\nr\nt\nt\no\ng\no\nv\ne\nr\nn\nm\ne\nn\nt\na\ng\ne\nn\nc\ni\ne\ns\n,\nu\nn\ni\nv\ne\nr\ns\ni\nt\ni\ne\ns\n,\nl\na\nw\ny\ne\nr\ns\na\nn\nd\ni\nn\nd\nu\ns\nt\nr\ny\ne\nl\ni\nt\ne\ns\ni\nn\ni\ns\ns\nu\ni\nn\ng\np\no\nl\ni\nc\ni\ne\ns\nt\nh\na\nt\ng\no\nv\ne\nr\nn\nt\nh\ne\nh\ne\na\nl\nt\nh\ny\nd\ne\nv\ne\nl\no\np\nm\ne\nn\nt\no\nf\nt\nh\ne\ni\nn\nd\nu\ns\nt\nr\ny\n.\nT\nh\ne\nr\ne\na\nr\ne\nn\no\nw\nt\nh\nr\ne\ne\nm\na\nj\no\nr\nu\ns\ne\nc\na\ns\ne\ns\ni\nn\nt\nh\ne\nb\nl\no\nc\nk\nc\nh\na\ni\nn\ni\nn\nd\nu\ns\nt\nr\ny\n,\nn\na\nm\ne\nl\ny\nv\na\nl\nu\ne\ne\nx\nc\nh\na\nn\ng\ne\n,\nc\no\nl\nl\na\nb\no\nr\na\nt\ni\no\nn\n,\na\nn\nd\nr\ne\nc\no\nr\nd\n-\nk\ne","metadata":{"loc":{"lines":{"from":26236,"to":26735}}}}],["64",{"pageContent":".\nT\nh\ne\nr\ne\na\nr\ne\nn\no\nw\nt\nh\nr\ne\ne\nm\na\nj\no\nr\nu\ns\ne\nc\na\ns\ne\ns\ni\nn\nt\nh\ne\nb\nl\no\nc\nk\nc\nh\na\ni\nn\ni\nn\nd\nu\ns\nt\nr\ny\n,\nn\na\nm\ne\nl\ny\nv\na\nl\nu\ne\ne\nx\nc\nh\na\nn\ng\ne\n,\nc\no\nl\nl\na\nb\no\nr\na\nt\ni\no\nn\n,\na\nn\nd\nr\ne\nc\no\nr\nd\n-\nk\ne\ne\np\ni\nn\ng\n.\nT\nh\ne\nu\nn\ni\nq\nu\ne\nN\nF\nT\nf\ni\nt\ns\ni\nn\na\nl\nl\nt\nh\nr\ne\ne\no\nf\nt\nh\ne\nu\ns\ne\nc\na\ns\ne\ns\n.\nI\nt\ni\ns\nn\no\nt\no\nn\nl\ny\na\nh\no\nt\nt\nr\ne\nn\nd\ni\nn\nt\nh\ne\nb\nl\no\nc\nk\nc\nh\na\ni\nn\ni\nn\nd\nu\ns\nt\nr\ny\n,\nb\nu\nt\na\nl\ns\no\na\nc\nr\ni\nt\ni\nc\na\nl\ne\nl\ne\nm\ne\nn\nt\nt\nh\na\nt\ni\ns\nv\ne\nr\ny\nl\ni\nk\ne\nl\ny\nt\no\nr\ne\nv\no\nl\nu\nt\ni\no\nn\ni\nz\ne\nt\nh\ne\ni\nn\nd\nu\ns\nt\nr\ny\na\nn\nd\nt\na\nk\ne\ni\nt\nt\no\nt\nh\ne\nn\ne\nx\nt\nl\ne\nv\ne\nl\n.\nA\ns\na\nb\nl\no\nc\nk\nc\nh\na\ni\nn\ne\nn\nt\ne\nr\np\nr\ni\ns\ne\n,\nA\nP\nE\nN\nF\nT\nw\ni\nl\nl\ni\nn\nv\ne\ns\nt\ni\nn\na\nr\nt\nw\no\nr\nk\ns\na\nn\nd\np\nr\no\nm\no\nt\ne\nt\nr\na\nd\ni\nt\ni\no\nn\na\nl\na\nn\nd\nd\ni\ng\ni\nt\na\nl\na\nr\nt\nb\ny\nl\ne\nv\ne\nr\na\ng\ni\nn\ng\ni\nt\ns\ns\nt\nr\ne\nn\ng\nt\nh\ns\ni\nn\nt\ne\nc\nh\nn\no\nl\no\ng\ny\n,\nm\na\nr\nk\ne\nt\n,\ni\nn\nd\nu\ns\nt\nr\ny\na\nn\nd\np\no\nl\ni\nc\ny\nr\ne\ns\ne\na\nr\nc\nh\n,\nw\ni\nt\nh\nt\nh\ne\na\ni\nm\no\nf\ni\nn\nt\nr\no\nd\nu\nc\ni\nn\ng\nb\nl\no\nc\nk\nc\nh\na\ni\nn\ni\nn\nt\no\nd\ni\nv\ne\nr\ns\ne\nu\ns\ne\nc\na\ns\ne\ns\n.","metadata":{"loc":{"lines":{"from":26735,"to":27220}}}}],["65",{"pageContent":"9\n3\n.\nM\ni\ns\ns\ni\no\nn\n,\nV\ni\ns\ni\no\nn\na\nn\nd\nV\na\nl\nu\ne\no\nf\nA\nP\nE\nN\nF\nT\n3\n.\n1\n.\nM\ni\ns\ns\ni\no\nn\nA\nP\nE\nN\nF\nT\ni\ns\nc\no\nm\nm\ni\nt\nt\ne\nd\nt\no\nr\ne\ng\ni\ns\nt\ne\nr\ni\nn\ng\nw\no\nr\nl\nd\n-\nc\nl\na\ns\ns\na\nr\nt\nw\no\nr\nk\ns\na\ns\nN\nF\nT\ns\no\nn\n-\nc\nh\na\ni\nn\n.\n3\n.\n2\n.\nV\ni\ns\ni\no\nn\nA\nP\nE\nN\nF\nT\ni\ns\na\ni\nm\ne\nd\na\nt\nb\ne\nc\no\nm\ni\nn\ng\nt\nh\ne\nA\nR\nK\nF\nu\nn\nd\ns\ni\nn\nt\nh\ne\nN\nF\nT\ns\np\na\nc\ne\nt\no\nb\nu\ni\nl\nd\na\nb\nr\ni\nd\ng\ne\nb\ne\nt\nw\ne\ne\nn\nt\no\np\n-\nn\no\nt\nc\nh\na\nr\nt\ni\ns\nt\ns\na\nn\nd\nb\nl\no\nc\nk\nc\nh\na\ni\nn\n,\na\nn\nd\nt\no\ns\nu\np\np\no\nr\nt\nt\nh\ne\ng\nr\no\nw\nt\nh\no\nf\nn\na\nt\ni\nv\ne\nc\nr\ny\np\nt\no\nN\nF\nT\na\nr\nt\ni\ns\nt\ns\n.\n3\n.\n3\n.\nV\na\nl\nu\ne\nA\nP\nE\nN\nF\nT\nh\no\nl\nd\ns\no\nn\nt\no\nt\nh\ne\nv\na\nl\nu\ne\no\nf\nm\na\nk\ni\nn\ng\na\nr\nt\nw\no\nr\nk\ns\na\nc\nc\ne\ns\ns\ni\nb\nl\ne\nt\no\na\nl\nl\n.","metadata":{"loc":{"lines":{"from":27222,"to":27547}}}}],["66",{"pageContent":"1\n0\n4\n.\nS\nt\nr\ne\nn\ng\nt\nh\ns\no\nf\nA\nP\nE\nN\nF\nT\n4\n.\n1\n.\nA\nd\nv\na\nn\nc\ne\nd\nt\ne\nc\nh\nn\no\nl\no\ng\ny\nA\nP\nE\nN\nF\nT\ni\ns\nb\na\nc\nk\ne\nd\nb\ny\nt\nh\ne\nu\nn\nd\ne\nr\nl\ny\ni\nn\ng\nt\ne\nc\nh\nn\no\nl\no\ng\ny\no\nf\nt\no\np\n-\nn\no\nt\nc\nh\nb\nl\no\nc\nk\nc\nh\na\ni\nn\ns\nE\nt\nh\ne\nr\ne\nu\nm\na\nn\nd\nT\nR\nO\nN\nw\ni\nt\nh\ns\nu\np\np\no\nr\nt\nf\nr\no\nm\nt\nh\ne\nw\no\nr\nl\nd\n'\ns\nl\na\nr\ng\ne\ns\nt\nd\ni\ns\nt\nr\ni\nb\nu\nt\ne\nd\ns\nt\no\nr\na\ng\ne\ns\ny\ns\nt\ne\nm\nB\ni\nt\nt\no\nr\nr\ne\nn\nt\nF\ni\nl\ne\nS\ny\ns\nt\ne\nm\n(\nB\nT\nF\nS\n)\nt\no\nd\ne\nl\ni\nv\ne\nr\nt\nh\ne\nm\ni\ns\ns\ni\no\nn\no\nf\nr\ne\ng\ni\ns\nt\ne\nr\ni\nn\ng\nw\no\nr\nl\nd\n-\nc\nl\na\ns\ns\na\nr\nt\nw\no\nr\nk\ns\na\ns\nN\nF\nT\ns\no\nn\nt\nh\ne\nb\nl\no\nc\nk\nc\nh\na\ni\nn\n.\nN\nF\nT\na\nr\nt\nw\no\nr\nk\ns\nw\ni\nl\nl\nb\ne\nm\na\nd\ne\ni\nn\nt\no\nu\nn\ni\nq\nu\ne\nE\nR\nC\n-\n7\n2\n1\n/\nT\nR\nC\n-\n7\n2\n1\nt\no\nk\ne\nn\ns\no\nn\n-\nc\nh\na\ni\nn\n.\nT\nh\ne\nt\no\nk\ne\nn\ns\nw\ni\nl\nl\nb\ne\ns\nt\no\nr\ne\nd\ni\nn\nt\nh\ne\nE\nR\nC\n2\n0\n/\nT\nR\nC\n2\n0\ns\nm\na\nr\nt\nc\no\nn\nt\nr\na\nc\nt\ns\no\nf\nN\nF\nT\nt\no\nk\ne\nn\ns\n,\na\nn\nd\nt\nh\ne\nr\ni\ng\nh\nt\ns\na\nn\nd\ni\nn\nt\ne\nr\ne\ns\nt\ns\no\nf\nt\nh\ne\nu\nn\nd\ne\nr\nl\ny\ni\nn\ng\na\nr\nt\nw\no\nr\nk\ns\nb\ne\nl\no\nn\ng\nt\no\nN\nF\nT\nh\no\nl\nd\ne\nr\ns\n.\nC\no\nr\nr\ne\ns\np\no\nn\nd\ni\nn\ng\ni\nn\nf\no\nr\nm\na\nt\ni\no\nn\no\nf\nt\nh\ne\nE\nR\nC\n-\n7\n2","metadata":{"loc":{"lines":{"from":27549,"to":28047}}}}],["67",{"pageContent":"n\nd\nt\nh\ne\nr\ni\ng\nh\nt\ns\na\nn\nd\ni\nn\nt\ne\nr\ne\ns\nt\ns\no\nf\nt\nh\ne\nu\nn\nd\ne\nr\nl\ny\ni\nn\ng\na\nr\nt\nw\no\nr\nk\ns\nb\ne\nl\no\nn\ng\nt\no\nN\nF\nT\nh\no\nl\nd\ne\nr\ns\n.\nC\no\nr\nr\ne\ns\np\no\nn\nd\ni\nn\ng\ni\nn\nf\no\nr\nm\na\nt\ni\no\nn\no\nf\nt\nh\ne\nE\nR\nC\n-\n7\n2\n1\n/\nT\nR\nC\n-\n7\n2\n1\nt\no\nk\ne\nn\na\nn\nd\nt\nh\ne\nr\ne\nc\no\nr\nd\ns\no\nf\nt\nh\ne\na\nr\nt\nw\no\nr\nk\nw\ni\nl\nl\nb\ne\np\ne\nr\nm\na\nn\ne\nn\nt\nl\ny\ns\nt\no\nr\ne\nd\no\nn\nt\nh\ne\nB\nT\nF\nS\nn\ne\nt\nw\no\nr\nk\n(\nB\ni\nt\nT\no\nr\nr\ne\nn\nt\nF\ni\nl\ne\nS\ny\ns\nt\ne\nm\n)\nw\nh\ni\nl\ne\nf\ni\nl\ne\ns\nw\ni\nl\nl\nb\ne\nb\ne\np\ne\nr\nm\na\nn\ne\nn\nt\nl\ny\ns\nt\no\nr\ne\nd\no\nn\nt\nh\ne\nI\nn\nt\ne\nr\nn\ne\nt\n.\n4\n.\n2\n.\nF\ni\nn\na\nn\nc\ni\na\nl\nm\nu\ns\nc\nl\ne\nT\nh\ne\nf\ni\nr\ns\nt\nc\no\nl\nl\ne\nc\nt\ni\no\nn\ns\no\nf\nA\nP\nE\nN\nF\nT\ni\nn\nc\nl\nu\nd\ne\n:\nF\ne\nm\nm\ne\nn\nu\ne\nc\no\nu\nc\nh\né\ne\na\nu\nc\no\nl\nl\ni\ne\nr\nb\ny\nP\na\nb\nl\no\nP\ni\nc\na\ns\ns\no\n,\nT\nh\nr\ne\ne\nS\ne\nl\nf\n-\nP\no\nr\nt\nr\na\ni\nt\nb\ny\nA\nn\nd\ny\nW\na\nr\nh\no\nl\n,\nO\nc\ne\na\nn\nF\nr\no\nn\nt\na\nn\nd\no\nt\nh\ne\nr\nf\ni\nv\ne\np\ni\ne\nc\ne\ns\nf\ne\na\nt\nu\nr\ni\nn\ng\nA\nB\nU\nN\nD\nA\nN\nC\nE\nb\ny\nc\nr\ny\np\nt\no\na\nr\nt\ni\ns\nt\nB\ne\ne\np\nl\ne\na\nn\nd\na\nw\nh\no\nl\ne\nN\nF\nT\ns\ne\nt\nC\nu\nb\ne\nb\ny\nc\nr\ny\np\nt\no\na\nr\nt\ni\ns\nt\nP\na\nk\n,\nw\ni\nt\nh\na\nt\no\nt\na\nl\nv\na\nl\nu\ne\no\nf\no\nv\ne\nr\n￥\n2\n0","metadata":{"loc":{"lines":{"from":28047,"to":28546}}}}],["68",{"pageContent":"s\nf\ne\na\nt\nu\nr\ni\nn\ng\nA\nB\nU\nN\nD\nA\nN\nC\nE\nb\ny\nc\nr\ny\np\nt\no\na\nr\nt\ni\ns\nt\nB\ne\ne\np\nl\ne\na\nn\nd\na\nw\nh\no\nl\ne\nN\nF\nT\ns\ne\nt\nC\nu\nb\ne\nb\ny\nc\nr\ny\np\nt\no\na\nr\nt\ni\ns\nt\nP\na\nk\n,\nw\ni\nt\nh\na\nt\no\nt\na\nl\nv\na\nl\nu\ne\no\nf\no\nv\ne\nr\n￥\n2\n0\n0\nm\ni\nl\nl\ni\no\nn\n.\nP\na\nr\nt\no\nf\nA\nP\nE\nN\nF\nT\nC\no\nl\nl\ne\nc\nt\ni\no\nn\ns\nA\nr\nt\nw\no\nr\nk\nA\nr\nt\ni\ns\nt\nF\ne\nm\nm\ne\nn\nu\ne\nc\no\nu\nc\nh\né\ne\na\nu\nc\no\nl\nl\ni\ne\nr\n(\nM\na\nr\ni\ne\n-\nT\nh\né\nr\nè\ns\ne\n)\nP\na\nb\nl\no\nP\ni\nc\na\ns\ns\no\nT\nh\nr\ne\ne\nS\ne\nl\nf\n-\nP\no\nr\nt\nr\na\ni\nt\ns\nA\nn\nd\ny\nW\no\nr\nh\no\nl\nO\nC\nE\nA\nN\nF\nR\nO\nN\nT\nB\ne\ne\np\nl\ne\nA\nB\nU\nN\nD\nA\nN\nC\nE\nB\ne\ne\np\nl\ne\nT\nH\nE\nC\nO\nM\nP\nU\nT\nE\nR\nI\nN\nS\nO\nC\nI\nE\nT\nY\nA\nP\nR\nI\nL\n2\nN\nD\n,\n1\n9\n6\n5\nB\no\nr\ni\ns\nA\nr\nt\nz\ny\nb\na\ns\nh\ne\nf\nf\nC\nu\nb\ne\nP\na\nk","metadata":{"loc":{"lines":{"from":28546,"to":28858}}}}],["69",{"pageContent":"1\n1\n4\n.\n3\n.\nE\nx\nt\ne\nn\ns\ni\nv\ne\np\na\nr\nt\nn\ne\nr\ns\nh\ni\np\nS\ni\nn\nc\ne\ni\nt\ns\nf\no\nu\nn\nd\ni\nn\ng\n,\nA\nP\nE\nN\nF\nT\nh\na\ns\ne\nn\nt\ne\nr\ne\nd\ni\nn\nt\no\np\na\nr\nt\nn\ne\nr\ns\nh\ni\np\ns\nw\ni\nt\nh\nC\nh\nr\ni\ns\nt\ni\ne\n'\ns\n,\nS\no\nt\nh\ne\nb\ny\n'\ns\na\nn\nd\nN\ni\nf\nt\ny\nG\na\nt\ne\nw\na\ny\n,\nt\nh\ne\nw\no\nr\nl\nd\n'\ns\nl\na\nr\ng\ne\ns\nt\nN\nF\nT\na\nu\nc\nt\ni\no\nn\nh\no\nu\ns\ne\ns\n,\na\ns\nw\ne\nl\nl\na\ns\nB\ne\ne\np\nl\ne\n,\nt\nh\ne\nw\ne\nl\nl\n-\nk\nn\no\nw\nn\nN\nF\nT\na\nr\nt\ni\ns\nt\n,\nw\ni\nt\nh\nt\nh\ne\nu\ns\ne\nr\nb\na\ns\ne\no\nf\nt\nh\ne\nt\nw\no\nt\no\np\np\nu\nb\nl\ni\nc\nc\nh\na\ni\nn\ns\n,\nw\nh\ni\nc\nh\nl\na\ny\ns\na\ns\no\nl\ni\nd\ng\nr\no\nu\nn\nd\nf\no\nr\ne\nx\np\na\nn\nd\ni\nn\ng\ni\nt\ns\nm\na\nr\nk\ne\nt\ni\nn\nf\nl\nu\ne\nn\nc\ne\n.","metadata":{"loc":{"lines":{"from":28860,"to":29137}}}}],["70",{"pageContent":"1\n2\n5\n.\nA\nP\nE\nN\nF\nT\nE\nc\no\ns\ny\ns\nt\ne\nm\n5\n.\n1\n.\nC\na\np\na\nb\ni\nl\ni\nt\ni\ne\ns\n5\n.\n1\n.\n1\n.\nT\nu\nr\nn\na\nr\nt\nw\no\nr\nk\ns\na\nn\nd\na\nr\nt\ni\ns\nt\ns\ni\nn\nt\no\nN\nF\nT\ns\nA\nP\nE\nN\nF\nT\nw\ni\nl\nl\nh\ne\nl\np\nc\no\nn\nv\ne\nr\nt\na\nr\nt\nw\no\nr\nk\ns\na\nn\nd\na\nr\nt\ni\ns\nt\ns\no\nn\n-\nc\nh\na\ni\nn\ni\nn\nj\nu\ns\nt\no\nn\ne\nc\nl\ni\nc\nk\n,\ni\nn\nj\ne\nc\nt\ni\nn\ng\nn\ne\nw\nv\na\nl\nu\ne\ns\nt\no\nc\nl\na\ns\ns\ni\nc\na\nr\nt\np\ni\ne\nc\ne\ns\n.\n5\n.\n1\n.\n2\n.\nR\ne\nd\ne\nf\ni\nn\ne\nt\nh\ne\nv\na\nl\nu\ne\no\nf\na\nr\nt\nw\no\nr\nk\ns\nA\nP\nE\nN\nF\nT\nw\ni\nl\nl\nf\na\nc\ni\nl\ni\nt\na\nt\ne\nf\na\ni\nr\ne\nr\na\nn\nd\nm\no\nr\ne\nt\nr\na\nn\ns\np\na\nr\ne\nn\nt\np\nr\ni\nc\ni\nn\ng\no\nf\na\nr\nt\nw\no\nr\nk\ns\nb\ny\nt\nr\na\nn\ns\nf\no\nr\nm\ni\nn\ng\nt\nh\ne\nw\na\ny\nc\nl\na\ns\ns\ni\nc\na\nr\nt\np\ni\ne\nc\ne\ns\na\nr\ne\nv\na\nl\nu\na\nt\ne\nd\n.\n5\n.\n1\n.\n3\n.\nC\nu\nl\nt\ni\nv\na\nt\ne\na\nn\nd\ni\nn\nc\nu\nb\na\nt\ne\nN\nF\nT\na\nr\nt\ni\ns\nt\ns\nA\nP\nE\nN\nF\nT\nw\ni\nl\nl\ni\nn\nv\ne\ns\nt\ng\nr\ne\na\nt\na\nm\no\nu\nn\nt\no\nf\nr\ne\ns\no\nu\nr\nc\ne\ns\nt\no\nn\nu\nr\nt\nu\nr\ne\nN\nF\nT\na\nr\nt\ni\ns\nt\ns\na\nn\nd\np\nr\no\nv\ni\nd\ne\nt\nh\ne\nm\nw\ni\nt\nh\na\nc\no\nm\np\nl\ne\nt\ne\nd\ne\nv\ne\nl\no\np\nm\ne\nn\nt\np\na\nt\nh\n.\n5\n.\n1\n.\n4\n.\nS\nu\np\np\no\nr\nt\na\nr\nt\ni\ns\nt\ns\na\nn\nd\nr\ne\nl\ne\nv\na\nn\nt\ni\nn\ns\nt\ni\nt\nu\nt\ni\no\nn\ns\nA\ns\na\no\nr\ng\na\nn\ni","metadata":{"loc":{"lines":{"from":29139,"to":29637}}}}],["71",{"pageContent":"t\ni\ns\nt\ns\na\nn\nd\np\nr\no\nv\ni\nd\ne\nt\nh\ne\nm\nw\ni\nt\nh\na\nc\no\nm\np\nl\ne\nt\ne\nd\ne\nv\ne\nl\no\np\nm\ne\nn\nt\np\na\nt\nh\n.\n5\n.\n1\n.\n4\n.\nS\nu\np\np\no\nr\nt\na\nr\nt\ni\ns\nt\ns\na\nn\nd\nr\ne\nl\ne\nv\na\nn\nt\ni\nn\ns\nt\ni\nt\nu\nt\ni\no\nn\ns\nA\ns\na\no\nr\ng\na\nn\ni\nz\na\nt\ni\no\nn\n,\nA\nP\nE\nN\nF\nT\nn\no\nt\no\nn\nl\ny\nf\no\nc\nu\ns\ne\ns\no\nn\nr\ne\ng\ni\ns\nt\ne\nr\ni\nn\ng\nw\no\nr\nk\ns\na\ns\nN\nF\nT\ns\no\nn\n-\nc\nh\na\ni\nn\n,\nb\nu\nt\na\nl\ns\no\ns\ne\ne\ns\ns\nu\np\np\no\nr\nt\ni\nn\ng\na\nr\nt\ni\ns\nt\ns\na\nn\nd\nr\ne\nl\ne\nv\na\nn\nt\ni\nn\ns\nt\ni\nt\nu\nt\ni\no\nn\ns\na\ns\ni\nt\ns\nm\ni\ns\ns\ni\no\nn\n.\n5\n.\n1\n.\n5\n.\nI\nn\nd\nu\ns\nt\nr\ny\na\nn\nd\np\no\nl\ni\nc\ny\nr\ne\ns\ne\na\nr\nc\nh\nA\nP\nE\nN\nF\nT\nw\ni\nl\nl\nr\ne\nc\nr\nu\ni\nt\na\ng\nr\ne\na\nt\nn\nu\nm\nb\ne\nr\no\nf\np\nr\no\nf\ne\ns\ns\ni\no\nn\na\nl\ns\nt\no\no\nb\ns\ne\nr\nv\ne\na\nn\nd\ng\nu\ni\nd\ne\nt\nh\ne\ni\nn\nd\nu\ns\nt\nr\ny\nt\nh\nr\no\nu\ng\nh\ni\nn\n-\nd\ne\np\nt\nh\nr\ne\ns\ne\na\nr\nc\nh\ne\ns\ni\nn\nt\no\np\no\nl\ni\nc\ni\ne\ns\na\nn\nd\nr\ne\np\no\nr\nt\ns\no\nn\nt\nh\ne\ni\nn\nd\nu\ns\nt\nr\ny\n.\n5\n.\n2\n.\nN\no\nd\ne\ns\ne\nt\nt\ni\nn\ng\ns\nT\no\nr\ne\na\nl\ni\nz\ne\nt\nh\ne\na\nb\no\nv\ne\nf\nu\nn\nc\nt\ni\no\nn\ns\na\nn\nd\ns\no\nl\nv\ne\nm\na\ni\nn\ni\ns\ns\nu\ne\ns\n(\ns\nu\nc\nh\na\ns\nc\ne\nn\nt\nr\na\nl\ni\nz\ne\nd\nv\na\nl\nu\na\nt\ni\no\nn\n,\ni\nl\nl\ni\nq\nu\ni\nd\ni\nt\ny\na\nn\nd\nc\no\nu\nn\nt\ne\nr\nf\ne\ni","metadata":{"loc":{"lines":{"from":29637,"to":30136}}}}],["72",{"pageContent":"i\nn\ng\ns\nT\no\nr\ne\na\nl\ni\nz\ne\nt\nh\ne\na\nb\no\nv\ne\nf\nu\nn\nc\nt\ni\no\nn\ns\na\nn\nd\ns\no\nl\nv\ne\nm\na\ni\nn\ni\ns\ns\nu\ne\ns\n(\ns\nu\nc\nh\na\ns\nc\ne\nn\nt\nr\na\nl\ni\nz\ne\nd\nv\na\nl\nu\na\nt\ni\no\nn\n,\ni\nl\nl\ni\nq\nu\ni\nd\ni\nt\ny\na\nn\nd\nc\no\nu\nn\nt\ne\nr\nf\ne\ni\nt\ns\n)\ni\nn\nt\nh\ne\nc\nu\nr\nr\ne\nn\nt\na\nr\nt\nw\no\nr\nk\ns\nm\na\nr\nk\ne\nt\n,\nA\nP\nE\nN\nF\nT\nw\ni\nl\nl\ns\ne\nt\nu\np\nm\nu\nl\nt\ni\np\nl\ne\nn\no\nd\ne\ns\ni\nn\nc\nl\nu\nd\ni\nn\ng\na\nr\nt\nw\no\nr\nk\ns\n,\na\nr\nt\ni\ns\nt\ns\n,\nc\no\nm\nm\nu\nn\ni\nt\ny\na\nn\nd\nc\no\nm\nm\ni\nt\nt\ne\ne\no\nf\ne\nx\np\ne\nr\nt\ns\no\nn\nt\nh\ne\nb\nl\no\nc\nk\nc\nh\na\ni\nn\n.\nE\na\nc\nh\nn\no\nd\ne\nh\na\ns\ni\nt\ns\no\nw\nn\na\nt\nt\nr\ni\nb\nu\nt\ne\ns\n.\nT\no\ng\ne\nt\nh\ne\nr\n,\nt\nh\ne\ny\nc\na\nn\nr\ne\na\nl\ni\nz\ne\nt\nh\ne\nA\nP\nE\nN\nF\nT\n'\ns\ng\no\na\nl\n,\nw\nh\ni\nc\nh\ni\ns\nt\no\n\"\nr\ne\ng\ni\ns\nt\ne\nr\nw\no\nr\nl\nd\n-\nc\nl\na\ns\ns\na\nr\nt\nw\no\nr\nk\ns\na\ns\nN\nF\nT\ns\no\nn\nt\nh\ne\nb\nl\no\nc\nk\nc\nh\na\ni\nn\n\"\n.","metadata":{"loc":{"lines":{"from":30136,"to":30492}}}}],["73",{"pageContent":"1\n3\n5\n.\n2\n.\n1\n.\nA\nr\nt\nw\no\nr\nk\ns\na\nn\nd\na\nr\nt\ni\ns\nt\ns\nA\nP\nE\nN\nF\nT\ns\nu\np\np\no\nr\nt\ns\nt\nh\ne\nt\no\nk\ne\nn\ni\nz\na\nt\ni\no\nn\no\nf\na\nr\nt\nw\no\nr\nk\ns\na\nn\nd\na\nr\nt\ni\ns\nt\ns\n.\nA\nr\nt\nw\no\nr\nk\ns\nw\ni\nl\nl\nh\na\nv\ne\nt\nh\ne\ni\nr\no\nw\nn\ne\nr\ns\nh\ni\np\ns\nc\no\nn\nf\ni\nr\nm\ne\nd\na\nn\nd\ns\no\nu\nr\nc\ne\ns\nt\nr\na\nc\ne\nd\no\nn\nt\nh\ne\nb\nl\no\nc\nk\nc\nh\na\ni\nn\n,\nw\nh\ne\nr\ne\nu\ns\ne\nr\ns\nc\na\nn\na\nl\ns\no\nt\nr\na\nd\ne\nt\nh\ne\nm\n.\n5\n.\n2\n.\n2\n.\nC\no\nm\nm\nu\nn\ni\nt\ni\ne\ns\nC\no\nm\nm\nu\nn\ni\nt\ni\ne\ns\na\nr\ne\nb\nu\ni\nl\nt\nt\nh\nr\no\nu\ng\nh\nt\nh\ne\ni\nm\np\na\nc\nt\no\nf\nt\nh\ne\ni\nn\ni\nt\ni\na\nt\no\nr\ns\n,\nw\nh\ni\nc\nh\nw\ni\nl\nl\nb\ne\na\nf\no\nr\nu\nm\nf\no\nr\na\nr\nt\ne\nn\nt\nh\nu\ns\ni\na\ns\nt\ns\nt\no\ne\nx\nc\nh\na\nn\ng\ne\ni\nd\ne\na\ns\na\nn\nd\nr\ne\nc\no\nm\nm\ne\nn\nd\nv\na\nl\nu\na\nb\nl\ne\na\nr\nt\nw\no\nr\nk\ns\na\nn\nd\na\nr\nt\ni\ns\nt\ns\nt\nh\nr\no\nu\ng\nh\ns\ne\nl\nf\n-\ng\no\nv\ne\nr\nn\na\nn\nc\ne\n.\n5\n.\n2\n.\n3\n.\nC\no\nm\nm\ni\nt\nt\ne\ne\no\nf\ne\nx\np\ne\nr\nt\ns\nI\nt\nc\no\nn\ns\ni\ns\nt\ns\no\nf\na\nr\nt\ni\ns\nt\ns\n,\na\nr\nt\ne\nn\nt\nh\nu\ns\ni\na\ns\nt\ns\n,\nc\no\nm\nm\nu\nn\ni\nt\ny\ni\nn\ni\nt\ni\na\nt\no\nr\ns\na\nn\nd\nc\no\nn\nn\no\ni\ns\ns\ne\nu\nr\ns\no\nf\nt\nh\ne\ni\nn\nd\nu\ns\nt\nr\ny\n,\nw\nh\no\na\nr\ne\nc\na\np\na\nb\nl\ne\no\nf\nv\na\nl\nu\na\nt\ni\nn\ng\nt\nh\ne\na\nr\nt\nw\no\nr\nk\ns\n,\nr\ne\ns","metadata":{"loc":{"lines":{"from":30494,"to":30992}}}}],["74",{"pageContent":"t\ne\nn\nt\nh\nu\ns\ni\na\ns\nt\ns\n,\nc\no\nm\nm\nu\nn\ni\nt\ny\ni\nn\ni\nt\ni\na\nt\no\nr\ns\na\nn\nd\nc\no\nn\nn\no\ni\ns\ns\ne\nu\nr\ns\no\nf\nt\nh\ne\ni\nn\nd\nu\ns\nt\nr\ny\n,\nw\nh\no\na\nr\ne\nc\na\np\na\nb\nl\ne\no\nf\nv\na\nl\nu\na\nt\ni\nn\ng\nt\nh\ne\na\nr\nt\nw\no\nr\nk\ns\n,\nr\ne\ns\ne\na\nr\nc\nh\ni\nn\ng\ni\nn\nt\no\np\no\nl\ni\nc\ni\ne\ns\na\nn\nd\nr\ne\nl\ne\na\ns\ni\nn\ng\ni\nn\nd\nu\ns\nt\nr\ny\nr\ne\np\no\nr\nt\ns\n.\n5\n.\n2\n.\n4\n.\nI\nn\ns\nt\ni\nt\nu\nt\ni\no\nn\ns\nN\no\nd\ne\ns\na\nr\ne\ns\ne\nt\nu\np\nf\no\nr\nN\nF\nT\na\nu\nc\nt\ni\no\nn\nh\no\nu\ns\ne\ns\ni\nn\nc\nl\nu\nd\ne\nC\nh\nr\ni\ns\nt\ni\ne\n'\ns\n,\nS\no\nt\nh\ne\nb\ny\n'\ns\n,\na\nn\nd\nN\ni\nf\nt\ny\nG\na\nt\ne\nw\na\ny\ns\no\nt\nh\na\nt\nt\nh\ne\nb\nu\ny\ne\nr\ns\na\nn\nd\ns\ne\nl\nl\ne\nr\ns\no\nf\nN\nF\nT\na\nr\nt\nw\no\nr\nk\ns\nc\na\nn\nb\ne\np\nr\ne\nc\ni\ns\ne\nl\ny\nr\ne\na\nc\nh\ne\nd\n.","metadata":{"loc":{"lines":{"from":30992,"to":31292}}}}],["75",{"pageContent":"1\n4\n6\n.\nR\no\na\nd\nm\na\np\no\nf\nA\nP\nE\nN\nF\nT\n6\n.\n1\n.\nP\nh\na\ns\ne\n1\n:\nB\nu\ni\nl\nd\nt\nh\ne\ni\nn\nf\nr\na\ns\nt\nr\nu\nc\nt\nu\nr\ne\no\nf\nt\nh\ne\nN\nF\nT\ne\nc\no\ns\ny\ns\nt\ne\nm\nA\nP\nE\nN\nF\nT\na\nd\no\np\nt\ns\na\nh\ni\ng\nh\nl\ny\n-\ni\nn\nt\ne\ng\nr\ne\nt\ne\nd\na\nn\nd\nh\ne\na\nv\ni\nl\ny\n-\ni\nn\nv\ne\ns\nt\ne\nd\ni\nn\nf\nr\na\ns\nt\nr\nu\nc\nt\nu\nr\ne\nt\no\ne\nn\ns\nu\nr\ne\nE\nR\nC\n7\n2\n1\n/\nT\nR\nC\n7\n2\n1\nc\no\nm\np\na\nt\ni\nb\ni\nl\ni\nt\ny\na\nn\nd\nb\nu\ni\nl\nd\ni\nn\ng\ns\nu\np\np\no\nr\nt\ni\nn\ng\nf\na\nc\ni\nl\ni\nt\ni\ne\ns\n,\nw\nh\ni\nc\nh\ng\ni\nv\ne\ns\ni\nt\nf\ni\nr\ns\nt\n-\nm\no\nv\ne\nr\n'\ns\na\nd\nv\na\nn\nt\na\ng\ne\ns\na\nn\nd\ns\nt\nr\no\nn\ng\nc\no\nm\np\ne\nt\ni\nt\ni\nv\ne\nn\ne\ns\ns\n.\nI\nn\nt\nh\ni\ns\nr\ne\ng\na\nr\nd\n,\nA\nP\nE\nN\nF\nT\nc\na\nn\nt\na\nk\ne\nu\np\nt\nh\ne\nb\ne\ns\nt\nr\ne\ns\no\nu\nr\nc\ne\ns\no\nf\nt\nh\ne\ni\nn\nd\nu\ns\nt\nr\ny\na\nn\nd\ne\nx\np\na\nn\nd\nt\nh\ne\ni\nn\nf\nl\nu\ne\nn\nc\ne\no\nf\nt\nh\ne\no\nr\ng\na\nn\ni\nz\na\nt\ni\no\nn\n.\nN\nF\nT\na\nr\nt\nw\no\nr\nk\ns\nw\ni\nl\nl\nb\ne\nm\na\nd\ne\ni\nn\nt\no\nu\nn\ni\nq\nu\ne\nE\nR\nC\n-\n7\n2\n1\n/\nT\nR\nC\n-\n7\n2\n1\nt\no\nk\ne\nn\ns\no\nn\n-\nc\nh\na\ni\nn\n.\nT\nh\ne\nt\no\nk\ne\nn\ns\nw\ni\nl\nl\nb\ne\ns\nt\no\nr\ne\nd\ni\nn\nt\nh\ne\nE\nR\nC\n2\n0\n/\nT\nR\nC\n2\n0\ns\nm\na\nr\nt\nc\no\nn\nt\nr\na\nc\nt\ns\no\nf\nN\nF\nT\nt\no\nk\ne\nn\ns\n,\na\nn\nd\nt\nh\ne\nr\ni\ng\nh\nt\ns\na\nn\nd\ni\nn\nt\ne\nr\ne","metadata":{"loc":{"lines":{"from":31294,"to":31792}}}}],["76",{"pageContent":"1\nt\no\nk\ne\nn\ns\no\nn\n-\nc\nh\na\ni\nn\n.\nT\nh\ne\nt\no\nk\ne\nn\ns\nw\ni\nl\nl\nb\ne\ns\nt\no\nr\ne\nd\ni\nn\nt\nh\ne\nE\nR\nC\n2\n0\n/\nT\nR\nC\n2\n0\ns\nm\na\nr\nt\nc\no\nn\nt\nr\na\nc\nt\ns\no\nf\nN\nF\nT\nt\no\nk\ne\nn\ns\n,\na\nn\nd\nt\nh\ne\nr\ni\ng\nh\nt\ns\na\nn\nd\ni\nn\nt\ne\nr\ne\ns\nt\ns\no\nf\nt\nh\ne\nu\nn\nd\ne\nr\nl\ny\ni\nn\ng\na\nr\nt\nw\no\nr\nk\ns\nb\ne\nl\no\nn\ng\nt\no\nN\nF\nT\nh\no\nl\nd\ne\nr\ns\n.\nC\no\nr\nr\ne\ns\np\no\nn\nd\ni\nn\ng\ni\nn\nf\no\nr\nm\na\nt\ni\no\nn\no\nf\nt\nh\ne\nE\nR\nC\n-\n7\n2\n1\n/\nT\nR\nC\n-\n7\n2\n1\nt\no\nk\ne\nn\na\nn\nd\nt\nh\ne\nr\ne\nc\no\nr\nd\ns\no\nf\nt\nh\ne\na\nr\nt\nw\no\nr\nk\nw\ni\nl\nl\nb\ne\np\ne\nr\nm\na\nn\ne\nn\nt\nl\ny\ns\nt\no\nr\ne\nd\no\nn\nt\nh\ne\nB\nT\nF\nS\nn\ne\nt\nw\no\nr\nk\n(\nB\ni\nt\nT\no\nr\nr\ne\nn\nt\nF\ni\nl\ne\nS\ny\ns\nt\ne\nm\n)\nw\nh\ni\nl\ne\nf\ni\nl\ne\ns\nw\ni\nl\nl\nb\ne\nb\ne\np\ne\nr\nm\na\nn\ne\nn\nt\nl\ny\ns\nt\no\nr\ne\nd\no\nn\nt\nh\ne\nI\nn\nt\ne\nr\nn\ne\nt\n.\n6\n.\n2\n.\nP\nh\na\ns\ne\n2\n:\nA\nc\nh\ni\ne\nv\ne\na\ns\nt\nr\no\nn\ng\nc\ni\nr\nc\nu\nl\na\nt\ni\no\nn\no\nf\nN\nF\nT\nA\nP\nE\nN\nF\nT\ni\ns\ng\no\ni\nn\ng\nt\no\nl\ni\ns\nt\ni\nt\ns\nt\no\nk\ne\nn\n-\n-\nN\nF\nT\no\nn\nl\ne\na\nd\ni\nn\ng\ne\nx\nc\nh\na\nn\ng\ne\ns\na\nn\nd\nc\no\nn\nd\nu\nc\nt\nq\nu\ni\nc\nk\np\nr\no\nm\no\nt\ni\no\nn\ni\nn\nc\no\nm\nm\nu\nn\ni\nt\ni\ne\ns\nt\no\na\nl\nl\no\nw\nm\no\nr\ne\nu\ns\ne\nr\ns\nt\no\ne\nn\nj\no\ny\nt\nh\ne\nb\ne\nn\ne\nf\ni\nt\ns\no\nf\nA\nP\nE\nN\nF\nT\n'","metadata":{"loc":{"lines":{"from":31792,"to":32291}}}}],["77",{"pageContent":"F\nT\no\nn\nl\ne\na\nd\ni\nn\ng\ne\nx\nc\nh\na\nn\ng\ne\ns\na\nn\nd\nc\no\nn\nd\nu\nc\nt\nq\nu\ni\nc\nk\np\nr\no\nm\no\nt\ni\no\nn\ni\nn\nc\no\nm\nm\nu\nn\ni\nt\ni\ne\ns\nt\no\na\nl\nl\no\nw\nm\no\nr\ne\nu\ns\ne\nr\ns\nt\no\ne\nn\nj\no\ny\nt\nh\ne\nb\ne\nn\ne\nf\ni\nt\ns\no\nf\nA\nP\nE\nN\nF\nT\n'\ns\ng\nr\no\nw\nt\nh\n.\nI\nt\ni\ns\na\nl\ns\no\ng\no\ni\nn\ng\nt\no\nu\nt\ni\nl\ni\nz\ne\nv\no\nt\ni\nn\ng\na\nn\nd\nm\ni\nn\ni\nn\ng\na\ns\na\nw\na\ny\nt\no\nf\na\nc\ni\nl\ni\nt\na\nt\ne\nd\ne\nm\no\nc\nr\na\nt\ni\nc\n,\np\nl\nu\nr\na\nl\ni\ns\nt\ni\nc\ng\no\nv\ne\nr\nn\na\nn\nc\ne\n.\nU\ns\ne\nc\na\ns\ne\ns\no\nf\nN\nF\nT\ni\nn\nc\nl\nu\nd\ne\n:\nG\no\nv\ne\nr\nn\na\nn\nc\ne\nt\no\nk\ne\nn\n:\nN\nF\nT\nh\no\nl\nd\ne\nr\ns\nw\ni\nl\nl\nh\na\nv\ne\nt\nh\ne\nr\ni\ng\nh\nt\nt\no\nd\ne\nc\ni\nd\ne\no\nn\nt\nh\ne\nm\na\nn\na\ng\ne\nm\ne\nn\nt\no\nf\nA\nP\nE\nN\nF\nT\n'\ns\nc\no\nl\nl\ne\nc\nt\ni\no\nn\ns\n,\nt\nh\ne\np\no\nt\ne\nn\nt\ni\na\nl\na\nc\nq\nu\ni\ns\ni\nt\ni\no\nn\n,\no\nn\n-\nc\nh\na\ni\nn\nd\ni\ns\nt\nr\ni\nb\nu\nt\ni\no\nn\na\nn\nd\ne\nx\nh\ni\nb\ni\nt\ni\no\nn\no\nf\na\nr\nt\nw\no\nr\nk\ns\n,\na\ns\nw\ne\nl\nl\na\ns\nt\nh\ne\nr\ni\ng\nh\nt\nt\no\nd\ne\nc\ni\nd\ne\no\nn\nt\nh\ne\ne\nx\nh\ni\nb\ni\nt\ns\n,\nw\na\ny\na\nn\nd\nd\nu\nr\na\nt\ni\no\nn\no\nf\ne\nx\nh\ni\nb\ni\nt\ni\no\nn\ns\ni\nn\nt\nh\ne\nc\ny\nb\ne\nr\np\nu\nn\nk\no\nn\nl\ni\nn\ne\nv\ni\nr\nt\nu\na\nl\nm\nu\ns\ne\nu\nm\n;\nD\ne\nF\ni\na\ni\nr\nd\nr\no\np\na\nn\nd\nm\ni\nn\ni\nn\ng\n:\nT\nh\ne\nt\no\nk\ne\nn","metadata":{"loc":{"lines":{"from":32291,"to":32790}}}}],["78",{"pageContent":"e\ne\nx\nh\ni\nb\ni\nt\ns\n,\nw\na\ny\na\nn\nd\nd\nu\nr\na\nt\ni\no\nn\no\nf\ne\nx\nh\ni\nb\ni\nt\ni\no\nn\ns\ni\nn\nt\nh\ne\nc\ny\nb\ne\nr\np\nu\nn\nk\no\nn\nl\ni\nn\ne\nv\ni\nr\nt\nu\na\nl\nm\nu\ns\ne\nu\nm\n;\nD\ne\nF\ni\na\ni\nr\nd\nr\no\np\na\nn\nd\nm\ni\nn\ni\nn\ng\n:\nT\nh\ne\nt\no\nk\ne\nn\nN\nF\nT\nw\ni\nl\nl\np\na\nr\nt\ni\nc\ni\np\na\nt\ne\ni\nn\nt\nh\ne\ng\nr\no\nw\nt\nh\no\nf\nD\ne\nF\ni\ne\nc\no\ns\ny\ns\nt\ne\nm\ns\ns\nu\nc\nh\na\ns\nt\nh\ne\no\nn\ne\ns\no\nf\nE\nt\nh\ne\nr\ne\nu\nm\na\nn\nd\nT\nR\nO\nN\n,\na\nn\nd\nw\ni\nl\nl\na\nl\ns\no\nj\no\ni\nn\nh\na\nn\nd\ns\nw\ni\nt\nh\nH\nE\nC\nO\na\nn\nd\nB\nS\nC\nt\no\nl\na\nu\nn\nc\nh\nr\ne\nl\ne\nv\na\nn\nt\nD\ne\nF\ni\na\ni\nr\nd\nr\no\np\na\nn\nd\nm\ni\nn\ni\nn\ng\n;\nD\ne\nm\no\nc\nr\na\nt\ni\nc\nv\no\nt\ni\nn\ng\n:\nN\nF\nT\nh\no\nl\nd\ne\nr\ns\nw\ni\nl\nl\nh\na\nv\ne\nt\nh\ne\nr\ni\ng\nh\nt\nt\no\nv\no\nt\ne\no\nn\nt\nh\ne\nf\nu\nt\nu\nr\ne\nd\ni\nr\ne\nc\nt\ni\no\nn\no\nf\nc\no\nl\nl\ne\nc\nt\ni\no\nn\ns\n,\ni\nn\nc\nl\nu\nd\ni\nn\ng\nb\nu\nt\nn\no\nt\nl\ni\nm\ni\nt\ne\nd\nt\no\nt\nh\ne\ns\nt\ny\nl\ne\n,\ng\ne\nn\nr\ne\n,\na\ng\ne\n,\na\nu\nt\nh\no\nr\na\nn\nd\nf\no\nr\nm\no\nf\na\nr\nt\nw\no\nr\nk\ns\n,\na\nn\nd\nt\no\na\np\np\nr\no\nv\ne\nt\nh\ne\nm\ne\nt\nh\no\nd\na\nn\nd\na\nm\no\nu\nn\nt\no\nf\ns\nu\np\np\no\nr\nt\np\nr\no\nv\ni\nd\ne\nd\n;\nO\nn\nl\ni\nn\ne\ng\no\nv\ne\nr\nn\na\nn\nc\ne\nr\ne\nw\na\nr\nd\ns\n:\nN\nF\nT\nw\ni\nl\nl\nb\ne\nu\ns\ne\nd\nt\no\nr\ne\nw\na\nr\nd\nh\no\nl\nd\ne\nr\ns\no\nf\nB","metadata":{"loc":{"lines":{"from":32790,"to":33289}}}}],["79",{"pageContent":"t\no\na\np\np\nr\no\nv\ne\nt\nh\ne\nm\ne\nt\nh\no\nd\na\nn\nd\na\nm\no\nu\nn\nt\no\nf\ns\nu\np\np\no\nr\nt\np\nr\no\nv\ni\nd\ne\nd\n;\nO\nn\nl\ni\nn\ne\ng\no\nv\ne\nr\nn\na\nn\nc\ne\nr\ne\nw\na\nr\nd\ns\n:\nN\nF\nT\nw\ni\nl\nl\nb\ne\nu\ns\ne\nd\nt\no\nr\ne\nw\na\nr\nd\nh\no\nl\nd\ne\nr\ns\no\nf\nB\nT\nC\n,\nE\nT\nH\n,","metadata":{"loc":{"lines":{"from":33289,"to":33395}}}}],["80",{"pageContent":"1\n5\nT\nR\nX\na\nn\nd\no\nt\nh\ne\nr\nt\no\nk\ne\nn\ns\nw\nh\no\np\na\nr\nt\ni\nc\ni\np\na\nt\ne\ni\nn\nA\nP\nE\nN\nF\nT\n.\nT\nh\ne\ng\no\nv\ne\nr\nn\na\nn\nc\ne\nr\ne\nw\na\nr\nd\ns\nw\ni\nl\nl\nb\ne\nd\ni\ns\nt\nr\ni\nb\nu\nt\ne\nd\na\ns\na\np\np\nr\no\np\nr\ni\na\nt\ne\nt\no\ne\nx\np\na\nn\nd\nt\nh\ne\nc\no\nv\ne\nr\na\ng\ne\no\nf\nt\nh\ne\np\nr\no\nj\ne\nc\nt\na\nn\nd\ni\nn\nt\ne\nr\na\nc\nt\nw\ni\nt\nh\no\nt\nh\ne\nr\ne\nc\no\ns\ny\ns\nt\ne\nm\ns\n.\n6\n.\n3\n.\nP\nh\na\ns\ne\n3\n:\nE\nn\nr\ni\nc\nh\nt\nh\ne\nb\nu\ns\ni\nn\ne\ns\ns\ne\ns\no\nf\nA\nP\nE\nN\nF\nT\nT\no\np\nu\ns\nh\nt\nh\ne\nb\no\nu\nn\nd\na\nr\ni\ne\ns\no\nf\nt\nh\ne\nA\nP\nE\nN\nF\nT\ns\np\na\nc\ne\n,\ne\nx\np\na\nn\nd\n\"\nf\nr\ni\ne\nn\nd\nc\ni\nr\nc\nl\ne\ns\n\"\na\nn\nd\ne\nn\nr\ni\nc\nh\ni\nt\ns\nb\nu\ns\ni\nn\ne\ns\ns\n,\nA\nP\nE\nN\nF\nT\nw\ni\nl\nl\np\nr\no\nm\no\nt\ne\nt\nh\ne\nc\nr\ne\na\nt\ni\no\nn\na\nn\nd\nr\ne\n-\nc\nr\ne\na\nt\ni\no\nn\no\nf\nt\no\np\n-\nc\nl\na\ns\ns\na\nr\nt\nw\no\nr\nk\ns\na\nn\nd\ne\ns\nt\na\nb\nl\ni\ns\nh\ne\nd\nf\nr\na\nn\nc\nh\ni\ns\ne\na\nn\nd\nc\nu\ns\nt\no\nm\nN\nF\nT\nw\no\nr\nk\ns\nw\ni\nt\nh\nA\n-\nl\ni\ns\nt\nc\ne\nl\ne\nb\nr\ni\nt\ni\ne\ns\nw\ni\nt\nh\nm\na\ns\ns\ni\nv\ne\nf\no\nl\nl\no\nw\ni\nn\ng\ns\nf\nr\no\nm\nt\nh\ne\ne\nn\nt\ne\nr\nt\na\ni\nn\nm\ne\nn\nt\nc\ni\nr\nc\nl\ne\ns\n.\nG\no\ni\nn\ng\nf\no\nr\nw\na\nr\nd\n,\nA\nP\nE\nN\nF\nT\nw\ni\nl\nl\na\nl\ns\no\ni\ns\ns\nu\ne\nv\na\nr\ni\ne\nd\nd\ne\nr\ni\nv\na\nt\ni\nv\ne\ns\nb\na\ns\ne\nd\no\nn\ne\nx","metadata":{"loc":{"lines":{"from":33397,"to":33895}}}}],["81",{"pageContent":"s\ni\nv\ne\nf\no\nl\nl\no\nw\ni\nn\ng\ns\nf\nr\no\nm\nt\nh\ne\ne\nn\nt\ne\nr\nt\na\ni\nn\nm\ne\nn\nt\nc\ni\nr\nc\nl\ne\ns\n.\nG\no\ni\nn\ng\nf\no\nr\nw\na\nr\nd\n,\nA\nP\nE\nN\nF\nT\nw\ni\nl\nl\na\nl\ns\no\ni\ns\ns\nu\ne\nv\na\nr\ni\ne\nd\nd\ne\nr\ni\nv\na\nt\ni\nv\ne\ns\nb\na\ns\ne\nd\no\nn\ne\nx\ni\ns\nt\ni\nn\ng\na\nn\nd\nt\no\n-\nb\ne\n-\na\nc\nq\nu\ni\nr\ne\nd\nc\no\nl\nl\ne\nc\nt\ni\no\nn\ns\n,\na\nl\nl\no\nw\ni\nn\ng\nt\nh\ne\nN\nF\nT\nc\no\nm\nm\nu\nn\ni\nt\ny\nt\no\np\na\nr\nt\ni\nc\ni\np\na\nt\ne\ni\nn\nt\nh\ne\nb\nu\ns\ni\nn\ne\ns\ns\ne\nc\no\ns\ny\ns\nt\ne\nm\no\nf\nA\nP\nE\nN\nF\nT\n.\n6\n.\n4\n.\nP\nh\na\ns\ne\n4\n:\nS\ne\nc\nu\nr\ne\nt\nh\ne\nk\ne\ny\nt\no\na\nu\nt\nh\no\nr\ni\nz\na\nt\ni\no\nn\na\nn\nd\nc\no\nn\nf\ni\nr\nm\na\nt\ni\no\nn\no\nf\nt\nh\ne\nd\ni\ng\ni\nt\na\nl\nw\no\nr\nl\nd\nI\nn\na\nn\ne\nf\nf\no\nr\nt\nt\no\np\nr\no\nm\no\nt\ne\na\nw\ni\nd\ne\nr\ni\nm\np\nl\ne\nm\ne\nn\nt\na\nt\ni\no\nn\no\nf\nb\nl\no\nc\nk\nc\nh\na\ni\nn\nt\ne\nc\nh\nn\no\nl\no\ng\ny\n,\nA\nP\nE\nN\nF\nT\nw\ni\nl\nl\n,\na\nt\nt\nh\ni\ns\ns\nt\na\ng\ne\n,\nb\nu\ni\nl\nd\no\nn\nt\no\np\no\nf\ni\nt\ns\nN\nF\nT\nb\nu\ns\ni\nn\ne\ns\ns\n,\ns\ne\nc\nu\nr\ne\nt\nh\ne\nk\ne\ny\nt\no\na\nu\nt\nh\no\nr\ni\nz\na\nt\ni\no\nn\na\nn\nd\nc\no\nn\nf\ni\nr\nm\na\nt\ni\no\nn\no\nf\nt\nh\ne\nd\ni\ng\ni\nt\na\nl\nw\no\nr\nl\nd\n,\na\nn\nd\nm\na\nk\ne\na\nf\no\nr\na\ny\ni\nn\nt\no\nd\ni\ng\ni\nt\na\nl\ne\nn\nt\ne\nr\nt\na\ni\nn\nm\ne\nn\nt\na\nn\nd\nb\nr\ni\nc\nk\n-\na\nn\nd\n-\nm\no\nr\nt\na\nr","metadata":{"loc":{"lines":{"from":33895,"to":34394}}}}],["82",{"pageContent":"t\nh\no\nr\ni\nz\na\nt\ni\no\nn\na\nn\nd\nc\no\nn\nf\ni\nr\nm\na\nt\ni\no\nn\no\nf\nt\nh\ne\nd\ni\ng\ni\nt\na\nl\nw\no\nr\nl\nd\n,\na\nn\nd\nm\na\nk\ne\na\nf\no\nr\na\ny\ni\nn\nt\no\nd\ni\ng\ni\nt\na\nl\ne\nn\nt\ne\nr\nt\na\ni\nn\nm\ne\nn\nt\na\nn\nd\nb\nr\ni\nc\nk\n-\na\nn\nd\n-\nm\no\nr\nt\na\nr\nN\nF\nT\np\nr\no\nj\ne\nc\nt\ns\n,\ne\nt\nc\n.\nW\ni\nt\nh\nN\nF\nT\na\ns\nt\nh\ne\nc\no\nr\ne\nc\nh\na\nn\nn\ne\nl\na\nn\nd\nb\nl\no\nc\nk\nc\nh\na\ni\nn\nt\ne\nc\nh\nn\no\nl\no\ng\ny\na\ns\nt\nh\ne\nm\ne\nt\nh\no\nd\n,\nA\nP\nE\nN\nF\nT\nw\ni\nl\nl\nt\nr\ny\nt\no\nu\ns\nh\ne\nr\ni\nn\na\nt\nr\ni\nl\nl\ni\no\nn\n-\nd\no\nl\nl\na\nr\nm\na\nr\nk\ne\nt\no\nf\nt\nh\ne\nf\nu\nt\nu\nr\ne\nd\ni\ng\ni\nt\na\nl\nw\no\nr\nl\nd\n.\nI\nt\na\ni\nm\ns\nt\no\ne\nn\nd\no\nw\ne\na\nc\nh\np\na\nr\nt\ni\nc\ni\np\na\nt\ni\nn\ng\nn\no\nd\ne\nw\ni\nt\nh\ni\nn\nf\ni\nn\ni\nt\ne\nv\na\nl\nu\ne\ni\nn\nt\nh\ne\nd\ni\ng\ni\nt\na\nl\nw\no\nr\nl\nd\nt\nh\na\nt\ni\nt\nw\ni\nl\nl\ns\nt\nr\ni\nv\ne\nt\no\nb\nu\ni\nl\nd\na\nn\nd\ni\nm\np\nr\no\nv\ne\n.","metadata":{"loc":{"lines":{"from":34394,"to":34737}}}}],["83",{"pageContent":"1\n6\n7\n.\nA\nP\nE\nN\nF\nT\n'\ns\ng\no\nv\ne\nr\nn\na\nn\nc\ne\nt\no\nk\ne\nn\nN\nF\nT\n7\n.\n1\n.\nD\ne\nf\ni\nn\ni\nt\ni\no\nn\no\nf\nN\nF\nT\nN\nF\nT\n,\na\ns\nt\nh\ne\ns\no\nl\ne\nt\no\nk\ne\nn\ni\ns\ns\nu\ne\nd\nb\ny\nA\nP\nE\nN\nF\nT\n,\ni\ns\nt\nh\ne\ng\no\nv\ne\nr\nn\na\nn\nc\ne\nt\no\nk\ne\nn\nf\no\nr\nt\nh\ne\nA\nP\nE\nN\nF\nT\ne\nc\no\ns\ny\ns\nt\ne\nm\n.\nN\nF\nT\nh\no\nl\nd\ne\nr\ns\np\na\nr\nt\ni\nc\ni\np\na\nt\ne\ni\nn\nt\nh\ne\ng\no\nv\ne\nr\nn\na\nn\nc\ne\no\nf\nA\nP\nE\nN\nF\nT\nb\ny\nh\no\nl\nd\ni\nn\ng\nN\nF\nT\nt\no\nk\ne\nn\ns\n.\n7\n.\n2\n.\nA\nl\nl\no\nc\na\nt\ni\no\nn\no\nf\nN\nF\nT\nT\no\nk\ne\nn\nn\na\nm\ne\n:\nN\nF\nT\nU\nn\nd\ne\nr\nl\ny\ni\nn\ng\nb\nl\no\nc\nk\nc\nh\na\ni\nn\n:\nT\nR\nO\nN\nP\nr\no\nt\no\nc\no\nl\ns\nt\na\nn\nd\na\nr\nd\n:\nE\nR\nC\n2\n0\n/\nT\nR\nC\n2\n0\nI\ns\ns\nu\na\nn\nc\ne\nd\na\nt\ne\n:\nM\na\ny\n2\n0\n,\n2\n0\n2\n1\nI\ns\ns\nu\na\nn\nc\ne\np\nl\na\nt\nf\no\nr\nm\ns\n:\nL\ne\na\nd\ni\nn\ng\nc\nr\ny\np\nt\no\ne\nx\nc\nh\na\nn\ng\ne\ns\ns\nu\nc\nh\na\ns\nH\nu\no\nb\ni\nP\nl\na\nn\nn\ne\nd\nt\no\nt\na\nl\ns\nu\np\np\nl\ny\n:\n9\n9\n9\n,\n9\n9\n0\n,\n0\n0\n0\n,\n0\n0\n0\n,\n0\n0\n0\nN\nF\nT\nI\nn\ni\nt\ni\na\nl\ni\ns\ns\nu\ni\nn\ng\np\nr\ni\nc\ne\n:\n0\n.\n0\n0\n0\n0\n0\n0\n1\n2\nU\nS\nD\nT\no\nk\ne\nn\na\nl\nl\no\nc\na\nt\ni\no\nn\n:\na\nr\nt\ni\ns\nt\np\na\nr\nt\nn\ne\nr\ns\n,\n3\n0\n%\n;\nD\ne\nF\ni\na\ni\nr\nd\nr\no\np\na\nn\nd\nm\ni\nn\ni\nn\ng\n,\n1\n9\n%\n;\nN\nF\nT\nT\ne\na\nm\n,\n1\n9\n%\n;\ni\nn\ni\nt\ni\na\nl","metadata":{"loc":{"lines":{"from":34739,"to":35237}}}}],["84",{"pageContent":"n\ng\np\nr\ni\nc\ne\n:\n0\n.\n0\n0\n0\n0\n0\n0\n1\n2\nU\nS\nD\nT\no\nk\ne\nn\na\nl\nl\no\nc\na\nt\ni\no\nn\n:\na\nr\nt\ni\ns\nt\np\na\nr\nt\nn\ne\nr\ns\n,\n3\n0\n%\n;\nD\ne\nF\ni\na\ni\nr\nd\nr\no\np\na\nn\nd\nm\ni\nn\ni\nn\ng\n,\n1\n9\n%\n;\nN\nF\nT\nT\ne\na\nm\n,\n1\n9\n%\n;\ni\nn\ni\nt\ni\na\nl\ne\nx\nc\nh\na\nn\ng\ne\nl\ni\ns\nt\ni\nn\ng\n,\n2\n%\n;\nN\nF\nT\nw\no\nr\nk\ns\np\nu\nr\nc\nh\na\ns\ne\n,\n2\n0\n%\n;\na\nn\nd\np\na\nr\nt\nn\ne\nr\ns\nh\ni\np\ns\n,\n1\n0\n%\n.\n7\n.\n3\n.\nB\nu\ns\ni\nn\ne\ns\ns\nm\no\nd\ne\nl\no\nf\nN\nF\nT\nG\no\nv\ne\nr\nn\na\nn\nc\ne\nt\nh\nr\no\nu\ng\nh\nN\nF\nT\n:\nN\nF\nT\nh\no\nl\nd\ne\nr\ns\nw\ni\nl\nl\nb\ne\ne\nn\nt\ni\nt\nl\ne\nd\nt\no\nv\no\nt\ne\nf\no\nr\nt\nh\ne\nh\na\nn\nd\nl\ni\nn\ng\no\nf\nN\nF\nT\na\nr\nt\nw\no\nr\nk\ns\ni\nn\nt\nh\ne\nA\nP\nE\nN\nF\nT\nD\nA\nO\ne\nc\no\ns\ny\ns\nt\ne\nm\n,\nd\ne\nc\ni\nd\ne\no\nn\nt\nh\ne\nf\nu\nt\nu\nr\ne\no\nf\nN\nF\nT\na\nr\nt\nw\no\nr\nk\ns\n,\na\nn\nd\nt\na\nk\ne\np\na\nr\nt\ni\nn\nA\nP\nE\nN\nF\nT\na\nc\nt\ni\nv\ni\nt\ni\ne\ns\na\nt\nd\ni\nf\nf\ne\nr\ne\nn\nt\nl\ne\nv\ne\nl\ns\nb\na\ns\ne\nd\no\nn\nt\nh\ne\na\nm\no\nu\nn\nt\no\nf\nt\no\nk\ne\nn\ns\nt\nh\ne\ny\nh\no\nl\nd\n.\n7\n.\n4\n.\nR\ne\nw\na\nr\nd\nm\ne\nc\nh\na\nn\ni\ns\nm\no\nf\nN\nF\nT\n7\n.\n4\n.\n1\n.\nD\nE\nF\nI\na\ni\nr\nd\nr\no\np\na\nn\nd\nm\ni\nn\ni\nn\ng\nr\ne\nw\na\nr\nd\ns\nU\ns\ne\nr\ns\nc\na\nn\nr\ne\nc\ne\ni\nv\ne\nN\nF\nT\ni\nn\nc\ne\nn\nt\ni\nv\ne\ns\nb\ny\np\na\nr\nt\ni\nc\ni\np\na\nt\ni\nn\ng\ni\nn\nt\nh\ne\nl","metadata":{"loc":{"lines":{"from":35237,"to":35736}}}}],["85",{"pageContent":"w\na\nr\nd\nm\ne\nc\nh\na\nn\ni\ns\nm\no\nf\nN\nF\nT\n7\n.\n4\n.\n1\n.\nD\nE\nF\nI\na\ni\nr\nd\nr\no\np\na\nn\nd\nm\ni\nn\ni\nn\ng\nr\ne\nw\na\nr\nd\ns\nU\ns\ne\nr\ns\nc\na\nn\nr\ne\nc\ne\ni\nv\ne\nN\nF\nT\ni\nn\nc\ne\nn\nt\ni\nv\ne\ns\nb\ny\np\na\nr\nt\ni\nc\ni\np\na\nt\ni\nn\ng\ni\nn\nt\nh\ne\nl\ni\nq\nu\ni\nd\ni\nt\ny\na\ni\nr\nd\nr\no\np\na\nn\nd\nm\ni\nn\ni\nn\ng\no\nf\nB\nT\nC\n,\nE\nT\nH\n,\nD\nO\nG\nE\n,\nT\nR\nX\n,\nB\nT\nT\n,\nJ\nS\nT\n,\nS\nU\nN\na\nn\nd\nW\nI\nN\no\nn\np\nl\na\nt\nf\no\nr\nm\ns\ni\nn\nc\nl\nu\nd\ni\nn\ng\nb\nu\nt\nn\no\nt\nl\ni\nm\ni\nt\ne\nd\nt\no\nJ\nu\ns\nt\ns\nw\na\np\n.\no\nr\ng\n,\nJ\nu\ns\nt\nl\ne\nn\nd\n.\no\nr\ng\na\nn\nd\nS\nu\nn\n.\ni\no\n.","metadata":{"loc":{"lines":{"from":35736,"to":35965}}}}],["86",{"pageContent":"1\n7\n7\n.\n4\n.\n2\n.\nG\no\nv\ne\nr\nn\na\nn\nc\ne\nr\ne\nw\na\nr\nd\ns\nU\ns\ne\nr\ns\nc\na\nn\nr\ne\nc\ne\ni\nv\ne\nN\nF\nT\nt\no\nk\ne\nn\nr\ne\nw\na\nr\nd\ns\nt\nh\nr\no\nu\ng\nh\ng\no\nv\ne\nr\nn\na\nn\nc\ne\na\nc\nt\ni\nv\ni\nt\ni\ne\ns\ni\nn\nt\nh\ne\nA\nP\nE\nN\nF\nT\ns\ny\ns\nt\ne\nm\n.\n7\n.\n4\n.\n3\n.\nA\nc\nt\ni\nv\ni\nt\ny\nr\ne\nw\na\nr\nd\ns\nH\no\nl\nd\ne\nr\ns\no\nf\nB\nT\nC\n,\nE\nT\nH\n,\nD\nO\nG\nE\n,\nT\nR\nX\n,\nB\nT\nT\n,\nJ\nS\nT\n,\nS\nU\nN\na\nn\nd\nW\nI\nN\nc\na\nn\nt\na\nk\ne\np\na\nr\nt\ni\nn\nt\nh\ne\ng\no\nv\ne\nr\nn\na\nn\nc\ne\na\nc\nt\ni\nv\ni\nt\ni\ne\ns\ni\nn\nt\nh\ne\nA\nP\nE\nN\nF\nT\ns\ny\ns\nt\ne\nm\nt\no\ne\na\nr\nn\nN\nF\nT\nt\no\nk\ne\nn\nr\ne\nw\na\nr\nd\ns\n.\n7\n.\n4\n.\n4\n.\nN\nF\nT\na\ni\nr\nd\nr\no\np\na\nn\nd\nm\ni\nn\ni\nn\ng\nN\nF\nT\nt\no\nk\ne\nn\ns\na\nr\ne\nd\ni\ns\nt\nr\ni\nb\nu\nt\ne\nd\nv\ni\na\nd\ne\nc\ne\nn\nt\nr\na\nl\ni\nz\ne\nd\na\ni\nr\nd\nr\no\np\na\nn\nd\nm\ni\nn\ni\nn\ng\n.\nT\no\ng\ne\nt\nN\nF\nT\nt\no\nk\ne\nn\ns\n,\nu\ns\ne\nr\ns\nc\na\nn\ns\nt\na\nk\ne\nB\nT\nC\n,\nE\nT\nH\n,\nD\nO\nG\nE\n,\nT\nR\nX\n,\nB\nT\nT\n,\nJ\nS\nT\n,\nS\nU\nN\n,\nW\nI\nN\ne\nt\nc\n.\nt\no\nr\ne\nc\ne\ni\nv\ne\nN\nF\nT\na\ni\nr\nd\nr\no\np\na\nn\nd\nm\ni\nn\ni\nn\ng\nr\ne\nw\na\nr\nd\ns\n.\n8\n.\nA\nb\no\nu\nt\nA\nP\nE\nN\nF\nT\nT\ne\na\nm\n8\n.\n1\n.\nA\nP\nE\nN\nF\nT\nC\nh\na\ni\nr\nm\na\nn\n:\nS\nt\ne\nv\ne\nZ\n.\nL\ni\nu\nS\nt\ne\nv\ne\nZ\n.\nL\ni\nu\n:\nh\no\nl\nd\ns\na\nb\na\nc\nh\ne\nl\no\nr\ni\nn\nE\nl\ne\nc\nt\nr","metadata":{"loc":{"lines":{"from":35967,"to":36465}}}}],["87",{"pageContent":"d\nr\no\np\na\nn\nd\nm\ni\nn\ni\nn\ng\nr\ne\nw\na\nr\nd\ns\n.\n8\n.\nA\nb\no\nu\nt\nA\nP\nE\nN\nF\nT\nT\ne\na\nm\n8\n.\n1\n.\nA\nP\nE\nN\nF\nT\nC\nh\na\ni\nr\nm\na\nn\n:\nS\nt\ne\nv\ne\nZ\n.\nL\ni\nu\nS\nt\ne\nv\ne\nZ\n.\nL\ni\nu\n:\nh\no\nl\nd\ns\na\nb\na\nc\nh\ne\nl\no\nr\ni\nn\nE\nl\ne\nc\nt\nr\ni\nc\na\nl\nE\nn\ng\ni\nn\ne\ne\nr\ni\nn\ng\nf\nr\no\nm\nZ\nh\ne\nj\ni\na\nn\ng\nU\nn\ni\nv\ne\nr\ns\ni\nt\ny\na\nn\nd\na\nn\nM\nB\nA\ni\nn\nF\ni\nn\na\nn\nc\ne\nf\nr\no\nm\nC\no\nl\nu\nm\nb\ni\na\nB\nu\ns\ni\nn\ne\ns\ns\nS\nc\nh\no\no\nl\n.\nH\ne\nh\na\ns\ne\nx\nt\ne\nn\ns\ni\nv\ne\ne\nx\np\ne\nr\ni\ne\nn\nc\ne\ni\nn\nt\nh\ne\ni\nn\nt\ne\nr\nn\na\nt\ni\no\nn\na\nl\nc\na\np\ni\nt\na\nl\nm\na\nr\nk\ne\nt\ns\n,\np\nr\ne\nv\ni\no\nu\ns\nl\ny\ns\np\ne\nn\nt\no\nv\ne\nr\n2\n0\ny\ne\na\nr\ns\nw\no\nr\nk\ni\nn\ng\nf\no\nr\nm\na\nj\no\nr\nf\ni\nn\na\nn\nc\ni\na\nl\ni\nn\ns\nt\ni\nt\nu\nt\ni\no\nn\ns\ni\nn\nc\nl\nu\nd\ni\nn\ng\nF\ni\nd\ne\nl\ni\nt\ny\nI\nn\nt\ne\nr\nn\na\nt\ni\no\nn\na\nl\n,\nS\na\nl\no\nm\no\nn\nS\nm\ni\nt\nh\nB\na\nr\nn\ne\ny\n,\nN\no\nm\nu\nr\na\nI\nn\nt\ne\nr\nn\na\nt\ni\no\nn\na\nl\n,\nA\nn\nt\nF\ni\nn\na\nn\nc\ni\na\nl\nG\nr\no\nu\np\n,\ne\nt\nc\n.\nP\nr\ni\no\nr\nt\no\nt\nh\ni\ns\n,\nS\nt\ne\nv\ne\nh\na\ns\ns\nu\nc\nc\ne\ns\ns\nf\nu\nl\nl\ny\ne\ns\nt\na\nb\nl\ni\ns\nh\ne\nd\na\nn\nd\nm\na\nn\na\ng\ne\nd\ni\nn\ns\nt\ni\nt\nu\nt\ni\no\nn\na\nl\ne\nq\nu\ni\nt\ny\nb\nu\ns\ni\nn\ne\ns\ns\nf\no\nr\na\nn\nu\nm\nb\ne\nr\no\nf\nC\nh\ni\nn\ne\ns\ne\ns\ne\nc\nu\nr\ni\nt\ni\ne","metadata":{"loc":{"lines":{"from":36465,"to":36964}}}}],["88",{"pageContent":"h\ni\ns\n,\nS\nt\ne\nv\ne\nh\na\ns\ns\nu\nc\nc\ne\ns\ns\nf\nu\nl\nl\ny\ne\ns\nt\na\nb\nl\ni\ns\nh\ne\nd\na\nn\nd\nm\na\nn\na\ng\ne\nd\ni\nn\ns\nt\ni\nt\nu\nt\ni\no\nn\na\nl\ne\nq\nu\ni\nt\ny\nb\nu\ns\ni\nn\ne\ns\ns\nf\no\nr\na\nn\nu\nm\nb\ne\nr\no\nf\nC\nh\ni\nn\ne\ns\ne\ns\ne\nc\nu\nr\ni\nt\ni\ne\ns\nf\ni\nr\nm\ns\n.\n8\n.\n2\n.\nP\na\nr\nt\nn\ne\nr\ns\nf\nr\no\nm\na\nr\nt\ns\nA\nP\nE\nN\nF\nT\np\nl\na\nn\ns\nt\no\ni\nn\nv\ni\nt\ne\ni\nn\nf\nl\nu\ne\nn\nt\ni\na\nl\na\nr\nt\nc\nr\ne\na\nt\no\nr\ns\na\nn\nd\nr\ne\ns\ne\na\nr\nc\nh\ne\nr\ns\nf\nr\no\nm\na\nr\no\nu\nn\nd\nt\nh\ne\nw\no\nr\nl\nd\nt\no\nj\no\ni\nn\nt\nh\ne\nA\nP\nE\nN\nF\nT\na\nd\nv\ni\ns\no\nr\ny\nt\ne\na\nm\n.\nW\ne\nh\no\np\ne\nt\no\nb\nu\ni\nl\nd\na\nc\nu\nt\nt\ni\nn\ng\n-\ne\nd\ng\ne\ns\nt\na\ng\ne\nf\no\nr\na\nr\nt\ne\nx\nc\nh\na\nn\ng\ne\nt\no\ne\nn\nc\no\nu\nr\na\ng\ne\nc\nr\ne\na\nt\ni\nv\ni\nt\ny\n,\ni\nn\nc\nr\ne\na\ns\ne\nt\nh\ne\nv\na\nl\nu\ne\no\nf\na\nr\nt\nw\no\nr\nk\ns\na\nn\nd\nl\ne\na\nd\nt\nh\ne\nt\nr\ne\nn\nd\ni\nn\nt\nh\ne\nf\nu\nt\nu\nr\ne\na\nr\nt\ni\nn\nd\nu\ns\nt\nr\ny\n.\n8\n.\n3\n.\nO\nt\nh\ne\nr\nm\ne\nm\nb\ne\nr\ns\nM\no\ns\nt\no\nf\nt\nh\ne\nA\nP\nE\nN\nF\nT\nt\ne\na\nm\nm\ne\nm\nb\ne\nr\ns\na\nr\ne\ne\nx\np\ne\nr\nt\ns\nf\nr\no\nm\nt\nh\ne\nt\nr\na\nd\ni\nt\ni\no\nn\na\nl\na\nr\nt\ni\nn\nd\nu\ns\nt\nr\ny\nw\ni\nt\nh\ne\nx\np\ne\nr\ni\ne\nn\nc\ne\ni\nn\nr\ne\nn\no\nw\nn\ne\nd\na\nr\nt\ni\nn\ns\nt\ni\nt\nu\nt\ni\no\nn\ns\n,\ns\nu\nc\nh\na\ns\nC\nh\nr\ni\ns\nt\ni\ne\n'\ns\na\nn\nd\nS","metadata":{"loc":{"lines":{"from":36964,"to":37463}}}}],["89",{"pageContent":"s\na\nr\ne\ne\nx\np\ne\nr\nt\ns\nf\nr\no\nm\nt\nh\ne\nt\nr\na\nd\ni\nt\ni\no\nn\na\nl\na\nr\nt\ni\nn\nd\nu\ns\nt\nr\ny\nw\ni\nt\nh\ne\nx\np\ne\nr\ni\ne\nn\nc\ne\ni\nn\nr\ne\nn\no\nw\nn\ne\nd\na\nr\nt\ni\nn\ns\nt\ni\nt\nu\nt\ni\no\nn\ns\n,\ns\nu\nc\nh\na\ns\nC\nh\nr\ni\ns\nt\ni\ne\n'\ns\na\nn\nd\nS\no\nt\nh\ne\nb\ny\n'\ns\n.\nO\nu\nr","metadata":{"loc":{"lines":{"from":37463,"to":37574}}}}],["90",{"pageContent":"1\n8\nc\no\nr\ne\nm\ne\nm\nb\ne\nr\ns\ni\nn\nc\nl\nu\nd\ne\np\nr\no\nf\ne\ns\ns\ni\no\nn\na\nl\ne\nn\ng\ni\nn\ne\ne\nr\ns\nw\ni\nt\nh\nb\nl\no\nc\nk\nc\nh\na\ni\nn\na\nn\nd\nc\nr\ny\np\nt\no\ng\nr\na\np\nh\ny\nr\ne\nl\na\nt\ne\nd\ne\nx\np\ne\nr\ni\ne\nn\nc\ne\nf\nr\no\nm\nl\ne\na\nd\ni\nn\ng\ni\nn\nt\ne\nr\nn\ne\nt\nc\no\nm\np\na\nn\ni\ne\ns\ns\nu\nc\nh\na\ns\nB\nA\nT\n.\nA\nP\nE\nN\nF\nT\ni\ns\na\nl\ne\na\nd\ni\nn\ng\np\nl\na\ny\ne\nr\ni\nn\nt\nh\ne\nN\nF\nT\nf\ni\ne\nl\nd\nb\no\nt\nh\ni\nn\nt\ne\nr\nm\ns\no\nf\ni\nt\ns\nt\ne\na\nm\na\nn\nd\nt\ne\nc\nh\nn\ni\nc\na\nl\nc\na\np\na\nc\ni\nt\ny\n.","metadata":{"loc":{"lines":{"from":37576,"to":37776}}}}],["91",{"pageContent":"1\n9\n9\n.\nA\nP\nE\nN\nF\nT\n'\ns\nC\no\nl\nl\ne\nc\nt\ni\no\nn\n9\n.\n1\n.\nP\na\nb\nl\no\nP\ni\nc\na\ns\ns\no\n:\nF\ne\nm\nm\ne\nn\nu\ne\nc\no\nu\nc\nh\né\ne\na\nu\nc\no\nl\nl\ni\ne\nr\n1\n9\n3\n2\ni\ns\nw\ni\nd\ne\nl\ny\nr\ne\ng\na\nr\nd\ne\nd\na\ns\no\nn\ne\no\nf\nt\nh\ne\ng\nr\ne\na\nt\ne\ns\nt\ny\ne\na\nr\ns\no\nf\nP\ni\nc\na\ns\ns\no\n’\ns\nc\na\nr\ne\ne\nr\n.\nI\nn\nt\nh\ne\nf\ni\nr\ns\nt\nh\na\nl\nf\no\nf\nt\nh\ni\ns\ns\ne\nm\ni\nn\na\nl\ny\ne\na\nr\n,\nP\na\nb\nl\no\nP\ni\nc\na\ns\ns\no\np\na\ni\nn\nt\ne\nd\no\nf\nh\ni\ns\nb\nl\no\nn\nd\ne\n-\nh\na\ni\nr\ne\nd\nm\nu\ns\ne\na\nn\nd\nl\no\nv\ne\nr\n,\nM\na\nr\ni\ne\n-\nT\nh\né\nr\nè\ns\ne\nW\na\nl\nt\ne\nr\n.\nP\na\ni\nn\nt\ne\nd\no\nn\n1\n8\nt\nh\nJ\nu\nn\ne\n1\n9\n3\n2\n,\nF\ne\nm\nm\ne\nn\nu\ne\nc\no\nu\nc\nh\né\ne\na\nu\nc\no\nl\nl\ni\ne\nr\n(\nM\na\nr\ni\ne\n-\nT\nh\né\nr\nè\ns\ne\n)\ni\ns\no\nn\ne\no\nf\nt\nh\ne\nr\nh\na\np\ns\no\nd\ni\nc\no\nu\nt\np\no\nu\nr\ni\nn\ng\no\nf\nc\no\nl\no\nr\nf\nu\nl\n,\nl\no\nv\ne\n-\nf\ni\nl\nl\ne\nd\np\na\ne\na\nn\ns\n.\nO\nn\ne\no\nf\nt\nh\ne\na\nr\nt\ni\ns\nt\n’\ns\ng\nr\ne\na\nt\ne\ns\nt\nm\nu\ns\ne\ns\n,\nM\na\nr\ni\ne\n-\nT\nh\né\nr\nè\ns\ne\n’\ns\np\nr\ne\ns\ne\nn\nc\ne\ni\nn\nP\ni\nc\na\ns\ns\no\n’\ns\nl\ni\nf\ne\na\nr\no\nu\ns\ne\nd\na\nn\nu\nn\np\nr\ne\nc\ne\nd\ne\nn\nt\ne\nd\nc\nr\ne\na\nt\ni\nv\ne\ne\nx\np\nl\no\ns\ni\no\nn\n;\n‘\nT\nh\ne\nr\ne\ni\ns\nn\no\nd\no\nu\nb\nt\n,\n’\nW\ni\nl\nl\ni\na\nm\nR\nu\nb\ni\nn\nd\ne\nc\nl\na\nr\ne\nd\n,\n‘\nt\nh\na\nt\n1\n9\n3","metadata":{"loc":{"lines":{"from":37778,"to":38276}}}}],["92",{"pageContent":"n\nP\ni\nc\na\ns\ns\no\n’\ns\nl\ni\nf\ne\na\nr\no\nu\ns\ne\nd\na\nn\nu\nn\np\nr\ne\nc\ne\nd\ne\nn\nt\ne\nd\nc\nr\ne\na\nt\ni\nv\ne\ne\nx\np\nl\no\ns\ni\no\nn\n;\n‘\nT\nh\ne\nr\ne\ni\ns\nn\no\nd\no\nu\nb\nt\n,\n’\nW\ni\nl\nl\ni\na\nm\nR\nu\nb\ni\nn\nd\ne\nc\nl\na\nr\ne\nd\n,\n‘\nt\nh\na\nt\n1\n9\n3\n2\nm\na\nr\nk\ns\nt\nh\ne\np\ne\na\nk\no\nf\nf\ne\nv\ne\nr\n-\np\ni\nt\nc\nh\ni\nn\nt\ne\nn\ns\ni\nt\ny\na\nn\nd\na\nc\nh\ni\ne\nv\ne\nm\ne\nn\nt\n,\na\ny\ne\na\nr\no\nf\nr\na\np\nt\nu\nr\no\nu\ns\nm\na\ns\nt\ne\nr\np\ni\ne\nc\ne\ns\nt\nh\na\nt\nr\ne\na\nc\nh\na\nn\ne\nw\na\nn\nd\nu\nn\nf\na\nm\ni\nl\ni\na\nr\ns\nu\nm\nm\ni\nt\ni\nn\nb\no\nt\nh\nh\ni\ns\np\na\ni\nn\nt\ni\nn\ng\na\nn\nd\ns\nc\nu\nl\np\nt\nu\nr\ne\n.\nC\no\nn\nt\nr\na\nc\nt\na\nd\nd\nr\ne\ns\ns\n:\nh\nt\nt\np\ns\n:\n/\n/\nt\nr\no\nn\ns\nc\na\nn\n.\ni\no\n/\n#\n/\nt\no\nk\ne\nn\n7\n2\n1\n/\nT\nC\nz\nU\nY\nn\nF\nS\nw\nt\nH\n2\nb\nJ\nk\ny\nn\nG\nB\n4\n6\nt\nW\nx\nW\nj\nd\nT\nQ\nq\nL\n1\nS\nG\n/\nc\no\nd\ne","metadata":{"loc":{"lines":{"from":38276,"to":38601}}}}],["93",{"pageContent":"2\n0\n9\n.\n2\n.\nA\nn\nd\ny\nW\na\nr\nh\no\nl\n:\nT\nh\nr\ne\ne\nS\ne\nl\nf\n-\nP\no\nr\nt\nr\na\ni\nt\ns\nA\nt\nr\nu\ne\nl\na\nn\nd\nm\na\nr\nk\ni\nn\nt\nh\ne\nh\ni\ns\nt\no\nr\ny\no\nf\na\nr\nt\n,\nA\nn\nd\ny\nW\na\nr\nh\no\nl\n’\ns\n1\n9\n8\n6\ns\ne\nl\nf\n-\np\no\nr\nt\nr\na\ni\nt\ns\nt\na\nn\nd\ns\na\nm\no\nn\ng\nh\ni\ns\nm\no\ns\nt\ni\nc\no\nn\ni\nc\ni\nm\na\ng\ne\ns\n.\nC\nr\ne\na\nt\ne\nd\nj\nu\ns\nt\nm\no\nn\nt\nh\ns\nb\ne\nf\no\nr\ne\nh\ni\ns\nd\ne\na\nt\nh\n,\ni\nt\nt\na\nk\ne\ns\ni\nt\ns\np\nl\na\nc\ne\na\nl\no\nn\ng\ns\ni\nd\ne\nm\na\ns\nt\ne\nr\nw\no\nr\nk\ns\nb\ny\nR\ne\nm\nb\nr\na\nn\nd\nt\n,\nV\na\nn\nG\no\ng\nh\n,\nP\ni\nc\na\ns\ns\no\na\nn\nd\no\nt\nh\ne\nr\na\nr\nt\ni\ns\nt\ns\nw\nh\no\nt\no\no\nk\nt\nh\ne\ni\nr\no\nw\nn\na\ng\ni\nn\ng\nv\ni\ns\na\ng\ne\na\ns\nt\nh\ne\ni\nr\nl\na\ns\nt\ng\nr\ne\na\nt\ns\nu\nb\nj\ne\nc\nt\n.\nA\nd\no\nr\nn\ne\nd\nw\ni\nt\nh\na\ns\no\n-\nc\na\nl\nl\ne\nd\n‘\nf\nr\ni\ng\nh\nt\nw\ni\ng\n’\n,\nt\nh\ne\na\nr\nt\ni\ns\nt\n’\ns\ns\nk\nu\nl\nl\n-\nl\ni\nk\ne\nf\na\nc\ne\nl\no\no\nm\ns\nl\na\nr\ng\ne\na\nm\ni\nd\na\nd\ne\ne\np\nb\nl\na\nc\nk\nv\no\ni\nd\n,\nh\na\nu\nn\nt\ni\nn\ng\na\nn\nd\ne\nn\ni\ng\nm\na\nt\ni\nc\n.\nT\nh\nr\ne\ne\nS\ne\nl\nf\n-\nP\no\nr\nt\nr\na\ni\nt\ns\n,\na\nt\nr\ni\no\no\nf\nh\ne\na\nd\ns\nc\no\nn\nf\nr\no\nn\nt\ns\nt\nh\ne\nv\ni\ne\nw\ne\nr\n,\nv\ni\nv\ni\nd\nl\ny\nr\ne\nn\nd\ne\nr\ne\nd\ni\nn\ng\nr\ne\ne\nn\n,\ns\ni\nl\nv\ne\nr\na\nn\nd\ny\ne\nl\nl\no\nw\n.\nT\nh\ne\nw\no\nr\nk\ni\ns\nn\no\nt\na\nb\nl","metadata":{"loc":{"lines":{"from":38603,"to":39101}}}}],["94",{"pageContent":"S\ne\nl\nf\n-\nP\no\nr\nt\nr\na\ni\nt\ns\n,\na\nt\nr\ni\no\no\nf\nh\ne\na\nd\ns\nc\no\nn\nf\nr\no\nn\nt\ns\nt\nh\ne\nv\ni\ne\nw\ne\nr\n,\nv\ni\nv\ni\nd\nl\ny\nr\ne\nn\nd\ne\nr\ne\nd\ni\nn\ng\nr\ne\ne\nn\n,\ns\ni\nl\nv\ne\nr\na\nn\nd\ny\ne\nl\nl\no\nw\n.\nT\nh\ne\nw\no\nr\nk\ni\ns\nn\no\nt\na\nb\nl\ne\nf\no\nr\ni\nt\ns\nt\nr\ni\np\nt\ny\nc\nh\ns\nt\nr\nu\nc\nt\nu\nr\ne\n:\nl\ni\nk\ne\nF\nr\na\nn\nc\ni\ns\nB\na\nc\no\nn\n,\nw\nh\no\nm\na\nd\ne\ns\ni\nm\ni\nl\na\nr\nu\ns\ne\no\nf\nt\nh\ne\nf\no\nr\nm\na\nt\nf\no\nr\nh\ni\ns\no\nw\nn\nl\na\nt\ne\ns\ne\nl\nf\n-\np\no\nr\nt\nr\na\ni\nt\ns\n,\nt\nh\ne\na\nr\nt\ni\ns\nt\ns\nt\na\ng\ne\ns\na\nb\no\nl\nd\ne\nn\nc\no\nu\nn\nt\ne\nr\nw\ni\nt\nh\nh\ni\ns\nm\no\nr\nt\na\nl\ni\nt\ny\n,\nm\ne\ne\nt\ni\nn\ng\no\nu\nr\ng\na\nz\ne\nt\nh\nr\ne\ne\nt\ni\nm\ne\ns\nw\ni\nt\nh\nh\ni\ns\no\nw\nn\np\ne\nn\ne\nt\nr\na\nt\ni\nn\ng\ns\nt\na\nr\ne\n.\nA\nt\nt\nh\ne\ns\na\nm\ne\nt\ni\nm\ne\n,\nt\nh\ne\ni\nm\na\ng\ne\ni\ns\nl\na\nc\ne\nd\nw\ni\nt\nh\nd\na\nr\nk\nh\nu\nm\no\nr\n,\ns\nu\nb\nv\ne\nr\ns\ni\no\nn\na\nn\nd\nr\no\nl\ne\np\nl\na\ny\n,\nb\ne\nf\ni\nt\nt\ni\nn\ng\na\nn\na\nr\nt\ni\ns\nt\nw\nh\no\ns\ne\ni\nd\ne\nn\nt\ni\nt\ny\na\nn\nd\np\ne\nr\ns\no\nn\na\nr\ne\nm\na\ni\nn\ne\nd\np\ne\nr\nm\na\nn\ne\nn\nt\nl\ny\ns\nh\nr\no\nu\nd\ne\nd\ni\nn\ni\nn\nt\nr\ni\ng\nu\ne\n.\nI\nt\ni\ns\na\nf\ni\nn\na\nl\nf\nl\no\nu\nr\ni\ns\nh\nf\nr\no\nm\no\nn\ne\no\nf\nt\nh\ne\nt\nw\ne\nn\nt\ni\ne\nt\nh\nc\ne\nn\nt\nu\nr\ny\n’\ns\ng\nr\ne\na\nt\ne\ns\nt\nc\nu\nl\nt\nu\nr","metadata":{"loc":{"lines":{"from":39101,"to":39600}}}}],["95",{"pageContent":"r\ne\nm\na\ni\nn\ne\nd\np\ne\nr\nm\na\nn\ne\nn\nt\nl\ny\ns\nh\nr\no\nu\nd\ne\nd\ni\nn\ni\nn\nt\nr\ni\ng\nu\ne\n.\nI\nt\ni\ns\na\nf\ni\nn\na\nl\nf\nl\no\nu\nr\ni\ns\nh\nf\nr\no\nm\no\nn\ne\no\nf\nt\nh\ne\nt\nw\ne\nn\nt\ni\ne\nt\nh\nc\ne\nn\nt\nu\nr\ny\n’\ns\ng\nr\ne\na\nt\ne\ns\nt\nc\nu\nl\nt\nu\nr\na\nl\ng\ni\na\nn\nt\ns\n:\na\nn\ni\nm\na\ng\ne\nt\nh\na\nt\nc\no\nn\nt\ni\nn\nu\ne\ns\nt\no\nk\ne\ne\np\nt\nh\ne\nw\no\nr\nl\nd\ng\nu\ne\ns\ns\ni\nn\ng\n.\nC\no\nn\nt\nr\na\nc\nt\na\nd\nd\nr\ne\ns\ns\n:\nh\nt\nt\np\ns\n:\n/\n/\nt\nr\no\nn\ns\nc\na\nn\n.\ni\no\n/\n#\n/\nt\no\nk\ne\nn\n7\n2\n1\n/\nT\nC\nz\nU\nY\nn\nF\nS\nw\nt\nH\n2\nb\nJ\nk\ny\nn\nG\nB\n4\n6\nt\nW\nx\nW\nj\nd\nT\nQ\nq\nL\n1\nS\nG\n/\nc\no\nd\ne","metadata":{"loc":{"lines":{"from":39600,"to":39837}}}}],["96",{"pageContent":"2\n1\n9\n.\n3\n.\nB\ne\ne\np\nl\ne\n:\nO\nC\nE\nA\nN\nF\nR\nO\nN\nT\nT\nh\ni\ns\nw\no\nr\nk\nr\ne\np\nr\ne\ns\ne\nn\nt\ns\nB\ne\ne\np\nl\ne\n'\ns\na\nr\nt\nl\ni\nf\ne\na\nn\nd\ns\np\ne\na\nk\ns\nt\no\nt\nh\ne\nd\ne\ne\np\nc\no\nn\nc\ne\nr\nn\nf\no\nr\ng\nl\no\nb\na\nl\nw\na\nr\nm\ni\nn\ng\n.\nF\nu\nl\nl\no\nf\ne\nn\nv\ni\nr\no\nn\nm\ne\nn\nt\na\nl\nv\na\nl\nu\ne\n,\nt\nh\ni\ns\na\nr\nt\np\ni\ne\nc\ne\nu\nn\nd\no\nu\nb\nt\ne\nd\nl\ny\ni\ns\no\nn\ne\no\nf\nt\nh\ne\nb\ne\ns\nt\nN\nF\nT\nw\no\nr\nk\ns\n.\nC\no\nn\nt\nr\na\nc\nt\na\nd\nd\nr\ne\ns\ns\n:\nh\nt\nt\np\ns\n:\n/\n/\nt\nr\no\nn\ns\nc\na\nn\n.\ni\no\n/\n#\n/\nt\no\nk\ne\nn\n7\n2\n1\n/\nT\nC\nz\nU\nY\nn\nF\nS\nw\nt\nH\n2\nb\nJ\nk\ny\nn\nG\nB\n4\n6\nt\nW\nx\nW\nj\nd\nT\nQ\nq\nL\n1\nS\nG\n/\nc\no\nd\ne\n\n2\n2\n9\n.\n4\n.\nP\na\nk\n：\nC\nu\nb\ne\nF\nu\nn\ng\ni\nb\nl\ne\nO\np\ne\nn\nE\nd\ni\nt\ni\no\nn\ns\ne\nn\na\nb\nl\ne\nc\no\nl\nl\ne\nc\nt\no\nr\ns\nt\no\np\nu\nr\nc\nh\na\ns\ne\na\ns\nm\na\nn\ny\nf\nu\nn\ng\ni\nb\nl\ne\nc\nu\nb\ne\ns\na\ns\nt\nh\ne\ny\nw\ni\ns\nh\nd\nu\nr\ni\nn\ng\nt\nh\ne\ns\na\nl\ne\np\ne\nr\ni\no\nd\n.\nT\nh\ne\ns\ne\nf\nu\nn\ng\ni\nb\nl\ne\nc\nu\nb\ne\ns\nc\na\nn\nb\ne\np\nu\nr\nc\nh\na\ns\ne\nd\ni\nn\nd\ni\nv\ni\nd\nu\na\nl\nl\ny\no\nr\nm\na\nn\ny\na\nt\na\nt\ni\nm\ne\n,\na\nn\nd\nw\ni\nl\nl\nd\ne\nl\ni\nv\ne\nr\ni\nt\ns\nc\no\nl\nl\ne\nc\nt\no\nr\na\nd\ni\nf\nf\ne\nr\ne\nn\nt\ns\ne\nt\no\nf\nN\nF\nT\ns\nb\na\ns\ne\nd\no\nn\nt\nh\ne\nt\no\nt\na\nl\nc\nu\nb\ne\ns\nt\nh\ne\ny\no\nw\nn\n.","metadata":{"loc":{"lines":{"from":39839,"to":40334}}}}],["97",{"pageContent":"2\n3\n9\n.\n5\n.\nB\no\nr\ni\ns\nA\nr\nt\nz\ny\nb\na\ns\nh\ne\nf\nf\n：\nT\nh\ne\nC\no\nm\np\nu\nt\ne\nr\ni\nn\nS\no\nc\ni\ne\nt\ny\nA\np\nr\ni\nl\n2\nn\nd\n,\n1\n9\n6\n5\n\"\nT\nh\ne\nC\no\nm\np\nu\nt\ne\nr\ni\nn\nS\no\nc\ni\ne\nt\ny\nA\np\nr\ni\nl\n2\nn\nd\n,\n1\n9\n6\n5\n\"\nw\na\ns\nc\nr\ne\na\nt\ne\nd\nb\ny\na\nr\nt\ni\ns\nt\nB\no\nr\ni\ns\nA\nr\nt\nz\ny\nb\na\ns\nh\ne\nf\nf\na\nn\nd\nw\na\ns\ns\ne\nl\ne\nc\nt\ne\nd\no\nn\nt\nh\ne\nc\no\nv\ne\nr\no\nf\n\"\nT\ni\nm\ne\n\"\nm\na\ng\na\nz\ni\nn\ne\no\nn\nA\np\nr\ni\nl\n2\n,\n1\n9\n6\n5\n,\nd\ne\np\ni\nc\nt\ni\nn\ng\na\nv\ni\nb\nr\na\nn\nt\n,\na\nl\ni\nf\ne\nl\ni\nk\ne\nm\na\nc\nh\ni\nn\ne\nw\ni\nt\nh\na\nb\ni\ng\nb\nr\na\ni\nn\n,\ni\nt\ne\na\ng\ne\nr\nl\ny\ng\no\nt\np\nu\nn\nc\nh\nc\na\nr\nd\ns\na\nn\nd\nd\na\nt\na\nf\nr\no\nm\nt\nh\ne\ns\nt\na\nf\nf\nb\ne\nl\no\nw\n.\nT\nh\ni\ns\ni\ns\nt\nh\ne\nf\ni\nr\ns\nt\nc\no\nv\ne\nr\na\nr\nt\ni\nc\nl\ne\no\nf\nT\ni\nm\ne\n,\ni\nn\nt\nr\no\nd\nu\nc\ni\nn\ng\na\nm\na\nc\nh\ni\nn\ne\nt\nh\na\nt\n\"\nb\ne\ng\ni\nn\ns\nt\no\ni\nn\nf\nl\nu\ne\nn\nc\ne\nt\nh\ne\ns\nt\nr\nu\nc\nt\nu\nr\ne\no\nf\ns\no\nc\ni\ne\nt\ny\n\"\n.\nI\nn\n2\n0\n2\n1\n,\nr\ne\nc\no\nm\nm\ne\nn\nd\ne\nd\nb\ny\nt\nh\ne\nf\na\nm\no\nu\ns\nI\nn\nt\ne\nr\nn\ne\nt\ne\nn\nt\nr\ne\np\nr\ne\nn\ne\nu\nr\nM\na\nr\nc\nR\nu\ns\ns\ne\nl\nl\nB\ne\nn\ni\no\nf\nf\n,\nt\nh\ne\nN\nF\nT\nw\no\nr\nk\n\"\nt\nh\ne\nc\no\nm\np\nu\nt\ne\nr\ni\nn\ns\no\nc\ni\ne\nt\ny\nA\np\nr\ni\nl\n2\nn\nd\n,\n1\n9\n6\n5\n\"\nw\na\ns\ng\ne\nn\ne\nr\na\nt\ne\nd\n.","metadata":{"loc":{"lines":{"from":40336,"to":40834}}}}],["98",{"pageContent":"2\n4\n9\n.\n6\n.\nB\ne\ne\np\nl\ne\n：\nF\ni\nr\ns\nt\nt\ni\nm\ne\nt\no\nr\ne\nl\ne\na\ns\ne\nN\nF\nT\na\nr\nt\nw\no\nr\nk\ns\ni\nn\nt\nh\ne\np\nh\ny\ns\ni\nc\na\nl\nf\no\nr\nm\n(\n5\np\ni\ne\nc\ne\ns\n)\nT\nh\ne\nc\no\nl\nl\ne\nc\nt\ni\no\nn\ns\nc\no\nn\ns\ni\ns\nt\no\nf\nf\ni\nv\ne\na\nr\nt\np\ni\ne\nc\ne\ns\n(\nA\nb\nu\nn\nd\na\nn\nc\ne\n,\nG\ni\ng\na\nc\nh\na\nd\n,\nR\ne\nb\ni\nr\nt\nh\n,\nB\ni\no\nl\no\ng\ni\nc\na\nl\nC\no\nl\nl\ne\nc\nt\ni\nb\nl\ne\na\nn\nd\nJ\na\nn\nu\na\nr\ny\n1\ns\nt\n,\n2\n0\n2\n1\n)\ni\nn\nt\nh\ne\nf\no\nr\nm\no\nf\nb\no\nt\nh\nN\nF\nT\ns\na\nn\nd\np\nh\ny\ns\ni\nc\na\nl\na\nr\nt\nw\no\nr\nk\ns\n.\nT\nh\ne\na\nr\nt\nw\no\nr\nk\ns\na\nr\ne\nd\ni\ns\np\nl\na\ny\ne\nd\no\nn\nf\nr\na\nm\ne\nd\n,\np\nr\no\ng\nr\na\nm\nm\na\nb\nl\ne\nL\nE\nD\ns\nc\nr\ne\ne\nn\ns\nw\ni\nt\nh\na\nn\na\nl\nu\nm\ni\nn\ni\nu\nm\nb\na\ns\ne\n,\na\nn\nd\nt\nh\ne\ns\nc\nr\ne\ne\nn\ns\nw\ni\nl\nl\np\nr\ne\ns\ne\nn\nt\na\nu\nn\ni\nq\nu\ne\nc\no\nl\no\nr\np\na\nt\nt\ne\nr\nn\nw\nh\ne\nn\ns\nw\ni\nt\nc\nh\ne\nd\no\nn\n.\nT\nh\ni\ns\ni\ns\nt\nh\ne\nf\ni\nr\ns\nt\nt\ni\nm\ne\nB\ne\ne\np\nl\ne\nh\na\ns\nr\ne\nl\ne\na\ns\ne\nd\nN\nF\nT\na\nr\nt\nw\no\nr\nk\ns\ni\nn\nt\nh\ne\np\nh\ny\ns\ni\nc\na\nl\nf\no\nr\nm\n.","metadata":{"loc":{"lines":{"from":40836,"to":41242}}}}],["99",{"pageContent":"2\n5\n1\n0\n.\nO\nt\nh\ne\nr\nI\nn\nf\no\nr\nm\na\nt\ni\no\nn\nW\ne\nb\ns\ni\nt\ne\n:\nh\nt\nt\np\n:\n/\n/\na\np\ne\nn\nf\nt\n.\no\nr\ng\nE\nm\na\ni\nl\n:\nc\no\nn\nt\na\nc\nt\n@\na\np\ne\nn\nf\nt\n.\no\nr\ng\nB\nl\no\nc\nk\nc\nh\na\ni\nn\ne\nx\np\nl\no\nr\ne\nr\n:\nh\nt\nt\np\ns\n:\n/\n/\nt\nr\no\nn\ns\nc\na\nn\n.\no\nr\ng","metadata":{"loc":{"lines":{"from":41244,"to":41352}}}}],["100",{"pageContent":"2\n6\n1\n1\n.\nD\nI\nS\nC\nL\nA\nI\nM\nE\nR\nS\nP\nL\nE\nA\nS\nE\nR\nE\nA\nD\nT\nH\nI\nS\nS\nE\nC\nT\nI\nO\nN\nA\nN\nD\nT\nH\nE\nF\nO\nL\nL\nO\nW\nI\nN\nG\nS\nE\nC\nT\nI\nO\nN\nS\nE\nN\nT\nI\nT\nL\nE\nD\n\"\nD\nI\nS\nC\nL\nA\nI\nM\nE\nR\nO\nF\nL\nI\nA\nB\nI\nL\nI\nT\nY\n\"\n,\n\"\nN\nO\nR\nE\nP\nR\nE\nS\nE\nN\nT\nA\nT\nI\nO\nN\nS\nA\nN\nD\nW\nA\nR\nR\nA\nN\nT\nI\nE\nS\n\"\n,\n\"\nR\nE\nP\nR\nE\nS\nE\nN\nT\nA\nT\nI\nO\nN\nS\nA\nN\nD\nW\nA\nR\nR\nA\nN\nT\nI\nE\nS\nB\nY\nY\nO\nU\n\"\n,\n\"\nC\nA\nU\nT\nI\nO\nN\nA\nR\nY\nN\nO\nT\nE\nO\nN\nF\nO\nR\nW\nA\nR\nD\n-\nL\nO\nO\nK\nI\nN\nG\nS\nT\nA\nT\nE\nM\nE\nN\nT\nS\n\"\n,\n\"\nM\nA\nR\nK\nE\nT\nA\nN\nD\nI\nN\nD\nU\nS\nT\nR\nY\nI\nN\nF\nO\nR\nM\nA\nT\nI\nO\nN\nA\nN\nD\nN\nO\nC\nO\nN\nS\nE\nN\nT\nO\nF\nO\nT\nH\nE\nR\nP\nE\nR\nS\nO\nN\nS\n\"\n,\n\"\nN\nO\nA\nD\nV\nI\nC\nE\n\"\n,\n\"\nN\nO\nF\nU\nR\nT\nH\nE\nR\nI\nN\nF\nO\nR\nM\nA\nT\nI\nO\nN\nO\nR\nU\nP\nD\nA\nT\nE\n\"\n,\n\"\nR\nE\nS\nT\nR\nI\nC\nT\nI\nO\nN\nS\nO\nN\nD\nI\nS\nT\nR\nI\nB\nU\nT\nI\nO\nN\nA\nN\nD\nD\nI\nS\nS\nE\nM\nI\nN\nA\nT\nI\nO\nN\n\"\n,\n\"\nN\nO\nO\nF\nF\nE\nR\nO\nF\nS\nE\nC\nU\nR\nI\nT\nI\nE\nS\nO\nR\nR\nE\nG\nI\nS\nT\nR\nA\nT\nI\nO\nN\n\"\nA\nN\nD\n\"\nR\nI\nS\nK\nS\nA\nN\nD\nU\nN\nC\nE\nR\nT\nA\nI\nN\nT\nI\nE\nS\n\"\nC\nA\nR\nE\nF\nU\nL\nL\nY\n.\nI\nF\nY\nO\nU\nA\nR\nE\nI\nN\nA\nN\nY\nD\nO\nU\nB\nT\nA\nS\nT\nO\nT\nH\nE\nA\nC\nT\nI\nO\nN\nY\nO\nU\nS\nH\nO\nU\nL\nD\nT\nA\nK\nE\n,\nY\nO\nU\nS\nH\nO\nU\nL\nD\nC\nO\nN\nS\nU\nL\nT\nY\nO\nU\nR\nL\nE\nG\nA\nL\n,\nF\nI\nN\nA\nN\nC\nI\nA","metadata":{"loc":{"lines":{"from":41354,"to":41852}}}}],["101",{"pageContent":"E\nR\nT\nA\nI\nN\nT\nI\nE\nS\n\"\nC\nA\nR\nE\nF\nU\nL\nL\nY\n.\nI\nF\nY\nO\nU\nA\nR\nE\nI\nN\nA\nN\nY\nD\nO\nU\nB\nT\nA\nS\nT\nO\nT\nH\nE\nA\nC\nT\nI\nO\nN\nY\nO\nU\nS\nH\nO\nU\nL\nD\nT\nA\nK\nE\n,\nY\nO\nU\nS\nH\nO\nU\nL\nD\nC\nO\nN\nS\nU\nL\nT\nY\nO\nU\nR\nL\nE\nG\nA\nL\n,\nF\nI\nN\nA\nN\nC\nI\nA\nL\n,\nT\nA\nX\nO\nR\nO\nT\nH\nE\nR\nP\nR\nO\nF\nE\nS\nS\nI\nO\nN\nA\nL\nA\nD\nV\nI\nS\nO\nR\n(\nS\n)\n.\nN\nF\nT\na\nr\ne\nn\no\nt\ni\nn\nt\ne\nn\nd\ne\nd\nt\no\nc\no\nn\ns\nt\ni\nt\nu\nt\ne\ns\ne\nc\nu\nr\ni\nt\ni\ne\ns\ni\nn\na\nn\ny\nj\nu\nr\ni\ns\nd\ni\nc\nt\ni\no\nn\n.\nT\nh\ni\ns\nW\nh\ni\nt\ne\nP\na\np\ne\nr\nd\no\ne\ns\nn\no\nt\nc\no\nn\ns\nt\ni\nt\nu\nt\ne\na\np\nr\no\ns\np\ne\nc\nt\nu\ns\no\nr\no\nf\nf\ne\nr\nd\no\nc\nu\nm\ne\nn\nt\no\nf\na\nn\ny\ns\no\nr\nt\na\nn\nd\ni\ns\nn\no\nt\ni\nn\nt\ne\nn\nd\ne\nd\nt\no\nc\no\nn\ns\nt\ni\nt\nu\nt\ne\na\nn\no\nf\nf\ne\nr\no\nf\ns\ne\nc\nu\nr\ni\nt\ni\ne\ns\no\nr\na\ns\no\nl\ni\nc\ni\nt\na\nt\ni\no\nn\nf\no\nr\ni\nn\nv\ne\ns\nt\nm\ne\nn\nt\ni\nn\ns\ne\nc\nu\nr\ni\nt\ni\ne\ns\ni\nn\na\nn\ny\nj\nu\nr\ni\ns\nd\ni\nc\nt\ni\no\nn\n.\nT\nh\ni\ns\nW\nh\ni\nt\ne\nP\na\np\ne\nr\nd\no\ne\ns\nn\no\nt\nc\no\nn\ns\nt\ni\nt\nu\nt\ne\no\nr\nf\no\nr\nm\np\na\nr\nt\no\nf\na\nn\ny\no\np\ni\nn\ni\no\nn\no\nn\na\nn\ny\na\nd\nv\ni\nc\ne\nt\no\ns\ne\nl\nl\n,\no\nr\na\nn\ny\ns\no\nl\ni\nc\ni\nt\na\nt\ni\no\nn\no\nf\na\nn\ny\no\nf\nf\ne\nr\nb\ny\nt\nh\ne\nd\ni\ns\nt\nr\ni\nb\nu\nt\no\nr\n/\nv\ne\nn\nd\no\nr\no\nf\nt\nh\ne\nN\nF\nT\n(\nt\nh\ne\n\"\nD\ni\ns","metadata":{"loc":{"lines":{"from":41852,"to":42351}}}}],["102",{"pageContent":"p\na\nr\nt\no\nf\na\nn\ny\no\np\ni\nn\ni\no\nn\no\nn\na\nn\ny\na\nd\nv\ni\nc\ne\nt\no\ns\ne\nl\nl\n,\no\nr\na\nn\ny\ns\no\nl\ni\nc\ni\nt\na\nt\ni\no\nn\no\nf\na\nn\ny\no\nf\nf\ne\nr\nb\ny\nt\nh\ne\nd\ni\ns\nt\nr\ni\nb\nu\nt\no\nr\n/\nv\ne\nn\nd\no\nr\no\nf\nt\nh\ne\nN\nF\nT\n(\nt\nh\ne\n\"\nD\ni\ns\nt\nr\ni\nb\nu\nt\no\nr\n\"\n)\nt\no\np\nu\nr\nc\nh\na\ns\ne\na\nn\ny\nN\nF\nT\nn\no\nr\ns\nh\na\nl\nl\ni\nt\no\nr\na\nn\ny\np\na\nr\nt\no\nf\ni\nt\nn\no\nr\nt\nh\ne\nf\na\nc\nt\no\nf\ni\nt\ns\np\nr\ne\ns\ne\nn\nt\na\nt\ni\no\nn\nf\no\nr\nm\nt\nh\ne\nb\na\ns\ni\ns\no\nf\n,\no\nr\nb\ne\nr\ne\nl\ni\ne\nd\nu\np\no\nn\ni\nn\nc\no\nn\nn\ne\nc\nt\ni\no\nn\nw\ni\nt\nh\n,\na\nn\ny\nc\no\nn\nt\nr\na\nc\nt\no\nr\ni\nn\nv\ne\ns\nt\nm\ne\nn\nt\nd\ne\nc\ni\ns\ni\no\nn\n.\nN\no\np\ne\nr\ns\no\nn\ni\ns\nb\no\nu\nn\nd\nt\no\ne\nn\nt\ne\nr\ni\nn\nt\no\na\nn\ny\nc\no\nn\nt\nr\na\nc\nt\no\nr\nb\ni\nn\nd\ni\nn\ng\nl\ne\ng\na\nl\nc\no\nm\nm\ni\nt\nm\ne\nn\nt\ni\nn\nr\ne\nl\na\nt\ni\no\nn\nt\no\nt\nh\ne\ns\na\nl\ne\na\nn\nd\np\nu\nr\nc\nh\na\ns\ne\no\nf\nt\nh\ne\nN\nF\nT\na\nn\nd\nn\no\nc\nr\ny\np\nt\no\nc\nu\nr\nr\ne\nn\nc\ny\no\nr\no\nt\nh\ne\nr\nf\no\nr\nm\no\nf\np\na\ny\nm\ne\nn\nt\ni\ns\nt\no\nb\ne\na\nc\nc\ne\np\nt\ne\nd\no\nn\nt\nh\ne\nb\na\ns\ni\ns\no\nf\nt\nh\ni\ns\nW\nh\ni\nt\ne\nP\na\np\ne\nr\n.\nN\no\nr\ne\ng\nu\nl\na\nt\no\nr\ny\na\nu\nt\nh\no\nr\ni\nt\ny\nh\na\ns\nr\ne\nv\ni\ne\nw\ne\nd\no\nr\na\np\np\nr\no\nv\ne\nd\na\nn\ny\no\nf\nt\nh\ne\ni\nn\nf\no\nr\nm\na\nt\ni\no\nn\ns\ne\nt\no\nu\nt","metadata":{"loc":{"lines":{"from":42351,"to":42850}}}}],["103",{"pageContent":"c\ne\np\nt\ne\nd\no\nn\nt\nh\ne\nb\na\ns\ni\ns\no\nf\nt\nh\ni\ns\nW\nh\ni\nt\ne\nP\na\np\ne\nr\n.\nN\no\nr\ne\ng\nu\nl\na\nt\no\nr\ny\na\nu\nt\nh\no\nr\ni\nt\ny\nh\na\ns\nr\ne\nv\ni\ne\nw\ne\nd\no\nr\na\np\np\nr\no\nv\ne\nd\na\nn\ny\no\nf\nt\nh\ne\ni\nn\nf\no\nr\nm\na\nt\ni\no\nn\ns\ne\nt\no\nu\nt\ni\nn\nt\nh\ni\ns\nW\nh\ni\nt\ne\nP\na\np\ne\nr\n.\nN\no\ns\nu\nc\nh\na\nc\nt\ni\no\nn\nh\na\ns\nb\ne\ne\nn\no\nr\nw\ni\nl\nl\nb\ne\nt\na\nk\ne\nn\nu\nn\nd\ne\nr\nt\nh\ne\nl\na\nw\ns\n,\nr\ne\ng\nu\nl\na\nt\no\nr\ny\nr\ne\nq\nu\ni\nr\ne\nm\ne\nn\nt\ns\no\nr\nr\nu\nl\ne\ns\no\nf\na\nn\ny\nj\nu\nr\ni\ns\nd\ni\nc\nt\ni\no\nn\n.\nT\nh\ne\np\nu\nb\nl\ni\nc\na\nt\ni\no\nn\n,\nd\ni\ns\nt\nr\ni\nb\nu\nt\ni\no\nn\no\nr\nd\ni\ns\ns\ne\nm\ni\nn\na\nt\ni\no\nn\no\nf\nt\nh\ni\ns\nW\nh\ni\nt\ne\nP\na\np\ne\nr\nd\no\ne\ns\nn\no\nt\ni\nm\np\nl\ny\nc\no\nm\np\nl\ni\na\nn\nc\ne\nw\ni\nt\nh\na\np\np\nl\ni\nc\na\nb\nl\ne\nl\na\nw\ns\n,\nr\ne\ng\nu\nl\na\nt\no\nr\ny\nr\ne\nq\nu\ni\nr\ne\nm\ne\nn\nt\ns\no\nr\nr\nu\nl\ne\ns\n.\nT\nh\ne\nb\nu\ns\ni\nn\ne\ns\ns\na\nn\nd\no\np\ne\nr\na\nt\ni\no\nn\ns\no\nf\nA\nP\nE\nN\nF\nT\na\nn\nd\nt\nh\ne\nN\nF\nT\nt\no\nk\ne\nn\ns\n(\na\nl\nl\no\nf\nw\nh\ni\nc\nh\na\nr\ne\nm\ne\nn\nt\ni\no\nn\ne\nd\ni\nn\nt\nh\ni\ns\nw\nh\ni\nt\ne\np\na\np\ne\nr\n)\na\nr\ne\ns\nu\nb\nj\ne\nc\nt\nt\no\nr\ni\ns\nk\ns\na\nn\nd\nu\nn\nc\ne\nr\nt\na\ni\nn\nt\ni\ne\ns\n.","metadata":{"loc":{"lines":{"from":42850,"to":43308}}}}],["104",{"pageContent":"2\n7\nT\nh\ni\ns\nW\nh\ni\nt\ne\nP\na\np\ne\nr\n,\na\nn\ny\np\na\nr\nt\nt\nh\ne\nr\ne\no\nf\na\nn\nd\na\nn\ny\nc\no\np\ny\nt\nh\ne\nr\ne\no\nf\nm\nu\ns\nt\nn\no\nt\nb\ne\nt\na\nk\ne\nn\no\nr\nt\nr\na\nn\ns\nm\ni\nt\nt\ne\nd\nt\no\na\nn\ny\nc\no\nu\nn\nt\nr\ny\nw\nh\ne\nr\ne\nd\ni\ns\nt\nr\ni\nb\nu\nt\ni\no\nn\no\nr\nd\ni\ns\ns\ne\nm\ni\nn\na\nt\ni\no\nn\no\nf\nt\nh\ni\ns\nW\nh\ni\nt\ne\nP\na\np\ne\nr\ni\ns\np\nr\no\nh\ni\nb\ni\nt\ne\nd\no\nr\nr\ne\ns\nt\nr\ni\nc\nt\ne\nd\n.\nN\no\np\na\nr\nt\no\nf\nt\nh\ni\ns\nW\nh\ni\nt\ne\nP\na\np\ne\nr\ni\ns\nt\no\nb\ne\nr\ne\np\nr\no\nd\nu\nc\ne\nd\n,\nd\ni\ns\nt\nr\ni\nb\nu\nt\ne\nd\no\nr\nd\ni\ns\ns\ne\nm\ni\nn\na\nt\ne\nd\nw\ni\nt\nh\no\nu\nt\ni\nn\nc\nl\nu\nd\ni\nn\ng\nt\nh\ni\ns\ns\ne\nc\nt\ni\no\nn\na\nn\nd\nt\nh\ne\nf\no\nl\nl\no\nw\ni\nn\ng\ns\ne\nc\nt\ni\no\nn\ns\ne\nn\nt\ni\nt\nl\ne\nd\n\"\nD\ni\ns\nc\nl\na\ni\nm\ne\nr\no\nf\nL\ni\na\nb\ni\nl\ni\nt\ny\n\"\n,\n\"\nN\no\nR\ne\np\nr\ne\ns\ne\nn\nt\na\nt\ni\no\nn\ns\na\nn\nd\nW\na\nr\nr\na\nn\nt\ni\ne\ns\n\"\n,\n\"\nR\ne\np\nr\ne\ns\ne\nn\nt\na\nt\ni\no\nn\ns\na\nn\nd\nW\na\nr\nr\na\nn\nt\ni\ne\ns\nB\ny\nY\no\nu\n\"\n,\n\"\nC\na\nu\nt\ni\no\nn\na\nr\ny\nN\no\nt\ne\nO\nn\nF\no\nr\nw\na\nr\nd\n-\nL\no\no\nk\ni\nn\ng\nS\nt\na\nt\ne\nm\ne\nn\nt\ns\n\"\n,\n\"\nM\na\nr\nk\ne\nt\na\nn\nd\nI\nn\nd\nu\ns\nt\nr\ny\nI\nn\nf\no\nr\nm\na\nt\ni\no\nn\na\nn\nd\nN\no\nC\no\nn\ns\ne\nn\nt\no\nf\nO\nt\nh\ne\nr\nP\ne\nr\ns\no\nn\ns\n\"\n,\n\"\nT\ne\nr\nm\ns\nU\ns\ne\nd\n\"\n,\n\"\nN\no\nA\nd\nv\ni\nc\ne\n\"\n,","metadata":{"loc":{"lines":{"from":43310,"to":43808}}}}],["105",{"pageContent":"-\nL\no\no\nk\ni\nn\ng\nS\nt\na\nt\ne\nm\ne\nn\nt\ns\n\"\n,\n\"\nM\na\nr\nk\ne\nt\na\nn\nd\nI\nn\nd\nu\ns\nt\nr\ny\nI\nn\nf\no\nr\nm\na\nt\ni\no\nn\na\nn\nd\nN\no\nC\no\nn\ns\ne\nn\nt\no\nf\nO\nt\nh\ne\nr\nP\ne\nr\ns\no\nn\ns\n\"\n,\n\"\nT\ne\nr\nm\ns\nU\ns\ne\nd\n\"\n,\n\"\nN\no\nA\nd\nv\ni\nc\ne\n\"\n,\n\"\nN\no\nF\nu\nr\nt\nh\ne\nr\nI\nn\nf\no\nr\nm\na\nt\ni\no\nn\no\nr\nU\np\nd\na\nt\ne\n\"\n,\n\"\nR\ne\ns\nt\nr\ni\nc\nt\ni\no\nn\ns\nO\nn\nD\ni\ns\nt\nr\ni\nb\nu\nt\ni\no\nn\na\nn\nd\nD\ni\ns\ns\ne\nm\ni\nn\na\nt\ni\no\nn\n\"\n,\n\"\nN\no\nO\nf\nf\ne\nr\no\nf\nS\ne\nc\nu\nr\ni\nt\ni\ne\ns\nO\nr\nR\ne\ng\ni\ns\nt\nr\na\nt\ni\no\nn\n\"\na\nn\nd\n\"\nR\ni\ns\nk\ns\na\nn\nd\nU\nn\nc\ne\nr\nt\na\ni\nn\nt\ni\ne\ns\n\"\n.\nA\n.\nD\nI\nS\nC\nL\nA\nI\nM\nE\nR\nO\nF\nL\nI\nA\nB\nI\nL\nI\nT\nY\n.\nT\no\nt\nh\ne\nm\na\nx\ni\nm\nu\nm\ne\nx\nt\ne\nn\nt\np\ne\nr\nm\ni\nt\nt\ne\nd\nb\ny\nt\nh\ne\na\np\np\nl\ni\nc\na\nb\nl\ne\nl\na\nw\ns\n,\nr\ne\ng\nu\nl\na\nt\ni\no\nn\ns\na\nn\nd\nr\nu\nl\ne\ns\n,\nA\nP\nE\nN\nF\nT\ns\nh\na\nl\nl\nn\no\nt\nb\ne\nl\ni\na\nb\nl\ne\nf\no\nr\na\nn\ny\ni\nn\nd\ni\nr\ne\nc\nt\n,\ns\np\ne\nc\ni\na\nl\n,\ni\nn\nc\ni\nd\ne\nn\nt\na\nl\n,\nc\no\nn\ns\ne\nq\nu\ne\nn\nt\ni\na\nl\no\nr\no\nt\nh\ne\nr\nl\no\ns\ns\ne\ns\no\nf\na\nn\ny\nk\ni\nn\nd\n,\ni\nn\nt\no\nr\nt\n,\nc\no\nn\nt\nr\na\nc\nt\no\nr\no\nt\nh\ne\nr\nw\ni\ns\ne\n(\ni\nn\nc\nl\nu\nd\ni\nn\ng\nb\nu\nt\nn\no\nt\nl\ni\nm\ni\nt\ne\nd\nt\no\nl\no\ns\ns\no\nf\nr\ne\nv\ne\nn\nu\ne\n,\ni\nn\nc\no\nm\ne\no\nr\np\nr\no\nf\ni\nt","metadata":{"loc":{"lines":{"from":43808,"to":44307}}}}],["106",{"pageContent":"o\nt\nh\ne\nr\nl\no\ns\ns\ne\ns\no\nf\na\nn\ny\nk\ni\nn\nd\n,\ni\nn\nt\no\nr\nt\n,\nc\no\nn\nt\nr\na\nc\nt\no\nr\no\nt\nh\ne\nr\nw\ni\ns\ne\n(\ni\nn\nc\nl\nu\nd\ni\nn\ng\nb\nu\nt\nn\no\nt\nl\ni\nm\ni\nt\ne\nd\nt\no\nl\no\ns\ns\no\nf\nr\ne\nv\ne\nn\nu\ne\n,\ni\nn\nc\no\nm\ne\no\nr\np\nr\no\nf\ni\nt\ns\n,\na\nn\nd\nl\no\ns\ns\no\nf\nu\ns\ne\no\nr\nd\na\nt\na\n)\n,\na\nr\ni\ns\ni\nn\ng\no\nu\nt\no\nf\no\nr\ni\nn\nc\no\nn\nn\ne\nc\nt\ni\no\nn\nw\ni\nt\nh\na\nn\ny\na\nc\nc\ne\np\nt\na\nn\nc\ne\no\nf\no\nr\nr\ne\nl\ni\na\nn\nc\ne\no\nn\nt\nh\ni\ns\nW\nh\ni\nt\ne\nP\na\np\ne\nr\no\nr\na\nn\ny\np\na\nr\nt\nt\nh\ne\nr\ne\no\nf\nb\ny\ny\no\nu\n.\nB\n.\nN\nO\nR\nE\nP\nR\nE\nS\nE\nN\nT\nA\nT\nI\nO\nN\nS\nA\nN\nD\nW\nA\nR\nR\nA\nN\nT\nI\nE\nS\n.\nA\nP\nE\nN\nF\nT\nd\no\ne\ns\nn\no\nt\nm\na\nk\ne\no\nr\np\nu\nr\np\no\nr\nt\nt\no\nm\na\nk\ne\n,\na\nn\nd\nh\ne\nr\ne\nb\ny\nd\ni\ns\nc\nl\na\ni\nm\ns\n,\na\nn\ny\nr\ne\np\nr\ne\ns\ne\nn\nt\na\nt\ni\no\nn\n,\nw\na\nr\nr\na\nn\nt\ny\no\nr\nu\nn\nd\ne\nr\nt\na\nk\ni\nn\ng\ni\nn\na\nn\ny\nf\no\nr\nm\nw\nh\na\nt\ns\no\ne\nv\ne\nr\nt\no\na\nn\ny\ne\nn\nt\ni\nt\ny\no\nr\np\ne\nr\ns\no\nn\n,\ni\nn\nc\nl\nu\nd\ni\nn\ng\na\nn\ny\nr\ne\np\nr\ne\ns\ne\nn\nt\na\nt\ni\no\nn\n,\nw\na\nr\nr\na\nn\nt\ny\no\nr\nu\nn\nd\ne\nr\nt\na\nk\ni\nn\ng\ni\nn\nr\ne\nl\na\nt\ni\no\nn\nt\no\nt\nh\ne\nt\nr\nu\nt\nh\n,\na\nc\nc\nu\nr\na\nc\ny\na\nn\nd\nc\no\nm\np\nl\ne\nt\ne\nn\ne\ns\ns\no\nf\na\nn\ny\no\nf\nt\nh\ne\ni\nn\nf\no\nr\nm\na\nt\ni\no\nn\ns\ne\nt\no\nu\nt\ni\nn\nt","metadata":{"loc":{"lines":{"from":44307,"to":44806}}}}],["107",{"pageContent":"t\ni\no\nn\n,\nw\na\nr\nr\na\nn\nt\ny\no\nr\nu\nn\nd\ne\nr\nt\na\nk\ni\nn\ng\ni\nn\nr\ne\nl\na\nt\ni\no\nn\nt\no\nt\nh\ne\nt\nr\nu\nt\nh\n,\na\nc\nc\nu\nr\na\nc\ny\na\nn\nd\nc\no\nm\np\nl\ne\nt\ne\nn\ne\ns\ns\no\nf\na\nn\ny\no\nf\nt\nh\ne\ni\nn\nf\no\nr\nm\na\nt\ni\no\nn\ns\ne\nt\no\nu\nt\ni\nn\nt\nh\ni\ns\nW\nh\ni\nt\ne\nP\na\np\ne\nr\n.\nC\n.\nR\nE\nP\nR\nE\nS\nE\nN\nT\nA\nT\nI\nO\nN\nS\nA\nN\nD\nW\nA\nR\nR\nA\nN\nT\nI\nE\nS\nB\nY\nY\nO\nU\n.\nB\ny\na\nc\nc\ne\ns\ns\ni\nn\ng\na\nn\nd\n/\no\nr\na\nc\nc\ne\np\nt\ni\nn\ng\np\no\ns\ns\ne\ns\ns\ni\no\nn\no\nf\na\nn\ny\ni\nn\nf\no\nr\nm\na\nt\ni\no\nn\ni\nn\nt\nh\ni\ns\nW\nh\ni\nt\ne\nP\na\np\ne\nr\no\nr\ns\nu\nc\nh\np\na\nr\nt\nt\nh\ne\nr\ne\no\nf\n(\na\ns\nt\nh\ne\nc\na\ns\ne\nm\na\ny\nb\ne\n)\n,\ny\no\nu\nr\ne\np\nr\ne\ns\ne\nn\nt\na\nn\nd\nw\na\nr\nr\na\nn\nt\nt\no\nA\nP\nE\nN\nF\nT\na\ns\nf\no\nl\nl\no\nw\ns\n:\n(\na\n)\ny\no\nu\na\ng\nr\ne\ne\na\nn\nd\na\nc\nk\nn\no\nw\nl\ne\nd\ng\ne\nt\nh\na\nt\nt\nh\ne\nN\nF\nT\nd\no\nn\no\nt\nc\no\nn\ns\nt\ni\nt\nu\nt\ne\ns\ne\nc\nu\nr\ni\nt\ni\ne\ns\ni\nn\na\nn\ny\nf\no\nr\nm\ni\nn\na\nn\ny\nj\nu\nr\ni\ns\nd\ni\nc\nt\ni\no\nn\n;\n(\nb\n)\ny\no\nu\na\ng\nr\ne\ne\na\nn\nd\na\nc\nk\nn\no\nw\nl\ne\nd\ng\ne\nt\nh\na\nt\nt\nh\ni\ns\nW\nh\ni\nt\ne\nP\na\np\ne\nr\nd\no\ne\ns\nn\no\nt\nc\no\nn\ns\nt\ni\nt\nu\nt\ne\na\np\nr\no\ns\np\ne\nc\nt\nu\ns\no\nr\no\nf\nf\ne\nr\nd\no\nc\nu\nm\ne\nn\nt\no\nf\na\nn\ny\ns\no\nr\nt\na\nn\nd\ni\ns\nn\no\nt\ni\nn\nt\ne\nn\nd\ne\nd\nt\no\nc\no\nn\ns\nt\ni\nt\nu","metadata":{"loc":{"lines":{"from":44806,"to":45305}}}}],["108",{"pageContent":"e\nd\ng\ne\nt\nh\na\nt\nt\nh\ni\ns\nW\nh\ni\nt\ne\nP\na\np\ne\nr\nd\no\ne\ns\nn\no\nt\nc\no\nn\ns\nt\ni\nt\nu\nt\ne\na\np\nr\no\ns\np\ne\nc\nt\nu\ns\no\nr\no\nf\nf\ne\nr\nd\no\nc\nu\nm\ne\nn\nt\no\nf\na\nn\ny\ns\no\nr\nt\na\nn\nd\ni\ns\nn\no\nt\ni\nn\nt\ne\nn\nd\ne\nd\nt\no\nc\no\nn\ns\nt\ni\nt\nu\nt\ne\na\nn\no\nf\nf\ne\nr\no\nf\ns\ne\nc\nu\nr\ni\nt\ni\ne\ns\ni\nn\na\nn\ny\nj\nu\nr\ni\ns\nd\ni\nc\nt\ni\no\nn\no\nr\na\ns\no\nl\ni\nc\ni\nt\na\nt\ni\no\nn\nf\no\nr\ni\nn\nv\ne\ns\nt\nm\ne\nn\nt\ni\nn\ns\ne\nc\nu\nr\ni\nt\ni\ne\ns\na\nn\nd\ny\no\nu\na\nr\ne\nn\no\nt\nb\no\nu\nn\nd\nt\no\ne\nn\nt\ne\nr\ni\nn\nt\no\na\nn\ny\nc\no\nn\nt\nr\na\nc\nt\no\nr\nb\ni\nn\nd\ni\nn\ng\nl\ne\ng\na\nl\nc\no\nm\nm\ni\nt\nm\ne\nn\nt\na\nn\nd\nn\no\nc\nr\ny\np\nt\no\nc\nu\nr\nr\ne\nn\nc\ny\no\nr\no\nt\nh\ne\nr\nf\no\nr\nm\no\nf\np\na\ny\nm\ne\nn\nt\ni\ns\nt\no\nb\ne\na\nc\nc\ne\np\nt\ne\nd\no\nn\nt\nh\ne\nb\na\ns\ni\ns\no\nf\nt\nh\ni\ns\nW\nh\ni\nt\ne\nP\na\np\ne\nr\n;\n(\nc\n)\ny\no\nu\na\ng\nr\ne\ne\na\nn\nd\na\nc\nk\nn\no\nw\nl\ne\nd\ng\ne\nt\nh\na\nt\nn\no\nr\ne\ng\nu\nl\na\nt\no\nr\ny\na\nu\nt\nh\no\nr\ni\nt\ny\nh\na\ns\ne\nx\na\nm\ni\nn\ne\nd\no\nr\na\np\np\nr\no\nv\ne\nd\no\nf\nt\nh\ne\ni\nn\nf\no\nr\nm\na\nt\ni\no\nn\ns\ne\nt\no\nu\nt\ni\nn\nt\nh\ni\ns\nW\nh\ni\nt\ne\nP\na\np\ne\nr\n,\nn\no\na\nc\nt\ni\no\nn\nh\na\ns\nb\ne\ne\nn\no\nr\nw\ni\nl\nl\nb\ne","metadata":{"loc":{"lines":{"from":45305,"to":45758}}}}],["109",{"pageContent":"2\n8\nt\na\nk\ne\nn\nu\nn\nd\ne\nr\nt\nh\ne\nl\na\nw\ns\n,\nr\ne\ng\nu\nl\na\nt\no\nr\ny\nr\ne\nq\nu\ni\nr\ne\nm\ne\nn\nt\ns\no\nr\nr\nu\nl\ne\ns\no\nf\na\nn\ny\nj\nu\nr\ni\ns\nd\ni\nc\nt\ni\no\nn\na\nn\nd\nt\nh\ne\np\nu\nb\nl\ni\nc\na\nt\ni\no\nn\n,\nd\ni\ns\nt\nr\ni\nb\nu\nt\ni\no\nn\no\nr\nd\ni\ns\ns\ne\nm\ni\nn\na\nt\ni\no\nn\no\nf\nt\nh\ni\ns\nW\nh\ni\nt\ne\nP\na\np\ne\nr\nt\no\ny\no\nu\nd\no\ne\ns\nn\no\nt\ni\nm\np\nl\ny\nt\nh\na\nt\nt\nh\ne\na\np\np\nl\ni\nc\na\nb\nl\ne\nl\na\nw\ns\n,\nr\ne\ng\nu\nl\na\nt\no\nr\ny\nr\ne\nq\nu\ni\nr\ne\nm\ne\nn\nt\ns\no\nr\nr\nu\nl\ne\ns\nh\na\nv\ne\nb\ne\ne\nn\nc\no\nm\np\nl\ni\ne\nd\nw\ni\nt\nh\n;\n(\nd\n)\ny\no\nu\na\ng\nr\ne\ne\na\nn\nd\na\nc\nk\nn\no\nw\nl\ne\nd\ng\ne\nt\nh\na\nt\nt\nh\ne\np\nr\no\nm\ni\ns\ne\na\nn\nd\n/\no\nr\nc\no\nm\np\nl\ne\nt\ni\no\nn\no\nf\nt\nh\ni\ns\nW\nh\ni\nt\ne\nP\na\np\ne\nr\n,\no\nr\nf\nu\nt\nu\nr\ne\nt\nr\na\nd\ni\nn\ng\no\nf\nN\nF\nT\no\nn\na\nn\ny\nc\nr\ny\np\nt\no\nc\nu\nr\nr\ne\nn\nc\ny\ne\nx\nc\nh\na\nn\ng\ne\n,\ns\nh\na\nl\nl\nn\no\nt\nb\ne\nd\ne\ne\nm\ne\nd\nb\ny\ny\no\nu\nt\no\ni\nn\nd\ni\nc\na\nt\ne\nt\nh\ne\nv\na\nl\nu\ne\no\nf\nA\nP\nE\nN\nF\nT\n,\nN\nF\nT\n(\na\nl\nl\na\ns\nr\ne\nf\ne\nr\ne\nn\nc\ne\nd\ni\nn\nt\nh\ni\ns\nW\nh\ni\nt\ne\nP\na\np\ne\nr\n)\n;\n(\ne\n)\nt\nh\ne\nd\ni\ns\nt\nr\ni\nb\nu\nt\ni\no\nn\no\nr\nd\ni\ns\ns\ne\nm\ni\nn\na\nt\ni\no\nn\no\nf\nt\nh\ni\ns\nW\nh\ni\nt\ne\nP\na\np\ne\nr\n,\na\nn\ny\np\na\nr\nt\nt\nh\ne\nr\ne\no\nf\no\nr\na\nn\ny\nc\no\np\ny\nt\nh\ne\nr\ne","metadata":{"loc":{"lines":{"from":45760,"to":46258}}}}],["110",{"pageContent":"n\nc\ne\nd\ni\nn\nt\nh\ni\ns\nW\nh\ni\nt\ne\nP\na\np\ne\nr\n)\n;\n(\ne\n)\nt\nh\ne\nd\ni\ns\nt\nr\ni\nb\nu\nt\ni\no\nn\no\nr\nd\ni\ns\ns\ne\nm\ni\nn\na\nt\ni\no\nn\no\nf\nt\nh\ni\ns\nW\nh\ni\nt\ne\nP\na\np\ne\nr\n,\na\nn\ny\np\na\nr\nt\nt\nh\ne\nr\ne\no\nf\no\nr\na\nn\ny\nc\no\np\ny\nt\nh\ne\nr\ne\no\nf\n,\no\nr\na\nc\nc\ne\np\nt\na\nn\nc\ne\no\nf\nt\nh\ne\ns\na\nm\ne\nb\ny\ny\no\nu\n,\ni\ns\nn\no\nt\np\nr\no\nh\ni\nb\ni\nt\ne\nd\no\nr\nr\ne\ns\nt\nr\ni\nc\nt\ne\nd\nb\ny\nt\nh\ne\na\np\np\nl\ni\nc\na\nb\nl\ne\nl\na\nw\ns\n,\nr\ne\ng\nu\nl\na\nt\ni\no\nn\ns\no\nr\nr\nu\nl\ne\ns\ni\nn\ny\no\nu\nr\nj\nu\nr\ni\ns\nd\ni\nc\nt\ni\no\nn\n,\na\nn\nd\nw\nh\ne\nr\ne\na\nn\ny\nr\ne\ns\nt\nr\ni\nc\nt\ni\no\nn\ns\ni\nn\nr\ne\nl\na\nt\ni\no\nn\nt\no\np\no\ns\ns\ne\ns\ns\ni\no\nn\na\nr\ne\na\np\np\nl\ni\nc\na\nb\nl\ne\n,\ny\no\nu\nh\na\nv\ne\no\nb\ns\ne\nr\nv\ne\nd\na\nn\nd\nc\no\nm\np\nl\ni\ne\nd\nw\ni\nt\nh\na\nl\nl\ns\nu\nc\nh\nr\ne\ns\nt\nr\ni\nc\nt\ni\no\nn\ns\na\nt\ny\no\nu\nr\no\nw\nn\ne\nx\np\ne\nn\ns\ne\na\nn\nd\nw\ni\nt\nh\no\nu\nt\nl\ni\na\nb\ni\nl\ni\nt\ny\nt\no\nA\nP\nE\nN\nF\nT\n;\n(\nf\n)\ny\no\nu\nh\na\nv\ne\na\nb\na\ns\ni\nc\nd\ne\ng\nr\ne\ne\no\nf\nu\nn\nd\ne\nr\ns\nt\na\nn\nd\ni\nn\ng\no\nf\nt\nh\ne\no\np\ne\nr\na\nt\ni\no\nn\n,\nf\nu\nn\nc\nt\ni\no\nn\na\nl\ni\nt\ny\n,\nu\ns\na\ng\ne\n,\ns\nt\no\nr\na\ng\ne\n,\nt\nr\na\nn\ns\nm\ni\ns\ns\ni\no\nn\nm\ne\nc\nh\na\nn\ni\ns\nm\ns\na\nn\nd\no\nt\nh\ne\nr\nm\na\nt\ne\nr\ni\na\nl\nc\nh\na\nr\na\nc\nt\ne\nr\ni\ns\nt\ni\nc\ns\no","metadata":{"loc":{"lines":{"from":46258,"to":46757}}}}],["111",{"pageContent":"i\nn\ng\no\nf\nt\nh\ne\no\np\ne\nr\na\nt\ni\no\nn\n,\nf\nu\nn\nc\nt\ni\no\nn\na\nl\ni\nt\ny\n,\nu\ns\na\ng\ne\n,\ns\nt\no\nr\na\ng\ne\n,\nt\nr\na\nn\ns\nm\ni\ns\ns\ni\no\nn\nm\ne\nc\nh\na\nn\ni\ns\nm\ns\na\nn\nd\no\nt\nh\ne\nr\nm\na\nt\ne\nr\ni\na\nl\nc\nh\na\nr\na\nc\nt\ne\nr\ni\ns\nt\ni\nc\ns\no\nf\nc\nr\ny\np\nt\no\nc\nu\nr\nr\ne\nn\nc\ni\ne\ns\n,\nb\nl\no\nc\nk\nc\nh\na\ni\nn\n-\nb\na\ns\ne\nd\ns\no\nf\nt\nw\na\nr\ne\ns\ny\ns\nt\ne\nm\ns\n,\nc\nr\ny\np\nt\no\nc\nu\nr\nr\ne\nn\nc\ny\nw\na\nl\nl\ne\nt\ns\no\nr\no\nt\nh\ne\nr\nr\ne\nl\na\nt\ne\nd\nt\no\nk\ne\nn\ns\nt\no\nr\na\ng\ne\nm\ne\nc\nh\na\nn\ni\ns\nm\ns\n,\nb\nl\no\nc\nk\nc\nh\na\ni\nn\nt\ne\nc\nh\nn\no\nl\no\ng\ny\na\nn\nd\ns\nm\na\nr\nt\nc\no\nn\nt\nr\na\nc\nt\nt\ne\nc\nh\nn\no\nl\no\ng\ny\n;\n(\ng\n)\ny\no\nu\na\ng\nr\ne\ne\na\nn\nd\na\nc\nk\nn\no\nw\nl\ne\nd\ng\ne\nt\nh\na\nt\nn\ne\ni\nt\nh\ne\nr\nA\nP\nE\nN\nF\nT\nn\no\nr\nt\nh\ne\nd\ni\ns\nt\nr\ni\nb\nu\nt\no\nr\ns\nh\na\nl\nl\nb\ne\nl\ni\na\nb\nl\ne\nf\no\nr\na\nn\ny\ni\nn\nd\ni\nr\ne\nc\nt\n,\ns\np\ne\nc\ni\na\nl\n,\ni\nn\nc\ni\nd\ne\nn\nt\na\nl\n,\nc\no\nn\ns\ne\nq\nu\ne\nn\nt\ni\na\nl\no\nr\no\nt\nh\ne\nr\nd\na\nm\na\ng\ne\ns\ni\nn\nt\no\nr\nt\n,\nc\no\nn\nt\nr\na\nc\nt\no\nr\no\nt\nh\ne\nr\nw\ni\ns\ne\n(\ni\nn\nc\nl\nu\nd\ni\nn\ng\n,\nw\ni\nt\nh\no\nu\nt\nl\ni\nm\ni\nt\na\nt\ni\no\nn\n,\nl\no\ns\ns\no\nf\nr\ne\nv\ne\nn\nu\ne\n,\ni\nn\nc\no\nm\ne\no\nr\np\nr\no\nf\ni\nt\ns\n,\na\nn\nd\nl\no\ns\ns\no\nf\nu\ns\ne\no\nr\nd\na\nt\na\n)\na\nr\ni\ns\ni\nn\ng\no","metadata":{"loc":{"lines":{"from":46757,"to":47256}}}}],["112",{"pageContent":"a\nc\nt\no\nr\no\nt\nh\ne\nr\nw\ni\ns\ne\n(\ni\nn\nc\nl\nu\nd\ni\nn\ng\n,\nw\ni\nt\nh\no\nu\nt\nl\ni\nm\ni\nt\na\nt\ni\no\nn\n,\nl\no\ns\ns\no\nf\nr\ne\nv\ne\nn\nu\ne\n,\ni\nn\nc\no\nm\ne\no\nr\np\nr\no\nf\ni\nt\ns\n,\na\nn\nd\nl\no\ns\ns\no\nf\nu\ns\ne\no\nr\nd\na\nt\na\n)\na\nr\ni\ns\ni\nn\ng\no\nu\nt\no\nf\no\nr\ni\nn\nc\no\nn\nn\ne\nc\nt\ni\no\nn\nw\ni\nt\nh\ny\no\nu\nr\na\nc\nc\ne\np\nt\na\nn\nc\ne\no\nf\no\nr\nr\ne\nl\ni\na\nn\nc\ne\no\nn\nt\nh\ni\ns\nw\nh\ni\nt\ne\np\na\np\ne\nr\no\nr\na\nn\ny\np\na\nr\nt\nt\nh\ne\nr\ne\no\nf\n;\na\nn\nd\n(\nh\n)\na\nl\nl\no\nf\nt\nh\ne\na\nb\no\nv\ne\nr\ne\np\nr\ne\ns\ne\nn\nt\na\nt\ni\no\nn\ns\na\nn\nd\nw\na\nr\nr\na\nn\nt\ni\ne\ns\na\nr\ne\nt\nr\nu\ne\n,\nc\no\nm\np\nl\ne\nt\ne\n,\na\nc\nc\nu\nr\na\nt\ne\na\nn\nd\nn\no\nt\nm\ni\ns\nl\ne\na\nd\ni\nn\ng\nf\nr\no\nm\nt\nh\ne\nt\ni\nm\ne\ny\no\nu\no\nb\nt\na\ni\nn\na\nn\nd\n/\no\nr\na\nc\nc\ne\np\nt\nt\nh\ni\ns\nw\nh\ni\nt\ne\np\na\np\ne\nr\no\nr\np\na\nr\nt\nt\nh\ne\nr\ne\no\nf\n.\nD\n.\nC\nA\nU\nT\nI\nO\nN\nA\nR\nY\nN\nO\nT\nE\nO\nN\nF\nO\nR\nW\nA\nR\nD\n-\nL\nO\nO\nK\nI\nN\nG\nS\nT\nA\nT\nE\nM\nE\nN\nT\nS\n.\nA\nl\nl\ns\nt\na\nt\ne\nm\ne\nn\nt\ns\nc\no\nn\nt\na\ni\nn\ne\nd\ni\nn\nt\nh\ni\ns\nW\nh\ni\nt\ne\nP\na\np\ne\nr\n,\ns\nt\na\nt\ne\nm\ne\nn\nt\ns\nm\na\nd\ne\ni\nn\np\nr\ne\ns\ns\nr\ne\nl\ne\na\ns\ne\ns\no\nr\ni\nn\na\nn\ny\np\nl\na\nc\ne\na\nc\nc\ne\ns\ns\ni\nb\nl\ne\nb\ny\nt\nh\ne\np\nu\nb\nl\ni\nc\na\nn\nd\no\nr\na\nl\ns\nt\na\nt\ne\nm\ne\nn\nt\ns\nt\nh\na\nt\nm\na\ny\nb\ne","metadata":{"loc":{"lines":{"from":47256,"to":47755}}}}],["113",{"pageContent":"s\nW\nh\ni\nt\ne\nP\na\np\ne\nr\n,\ns\nt\na\nt\ne\nm\ne\nn\nt\ns\nm\na\nd\ne\ni\nn\np\nr\ne\ns\ns\nr\ne\nl\ne\na\ns\ne\ns\no\nr\ni\nn\na\nn\ny\np\nl\na\nc\ne\na\nc\nc\ne\ns\ns\ni\nb\nl\ne\nb\ny\nt\nh\ne\np\nu\nb\nl\ni\nc\na\nn\nd\no\nr\na\nl\ns\nt\na\nt\ne\nm\ne\nn\nt\ns\nt\nh\na\nt\nm\na\ny\nb\ne\nm\na\nd\ne\nb\ny\nA\nP\nE\nN\nF\nT\no\nr\nt\nh\ne\ni\nr\nr\ne\ns\np\ne\nc\nt\ni\nv\ne\nd\ni\nr\ne\nc\nt\no\nr\ns\n,\ne\nx\ne\nc\nu\nt\ni\nv\ne\no\nf\nf\ni\nc\ne\nr\ns\no\nr\ne\nm\np\nl\no\ny\ne\ne\ns\na\nc\nt\ni\nn\ng\no\nn\nb\ne\nh\na\nl\nf\no\nf\nA\nP\nE\nN\nF\nT\n(\na\ns\nt\nh\ne\nc\na\ns\ne\nm\na\ny\nb\ne\n)\n,\nt\nh\na\nt\na\nr\ne\nn\no\nt\ns\nt\na\nt\ne\nm\ne\nn\nt\ns\no\nf\nh\ni\ns\nt\no\nr\ni\nc\na\nl\nf\na\nc\nt\n,\nc\no\nn\ns\nt\ni\nt\nu\nt\ne\n\"\nf\no\nr\nw\na\nr\nd\n-\nl\no\no\nk\ni\nn\ng\ns\nt\na\nt\ne\nm\ne\nn\nt\ns\n\"\n.\nS\no\nm\ne\no\nf\nt\nh\ne\ns\ne\ns\nt\na\nt\ne\nm\ne\nn\nt\ns\nc\na\nn\nb\ne\ni\nd\ne\nn\nt\ni\nf\ni\ne\nd\nb\ny\nf\no\nr\nw\na\nr\nd\n-\nl\no\no\nk\ni\nn\ng\nt\ne\nr\nm\ns\ns\nu\nc\nh\na\ns\n\"\na\ni\nm\n\"\n,\n\"\nt\na\nr\ng\ne\nt\n\"\n,\n\"\na\nn\nt\ni\nc\ni\np\na\nt\ne\n\"\n,\n\"\nb\ne\nl\ni\ne\nv\ne\n\"\n,\n\"\nc\no\nu\nl\nd\n\"\n,\n\"\ne\ns\nt\ni\nm\na\nt\ne\n\"\n,\n\"\ne\nx\np\ne\nc\nt\n\"\n,\n\"\ni\nf\n\"\n,\n\"\ni\nn\nt\ne\nn\nd\n\"\n,\n\"\nm\na\ny\n\"\n,\n\"\np\nl\na\nn\n\"\n,\n\"\np\no\ns\ns\ni\nb\nl\ne\n\"\n,\n\"\np\nr\no\nb\na\nb\nl\ne\n\"\n,\n\"\np\nr\no\nj\ne\nc\nt\n\"\n,\n\"\ns\nh\no\nu\nl\nd\n\"\n,\n\"\nw\no\nu\nl\nd\n\"\n,\n\"\nw\ni\nl\nl\n\"\no\nr\no\nt\nh\ne\nr","metadata":{"loc":{"lines":{"from":47755,"to":48254}}}}],["114",{"pageContent":"\"\n,\n\"\ne\nx\np\ne\nc\nt\n\"\n,\n\"\ni\nf\n\"\n,\n\"\ni\nn\nt\ne\nn\nd\n\"\n,\n\"\nm\na\ny\n\"\n,\n\"\np\nl\na\nn\n\"\n,\n\"\np\no\ns\ns\ni\nb\nl\ne\n\"\n,\n\"\np\nr\no\nb\na\nb\nl\ne\n\"\n,\n\"\np\nr\no\nj\ne\nc\nt\n\"\n,\n\"\ns\nh\no\nu\nl\nd\n\"\n,\n\"\nw\no\nu\nl\nd\n\"\n,\n\"\nw\ni\nl\nl\n\"\no\nr\no\nt\nh\ne\nr\ns\ni\nm\ni\nl\na\nr\nt\ne\nr\nm\ns\n.\nH\no\nw\ne\nv\ne\nr\n,\nt\nh\ne\ns\ne\nt\ne\nr\nm\ns\na\nr\ne\nn\no\nt\nt\nh\ne\ne\nx\nc\nl\nu\ns\ni\nv\ne\nm\ne\na\nn\ns\no\nf\ni\nd\ne\nn\nt\ni\nf\ny\ni\nn\ng","metadata":{"loc":{"lines":{"from":48254,"to":48420}}}}],["115",{"pageContent":"2\n9\nf\no\nr\nw\na\nr\nd\n-\nl\no\no\nk\ni\nn\ng\ns\nt\na\nt\ne\nm\ne\nn\nt\ns\n.\nA\nl\nl\ns\nt\na\nt\ne\nm\ne\nn\nt\ns\nr\ne\ng\na\nr\nd\ni\nn\ng\nA\nP\nE\nN\nF\nT\n’\ns\nf\ni\nn\na\nn\nc\ni\na\nl\np\no\ns\ni\nt\ni\no\nn\n,\nb\nu\ns\ni\nn\ne\ns\ns\ns\nt\nr\na\nt\ne\ng\ni\ne\ns\n,\np\nl\na\nn\ns\na\nn\nd\np\nr\no\ns\np\ne\nc\nt\ns\na\nn\nd\nt\nh\ne\nf\nu\nt\nu\nr\ne\np\nr\no\ns\np\ne\nc\nt\ns\no\nf\nt\nh\ne\ni\nn\nd\nu\ns\nt\nr\ny\nw\nh\ni\nc\nh\nA\nP\nE\nN\nF\nT\ni\ns\ni\nn\na\nr\ne\nf\no\nr\nw\na\nr\nd\n-\nl\no\no\nk\ni\nn\ng\ns\nt\na\nt\ne\nm\ne\nn\nt\ns\n.\nT\nh\ne\ns\ne\nf\no\nr\nw\na\nr\nd\n-\nl\no\no\nk\ni\nn\ng\ns\nt\na\nt\ne\nm\ne\nn\nt\ns\n,\ni\nn\nc\nl\nu\nd\ni\nn\ng\nb\nu\nt\nn\no\nt\nl\ni\nm\ni\nt\ne\nd\nt\no\ns\nt\na\nt\ne\nm\ne\nn\nt\ns\na\ns\nt\no\nA\nP\nE\nN\nF\nT\n’\ns\nr\ne\nv\ne\nn\nu\ne\na\nn\nd\np\nr\no\nf\ni\nt\na\nb\ni\nl\ni\nt\ny\n,\np\nr\no\ns\np\ne\nc\nt\ns\n,\nf\nu\nt\nu\nr\ne\np\nl\na\nn\ns\n,\no\nt\nh\ne\nr\ne\nx\np\ne\nc\nt\ne\nd\ni\nn\nd\nu\ns\nt\nr\ny\nt\nr\ne\nn\nd\ns\na\nn\nd\no\nt\nh\ne\nr\nm\na\nt\nt\ne\nr\ns\nd\ni\ns\nc\nu\ns\ns\ne\nd\ni\nn\nt\nh\ni\ns\nW\nh\ni\nt\ne\nP\na\np\ne\nr\nr\ne\ng\na\nr\nd\ni\nn\ng\nA\nP\nE\nN\nF\nT\na\nr\ne\nm\na\nt\nt\ne\nr\ns\nt\nh\na\nt\na\nr\ne\nn\no\nt\nh\ni\ns\nt\no\nr\ni\nc\nf\na\nc\nt\ns\n,\nb\nu\nt\no\nn\nl\ny\np\nr\ne\nd\ni\nc\nt\ni\no\nn\ns\n.\nT\nh\ne\ns\ne\nf\no\nr\nw\na\nr\nd\n-\nl\no\no\nk\ni\nn\ng\ns\nt\na\nt\ne\nm\ne\nn\nt\ns\ni\nn\nv\no\nl\nv\ne\nk\nn\no\nw\nn\na\nn\nd\nu\nn\nk\nn\no\nw","metadata":{"loc":{"lines":{"from":48422,"to":48920}}}}],["116",{"pageContent":"a\nt\nt\ne\nr\ns\nt\nh\na\nt\na\nr\ne\nn\no\nt\nh\ni\ns\nt\no\nr\ni\nc\nf\na\nc\nt\ns\n,\nb\nu\nt\no\nn\nl\ny\np\nr\ne\nd\ni\nc\nt\ni\no\nn\ns\n.\nT\nh\ne\ns\ne\nf\no\nr\nw\na\nr\nd\n-\nl\no\no\nk\ni\nn\ng\ns\nt\na\nt\ne\nm\ne\nn\nt\ns\ni\nn\nv\no\nl\nv\ne\nk\nn\no\nw\nn\na\nn\nd\nu\nn\nk\nn\no\nw\nn\nr\ni\ns\nk\ns\n,\nu\nn\nc\ne\nr\nt\na\ni\nn\nt\ni\ne\ns\na\nn\nd\no\nt\nh\ne\nr\nf\na\nc\nt\no\nr\ns\nt\nh\na\nt\nm\na\ny\nc\na\nu\ns\ne\nt\nh\ne\na\nc\nt\nu\na\nl\nf\nu\nt\nu\nr\ne\nr\ne\ns\nu\nl\nt\ns\n,\np\ne\nr\nf\no\nr\nm\na\nn\nc\ne\no\nr\na\nc\nh\ni\ne\nv\ne\nm\ne\nn\nt\ns\no\nf\nA\nP\nE\nN\nF\nT\nt\no\nb\ne\nm\na\nt\ne\nr\ni\na\nl\nl\ny\nd\ni\nf\nf\ne\nr\ne\nn\nt\nf\nr\no\nm\na\nn\ny\nf\nu\nt\nu\nr\ne\nr\ne\ns\nu\nl\nt\ns\n,\np\ne\nr\nf\no\nr\nm\na\nn\nc\ne\no\nr\na\nc\nh\ni\ne\nv\ne\nm\ne\nn\nt\ns\ne\nx\np\ne\nc\nt\ne\nd\n,\ne\nx\np\nr\ne\ns\ns\ne\nd\no\nr\ni\nm\np\nl\ni\ne\nd\nb\ny\ns\nu\nc\nh\nf\no\nr\nw\na\nr\nd\n-\nl\no\no\nk\ni\nn\ng\ns\nt\na\nt\ne\nm\ne\nn\nt\ns\n.\nT\nh\ne\ns\ne\nf\na\nc\nt\no\nr\ns\ni\nn\nc\nl\nu\nd\ne\n,\na\nm\no\nn\ng\ns\nt\no\nt\nh\ne\nr\ns\n:\n(\na\n)\nc\nh\na\nn\ng\ne\ns\ni\nn\np\no\nl\ni\nt\ni\nc\na\nl\n,\ns\no\nc\ni\na\nl\n,\ne\nc\no\nn\no\nm\ni\nc\na\nn\nd\ns\nt\no\nc\nk\no\nr\nc\nr\ny\np\nt\no\nc\nu\nr\nr\ne\nn\nc\ny\nm\na\nr\nk\ne\nt\nc\no\nn\nd\ni\nt\ni\no\nn\ns\n,\na\nn\nd\nt\nh\ne\nr\ne\ng\nu\nl\na\nt\no\nr\ny\ne\nn\nv\ni\nr\no\nn\nm\ne\nn\nt\ni\nn\nt\nh\ne\nc\no\nu\nn\nt\nr\ni\ne\ns\ni\nn\nw\nh\ni\nc\nh\nA\nP\nE\nN\nF\nT\nc\no\nn","metadata":{"loc":{"lines":{"from":48920,"to":49419}}}}],["117",{"pageContent":"i\nc\na\nn\nd\ns\nt\no\nc\nk\no\nr\nc\nr\ny\np\nt\no\nc\nu\nr\nr\ne\nn\nc\ny\nm\na\nr\nk\ne\nt\nc\no\nn\nd\ni\nt\ni\no\nn\ns\n,\na\nn\nd\nt\nh\ne\nr\ne\ng\nu\nl\na\nt\no\nr\ny\ne\nn\nv\ni\nr\no\nn\nm\ne\nn\nt\ni\nn\nt\nh\ne\nc\no\nu\nn\nt\nr\ni\ne\ns\ni\nn\nw\nh\ni\nc\nh\nA\nP\nE\nN\nF\nT\nc\no\nn\nd\nu\nc\nt\ns\ni\nt\ns\nr\ne\ns\np\ne\nc\nt\ni\nv\ne\nb\nu\ns\ni\nn\ne\ns\ns\ne\ns\na\nn\nd\no\np\ne\nr\na\nt\ni\no\nn\ns\n;\n(\nb\n)\nt\nh\ne\nr\ni\ns\nk\nt\nh\na\nt\nA\nP\nE\nN\nF\nT\nm\na\ny\nb\ne\nu\nn\na\nb\nl\ne\nt\no\ne\nx\ne\nc\nu\nt\ne\no\nr\ni\nm\np\nl\ne\nm\ne\nn\nt\nt\nh\ne\ni\nr\nr\ne\ns\np\ne\nc\nt\ni\nv\ne\nb\nu\ns\ni\nn\ne\ns\ns\ns\nt\nr\na\nt\ne\ng\ni\ne\ns\na\nn\nd\nf\nu\nt\nu\nr\ne\np\nl\na\nn\ns\n;\n(\nc\n)\nc\nh\na\nn\ng\ne\ns\ni\nn\ni\nn\nt\ne\nr\ne\ns\nt\nr\na\nt\ne\ns\na\nn\nd\ne\nx\nc\nh\na\nn\ng\ne\nr\na\nt\ne\ns\no\nf\nf\ni\na\nt\nc\nu\nr\nr\ne\nn\nc\ni\ne\ns\na\nn\nd\nc\nr\ny\np\nt\no\nc\nu\nr\nr\ne\nn\nc\ni\ne\ns\n;\n(\nd\n)\nc\nh\na\nn\ng\ne\ns\ni\nn\nt\nh\ne\na\nn\nt\ni\nc\ni\np\na\nt\ne\nd\ng\nr\no\nw\nt\nh\ns\nt\nr\na\nt\ne\ng\ni\ne\ns\na\nn\nd\ne\nx\np\ne\nc\nt\ne\nd\ni\nn\nt\ne\nr\nn\na\nl\ng\nr\no\nw\nt\nh\no\nf\nA\nP\nE\nN\nF\nT\n;\n(\ne\n)\nc\nh\na\nn\ng\ne\ns\ni\nn\na\nv\na\ni\nl\na\nb\ni\nl\ni\nt\ny\na\nn\nd\nf\ne\ne\ns\np\na\ni\nd\nt\no\nd\ni\ns\nt\nr\ni\nb\nu\nt\no\nr\ns\ni\nn\nr\ne\nl\na\nt\ni\no\nn\nt\no\nA\nP\nE\nN\nF\nT\n'\ns\nr\ne\ns\np\ne\nc\nt\ni\nv\ne\nb\nu\ns\ni\nn\ne\ns\ns\na\nn\nd\no\np\ne\nr\na\nt\ni\no\nn\ns\n;\n(\nf\n)\nc\nh","metadata":{"loc":{"lines":{"from":49419,"to":49918}}}}],["118",{"pageContent":"n\ng\ne\ns\ni\nn\na\nv\na\ni\nl\na\nb\ni\nl\ni\nt\ny\na\nn\nd\nf\ne\ne\ns\np\na\ni\nd\nt\no\nd\ni\ns\nt\nr\ni\nb\nu\nt\no\nr\ns\ni\nn\nr\ne\nl\na\nt\ni\no\nn\nt\no\nA\nP\nE\nN\nF\nT\n'\ns\nr\ne\ns\np\ne\nc\nt\ni\nv\ne\nb\nu\ns\ni\nn\ne\ns\ns\na\nn\nd\no\np\ne\nr\na\nt\ni\no\nn\ns\n;\n(\nf\n)\nc\nh\na\nn\ng\ne\ns\ni\nn\nt\nh\ne\na\nv\na\ni\nl\na\nb\ni\nl\ni\nt\ny\na\nn\nd\ns\na\nl\na\nr\ni\ne\ns\no\nf\ne\nm\np\nl\no\ny\ne\ne\ns\nw\nh\no\na\nr\ne\nr\ne\nq\nu\ni\nr\ne\nd\nb\ny\nA\nP\nE\nN\nF\nT\nt\no\no\np\ne\nr\na\nt\ne\nt\nh\ne\ni\nr\nr\ne\ns\np\ne\nc\nt\ni\nv\ne\nb\nu\ns\ni\nn\ne\ns\ns\ne\ns\na\nn\nd\no\np\ne\nr\na\nt\ni\no\nn\ns\n;\n(\ng\n)\nc\nh\na\nn\ng\ne\ns\ni\nn\np\nr\ne\nf\ne\nr\ne\nn\nc\ne\ns\no\nf\nc\nu\ns\nt\no\nm\ne\nr\ns\no\nf\nA\nP\nE\nN\nF\nT\n;\n(\nh\n)\nc\nh\na\nn\ng\ne\ns\ni\nn\nc\no\nm\np\ne\nt\ni\nt\ni\nv\ne\nc\no\nn\nd\ni\nt\ni\no\nn\ns\nu\nn\nd\ne\nr\nw\nh\ni\nc\nh\nA\nP\nE\nN\nF\nT\no\np\ne\nr\na\nt\ne\n,\na\nn\nd\nt\nh\ne\na\nb\ni\nl\ni\nt\ny\no\nf\nA\nP\nE\nN\nF\nT\nt\no\nc\no\nm\np\ne\nt\ne\nu\nn\nd\ne\nr\ns\nu\nc\nh\nc\no\nn\nd\ni\nt\ni\no\nn\ns\n;\n(\ni\n)\nc\nh\na\nn\ng\ne\ns\ni\nn\nt\nh\ne\nf\nu\nt\nu\nr\ne\nc\na\np\ni\nt\na\nl\nn\ne\ne\nd\ns\no\nf\nA\nP\nE\nN\nF\nT\na\nn\nd\nt\nh\ne\na\nv\na\ni\nl\na\nb\ni\nl\ni\nt\ny\no\nf\nf\ni\nn\na\nn\nc\ni\nn\ng\na\nn\nd\nc\na\np\ni\nt\na\nl\nt\no\nf\nu\nn\nd\ns\nu\nc\nh\nn\ne\ne\nd\ns\n;\n(\nj\n)\nw\na\nr\no\nr\na\nc\nt\ns\no\nf\ni\nn\nt\ne\nr\nn\na\nt\ni\no\nn\na\nl\no\nr\nd\no\nm\ne\ns\nt\ni\nc\nt\ne\nr","metadata":{"loc":{"lines":{"from":49918,"to":50417}}}}],["119",{"pageContent":"P\nE\nN\nF\nT\na\nn\nd\nt\nh\ne\na\nv\na\ni\nl\na\nb\ni\nl\ni\nt\ny\no\nf\nf\ni\nn\na\nn\nc\ni\nn\ng\na\nn\nd\nc\na\np\ni\nt\na\nl\nt\no\nf\nu\nn\nd\ns\nu\nc\nh\nn\ne\ne\nd\ns\n;\n(\nj\n)\nw\na\nr\no\nr\na\nc\nt\ns\no\nf\ni\nn\nt\ne\nr\nn\na\nt\ni\no\nn\na\nl\no\nr\nd\no\nm\ne\ns\nt\ni\nc\nt\ne\nr\nr\no\nr\ni\ns\nm\n;\n(\nk\n)\no\nc\nc\nu\nr\nr\ne\nn\nc\ne\ns\no\nf\nc\na\nt\na\ns\nt\nr\no\np\nh\ni\nc\ne\nv\ne\nn\nt\ns\n,\nn\na\nt\nu\nr\na\nl\nd\ni\ns\na\ns\nt\ne\nr\ns\na\nn\nd\na\nc\nt\ns\no\nf\nG\no\nd\nt\nh\na\nt\na\nf\nf\ne\nc\nt\nt\nh\ne\nb\nu\ns\ni\nn\ne\ns\ns\ne\ns\na\nn\nd\n/\no\nr\no\np\ne\nr\na\nt\ni\no\nn\ns\no\nf\nA\nP\nE\nN\nF\nT\n;\n(\nl\n)\no\nt\nh\ne\nr\nf\na\nc\nt\no\nr\ns\nb\ne\ny\no\nn\nd\nt\nh\ne\nc\no\nn\nt\nr\no\nl\no\nf\nA\nP\nE\nN\nF\nT\n;\na\nn\nd","metadata":{"loc":{"lines":{"from":50417,"to":50677}}}}],["120",{"pageContent":"3\n0\n(\nm\n)\na\nn\ny\nr\ni\ns\nk\ns\na\nn\nd\nu\nn\nc\ne\nr\nt\na\ni\nn\nt\ni\ne\ns\na\ns\ns\no\nc\ni\na\nt\ne\nd\nw\ni\nt\nh\nA\nP\nE\nN\nF\nT\na\nn\nd\ni\nt\ns\nb\nu\ns\ni\nn\ne\ns\ns\na\nn\nd\no\np\ne\nr\na\nt\ni\no\nn\ns\n,\nN\nF\nT\n(\na\nl\nl\nr\ne\nf\ne\nr\nr\ne\nd\nt\no\ni\nn\nt\nh\ne\nW\nh\ni\nt\ne\nP\na\np\ne\nr\n)\n.\nA\nl\nl\nf\no\nr\nw\na\nr\nd\n-\nl\no\no\nk\ni\nn\ng\ns\nt\na\nt\ne\nm\ne\nn\nt\ns\nm\na\nd\ne\nb\ny\no\nr\na\nt\nt\nr\ni\nb\nu\nt\na\nb\nl\ne\nt\no\nA\nP\nE\nN\nF\nT\na\nr\ne\ne\nx\np\nr\ne\ns\ns\nl\ny\nq\nu\na\nl\ni\nf\ni\ne\nd\nb\ny\nt\nh\ne\ns\ne\nf\na\nc\nt\no\nr\ns\n.\nG\ni\nv\ne\nn\nt\nh\na\nt\nr\ni\ns\nk\ns\na\nn\nd\nu\nn\nc\ne\nr\nt\na\ni\nn\nt\ni\ne\ns\nt\nh\na\nt\nm\na\ny\nc\na\nu\ns\ne\nt\nh\ne\na\nc\nt\nu\na\nl\nf\nu\nt\nu\nr\ne\nr\ne\ns\nu\nl\nt\ns\n,\np\ne\nr\nf\no\nr\nm\na\nn\nc\ne\no\nr\na\nc\nh\ni\ne\nv\ne\nm\ne\nn\nt\ns\no\nf\nA\nP\nE\nN\nF\nT\nt\no\nb\ne\nm\na\nt\ne\nr\ni\na\nl\nl\ny\nd\ni\nf\nf\ne\nr\ne\nn\nt\nf\nr\no\nm\nt\nh\na\nt\ne\nx\np\ne\nc\nt\ne\nd\n,\ne\nx\np\nr\ne\ns\ns\ne\nd\no\nr\ni\nm\np\nl\ni\ne\nd\nb\ny\nt\nh\ne\nf\no\nr\nw\na\nr\nd\n-\nl\no\no\nk\ni\nn\ng\ns\nt\na\nt\ne\nm\ne\nn\nt\ns\ni\nn\nt\nh\ni\ns\nW\nh\ni\nt\ne\nP\na\np\ne\nr\n,\nu\nn\nd\nu\ne\nr\ne\nl\ni\na\nn\nc\ne\nm\nu\ns\nt\nn\no\nt\nb\ne\np\nl\na\nc\ne\nd\no\nn\nt\nh\ne\ns\ne\ns\nt\na\nt\ne\nm\ne\nn\nt\ns\n.\nT\nh\ne\ns\ne\nf\no\nr\nw\na\nr\nd\n-\nl\no\no\nk\ni\nn\ng\ns\nt\na\nt\ne\nm\ne\nn\nt\ns\na\nr\ne\na\np\np\nl\ni\nc\na\nb\nl\ne\no\nn\nl\ny","metadata":{"loc":{"lines":{"from":50679,"to":51177}}}}],["121",{"pageContent":"e\nP\na\np\ne\nr\n,\nu\nn\nd\nu\ne\nr\ne\nl\ni\na\nn\nc\ne\nm\nu\ns\nt\nn\no\nt\nb\ne\np\nl\na\nc\ne\nd\no\nn\nt\nh\ne\ns\ne\ns\nt\na\nt\ne\nm\ne\nn\nt\ns\n.\nT\nh\ne\ns\ne\nf\no\nr\nw\na\nr\nd\n-\nl\no\no\nk\ni\nn\ng\ns\nt\na\nt\ne\nm\ne\nn\nt\ns\na\nr\ne\na\np\np\nl\ni\nc\na\nb\nl\ne\no\nn\nl\ny\na\ns\no\nf\nt\nh\ne\nd\na\nt\ne\no\nf\nt\nh\ni\ns\nW\nh\ni\nt\ne\nP\na\np\ne\nr\n.\nA\nP\nE\nN\nF\nT\nd\no\ne\ns\nn\no\nt\nr\ne\np\nr\ne\ns\ne\nn\nt\n,\nw\na\nr\nr\na\nn\nt\na\nn\nd\n/\no\nr\ng\nu\na\nr\na\nn\nt\ne\ne\nt\nh\na\nt\nA\nP\nE\nN\nF\nT\n'\ns\na\nc\nt\nu\na\nl\nf\nu\nt\nu\nr\ne\nr\ne\ns\nu\nl\nt\ns\n,\np\ne\nr\nf\no\nr\nm\na\nn\nc\ne\no\nr\na\nc\nh\ni\ne\nv\ne\nm\ne\nn\nt\ns\nw\ni\nl\nl\nb\ne\nc\no\nn\ns\ni\ns\nt\ne\nn\nt\nw\ni\nt\nh\nt\nh\no\ns\ne\nd\ni\ns\nc\nu\ns\ns\ne\nd\ni\nn\nt\nh\ne\ns\ne\nf\no\nr\nw\na\nr\nd\n-\nl\no\no\nk\ni\nn\ng\ns\nt\na\nt\ne\nm\ne\nn\nt\ns\n.\nA\nP\nE\nN\nF\nT\n'\ns\na\nc\nt\nu\na\nl\nr\ne\ns\nu\nl\nt\ns\n,\np\ne\nr\nf\no\nr\nm\na\nn\nc\ne\no\nr\na\nc\nh\ni\ne\nv\ne\nm\ne\nn\nt\ns\nm\na\ny\nd\ni\nf\nf\ne\nr\nm\na\nt\ne\nr\ni\na\nl\nl\ny\nf\nr\no\nm\nt\nh\no\ns\ne\na\nn\nt\ni\nc\ni\np\na\nt\ne\nd\ni\nn\nt\nh\ne\ns\ne\nf\no\nr\nw\na\nr\nd\n-\nl\no\no\nk\ni\nn\ng\ns\nt\na\nt\ne\nm\ne\nn\nt\ns\n.\nA\nP\nE\nN\nF\nT\n'\ns\na\nc\nt\nu\na\nl\nr\ne\ns\nu\nl\nt\ns\n,\np\ne\nr\nf\no\nr\nm\na\nn\nc\ne\no\nr\na\nc\nh\ni\ne\nv\ne\nm\ne\nn\nt\ns\nm\na\ny\nd\ni\nf\nf\ne\nr\nm\na\nt\ne\nr\ni\na\nl\nl\ny\nf\nr\no\nm\nt\nh\no\ns\ne\na\nn\nt\ni\nc\ni\np\na\nt","metadata":{"loc":{"lines":{"from":51177,"to":51676}}}}],["122",{"pageContent":"o\nk\ni\nn\ng\ns\nt\na\nt\ne\nm\ne\nn\nt\ns\n.\nA\nP\nE\nN\nF\nT\n'\ns\na\nc\nt\nu\na\nl\nr\ne\ns\nu\nl\nt\ns\n,\np\ne\nr\nf\no\nr\nm\na\nn\nc\ne\no\nr\na\nc\nh\ni\ne\nv\ne\nm\ne\nn\nt\ns\nm\na\ny\nd\ni\nf\nf\ne\nr\nm\na\nt\ne\nr\ni\na\nl\nl\ny\nf\nr\no\nm\nt\nh\no\ns\ne\na\nn\nt\ni\nc\ni\np\na\nt\ne\nd\ni\nn\nt\nh\ne\ns\ne\nf\no\nr\nw\na\nr\nd\n-\nl\no\no\nk\ni\nn\ng\ns\nt\na\nt\ne\nm\ne\nn\nt\ns\n.\nN\no\nt\nh\ni\nn\ng\nc\no\nn\nt\na\ni\nn\ne\nd\ni\nn\nt\nh\ni\ns\nW\nh\ni\nt\ne\nP\na\np\ne\nr\ni\ns\no\nr\nm\na\ny\nb\ne\nr\ne\nl\ni\ne\nd\nu\np\no\nn\na\ns\na\np\nr\no\nm\ni\ns\ne\n,\nr\ne\np\nr\ne\ns\ne\nn\nt\na\nt\ni\no\nn\no\nr\nu\nn\nd\ne\nr\nt\na\nk\ni\nn\ng\na\ns\nt\no\nt\nh\ne\nf\nu\nt\nu\nr\ne\np\ne\nr\nf\no\nr\nm\na\nn\nc\ne\no\nr\np\no\nl\ni\nc\ni\ne\ns\no\nf\nA\nP\nE\nN\nF\nT\n.\nF\nu\nr\nt\nh\ne\nr\n,\nA\nP\nE\nN\nF\nT\nd\ni\ns\nc\nl\na\ni\nm\ns\na\nn\ny\nr\ne\ns\np\no\nn\ns\ni\nb\ni\nl\ni\nt\ny\nt\no\nu\np\nd\na\nt\ne\na\nn\ny\no\nf\nt\nh\no\ns\ne\nf\no\nr\nw\na\nr\nd\n-\nl\no\no\nk\ni\nn\ng\ns\nt\na\nt\ne\nm\ne\nn\nt\ns\no\nr\np\nu\nb\nl\ni\nc\nl\ny\na\nn\nn\no\nu\nn\nc\ne\na\nn\ny\nr\ne\nv\ni\ns\ni\no\nn\ns\nt\no\nt\nh\no\ns\ne\nf\no\nr\nw\na\nr\nd\n-\nl\no\no\nk\ni\nn\ng\ns\nt\na\nt\ne\nm\ne\nn\nt\ns\nt\no\nr\ne\nf\nl\ne\nc\nt\nf\nu\nt\nu\nr\ne\nd\ne\nv\ne\nl\no\np\nm\ne\nn\nt\ns\n,\ne\nv\ne\nn\nt\ns\no\nr\nc\ni\nr\nc\nu\nm\ns\nt\na\nn\nc\ne\ns\n,\ne\nv\ne\nn\ni\nf\nn\ne\nw\ni\nn\nf\no\nr\nm\na\nt\ni\no\nn\nb\ne\nc\no\nm\ne\ns\na\nv\na\ni\nl\na\nb\nl\ne\no\nr","metadata":{"loc":{"lines":{"from":51676,"to":52175}}}}],["123",{"pageContent":"n\ng\ns\nt\na\nt\ne\nm\ne\nn\nt\ns\nt\no\nr\ne\nf\nl\ne\nc\nt\nf\nu\nt\nu\nr\ne\nd\ne\nv\ne\nl\no\np\nm\ne\nn\nt\ns\n,\ne\nv\ne\nn\nt\ns\no\nr\nc\ni\nr\nc\nu\nm\ns\nt\na\nn\nc\ne\ns\n,\ne\nv\ne\nn\ni\nf\nn\ne\nw\ni\nn\nf\no\nr\nm\na\nt\ni\no\nn\nb\ne\nc\no\nm\ne\ns\na\nv\na\ni\nl\na\nb\nl\ne\no\nr\no\nt\nh\ne\nr\ne\nv\ne\nn\nt\ns\no\nc\nc\nu\nr\ni\nn\nt\nh\ne\nf\nu\nt\nu\nr\ne\n.\nE\n.\nM\nA\nR\nK\nE\nT\nA\nN\nD\nI\nN\nD\nU\nS\nT\nR\nY\nI\nN\nF\nO\nR\nM\nA\nT\nI\nO\nN\n.\nT\nh\ni\ns\nW\nh\ni\nt\ne\nP\na\np\ne\nr\ni\nn\nc\nl\nu\nd\ne\ns\nm\na\nr\nk\ne\nt\na\nn\nd\ni\nn\nd\nu\ns\nt\nr\ny\ni\nn\nf\no\nr\nm\na\nt\ni\no\nn\na\nn\nd\nf\no\nr\ne\nc\na\ns\nt\ns\nt\nh\na\nt\nh\na\nv\ne\nb\ne\ne\nn\no\nb\nt\na\ni\nn\ne\nd\nf\nr\no\nm\ni\nn\nt\ne\nr\nn\na\nl\ns\nu\nr\nv\ne\ny\ns\n,\nr\ne\np\no\nr\nt\ns\na\nn\nd\ns\nt\nu\nd\ni\ne\ns\n,\nw\nh\ne\nr\ne\na\np\np\nr\no\np\nr\ni\na\nt\ne\n,\na\ns\nw\ne\nl\nl\na\ns\nm\na\nr\nk\ne\nt\nr\ne\ns\ne\na\nr\nc\nh\n,\np\nu\nb\nl\ni\nc\nl\ny\na\nv\na\ni\nl\na\nb\nl\ne\ni\nn\nf\no\nr\nm\na\nt\ni\no\nn\na\nn\nd\ni\nn\nd\nu\ns\nt\nr\ny\np\nu\nb\nl\ni\nc\na\nt\ni\no\nn\ns\n.\nS\nu\nc\nh\ns\nu\nr\nv\ne\ny\ns\n,\nr\ne\np\no\nr\nt\ns\n,\ns\nt\nu\nd\ni\ne\ns\n,\nm\na\nr\nk\ne\nt\nr\ne\ns\ne\na\nr\nc\nh\n,\np\nu\nb\nl\ni\nc\nl\ny\na\nv\na\ni\nl\na\nb\nl\ne\ni\nn\nf\no\nr\nm\na\nt\ni\no\nn\na\nn\nd\np\nu\nb\nl\ni\nc\na\nt\ni\no\nn\ns\ng\ne\nn\ne\nr\na\nl\nl\ny\ns\nt\na\nt\ne\nt\nh\na\nt\nt\nh\ne\ni\nn\nf\no\nr\nm\na\nt\ni\no\nn\nt\nh\na\nt\nt\nh\ne\ny\nc\no\nn","metadata":{"loc":{"lines":{"from":52175,"to":52674}}}}],["124",{"pageContent":"a\nr\nk\ne\nt\nr\ne\ns\ne\na\nr\nc\nh\n,\np\nu\nb\nl\ni\nc\nl\ny\na\nv\na\ni\nl\na\nb\nl\ne\ni\nn\nf\no\nr\nm\na\nt\ni\no\nn\na\nn\nd\np\nu\nb\nl\ni\nc\na\nt\ni\no\nn\ns\ng\ne\nn\ne\nr\na\nl\nl\ny\ns\nt\na\nt\ne\nt\nh\na\nt\nt\nh\ne\ni\nn\nf\no\nr\nm\na\nt\ni\no\nn\nt\nh\na\nt\nt\nh\ne\ny\nc\no\nn\nt\na\ni\nn\nh\na\ns\nb\ne\ne\nn\no\nb\nt\na\ni\nn\ne\nd\nf\nr\no\nm\ns\no\nu\nr\nc\ne\ns\nb\ne\nl\ni\ne\nv\ne\nd\nt\no\nb\ne\nr\ne\nl\ni\na\nb\nl\ne\n,\nb\nu\nt\nt\nh\ne\nr\ne\nc\na\nn\nb\ne\nn\no\na\ns\ns\nu\nr\na\nn\nc\ne\na\ns\nt\no\nt\nh\ne\na\nc\nc\nu\nr\na\nc\ny\no\nr\nc\no\nm\np\nl\ne\nt\ne\nn\ne\ns\ns\no\nf\ns\nu\nc\nh\ni\nn\nc\nl\nu\nd\ne\nd\ni\nn\nf\no\nr\nm\na\nt\ni\no\nn\n.\nN\no\np\ne\nr\ns\no\nn\n,\no\nt\nh\ne\nr\nt\nh\na\nn\nt\nh\ne\nd\ni\nr\ne\nc\nt\no\nr\ns\n,\no\nf\nf\ni\nc\ne\nr\ns\na\nn\nd\ne\nm\np\nl\no\ny\ne\ne\ns\no\nf\nA\nP\nE\nN\nF\nT\n,\nh\na\ns\nc\no\nn\ns\ne\nn\nt\ne\nd\nt\no\nt\nh\ne\ni\nn\nc\nl\nu\ns\ni\no\nn\ni\nn\nt\nh\ni\ns\nW\nh\ni\nt\ne\nP\na\np\ne\nr\no\nf\nh\ni\ns\no\nr\nh\ne\nr\nn\na\nm\ne\na\nn\nd\n/\no\nr\no\nt\nh\ne\nr\nr\ne\nl\ne\nv\na\nn\nt\ni\nn\nf\no\nr\nm\na\nt\ni\no\nn\na\nt\nt\nr\ni\nb\nu\nt\ne\nd\no\nr\nd\ne\ne\nm\ne\nd\nt\no\nb\ne\na\nt\nt\nr\ni\nb\nu\nt\ne\nd\nt\no\ns\nu\nc\nh\np\ne\nr\ns\no\nn\na\nn\nd\nn\no\nr\ne\np\nr\ne\ns\ne\nn\nt\na\nt\ni\no\nn\n,\nw\na\nr\nr\na\nn\nt\ny\no\nr\nu\nn\nd\ne\nr\nt\na\nk\ni\nn\ng\ni\ns\nm\na\nd\ne\no\nr\nc\nl\na\ni\nm\ne\nd\nt\no\nb\ne\nm\na\nd\ne\nb\ny\ns\nu\nc\nh\np\ne\nr\ns\no\nn\na\ns\nt\no","metadata":{"loc":{"lines":{"from":52674,"to":53173}}}}],["125",{"pageContent":"t\nr\ni\nb\nu\nt\ne\nd\nt\no\ns\nu\nc\nh\np\ne\nr\ns\no\nn\na\nn\nd\nn\no\nr\ne\np\nr\ne\ns\ne\nn\nt\na\nt\ni\no\nn\n,\nw\na\nr\nr\na\nn\nt\ny\no\nr\nu\nn\nd\ne\nr\nt\na\nk\ni\nn\ng\ni\ns\nm\na\nd\ne\no\nr\nc\nl\na\ni\nm\ne\nd\nt\no\nb\ne\nm\na\nd\ne\nb\ny\ns\nu\nc\nh\np\ne\nr\ns\no\nn\na\ns\nt\no\nt\nh\ne\na\nc\nc\nu\nr\na\nc\ny\no\nr\nc\no\nm\np\nl\ne\nt\ne\nn\ne\ns\ns\no\nf\ns\nu\nc\nh\ni\nn\nf\no\nr\nm\na\nt\ni\no\nn\n,\na\nn\nd\ns\nu\nc\nh\np\ne\nr\ns\no\nn\ni\ns\nu\nn\nd\ne\nr\nn\no","metadata":{"loc":{"lines":{"from":53173,"to":53337}}}}],["126",{"pageContent":"3\n1\no\nb\nl\ni\ng\na\nt\ni\no\nn\nt\no\np\nr\no\nv\ni\nd\ne\na\nn\ny\nu\np\nd\na\nt\ne\nd\ni\nn\nf\no\nr\nm\na\nt\ni\no\nn\n.\nW\nh\ni\nl\ne\nA\nP\nE\nN\nF\nT\nh\na\nv\ne\nt\na\nk\ne\nn\nr\ne\na\ns\no\nn\na\nb\nl\ne\na\nc\nt\ni\no\nn\ns\nt\no\ne\nn\ns\nu\nr\ne\nt\nh\na\nt\nt\nh\ne\ni\nn\nf\no\nr\nm\na\nt\ni\no\nn\ni\ns\ne\nx\nt\nr\na\nc\nt\ne\nd\na\nc\nc\nu\nr\na\nt\ne\nl\ny\na\nn\nd\ni\nn\ni\nt\ns\np\nr\no\np\ne\nr\nc\no\nn\nt\ne\nx\nt\n,\nA\nP\nE\nN\nF\nT\nh\na\nv\ne\nn\no\nt\nc\no\nn\nd\nu\nc\nt\ne\nd\na\nn\ny\ni\nn\nd\ne\np\ne\nn\nd\ne\nn\nt\nr\ne\nv\ni\ne\nw\no\nf\nt\nh\ne\ni\nn\nf\no\nr\nm\na\nt\ni\no\nn\ne\nx\nt\nr\na\nc\nt\ne\nd\nf\nr\no\nm\nt\nh\ni\nr\nd\np\na\nr\nt\ny\ns\no\nu\nr\nc\ne\ns\n,\nv\ne\nr\ni\nf\ni\ne\nd\nt\nh\ne\na\nc\nc\nu\nr\na\nc\ny\no\nr\nc\no\nm\np\nl\ne\nt\ne\nn\ne\ns\ns\no\nf\ns\nu\nc\nh\ni\nn\nf\no\nr\nm\na\nt\ni\no\nn\no\nr\na\ns\nc\ne\nr\nt\na\ni\nn\ne\nd\nt\nh\ne\nu\nn\nd\ne\nr\nl\ny\ni\nn\ng\ne\nc\no\nn\no\nm\ni\nc\na\ns\ns\nu\nm\np\nt\ni\no\nn\ns\nr\ne\nl\ni\ne\nd\nu\np\no\nn\nt\nh\ne\nr\ne\ni\nn\n.\nD\nu\nr\ni\nn\ng\nt\nh\ni\ns\np\ne\nr\ni\no\nd\n,\nA\nP\nE\nN\nF\nT\nh\na\ns\nn\no\nt\nc\no\nn\nd\nu\nc\nt\ne\nd\na\nn\ny\ni\nn\nd\ne\np\ne\nn\nd\ne\nn\nt\nr\ne\nv\ni\ne\nw\no\nf\ni\nn\nf\no\nr\nm\na\nt\ni\no\nn\ne\nx\nt\nr\na\nc\nt\ne\nd\nf\nr\no\nm\nt\nh\ni\nr\nd\np\na\nr\nt\ny\ns\no\nu\nr\nc\ne\ns\n,\nn\no\nr\nh\na\ns\ni\nt\nv\ne\nr\ni\nf\ni\ne\nd\nt\nh\ne\na\nc\nc\nu\nr\na\nc\ny\no\nr\nc\no\nm\np\nl\ne\nt\ne\nn\ne\ns\ns\no\nf\ns\nu\nc","metadata":{"loc":{"lines":{"from":53339,"to":53837}}}}],["127",{"pageContent":"d\ne\nn\nt\nr\ne\nv\ni\ne\nw\no\nf\ni\nn\nf\no\nr\nm\na\nt\ni\no\nn\ne\nx\nt\nr\na\nc\nt\ne\nd\nf\nr\no\nm\nt\nh\ni\nr\nd\np\na\nr\nt\ny\ns\no\nu\nr\nc\ne\ns\n,\nn\no\nr\nh\na\ns\ni\nt\nv\ne\nr\ni\nf\ni\ne\nd\nt\nh\ne\na\nc\nc\nu\nr\na\nc\ny\no\nr\nc\no\nm\np\nl\ne\nt\ne\nn\ne\ns\ns\no\nf\ns\nu\nc\nh\ni\nn\nf\no\nr\nm\na\nt\ni\no\nn\no\nr\nd\ne\nt\ne\nr\nm\ni\nn\ne\nd\nt\nh\ne\nu\nn\nd\ne\nr\nl\ny\ni\nn\ng\ne\nc\no\nn\no\nm\ni\nc\na\ns\ns\nu\nm\np\nt\ni\no\nn\ns\nr\ne\nl\ni\ne\nd\nu\np\no\nn\nt\nh\ne\nr\ne\ni\nn\n.\nA\nc\nc\no\nr\nd\ni\nn\ng\nl\ny\n,\nn\no\nn\ne\no\nf\nA\nP\nE\nN\nF\nT\n'\ns\nd\ni\nr\ne\nc\nt\no\nr\ns\n,\no\nf\nf\ni\nc\ne\nr\ns\no\nr\ne\nm\np\nl\no\ny\ne\ne\ns\na\nc\nt\ni\nn\ng\no\nn\nt\nh\ne\ni\nr\nb\ne\nh\na\nl\nf\nm\na\nk\ne\na\nn\ny\nr\ne\np\nr\ne\ns\ne\nn\nt\na\nt\ni\no\nn\ns\no\nr\nw\na\nr\nr\na\nn\nt\ni\ne\ns\na\ns\nt\no\nt\nh\ne\na\nc\nc\nu\nr\na\nc\ny\no\nr\nc\no\nm\np\nl\ne\nt\ne\nn\ne\ns\ns\no\nf\ns\nu\nc\nh\ni\nn\nf\no\nr\nm\na\nt\ni\no\nn\n,\nn\no\nr\na\nr\ne\nt\nh\ne\ny\no\nb\nl\ni\ng\na\nt\ne\nd\nt\no\np\nr\no\nv\ni\nd\ne\na\nn\ny\nu\np\nd\na\nt\ne\ns\nt\no\ns\nu\nc\nh\ni\nn\nf\no\nr\nm\na\nt\ni\no\nn\n.\nF\n.\nT\nE\nR\nM\nS\nU\nS\nE\nD\n.\nI\nn\no\nr\nd\ne\nr\nt\no\nf\na\nc\ni\nl\ni\nt\na\nt\ne\na\nb\ne\nt\nt\ne\nr\nu\nn\nd\ne\nr\ns\nt\na\nn\nd\ni\nn\ng\no\nf\nt\nh\ne\nA\nP\nE\nN\nF\nT\nt\no\nk\ne\nn\ns\np\nu\nr\nc\nh\na\ns\ne\nd\n,\na\nn\nd\nt\nh\ne\nb\nu\ns\ni\nn\ne\ns\ns\na\nn\nd\no\np\ne\nr\na\nt\ni\no\nn\ns\no\nf\nA\nP\nE\nN\nF\nT\n,\nc","metadata":{"loc":{"lines":{"from":53837,"to":54336}}}}],["128",{"pageContent":"r\nd\ne\nr\nt\no\nf\na\nc\ni\nl\ni\nt\na\nt\ne\na\nb\ne\nt\nt\ne\nr\nu\nn\nd\ne\nr\ns\nt\na\nn\nd\ni\nn\ng\no\nf\nt\nh\ne\nA\nP\nE\nN\nF\nT\nt\no\nk\ne\nn\ns\np\nu\nr\nc\nh\na\ns\ne\nd\n,\na\nn\nd\nt\nh\ne\nb\nu\ns\ni\nn\ne\ns\ns\na\nn\nd\no\np\ne\nr\na\nt\ni\no\nn\ns\no\nf\nA\nP\nE\nN\nF\nT\n,\nc\ne\nr\nt\na\ni\nn\nt\ne\nc\nh\nn\ni\nc\na\nl\nt\ne\nr\nm\ns\na\nn\nd\na\nb\nb\nr\ne\nv\ni\na\nt\ni\no\nn\ns\na\nr\ne\nu\ns\ne\nd\ni\nn\nt\nh\ni\ns\nW\nh\ni\nt\ne\nP\na\np\ne\nr\na\nn\nd\n,\ni\nn\ns\no\nm\ne\nc\na\ns\ne\ns\n,\nt\nh\ne\ni\nr\nd\ne\ns\nc\nr\ni\np\nt\ni\no\nn\ns\n.\nT\nh\ne\ns\ne\nd\ne\ns\nc\nr\ni\np\nt\ni\no\nn\ns\na\nn\nd\nd\ne\ns\ni\ng\nn\na\nt\ni\no\nn\ns\ns\nh\no\nu\nl\nd\nn\no\nt\nb\ne\nt\na\nk\ne\nn\na\ns\nd\ne\nf\ni\nn\ni\nt\ni\nv\ne\ni\nn\nt\nh\ne\ni\nr\nm\ne\na\nn\ni\nn\ng\na\nn\nd\nm\na\ny\nn\no\nt\nc\no\nn\nf\no\nr\nm\nt\no\ns\nt\na\nn\nd\na\nr\nd\ni\nn\nd\nu\ns\nt\nr\ny\nm\ne\na\nn\ni\nn\ng\ns\no\nr\nu\ns\na\ng\ne\n.\nG\n.\nN\nO\nA\nD\nV\nI\nC\nE\n.\nN\no\nn\ne\no\nf\nt\nh\ne\ni\nn\nf\no\nr\nm\na\nt\ni\no\nn\ni\nn\nt\nh\ni\ns\nW\nh\ni\nt\ne\nP\na\np\ne\nr\ns\nh\no\nu\nl\nd\nb\ne\nc\no\nn\ns\nt\nr\nu\ne\nd\na\ns\nc\no\nm\nm\ne\nr\nc\ni\na\nl\n,\nl\ne\ng\na\nl\n,\nf\ni\nn\na\nn\nc\ni\na\nl\no\nr\nt\na\nx\na\nd\nv\ni\nc\ne\ni\nn\nr\ne\nl\na\nt\ni\no\nn\nt\no\nA\nP\nE\nN\nF\nT\n,\nN\nF\nT\n(\ne\na\nc\nh\na\ns\nr\ne\nf\ne\nr\nr\ne\nd\nt\no\ni\nn\nt\nh\ne\nW\nh\ni\nt\ne\nP\na\np\ne\nr\n)\n.\nY\no\nu\ns\nh\no\nu\nl\nd\nc\no\nn\ns\nu\nl\nt\ny\no\nu\nr\nl\ne\ng\na","metadata":{"loc":{"lines":{"from":54336,"to":54835}}}}],["129",{"pageContent":"f\ni\nn\na\nn\nc\ni\na\nl\no\nr\nt\na\nx\na\nd\nv\ni\nc\ne\ni\nn\nr\ne\nl\na\nt\ni\no\nn\nt\no\nA\nP\nE\nN\nF\nT\n,\nN\nF\nT\n(\ne\na\nc\nh\na\ns\nr\ne\nf\ne\nr\nr\ne\nd\nt\no\ni\nn\nt\nh\ne\nW\nh\ni\nt\ne\nP\na\np\ne\nr\n)\n.\nY\no\nu\ns\nh\no\nu\nl\nd\nc\no\nn\ns\nu\nl\nt\ny\no\nu\nr\nl\ne\ng\na\nl\n,\nf\ni\nn\na\nn\nc\ni\na\nl\n,\nt\na\nx\no\nr\no\nt\nh\ne\nr\np\nr\no\nf\ne\ns\ns\ni\no\nn\na\nl\na\nd\nv\ni\ns\ne\nr\ns\na\nb\no\nu\nt\nA\nP\nE\nN\nF\nT\na\nn\nd\ni\nt\ns\nr\ne\ns\np\ne\nc\nt\ni\nv\ne\nb\nu\ns\ni\nn\ne\ns\ns\na\nn\nd\no\np\ne\nr\na\nt\ni\no\nn\ns\n,\nN\nF\nT\n(\na\ns\nr\ne\nf\ne\nr\nr\ne\nd\nt\no\ni\nn\nt\nh\ne\nW\nh\ni\nt\ne\nP\na\np\ne\nr\n)\n.\nY\no\nu\ns\nh\no\nu\nl\nd\nb\ne\na\nw\na\nr\ne\nt\nh\na\nt\ny\no\nu\nm\na\ny\nb\ne\nr\ne\nq\nu\ni\nr\ne\nd\nt\no\nb\ne\na\nr\nt\nh\ne\nf\ni\nn\na\nn\nc\ni\na\nl\nr\ni\ns\nk\no\nf\na\nn\ny\nA\nP\nE\nN\nF\nT\nt\no\nk\ne\nn\ns\nf\no\nr\na\nn\ni\nn\nd\ne\nf\ni\nn\ni\nt\ne\np\ne\nr\ni\no\nd\no\nf\nt\ni\nm\ne\n.\nH\n.\nN\nO\nF\nU\nR\nT\nH\nE\nR\nI\nN\nF\nO\nR\nM\nA\nT\nI\nO\nN\nO\nR\nU\nP\nD\nA\nT\nE\n.\nN\no\np\ne\nr\ns\no\nn\nh\na\ns\nb\ne\ne\nn\no\nr\ni\ns\na\nu\nt\nh\no\nr\ni\nz\ne\nd\nt\no\ng\ni\nv\ne\na\nn\ny\ni\nn\nf\no\nr\nm\na\nt\ni\no\nn\no\nr\nr\ne\np\nr\ne\ns\ne\nn\nt\na\nt\ni\no\nn\nn\no\nt\nc\no\nn\nt\na\ni\nn\ne\nd\ni\nn\nt\nh\ni\ns\nW\nh\ni\nt\ne\nP\na\np\ne\nr\ni\nn\nc\no\nn\nn\ne\nc\nt\ni\no\nn\nw\ni\nt\nh\nA\nP\nE\nN\nF\nT\na\nn\nd\nt\nh\ne\ni\nr\nr\ne\ns\np\ne\nc\nt\ni\nv\ne\nb\nu\ns\ni\nn\ne\ns\ns\ne","metadata":{"loc":{"lines":{"from":54835,"to":55334}}}}],["130",{"pageContent":"r\nm\na\nt\ni\no\nn\no\nr\nr\ne\np\nr\ne\ns\ne\nn\nt\na\nt\ni\no\nn\nn\no\nt\nc\no\nn\nt\na\ni\nn\ne\nd\ni\nn\nt\nh\ni\ns\nW\nh\ni\nt\ne\nP\na\np\ne\nr\ni\nn\nc\no\nn\nn\ne\nc\nt\ni\no\nn\nw\ni\nt\nh\nA\nP\nE\nN\nF\nT\na\nn\nd\nt\nh\ne\ni\nr\nr\ne\ns\np\ne\nc\nt\ni\nv\ne\nb\nu\ns\ni\nn\ne\ns\ns\ne\ns\na\nn\nd\no\np\ne\nr\na\nt\ni\no\nn\ns\n,\nt\nh\ne\nN\nF\nT\n,\na\nn\nd\n,\ni\nf\ng\ni\nv\ne\nn\n,\ns\nu\nc\nh\ni\nn\nf\no\nr\nm\na\nt\ni\no\nn\no\nr\nr\ne\np\nr\ne\ns\ne\nn\nt\na\nt\ni\no\nn\nm\nu\ns\nt\nn\no\nt\nb\ne\nr\ne\nl\ni\ne\nd\nu\np\no\nn\na\ns\nh\na\nv\ni\nn\ng\nb\ne\ne\nn\na\nu\nt\nh\no\nr\ni\nz\ne\nd\nb\ny\no\nr\no\nn\nb\ne\nh\na\nl\nf\no\nf\nA\nP\nE\nN\nF\nT\n.\nT\nh\ne\nT\no\nk\ne\nn\nS\na\nl\ne\n(\na\ns\nr\ne\nf\ne\nr\nr\ne\nd\nt\no\ni\nn\nt\nh\ne\nW\nh\ni\nt\ne\nP\na\np\ne\nr\n)\ns\nh\na\nl\nl\nn\no\nt\n,\nu\nn\nd\ne\nr\na\nn\ny\nc\ni\nr\nc\nu\nm\ns\nt\na\nn\nc\ne\ns\n,\nc\no\nn\ns\nt\ni\nt\nu\nt\ne\na\nc\no\nn\nt\ni\nn\nu\ni\nn\ng\nr\ne\np\nr\ne\ns\ne\nn\nt\na\nt\ni\no\nn\no\nr\nc\nr\ne\na\nt\ne\na\nn\ny\ns\nu\ng\ng\ne\ns\nt\ni\no\nn\no\nr\ni\nm\np\nl\ni\nc\na\nt\ni\no\nn\nt\nh\na\nt\nt\nh\ne\nr\ne\nh\na\ns\nb\ne\ne\nn\nn\no\nc\nh\na\nn\ng\ne\n,\no\nr\nd\ne\nv\ne\nl\no\np\nm\ne\nn\nt\nr\ne\na\ns\no\nn\na\nb\nl\ny\nl\ni\nk\ne\nl\ny\nt\no\ni\nn\nv\no\nl\nv\ne\na\nm\na\nt\ne\nr\ni\na\nl\nc\nh\na\nn\ng\ne\ni\nn\nt\nh\ne\na\nf\nf\na\ni\nr\ns\n,\nc\no\nn\nd\ni\nt\ni\no\nn\ns\na\nn\nd\np\nr\no\ns\np\ne\nc\nt\ns\no\nf\nA\nP\nE\nN\nF\nT\no\nr\ni\nn\na\nn\ny\ns\nt\na\nt","metadata":{"loc":{"lines":{"from":55334,"to":55833}}}}],["131",{"pageContent":"o\np\nm\ne\nn\nt\nr\ne\na\ns\no\nn\na\nb\nl\ny\nl\ni\nk\ne\nl\ny\nt\no\ni\nn\nv\no\nl\nv\ne\na\nm\na\nt\ne\nr\ni\na\nl\nc\nh\na\nn\ng\ne\ni\nn\nt\nh\ne\na\nf\nf\na\ni\nr\ns\n,\nc\no\nn\nd\ni\nt\ni\no\nn\ns\na\nn\nd\np\nr\no\ns\np\ne\nc\nt\ns\no\nf\nA\nP\nE\nN\nF\nT\no\nr\ni\nn\na\nn\ny\ns\nt\na\nt\ne\nm\ne\nn\nt\no\nf\nf\na\nc\nt\no\nr\ni\nn\nf\no\nr\nm\na\nt\ni\no\nn\nc\no\nn\nt\na\ni\nn\ne\nd\ni\nn\nt\nh\ni\ns\nW\nh\ni\nt\ne\nP\na\np\ne\nr\ns\ni\nn\nc\ne\nt\nh\ne\nd\na\nt\ne\nh\ne\nr\ne\no\nf\n.","metadata":{"loc":{"lines":{"from":55833,"to":56000}}}}],["132",{"pageContent":"3\n2\nI\n.\nR\nE\nS\nT\nR\nI\nC\nT\nI\nO\nN\nS\nO\nN\nD\nI\nS\nT\nR\nI\nB\nU\nT\nI\nO\nN\nA\nN\nD\nD\nI\nS\nS\nE\nM\nI\nN\nA\nT\nI\nO\nN\n.\nT\nh\ne\nd\ni\ns\nt\nr\ni\nb\nu\nt\ni\no\nn\no\nr\nd\ni\ns\ns\ne\nm\ni\nn\na\nt\ni\no\nn\no\nf\nt\nh\ni\ns\nW\nh\ni\nt\ne\nP\na\np\ne\nr\no\nr\na\nn\ny\np\na\nr\nt\nt\nh\ne\nr\ne\no\nf\nm\na\ny\nb\ne\np\nr\no\nh\ni\nb\ni\nt\ne\nd\no\nr\nr\ne\ns\nt\nr\ni\nc\nt\ne\nd\nb\ny\nt\nh\ne\nl\na\nw\ns\n,\nr\ne\ng\nu\nl\na\nt\no\nr\ny\nr\ne\nq\nu\ni\nr\ne\nm\ne\nn\nt\ns\na\nn\nd\nr\nu\nl\ne\ns\no\nf\na\nn\ny\nj\nu\nr\ni\ns\nd\ni\nc\nt\ni\no\nn\n.\nI\nn\nt\nh\ne\nc\na\ns\ne\nw\nh\ne\nr\ne\na\nn\ny\nr\ne\ns\nt\nr\ni\nc\nt\ni\no\nn\na\np\np\nl\ni\ne\ns\n,\ny\no\nu\na\nr\ne\nt\no\ni\nn\nf\no\nr\nm\ny\no\nu\nr\ns\ne\nl\nf\na\nb\no\nu\nt\n,\na\nn\nd\nt\no\no\nb\ns\ne\nr\nv\ne\n,\na\nn\ny\nr\ne\ns\nt\nr\ni\nc\nt\ni\no\nn\ns\nw\nh\ni\nc\nh\na\nr\ne\na\np\np\nl\ni\nc\na\nb\nl\ne\nt\no\ny\no\nu\nr\np\no\ns\ns\ne\ns\ns\ni\no\nn\no\nf\nt\nh\ni\ns\nW\nh\ni\nt\ne\nP\na\np\ne\nr\no\nr\ns\nu\nc\nh\np\na\nr\nt\nt\nh\ne\nr\ne\no\nf\n(\na\ns\nt\nh\ne\nc\na\ns\ne\nm\na\ny\nb\ne\n)\na\nt\ny\no\nu\nr\no\nw\nn\ne\nx\np\ne\nn\ns\ne\na\nn\nd\nw\ni\nt\nh\no\nu\nt\nl\ni\na\nb\ni\nl\ni\nt\ny\nt\no\nA\nP\nE\nN\nF\nT\n.\nP\ne\nr\ns\no\nn\ns\nt\no\nw\nh\no\nm\na\nc\no\np\ny\no\nf\nt\nh\ni\ns\nW\nh\ni\nt\ne\nP\na\np\ne\nr\nh\na\ns\nb\ne\ne\nn\nd\ni\ns\nt\nr\ni\nb\nu\nt\ne\nd\no\nr\nd\ni\ns\ns\ne\nm\ni\nn\na\nt\ne\nd\n,\np\nr\no\nv\ni\nd\ne\nd\na\nc\nc\ne\ns\ns\nt\no\no\nr\nw","metadata":{"loc":{"lines":{"from":56002,"to":56500}}}}],["133",{"pageContent":"i\nl\ni\nt\ny\nt\no\nA\nP\nE\nN\nF\nT\n.\nP\ne\nr\ns\no\nn\ns\nt\no\nw\nh\no\nm\na\nc\no\np\ny\no\nf\nt\nh\ni\ns\nW\nh\ni\nt\ne\nP\na\np\ne\nr\nh\na\ns\nb\ne\ne\nn\nd\ni\ns\nt\nr\ni\nb\nu\nt\ne\nd\no\nr\nd\ni\ns\ns\ne\nm\ni\nn\na\nt\ne\nd\n,\np\nr\no\nv\ni\nd\ne\nd\na\nc\nc\ne\ns\ns\nt\no\no\nr\nw\nh\no\no\nt\nh\ne\nr\nw\ni\ns\ne\nh\na\nv\ne\nt\nh\ne\nW\nh\ni\nt\ne\nP\na\np\ne\nr\ni\nn\nt\nh\ne\ni\nr\np\no\ns\ns\ne\ns\ns\ni\no\nn\ns\nh\na\nl\nl\nn\no\nt\nc\ni\nr\nc\nu\nl\na\nt\ne\ni\nt\nt\no\na\nn\ny\no\nt\nh\ne\nr\np\ne\nr\ns\no\nn\ns\n,\nr\ne\np\nr\no\nd\nu\nc\ne\no\nr\no\nt\nh\ne\nr\nw\ni\ns\ne\nd\ni\ns\nt\nr\ni\nb\nu\nt\ne\nt\nh\ni\ns\nW\nh\ni\nt\ne\nP\na\np\ne\nr\no\nr\na\nn\ny\ni\nn\nf\no\nr\nm\na\nt\ni\no\nn\nc\no\nn\nt\na\ni\nn\ne\nd\nh\ne\nr\ne\ni\nn\nf\no\nr\na\nn\ny\np\nu\nr\np\no\ns\ne\nw\nh\na\nt\ns\no\ne\nv\ne\nr\nn\no\nr\np\ne\nr\nm\ni\nt\no\nr\nc\na\nu\ns\ne\nt\nh\ne\ns\na\nm\ne\nt\no\no\nc\nc\nu\nr\n.\nJ\n.\nN\nO\nO\nF\nF\nE\nR\nO\nF\nS\nE\nC\nU\nR\nI\nT\nI\nE\nS\nO\nR\nR\nE\nG\nI\nS\nT\nR\nA\nT\nI\nO\nN\n.\nT\nh\ni\ns\nW\nh\ni\nt\ne\nP\na\np\ne\nr\nd\no\ne\ns\nn\no\nt\nc\no\nn\ns\nt\ni\nt\nu\nt\ne\na\np\nr\no\ns\np\ne\nc\nt\nu\ns\no\nr\no\nf\nf\ne\nr\nd\no\nc\nu\nm\ne\nn\nt\no\nf\na\nn\ny\ns\no\nr\nt\na\nn\nd\ni\ns\nn\no\nt\ni\nn\nt\ne\nn\nd\ne\nd\nt\no\nc\no\nn\ns\nt\ni\nt\nu\nt\ne\na\nn\no\nf\nf\ne\nr\no\nf\ns\ne\nc\nu\nr\ni\nt\ni\ne\ns\no\nr\na\ns\no\nl\ni\nc\ni\nt\na\nt\ni\no\nn\nf\no\nr\ni\nn\nv\ne\ns\nt\nm\ne\nn\nt\ni\nn\ns\ne\nc\nu\nr\ni\nt\ni\ne\ns","metadata":{"loc":{"lines":{"from":56500,"to":56999}}}}],["134",{"pageContent":"m\ne\nn\nt\no\nf\na\nn\ny\ns\no\nr\nt\na\nn\nd\ni\ns\nn\no\nt\ni\nn\nt\ne\nn\nd\ne\nd\nt\no\nc\no\nn\ns\nt\ni\nt\nu\nt\ne\na\nn\no\nf\nf\ne\nr\no\nf\ns\ne\nc\nu\nr\ni\nt\ni\ne\ns\no\nr\na\ns\no\nl\ni\nc\ni\nt\na\nt\ni\no\nn\nf\no\nr\ni\nn\nv\ne\ns\nt\nm\ne\nn\nt\ni\nn\ns\ne\nc\nu\nr\ni\nt\ni\ne\ns\ni\nn\na\nn\ny\nj\nu\nr\ni\ns\nd\ni\nc\nt\ni\no\nn\n.\nN\no\np\ne\nr\ns\no\nn\ni\ns\nb\no\nu\nn\nd\nt\no\ne\nn\nt\ne\nr\ni\nn\nt\no\na\nn\ny\nc\no\nn\nt\nr\na\nc\nt\no\nr\nb\ni\nn\nd\ni\nn\ng\nl\ne\ng\na\nl\nc\no\nm\nm\ni\nt\nm\ne\nn\nt\na\nn\nd\nn\no\nc\nr\ny\np\nt\no\nc\nu\nr\nr\ne\nn\nc\ny\no\nr\no\nt\nh\ne\nr\nf\no\nr\nm\no\nf\np\na\ny\nm\ne\nn\nt\ni\ns\nt\no\nb\ne\na\nc\nc\ne\np\nt\ne\nd\no\nn\nt\nh\ne\nb\na\ns\ni\ns\no\nf\nt\nh\ni\ns\nW\nh\ni\nt\ne\nP\na\np\ne\nr\n.\nA\nn\ny\na\ng\nr\ne\ne\nm\ne\nn\nt\ni\nn\nr\ne\nl\na\nt\ni\no\nn\nt\no\na\nn\ny\ns\na\nl\ne\na\nn\nd\np\nu\nr\nc\nh\na\ns\ne\no\nf\nN\nF\nT\n(\na\ns\nr\ne\nf\ne\nr\nr\ne\nd\nt\no\ni\nn\nt\nh\ni\ns\nW\nh\ni\nt\ne\nP\na\np\ne\nr\n)\ni\ns\nt\no\nb\ne\ng\no\nv\ne\nr\nn\ne\nd\nb\ny\no\nn\nl\ny\nt\nh\ne\nT\ne\nr\nm\ns\no\nf\ns\nu\nc\nh\na\ng\nr\ne\ne\nm\ne\nn\nt\na\nn\nd\nn\no\no\nt\nh\ne\nr\nd\no\nc\nu\nm\ne\nn\nt\n.\nI\nn\nt\nh\ne\ne\nv\ne\nn\nt\no\nf\na\nn\ny\ni\nn\nc\no\nn\ns\ni\ns\nt\ne\nn\nc\ny\nb\ne\nt\nw\ne\ne\nn\nt\nh\ne\nT\ne\nr\nm\ns\na\nn\nd\nt\nh\ni\ns\nW\nh\ni\nt\ne\nP\na\np\ne\nr\n,\nt\nh\ni\ns\nW\nh\ni\nt\ne\nP\na\np\ne\nr\ns\nh\na\nl\nl\np\nr\ne\nv\na\ni\nl\n.\nN\no\ns\nu\nc\nh\na\nc\nt\ni\no\nn\nh\na","metadata":{"loc":{"lines":{"from":56999,"to":57498}}}}],["135",{"pageContent":"t\nh\ne\ne\nv\ne\nn\nt\no\nf\na\nn\ny\ni\nn\nc\no\nn\ns\ni\ns\nt\ne\nn\nc\ny\nb\ne\nt\nw\ne\ne\nn\nt\nh\ne\nT\ne\nr\nm\ns\na\nn\nd\nt\nh\ni\ns\nW\nh\ni\nt\ne\nP\na\np\ne\nr\n,\nt\nh\ni\ns\nW\nh\ni\nt\ne\nP\na\np\ne\nr\ns\nh\na\nl\nl\np\nr\ne\nv\na\ni\nl\n.\nN\no\ns\nu\nc\nh\na\nc\nt\ni\no\nn\nh\na\ns\nb\ne\ne\nn\no\nr\nw\ni\nl\nl\nb\ne\nt\na\nk\ne\nn\nb\ny\nu\ns\nu\nn\nd\ne\nr\nt\nh\ne\nl\na\nw\ns\n,\nr\ne\ng\nu\nl\na\nt\no\nr\ny\nr\ne\nq\nu\ni\nr\ne\nm\ne\nn\nt\ns\no\nr\nr\nu\nl\ne\ns\no\nf\na\nn\ny\nj\nu\nr\ni\ns\nd\ni\nc\nt\ni\no\nn\n.\nT\nh\ne\np\nu\nb\nl\ni\nc\na\nt\ni\no\nn\n,\nd\ni\ns\nt\nr\ni\nb\nu\nt\ni\no\nn\no\nr\nd\ni\ns\ns\ne\nm\ni\nn\na\nt\ni\no\nn\no\nf\nt\nh\ni\ns\nw\nh\ni\nt\ne\np\na\np\ne\nr\nd\no\ne\ns\nn\no\nt\ni\nm\np\nl\ny\nc\no\nm\np\nl\ni\na\nn\nc\ne\nw\ni\nt\nh\na\np\np\nl\ni\nc\na\nb\nl\ne\nl\na\nw\ns\n,\nr\ne\ng\nu\nl\na\nt\no\nr\ny\nr\ne\nq\nu\ni\nr\ne\nm\ne\nn\nt\ns\no\nr\nr\nu\nl\ne\ns\n.\nK\n.\nR\nI\nS\nK\nS\nA\nN\nD\nU\nN\nC\nE\nR\nT\nA\nI\nN\nT\nI\nE\nS\n.\nP\nr\no\ns\np\ne\nc\nt\ni\nv\ne\np\nu\nr\nc\nh\na\ns\ne\nr\ns\no\nf\nN\nF\nT\n(\na\ns\nr\ne\nf\ne\nr\nr\ne\nd\nt\no\ni\nn\nt\nh\ni\ns\nW\nh\ni\nt\ne\nP\na\np\ne\nr\n)\ns\nh\no\nu\nl\nd\nc\na\nr\ne\nf\nu\nl\nl\ny\nc\no\nn\ns\ni\nd\ne\nr\na\nn\nd\ne\nv\na\nl\nu\na\nt\ne\na\nl\nl\nr\ni\ns\nk\ns\na\nn\nd\nu\nn\nc\ne\nr\nt\na\ni\nn\nt\ni\ne\ns\na\ns\ns\no\nc\ni\na\nt\ne\nd\nw\ni\nt\nh\nA\nP\nE\nN\nF\nT\n'\ns\nb\nu\ns\ni\nn\ne\ns\ns\na\nn\nd\no\np\ne\nr\na\nt\ni\no\nn\ns\n,\nN\nF\nT\n(\ne\na\nc","metadata":{"loc":{"lines":{"from":57498,"to":57997}}}}],["136",{"pageContent":"e\nf\nu\nl\nl\ny\nc\no\nn\ns\ni\nd\ne\nr\na\nn\nd\ne\nv\na\nl\nu\na\nt\ne\na\nl\nl\nr\ni\ns\nk\ns\na\nn\nd\nu\nn\nc\ne\nr\nt\na\ni\nn\nt\ni\ne\ns\na\ns\ns\no\nc\ni\na\nt\ne\nd\nw\ni\nt\nh\nA\nP\nE\nN\nF\nT\n'\ns\nb\nu\ns\ni\nn\ne\ns\ns\na\nn\nd\no\np\ne\nr\na\nt\ni\no\nn\ns\n,\nN\nF\nT\n(\ne\na\nc\nh\na\ns\nr\ne\nf\ne\nr\nr\ne\nd\nt\no\ni\nn\nt\nh\ne\nW\nh\ni\nt\ne\nP\na\np\ne\nr\n)\n,\na\nl\nl\ni\nn\nf\no\nr\nm\na\nt\ni\no\nn\ns\ne\nt\no\nu\nt\ni\nn\nt\nh\ni\ns\nW\nh\ni\nt\ne\nP\na\np\ne\nr\na\nn\nd\nt\nh\ne\nT\ne\nr\nm\ns\np\nr\ni\no\nr\nt\no\na\nn\ny\np\nu\nr\nc\nh\na\ns\ne\no\nf\nN\nF\nT\n.\nI\nf\na\nn\ny\no\nf\ns\nu\nc\nh\nr\ni\ns\nk\ns\na\nn\nd\nu\nn\nc\ne\nr\nt\na\ni\nn\nt\ni\ne\ns\nd\ne\nv\ne\nl\no\np\ns\ni\nn\nt\no\na\nc\nt\nu\na\nl\ne\nv\ne\nn\nt\ns\n,\nt\nh\ne\nb\nu\ns\ni\nn\ne\ns\ns\n,\nf\ni\nn\na\nn\nc\ni\na\nl\nc\no\nn\nd\ni\nt\ni\no\nn\n,\nr\ne\ns\nu\nl\nt\ns\no\nf\no\np\ne\nr\na\nt\ni\no\nn\ns\na\nn\nd\np\nr\no\ns\np\ne\nc\nt\ns\no\nf\nA\nP\nE\nN\nF\nT\nc\no\nu\nl\nd\nb\ne\nm\na\nt\ne\nr\ni\na\nl\nl\ny\na\nn\nd\na\nd\nv\ne\nr\ns\ne\nl\ny\na\nf\nf\ne\nc\nt\ne\nd\n.\nI\nn\ns\nu\nc\nh\nc\na\ns\ne\ns\n,\ny\no\nu\nm\na\ny\nl\no\ns\ne\na\nl\nl\no\nr\np\na\nr\nt\no\nf\nt\nh\ne\nv\na\nl\nu\ne\no\nf\nt\nh\ne\nN\nF\nT\n.","metadata":{"loc":{"lines":{"from":57997,"to":58412}}}}],["137",{"pageContent":"BTFS docs\nBitTorrent File System 2.0\nThe First Scalable\nDecentralized\nStorage System\nA Storage Infrastructure for Web3\n\nBTFS as web3\nStorage infrastructure\nBTFS (BitTorrent File System) is the next-generation decentralized file storage system built for Web 3 applications. BTFS provides a global decentralized storage service with high reliability. In BTFS 2.0, we reconstructed our framework by using smart contracts based on BTTC, ETH, and TRON, which makes BTFS web 3 native and more scalable, while also offering low cost and high security.\n\n\n\n\nBTFS Network\nKey Data\n7,188,944\nTotal Miners\n\n21,999,627,515,052\nBTT\nTotal Revenue\n\n123,768,884\nTotal Contracts\n\n5,489,811\nSuper Miners\n\n772,373,565\nBTT\nCheque Amount Cashed\n\n585\nPB\nTotal Storage Available\n\nBTFS SCAN\nCheck more","metadata":{"loc":{"lines":{"from":1,"to":39}}}}],["138",{"pageContent":"21,999,627,515,052\nBTT\nTotal Revenue\n\n123,768,884\nTotal Contracts\n\n5,489,811\nSuper Miners\n\n772,373,565\nBTT\nCheque Amount Cashed\n\n585\nPB\nTotal Storage Available\n\nBTFS SCAN\nCheck more\n\nBTFS\nSpecial Feature\nMulti-Chain Decentralized\nStorage System Based\non Smart Contracts\nWith the combination of peer to peer network and smart contacts based on blockchains, BTFS is able to interact with multiple blockchain systems. We took our first step on BTTC(BitTorrent Chain) and constructed BTFS 2.0 experimentally. Once its reliability and security is testified, multi-chain features will be constructed on ETH and TRON. Other public chains are considerable.\n\nFile encryption\nprotocol supported\nBTFS is an open storage network. In order to store or share private files in an open network, BTFS supports file encryption storage protocol, and uses mature and efficient hybrid encryption technology to realize private storage and sharing of files.","metadata":{"loc":{"lines":{"from":39,"to":69}}}}],["139",{"pageContent":"Integrated with\nBitTorrent API\nBTFS is now integrated with BitTorrent API to serve as a BitTorrent client, and more functions will be provided in the future to better integrate with the BitTorrent ecosystem.\n\nGet Developer\nResources\nDocumentation\nRead the docs and get started with BTFS\n\nGithub\nExplore tech repositories, contribute code or submit an issue\n\nBTIP\nSubmit your improvement proposal and build BTFS with the community\n\nBTFS SCAN\nData explorer and analytics platform for BitTorrent File System\n\nMainnet\nTestnet\nBTTC SCAN\nBlock Explorer and Analytics Platform for BitTorrent Chain\n\nMainnet\nTestnet\nExplore the Ecosystem\nand Use Cases of BTFS\nDiscover and share\n\ndecentralized content\n\n\nDeploy a censorship-resistant\n\ndecentralized website\n\n\nAccess to Decentralized\n\nTrading Protocol\n\n\nFree and Decentralized Storage of\n\nYour Important NFT Content\n\n\nGet Decentralized\n\nFinancial Service\n\n\nExploring TRON Data\n\non BTFS","metadata":{"loc":{"lines":{"from":71,"to":125}}}}],["140",{"pageContent":"Access to Decentralized\n\nTrading Protocol\n\n\nFree and Decentralized Storage of\n\nYour Important NFT Content\n\n\nGet Decentralized\n\nFinancial Service\n\n\nExploring TRON Data\n\non BTFS\n\n\nAwesome BTFS\nDiscover the diversity of decentralized applications and interesting projects deployed on BTFS\n\n\nHighlights\nScalable\nBTFS is a decentralized, permissionless content network. Anyone can join the BTFS network as a storage node. BTFS is built on the efficient BTTC blockchain, with high scalability and cross-chain capabilities.\n\nTrustless\nBTFS uses smart contracts to manage network state and conduct verification. These smart contracts include Factory Contract, Vault Logic Contract, Online Proof Contract, etc., which greatly enhance the credibility of the network.\n\nUser-friendly\nRich eco-applications make BTFS very easy to use for both developers and regular users. Flexible multi-currency payment options. In addition to BTT, BTFS also supports TRX, USDD and USDT for storage payments.\n\nWhy BTFS?","metadata":{"loc":{"lines":{"from":125,"to":159}}}}],["141",{"pageContent":"Why BTFS?\n\nTraditional file storage systems have many inherent disadvantages, such as centralized trust, overarching control by a single authority or organization, ability of governments to impose censorship, high cost, lock-in effect, and low fault tolerance.\n\nThe five components of the BTFS ecosystem\nThe BTFS Ecosystem Will Have Five Components\n\nThe BTFS network is the next generation of decentralized storage systems.\nTRON network is one of the most important blockchain & DApp platforms in the world.\nThe BitTorrent network brings with it 100 million decentralized users via the wide array of client products.\nTronGrid services one of the most important gateways connecting the components of the ecosystem.\nFinally, BTT will introduce native token economics into the BTFS ecosystem, ensuring a fair, useful, and efficient system.\nBTFS Gateway","metadata":{"loc":{"lines":{"from":159,"to":171}}}}],["142",{"pageContent":"BTFS gateway is a gateway based on the Tron network and the BTFS decentralized network. Anyone can access files already stored on the BTFS network via BTFS gateway. The operation is very simple and can be found in one click on Google Chrome.\n\nLearn More >\nSoter\nBTFS Roadmap\n\nQ4\n\n2021\n\nLaunch BTFS 2.0\nOfficially Access to BitTorrent Chain(BTTC)\nLaunch Node Management Tool\nUpgrade decentralized payment system\nLaunch BTScan 2.0\nQ1\n\n2022\n\nLaunch new website of BTFS2.0\nImprove incentive model of BTFS\nUpgrade decentralized validation mechanism\nImprove the stability of gateways and SDK\nQ2\n\n2022\n\nIntegrate more blockchain system\nLaunch multi-chain feature of BTFS\nImprove the usability of BTFS products\nLaunch decentralized governance feature","metadata":{"loc":{"lines":{"from":173,"to":203}}}}],["143",{"pageContent":"2022\n\nIntegrate more blockchain system\nLaunch multi-chain feature of BTFS\nImprove the usability of BTFS products\nLaunch decentralized governance feature\n\nBTFS\nCompared with blockchains such as Ethereum, BTTC has the characteristics of low transaction fees, fast transaction speed, and high throughput, but limited by block size, transaction rate, etc., it still lacks cost-effective, scalable, and high-performance file storage and sharing solutions. One of the solutions to these problems is the BTFS file system.\n\nWhat is BTFS ？\nBitTorrent File System (BTFS), is the next-generation file sharing protocol in the BitTorrent-Chain ecosystem. It has the characteristics of decentralization, content addressing, peer to peer, and permanent storage. Further more, with the support of BTTC, BTFS realizes cross-chain connection and multi-channel payment, becoming a more convenient choice for decentralized storage.","metadata":{"loc":{"lines":{"from":203,"to":214}}}}],["144",{"pageContent":"The BTFS network is mainly composed of BTFS nodes, including host nodes and rental nodes. Rental nodes can upload files by paying WBTT, while host nodes provide storage in the network to get BTT rewards.\n\nFor more technical details about BTFS, please refer to BTFS Developer Hub.\n\nWhat is BTFS？\nSuggest Edits\n\n\nBTFS Overview\nBitTorrent File System (BTFS) is a next-generation file sharing protocol in the BitTorrent ecosystem. Current mainstream public blockchains mostly focus on computational tasks but lack cost-effective, scalable, and high-performing file storage and sharing solutions. In the meantime, centralized storage systems are troubled by many intrinsic problems:","metadata":{"loc":{"lines":{"from":216,"to":225}}}}],["145",{"pageContent":"Centralized trust\nProne to censorship\nHigh maintenance costs\nLock-in effect\nLow fault tolerance\nThese are exactly what BTFS aims to clear up. Besides, underpinned by BTTC, BTFS enables cross-chain connectivity and multi-channel payments, making itself a more convenient choice. The intgration of BTFS, BitTorrent, and the BTTC network will boost DApp developers' efficiency in serving a wider market.\n\nArchitecture\n1600\nArchitecture\n\nThe BTFS network is primarily composed of BTFS nodes, including renters and hosts. Renters can upload files by paying WBTT while hosts provide storage in the network for BTT rewards.\n\nOfficial Contract\nWe have added some smart contracts to enable node recommendation, payment, airdrops, among other features, mainly including:\n\nVault Contract\nOnlineProof Service\nStaking Contract\nProof-of-StorageContract\nAirdrop Contract\nPrice Contract\nYou can view the latest mainnet and testnet addresses of these contracts on BTFS Scan Official Contracts page","metadata":{"loc":{"lines":{"from":227,"to":249}}}}],["146",{"pageContent":"Below is the description of these contracts：\n\nVault Contract\nThis contract is designed for payment for the storage of uploaded files. Renters who have uploaded a file can pay for the storage service by sending a cheque of a specific sum to hosts via the vault, and hosts are allowed to withdraw the funds to their wallets.\n\nOnline Proof contract\nThe node will get online proof from the online signature service, and report it to online proof contract. This contract is designed to store the latest online proof data for each node.\n\nStaking Contract\nEvery storage node (host) in the BTFS network has to stake BTT. Files uploaded by renters will be sent to hosts, recommended based on their staking amount or staking rate, or in a random way, for storage.","metadata":{"loc":{"lines":{"from":251,"to":260}}}}],["147",{"pageContent":"Proof-of-Storage Contract\nThis contract is designed to prove hosts' continuous storage of contract files. Hosts, when starting to host files, are required to generate a proof of file storage periodically and submit it to the proof-of-storage contract, and are subject to punishment if they miss the deadline for submission.\n\nAirdrop Contract\nHosts will receive BTT airdrops from BTFS according to the size of files and the duration of their storage. The airdrop contract and proof-of-storage contract combined decide the amount of BTT to be airdropped.\n\nPrice Oracle Contract\nThis contract is designed for timely updating the storage prices in the whole network.\n\nBTFS Pricing","metadata":{"loc":{"lines":{"from":262,"to":271}}}}],["148",{"pageContent":"Price Oracle Contract\nThis contract is designed for timely updating the storage prices in the whole network.\n\nBTFS Pricing\n\n\nWBTT Price\nRenter Charge(WBTT)\tHost Reward (WBTT)\n125 WBTT （GB/Month）\t125 WBTT （GB/Month）\nOther Token Price\nAfter BTFS 2.3, multi-token (TRX, USDD_t, USDT_t) is supported to pay BTFS cheques, and the\nprice of other token will be converted to BTT based on the current exchange rate. The specific price can be queried in Price Oracle Contract\n\n\n\n📘\nNote: When uploading files, renters can set the number of redundant files (excluding original files) to --copy=num. For instance, if num equals 2, it means that three files have been uploaded with one original file and two redundant files.The pricing structure shown above is still under test and is subject to further changes. The team will work to introduce a more advanced pricing structure in the near future.\n\nInstall BTFS Node\ngithub address: https://github.com/bittorrent/go-btfs","metadata":{"loc":{"lines":{"from":271,"to":290}}}}],["149",{"pageContent":"Install BTFS Node\ngithub address: https://github.com/bittorrent/go-btfs\n\nSuggest Edits\nInstall BTFS 2.0\nSystem Requirements:\nBTFS can run on most Linux (recommend Ubuntu 18.04 or later), macOS, and Windows systems. We recommend running it on a machine with at least 2 GB of RAM (it’ll do fine with only one CPU core), but it should run fine with as little as 1 GB of RAM. On systems with less memory, it may not be completely stable. Only support compiling from source for mac and unix-based system.\n\nBuild from Source\nClone the go-btfs repository\n$ git clone https://github.com/bittorrent/go-btfs\n\nNavigate to the go-btfs directory and run make install.\n$ cd go-btfs\n$ make install\n$ make build\n\nAnother，if you want to download the btfs-binary-releases, you can visit https://github.com/bittorrent/go-btfs/releases to get it.","metadata":{"loc":{"lines":{"from":290,"to":307}}}}],["150",{"pageContent":"Another，if you want to download the btfs-binary-releases, you can visit https://github.com/bittorrent/go-btfs/releases to get it.\n\nRun BTFS\nInitialize a BTFS Daemon\nnavigate to the btfs directory cd cmd/btfs. You will start a mainnet miner by default, chain_id=199.\nif you want to deploy testnet node, you can see it. https://docs.btfs.io/docs/for-test\n\nShell\n\n$ ./btfs init\nGenerating TRON key with BIP39 seed phrase...\nMaster public key:  xpub661MyMwAqRbcGgHpeMqFkS5hnwoGeAcHG5KkDQwke7wFxtKqfsXTCTjWsoU2dYVXVGvV7EuGcviEzEJ143TezxxXvs2zZ9FYTtCei8iRQ66\ninitializing BTFS node at /home/ubuntu/.btfs\ngenerating btfs node keypair with TRON key...done\npeer identity: 16Uiu2HAmKFQPM72SssFRrqcH1qwUsPwcp7vXSg3SEzfdYua1J5qc\nto get started, enter:\n\n\tbtfs cat /btfs/QmZjrLVdUpqVU6Pnc8pBnyQxVdpn9J8tfcsycP84W6N93C/readme\nStart the Daemon\nStart the BTFS Daemon\n$ ./btfs daemon\n\nthe chainid of the main network is 199, and the start command becomes: btfs daemon\n\nShell","metadata":{"loc":{"lines":{"from":307,"to":331}}}}],["151",{"pageContent":"$ ./btfs daemon\nInitializing daemon...\ngo-btfs version: 2.0\nRepo version: 10\nSystem version: amd64/darwin\nGolang version: go1.16.5\nRepo location: /Users/btfs/.btfs\nPeer identity: 16Uiu2HAmKFQPM72SssFRrqcH1qwUsPwcp7vXSg3SEzfdYua1J5qc\nthe address of Bttc format is:  0x7Cf4B71017F0312037D53fe966CE625BF98FFff6\nthe address of Tron format is:  TMMuwwxsuQGrDrN3aanc5y5r4FbibgLYDa\ncannot continue until there is sufficient (100 Suggested) BTT (for Gas) available on 0x7cf4b71017f0312037d53fe966ce625bf98ffff6\nRun the Daemon","metadata":{"loc":{"lines":{"from":333,"to":344}}}}],["152",{"pageContent":"cannot continue until there is sufficient (100 Suggested) BTT (for Gas) available on 0x7cf4b71017f0312037d53fe966ce625bf98ffff6\nRun the Daemon\nWhen starting the BTFS daemon for the first time, the system will create a node account and at the same time print a string of messages: cannot continue until there is sufficient (100 Suggested) BTT (for Gas) available on. After seeing such a message, it is necessary to recharge the node account with BTT through an external account, and the system suggests a minimum of 100 BTT, which is used as gas to deploy a node vault contract by the node account. Please note that the BTT here is the BTT token on the BTTC chain.","metadata":{"loc":{"lines":{"from":344,"to":346}}}}],["153",{"pageContent":"To obtain a specific amount of BTT, you can refer to: How do I get BTT/WBTT on the BTTC Mainnet?\n\nAfter the recharge, the BTFS node will create the vault contract\n\nShell\n\ncannot continue until there is sufficient (100 Suggested) BTT (for Gas) available on 0x7cf4b71017f0312037d53fe966ce625bf98ffff6 \nself vault: 0x1f8b3e7e691d733f5eb17e5570c49de3e5aecef9 \nSwarm listening on /ip4/127.0.0.1/tcp/4001\nSwarm listening on /ip4/192.168.21.149/tcp/4001\nSwarm listening on /ip6/::1/tcp/4001\nSwarm listening on /p2p-circuit\nSwarm announcing /ip4/127.0.0.1/tcp/4001\nSwarm announcing /ip4/192.168.21.149/tcp/4001\nSwarm announcing /ip6/::1/tcp/4001\nAPI server listening on /ip4/127.0.0.1/tcp/5001\nDashboard: http://127.0.0.1:5001/dashboard\nGateway (readonly) server listening on /ip4/127.0.0.1/tcp/8080\nRemote API server listening on /ip4/127.0.0.1/tcp/5101\nDaemon is ready\nAt this point, the BTFS node is up and running\n\nNote:","metadata":{"loc":{"lines":{"from":348,"to":370}}}}],["154",{"pageContent":"Note:\n\nthe node address and private key need to be saved, and the private key needs to be kept private and secure.\nThe vault address needs to be saved, look for the self vault field in the print message, the address after it is the vault address. And you can get it from this cmd.\nShell\n\n$ ./btfs id\n{\n\t\"ID\": \"16Uiu2HAm8tjcJvxYYJL5LM5WSKnHC9REKVfArt8QJx1kZEXkw73E\",\n\t\"PublicKey\": \"CAISIQLIFrdEEl2TTQ9alLgK4ntBB/HL1qMxMsS+qgJnPZqueQ==\",\n\t\"Addresses\": null,\n\t\"AgentVersion\": \"go-btfs/2.1.0/\",\n\t\"ProtocolVersion\": \"btfs/0.1.0\",\n\t\"Protocols\": null,\n\t\"DaemonProcessID\": -1,\n\t\"TronAddress\": \"TJowu1DCPt24DYZBNL6HvVW9fPuoq6MQhx\",\n\t\"BttcAddress\": \"0x60F8c7a6ce00B94d80Aa51e315be1069940e6eFF\",\n\t\"VaultAddress\": \"0xFd3171a158D940955582339E7FF96B47F7592404\"\n}","metadata":{"loc":{"lines":{"from":370,"to":388}}}}],["155",{"pageContent":"BTFS Encrypted Storage Protocol\nSuggest Edits\nBackground\nIn some scenarios, users would like their files stored on BTFS to be \"private\" and visible to themselves or designated users only. So to store and send private files on the publicly-accessible BTFS, we have created an encrypted file storage protocol, which leverages the sophisticated and efficient hybrid encryption technology for encrypted file storage and sharing.\n\nStructure of Encrypted File\nEncrypted files are made up of three parts: HeaderLength, Header, and Payload.","metadata":{"loc":{"lines":{"from":390,"to":396}}}}],["156",{"pageContent":"Structure of Encrypted File\nEncrypted files are made up of three parts: HeaderLength, Header, and Payload.\n\n681\nHeaderLength: Length of the Header that follows the declaration (always 8 bytes); big-endian uint64.\nHeader: Header describes the way the file is encrypted; start from the 8th byte of the file.\nPayload: Content of the file, encrypted in the way described in the Header.\nStructure of Encrypted File Header\nThe Header is mainly used to declare the algorithm, secret, etc., used for file encryption. The recipient of a file decrypts the file content in the way declared in the Header.\n\nFormat: JSON\nStructure:\nJSON","metadata":{"loc":{"lines":{"from":396,"to":408}}}}],["157",{"pageContent":"{\n    \"version\": \"1.0\",\n    \"secret_encryption_algorithm\": \"RSA\",\n    \"secret\": \"<Secret>\",\n    \"encryption_algorithm\": \"AES\",\n    \"encoding\": \"gzip\",\n    \"public_info\": {}\n}\nField\tType\tDescription\nversion\tstring\tVersion of the protocol\nsecret_encryption_algorithm\tstring\tSecret encryption algorithm (asymmetric): The file publisher selects an asymmetric public key encryption algorithm to encrypt the symmetric secret of the file content using the public key provided by the file recipient; algorithm options include RSA, ECC, and DH\nsecret\tstring\tSecret: The secret for the file content, encrypted with asymmetric encryption; the file recipient can decrypt the secret using the corresponding private key, and then use the decrypted secret to decrypt the file content\nencryption_algorithm\tstring\tContent encryption algorithm: The file publisher selects a symmetric encryption protocol and encrypt file content using the original secret; algorithm options include AES, DES, and RC4","metadata":{"loc":{"lines":{"from":410,"to":422}}}}],["158",{"pageContent":"encoding\tstring\tContent encoding: Encoding format of the decrypted content; gzip is recommended\npublic_info\tstring\tPublic information: Publicly-available information customized by the file publisher\nEncrypted File Extension","metadata":{"loc":{"lines":{"from":423,"to":425}}}}],["159",{"pageContent":".bte\nEncryption\n811\nPack and compress the original file or directory; TAR & GZIP are recommended (this step can be skipped)\nGenerate a random string as the original secret; the string length is recommended to be at least 16 characters\nUse the original secret to encrypt the packed file with symmetric encryption; AES is recommended\nUse the decryptor's public key to encrypt the original secret with asymmetric encryption; RSA is recommended\nGenerate JSON data of the Header, and write the protocol version, the above algorithms, and the secret to the data\nCalculate the HeaderLength\nWrite the Header and HeaderLength into the front of the encrypted file's content, and save the file as xxx.bte\nUpload the encrypted file to BTFS to get a CID\nShare the CID with the recipient\nPseudocode sample:\nText","metadata":{"loc":{"lines":{"from":427,"to":440}}}}],["160",{"pageContent":"filesContent = ReadDir(dirPath)\npayload = GZIP(TAR(filesContent))\nkey = RANDOM()\nencryptPayload = EncryptByAES(payload, key)\nencryptKey = EncryptByRSA(key, publicKey)\nheader = JSON(\n\t{\n\t\tversion: 1.0, \n\t\tsecret_encryption_algorithm: \"RSA\", \n\t\tsecret: $encryptKey, \n\t\tencryption_algorithm: \"AES\", \n\t\tencoding: \"tar/gzip\", \n\t\tpublic_info: {}\n\t}\n)\nheaderLen = Len(header)\ncontent = headerLen + header + encryptPayload\ncid = UploadToBTFS(\"demo.bte\", content)\nDecryption\n621\nDownload the encrypted file from BTFS with the specified CID\nRead 8 bytes from the file content and convert them to int64 to get the HeaderLength\nContinue to read bytes, the number of which equals the HeaderLength, from the file content to get the Header content\nParse the Header based on its protocol structure to get the encrypted version of the file, secret, secret encryption algorithm, and content encryption algorithm\nVerify the protocol version","metadata":{"loc":{"lines":{"from":442,"to":466}}}}],["161",{"pageContent":"Parse the Header based on its protocol structure to get the encrypted version of the file, secret, secret encryption algorithm, and content encryption algorithm\nVerify the protocol version\nDecrypt the secret with the private key and the secret encryption algorithm specified in the Header to get the file secret\nDecrypt the rest of the file content with the file secret and the content encryption algorithm specified in the Header to get the original packed file\nUnpack the file according to the protocol specified in the Header to get the original file\nPseudocode sample:\nText","metadata":{"loc":{"lines":{"from":466,"to":472}}}}],["162",{"pageContent":"content = DownloadFromBTFS(cid)\nheaderLen = int64(content[:8])\nheader = JSON(content[8:8+headerLen])\nencryptPayload = content[8+headerLen:]\nencryptKey = header.secret\nkey = DecryptByRSA(encryptKey, privateKey)\npayload = DecryptByAES(encryptPayload, key)\nfilesContent = UNTAR(UNGZIP(payload))\nWriteDir(dirPath, filesContent)\nImplementation Notes\n\"version\" in the Header is a fixed field; the position and type of this field should be the same in any version of the Header\nHeader structures vary with the versions of encryption protocols; the encryptor should inform the recipient of the structure in time\nAn encrypted file only has one recipient; to share a file with multiple recipients, the encryptor has to generate an encrypted file individually\nThe recipient always needs an asymmetric public/private key pair, and the public key should be passed to the encryptor (any way is allowed)","metadata":{"loc":{"lines":{"from":474,"to":487}}}}],["163",{"pageContent":"The recipient always needs an asymmetric public/private key pair, and the public key should be passed to the encryptor (any way is allowed)\nThe encryptor must use a reliable encryption algorithm and provide the same recipient with a random, new secret each time\nThe encryptor can write public information into the Header\nThe encryptor and the recipient can be the same person; in this case, BTFS functions as an encrypted file storage network","metadata":{"loc":{"lines":{"from":487,"to":490}}}}],["164",{"pageContent":"Bittorrent Command\nSuggest Edits\n1200\nBTFS 2.3 adds a new command/API to downloads the files of a specific bittorrent seed or a magnet URI scheme based on BTIP-1\n\nOverview\nBTFS integrated with the Bittorrent libs to serve as a Bittorrent client, and communicate with the tracker, DHT, webseed or Bittorrent peers, and then downloads the content, after downloading completed, stop the communications with those p2p.\n\nCommand\n1.download a bittorrent file\nShell\n\nbtfs bittorrent download -t torrent-file.torrent\n2.download a magnet url\nShell\n\nbtfs bittorrent download 'magnet:?xt=urn:btih:KRWPCX3SJUM4IMM4YF5RPHL6ANPYTQPU'\n3.show metainfo for the specified bittorrent file\nShell\n\nbtfs bittorrent metainfo -t xxx.torrent\n4.show metainfo for the specified magnet URL\nShell\n\nbtfs bittorrent metainfo -m 'magnet:?xt=urn:btih:KRWPCX3SJUM4IMM4YF5RPHL6ANPYTQPU'\n5.fetch swarm metrics for info-hashes from tracker\nShell","metadata":{"loc":{"lines":{"from":492,"to":518}}}}],["165",{"pageContent":"btfs bittorrent metainfo -m 'magnet:?xt=urn:btih:KRWPCX3SJUM4IMM4YF5RPHL6ANPYTQPU'\n5.fetch swarm metrics for info-hashes from tracker\nShell\n\n# -t tracker url, -i pieces of info-hashes which separated by commas\nbtfs bittorrent scrape -t '' -i ''\n6.transfer the bencoded data to the person-readable json (according to BEP-3)\nShell\n\nbtfs bittorrent bencode -f xxx.torrent\n7.serve as a bittorrent client with the specified files\nShell\n\n# -f files which you want to share with the bittorrent network,separated by commas\nbtfs bittorrent serve -f 'xxx.mp4,xxx.jpeg'\n📘\nNOTE:\n\n\nThis command will start a daemon to serve as a client and output the magnet url every file you tap in.\n\nRationale\nBTFS is dirrent from BitTorrent but they have something same such as they are all distributed network and decentralized.When we integrate with bittorrent, we consider the following steps:","metadata":{"loc":{"lines":{"from":518,"to":540}}}}],["166",{"pageContent":"Rationale\nBTFS is dirrent from BitTorrent but they have something same such as they are all distributed network and decentralized.When we integrate with bittorrent, we consider the following steps:\n\nParsing the magnetic links to bittorrent metadata if the target is a magnet url.\nParsing the bittorrent file to bittorrent metadata if the target is a bittorrent seed file.\nJudge by the bittorrent metadata and choose how to get peers by tracker/dht/webseed/peer.\nSplit the bittorrent metadata into a list of pieces and download all this pieces independently from the peers.\nWe can see the process of downloading in the console.\nWhen downloading is finished, add this file to the local BTFS node by\nShell\n\nbtfs add file\nMaybe we can add a more user-interactive friendly dashboard to view this process.","metadata":{"loc":{"lines":{"from":540,"to":552}}}}],["167",{"pageContent":"btfs add file\nMaybe we can add a more user-interactive friendly dashboard to view this process.\n\n\nWS S3-Compatible API service on BTFS protocol\nSuggest Edits\nAWS S3 is widely adopted as a second-generation centralized cloud storage solution, allowing multitudinous applications to access it through its API protocol or SDKs. In contrast, BTFS as a third-generation decentralized storage protocol has yet to gain popularity, which means developers must redesign and develop their applications to be compatible with BTFS's API protocol. However, with a set of AWS S3-compatible API services from BTFS, it would be far easier for applications to be connected to BTFS or use it as an optional transparent storage layer.\n\nAdd configuration and start command options\nIn the configuration file, you can now find a new section called S3CompatibleAPI which includes three options:","metadata":{"loc":{"lines":{"from":552,"to":561}}}}],["168",{"pageContent":"Add configuration and start command options\nIn the configuration file, you can now find a new section called S3CompatibleAPI which includes three options:\n\nEnable: This option determines whether to enable the S3-compatible API. Please note that its priority is lower than the daemon start command option.\nAddress: Use this option to configure the service address for the S3-compatible API. Keep in mind that it can be accessed externally when the address is non-local.\nHTTPHeaders: Use this option to configure the response headers for the S3-compatible API service. It can also be used to set up cross-domain rules.\nJSON","metadata":{"loc":{"lines":{"from":561,"to":567}}}}],["169",{"pageContent":"{\n     ...\n     \"S3CompatibleAPI\": {\n       \"Enable\": false,\n       \"Address\": \"127.0.0.1:6001\",\n       \"HTTPHeaders\": null\n     },\n     ...\n   }\nAdditionally, we have introduced a new bool-type option 's3-compatible-api' in the start command. This option allows you to enable or disable the S3API service. Set it to 'true' to start the service or 'false' to prevent it from starting. By default, it is not set, meaning that the value will be determined by the 'EnableS3API' field in the configuration file.\n\nshell\n\n  # enable the s3-compatible-api server\n  btfs daemon --s3-compatible-api\n  btfs daemon --s3-compatible-api=true\n  \n  # disable the s3-compatible-api server\n  btfs daemon --se-compatible-api=false\n  \n  # enable or disable s3-compatible-api server according to the S3CompatibleAPI.Enable field in the configuration file.\n  btfs daemon\nAccess Keys related commands.\nAccess Keys APIs are here.","metadata":{"loc":{"lines":{"from":569,"to":592}}}}],["170",{"pageContent":"Authentication\nThe BTFS S3-compatible API only supports AWS v4 signatures (AWS4-HMAC-SHA256) for authentication and does not support AWS v2 signatures at this time.","metadata":{"loc":{"lines":{"from":594,"to":595}}}}],["171",{"pageContent":"Access Control Lists (ACLs)\nThe BTFS S3-compatible API provides limited support for access control lists (ACLs), with no current support for object-level ACLs.\nThe methods GetObjectAcl and GetBucketAcl will work as expected, but GetObjectAcl will return the ACL of the bucket it is in.\nA bucket's owner is the access key used to create the bucket (access keys cannot be changed at present), and only the owner can change the ACL of a bucket or delete the bucket.\nSupported predefined ACLs include private, public-read, and public-read-write; see AWS ACL for detailed definitions; permissions, by default, are set to public-read.\nprivate: only the bucket owner can upload, delete, and read objects in the bucket, as well as read the list of the objects inside the bucket.\npublic-read: only the bucket owner can upload and delete objects in the bucket; however, public users, including anonymous ones, can read objects and the list of the objects inside the bucket.","metadata":{"loc":{"lines":{"from":597,"to":603}}}}],["172",{"pageContent":"public-read: only the bucket owner can upload and delete objects in the bucket; however, public users, including anonymous ones, can read objects and the list of the objects inside the bucket.\npublic-read-write: public users, including anonymous ones, can upload, delete, and read objects in the bucket, as well as read the list of the objects inside the bucket.\nSupported API methods\n1. Supported Bucket Calls:\nCreateBuket\nHeadBucket\nListBuckets\nDeleteBucket\nPutBucketAcl\nGetBucketAcl\n2. Supported Object Calls:\nListObjects\nListObjectsV2\nHeadObject\nPutObject\nCopyObject\nDeleteObject\nDeleteObjects\nGetObjectAcl\n3. Supported Multipart Calls:\nCreateMultipartUpload\nAbortMultipartUpload\nCompleteMultipartUpload\nUploadPart\nFor more information on s3api, see here.","metadata":{"loc":{"lines":{"from":603,"to":627}}}}],["173",{"pageContent":"Methods for obtaining BTFS Hash\nYou can get btfs hash from object metadata and response header.\n\nObject metadata key:\nShell\n\n{\n   \"Metadata\": {\n      \"Cid\": \"<BTFS cid>\"\n   }\n}\nResponse header\n\nCid=<BTFS Cid>","metadata":{"loc":{"lines":{"from":629,"to":642}}}}],["174",{"pageContent":"I \n​\nBitTorrent (BTT) White Paper\n \n   \n​\nv0.8.7\n \n    Feb. 2019\n \n \n \n \n \n \nBITTORRENT FOUNDATION 2019 v0.8.7 WORKING DRAFT - SUBJECT TO CHANGE                                                          1","metadata":{"loc":{"lines":{"from":1,"to":16}}}}],["175",{"pageContent":"Abstract\n \nThe\nBitTorrent\nprotocol,\ncreated\nby\nBitTorrent\nInc.,\nfacilitates\nthe\nexchange\nof\nfiles\nbetween\n \n \n \n \n \n \n \n \n \n \n \n \n \nuntrusted\nparties.\nIts\nprimary\nlimitation\nis\nthat\ncollaborations\nbetween\nparties\nusing\nthe\nprotocol\n \n \n \n \n \n \n \n \n \n \n \n \n \ncannot\npersist\nover\ntime,\ninhibiting\nthe\nexchange.\nBlockchain\ntechnologies\nallow\nfor\n \n \n \n \n \n \n \n \n \n \n \ncollaborations\nbetween\nuntrusted\nparties\nto\npersist\nover\nmuch\nlonger\nperiods\nof\ntime.\nBitTorrent\n \n \n \n \n \n \n \n \n \n \n \n \n \nhas\nthe\necosystem\nand\nexpertise\nnecessary\nto\nintegrate\nblockchain\ntechnologies\ninto\nthe\n \n \n \n \n \n \n \n \n \n \n \n \nBitTorrent\nprotocol.\nDoing\nso\nwould\nboth\neliminate\nthe\nprotocol’s\nexisting\nflaw\nas\nwell\nas\nopen\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nup a new borderless economy in exchanging value for computing resources on a global scale.\n \nTo\naccomplish\nthis,\nTRON\nFoundation\nand\nBitTorrent\nFoundation\nare\nintroducing\na\nnew\n \n \n \n \n \n \n \n \n \n \n \n \ncryptographic\ntoken,\ncalled\nBTT,\nalong\nwith\nan\nextended\nversion\nof","metadata":{"loc":{"lines":{"from":21,"to":212}}}}],["176",{"pageContent":"To\naccomplish\nthis,\nTRON\nFoundation\nand\nBitTorrent\nFoundation\nare\nintroducing\na\nnew\n \n \n \n \n \n \n \n \n \n \n \n \ncryptographic\ntoken,\ncalled\nBTT,\nalong\nwith\nan\nextended\nversion\nof\nthe\nBitTorrent\nprotocol.\n \n \n \n \n \n \n \n \n \n \n \n \n \nTogether,\nthe\ntoken\nand\nextended\nprotocol\nwill\ncreate\na\ntoken-based\neconomy\nfor\nnetworking,\n \n \n \n \n \n \n \n \n \n \n \n \n \nbandwidth\nand\nstorage\nusage.\nThe\ninitial\nentry\npoint\nis\nto\nintroduce\ntoken-based\noptimizations\n \n \n \n \n \n \n \n \n \n \n \n \n \nto\nthe\nexisting\nBitTorrent\nprotocol,\nproviding\na\nway\nfor\nthe\nvalue\nof\nshared\nbandwidth\nto\nbe\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \ncaptured\nby\nnetwork\nparticipants.\nThe\nlonger-term\nvision\nis\nto\nbroaden\nthe\nusage\nof\nthe\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nBitTorrent\nprotocol\nfar\nbeyond\ncurrent\nuse\ncases\nby\nproviding\na\ndistributed\ninfrastructure\n \n \n \n \n \n \n \n \n \n \n \n \nplatform to third-party app developers, creating the foundation for the decentralized web.\n \n \nThe\nTRON\nFoundation\nand\nBitTorrent\nFoundation\nare\nlegal\nentities\nincorporated\nin","metadata":{"loc":{"lines":{"from":212,"to":411}}}}],["177",{"pageContent":"platform to third-party app developers, creating the foundation for the decentralized web.\n \n \nThe\nTRON\nFoundation\nand\nBitTorrent\nFoundation\nare\nlegal\nentities\nincorporated\nin\nthe\nRepublic\n \n \n \n \n \n \n \n \n \n \n \n \n \nof Singapore.\n \n \n \n \n \n \nBITTORRENT FOUNDATION 2019 v0.8.7 WORKING DRAFT - SUBJECT TO CHANGE                                                          2","metadata":{"loc":{"lines":{"from":411,"to":447}}}}],["178",{"pageContent":"Abstract\n2\n \nBitTorrent Background\n4\n \nThe BitTorrent Protocol\n4\n \nThe BitTorrent Ecosystem\n4\n \nThe BitTorrent Company\n5\n \nBitTorrent and Distributed Applications\n5\n \nBitTorrent Expansion\n6\n \nProject Overview\n6\n \nBitTorrent Tokens (BTT) and the Blockchain\n7\n \nIntroduction to BitTorrent SpeedTM\n7\n \nBitTorrent Speed and BTT Operations\n8\n \nService Discovery\n9\n \nInitial Balance\n9\n \nBidding Rounds\n9\n \nBidding User Interface\n9\n \nAutomatic Bidding\n9\n \nMatchmaking\n10\n \nTransaction Processing\n11\n \nBidding Revisions and Frequency\n12\n \nGeneralized BTT Services\n13\n \nBTT Incentives\n14\n \nImplementation Considerations\n15\n \nBlockchain\n15\n \nUser Controls\n15\n \nInitial Disbursement\n16\n \nBitTorrent Wallets\n16\n \nUse Case Diversification\n16\n \nIdentity\n17\n \nBTT Token Issuance\n17\n \nConclusion\n18\n \nFAQ\n19\n \nReferences\n21\n \n \nBITTORRENT FOUNDATION 2019 v0.8.7 WORKING DRAFT - SUBJECT TO CHANGE                                                          3","metadata":{"loc":{"lines":{"from":452,"to":549}}}}],["179",{"pageContent":"BitTorrent Background\n \nThe BitTorrent Protocol\n \nBitTorrent\nis\na\npioneering\ndistributed\ncommunication\nprotocol\ninvented\nby\nBram\nCohen\nin\n2001.\n \n \n \n \n \n \n \n \n \n \n \n \n \nAs\na\npeer-to-peer\nprotocol,\nit\nfacilitates\nthe\ntransfer\nof\nlarge,\nhighly\ndemanded\nfiles,\neliminating\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nthe need for a trusted central server.\n \n \nThe\nBitTorrent\nprotocol\nenables\nclient\nsoftware\nendpoints\n(“clients”)\nto\ncollaborate\nwith\neach\n \n \n \n \n \n \n \n \n \n \n \n \nother\nto\nenable\nreliable\nsimultaneous\ndistribution\nof\nlarge\nfiles\nto\nmultiple\nclients,\nreducing\n \n \n \n \n \n \n \n \n \n \n \n \n \nreliance\non\nany\nsingle\nweak\npoint\n(such\nas\na\nserver\nconnection).\nIt\ndoes\nthis\nby\nattempting\nto\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nmake\nefficient\nuse\nof\nevery\nclient’s\nupload\nand\ndownload\nbandwidth\nto\nbalance\npeer-to-peer\n \n \n \n \n \n \n \n \n \n \n \n \n \ncontent delivery across all clients.\n \n \nTo\nfind\na\npeer\nthat\nhas\na\nfile\nor\nportion\nthereof,\npeers\neither\n“announce”\nto\na\ntracker,\na\nserver","metadata":{"loc":{"lines":{"from":554,"to":746}}}}],["180",{"pageContent":"content delivery across all clients.\n \n \nTo\nfind\na\npeer\nthat\nhas\na\nfile\nor\nportion\nthereof,\npeers\neither\n“announce”\nto\na\ntracker,\na\nserver\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nthat\nkeeps\ntrack\nof\nwhich\npeers\nhave\nwhich\nfiles\navailable,\nor\nfind\nthem\nvia\nthe\nDHT,\na\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \ndistributed\ndatabase\nof\npeers.\nThrough\nthis\nprocess,\nall\npeers\nare\nnaturally\nsegmented\ninto\n \n \n \n \n \n \n \n \n \n \n \n \n \n“swarms”\nof\nusers,\nwith\nevery\nuser\nin\neach\nswarm\nhaving\na\ncommon\ninterest\nin\nexchanging\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \npieces of a specific file.\n \nBefore\nan\nexchange\nbegins,\nfiles\nare\ncut\ninto\npieces.\nClients\nadvertise\nwhich\npieces\nof\na\nfile\ntheir\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nuser\nhas\navailable,\nand\nthose\npieces\nare\nuploaded\nby\nusers\nwho\nhave\nthem\nand\ndownloaded\nby\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nusers\nwho\nneed\nthem.\nCryptographic\nhashes,\nor\n“info\nhashes,”\nof\nthe\npieces\nare\nused\nto\nverify","metadata":{"loc":{"lines":{"from":746,"to":960}}}}],["181",{"pageContent":"by\nusers\nwho\nhave\nthem\nand\ndownloaded\nby\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nusers\nwho\nneed\nthem.\nCryptographic\nhashes,\nor\n“info\nhashes,”\nof\nthe\npieces\nare\nused\nto\nverify\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nthat the pieces being shared are the pieces that were requested.\n \n \nThe\nmore\npieces\na\npeer\nreceives\nfrom\nanother\npeer\nin\nexchange\nfor\npieces\nsent,\nthe\nmore\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nproductive\na\npeer-to-peer\ninteraction\nis\nconsidered\nto\nbe.\nThe\nmost\nproductive\npiece\nexchanges\n \n \n \n \n \n \n \n \n \n \n \n \n \nare\nrewarded\nwith\nfurther\npieces,\nand\nthe\nclients\nwith\nthe\nleast\nproductive\nexchanges\nare\n \n \n \n \n \n \n \n \n \n \n \n \n \n \ndeprecated, disconnected or banned.\n \n \nOnce\na\nuser\nhas\ncompleted\na\ndownload,\nthey\nmay\nallow\ntheir\nclient\nto\ncontinue\nto\nupload\npieces\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \ndespite\nno\nlonger\nneeding\nany\ndownload\nin\nreturn;\nthis\nis\ncalled\n“seeding.”\nThe\ndefault\nfor\nmost\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nclients\nis\nto\n“seed”\nto\nother\ndownloaders.\nThis\nactivity,\nhowever,\nis","metadata":{"loc":{"lines":{"from":960,"to":1184}}}}],["182",{"pageContent":"despite\nno\nlonger\nneeding\nany\ndownload\nin\nreturn;\nthis\nis\ncalled\n“seeding.”\nThe\ndefault\nfor\nmost\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nclients\nis\nto\n“seed”\nto\nother\ndownloaders.\nThis\nactivity,\nhowever,\nis\nentirely\naltruistic.\nThere\nis\nno\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \neconomic penalty for users closing their BitTorrent client once a download has finished.\n \n \nThe BitTorrent Ecosystem\n \nBitTorrent\nInc.,\nwhich\nmaintains\nthe\nBitTorrent\nprotocol,\nalso\ncreated\ntwo\nof\nthe\nmost\npopular\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nBitTorrent\nclients\n:\nBitTorrent\nand\nμTorrent\n(“uTorrent”).\nThe\nopen\nprotocol\nhas\nalso\nbeen\nused\n \n \n \n \n \n \n \n \n \n \n \n \n \n1\nto\ncreate\ndozens\nof\nindependent\nclients,\nand\nthere\nis\nhealthy\ncompetition\namong\nthe\ncompanies\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nand volunteers that maintain those clients.\n \n \n1\n \n​\nWikipedia contributors. \"Comparison of BitTorrent clients.\" ​\nWikipedia, The Free Encyclopedia,\n \nhttps://en.wikipedia.org/w/index.php?title=Comparison_of_BitTorrent_clients&oldid=864318824.","metadata":{"loc":{"lines":{"from":1184,"to":1346}}}}],["183",{"pageContent":"1\n \n​\nWikipedia contributors. \"Comparison of BitTorrent clients.\" ​\nWikipedia, The Free Encyclopedia,\n \nhttps://en.wikipedia.org/w/index.php?title=Comparison_of_BitTorrent_clients&oldid=864318824.\n \nAccessed January 17, 2019.\n \n \nBITTORRENT FOUNDATION 2019 v0.8.7 WORKING DRAFT - SUBJECT TO CHANGE                                                          4","metadata":{"loc":{"lines":{"from":1346,"to":1357}}}}],["184",{"pageContent":"Independent\nBitTorrent\ninfrastructure\nproviders\noffer\nadditional\nservices,\nsuch\nas\ntrackers\nthat\n \n \n \n \n \n \n \n \n \n \n \nintroduce\npeers,\nand\ntorrent\nsites\nthat\nindex\nfile\nmetadata\nand\nprovide\naccess\nto\ntheir\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nassociated torrents.\n \n \nThe BitTorrent Company\n \nWith\nover\n1\nbillion\nusers,\nthe\nBitTorrent\nprotocol\nis\nthe\nworld’s\nlargest\ndecentralized\nprotocol.\nIts\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nnumber\nof\nusers\nfar\nsurpasses\nBitcoin,\nthe\nsecond-largest\ndecentralized\napplication\n(as\nof\n \n \n \n \n \n \n \n \n \n \n \n \nJanuary 11, 2018, Bitcoin had a total of 32.3 million addresses\n).\n \n \n2\nIn\nthe\nlast\n18\nyears,\nBitTorrent\nclients\nhave\nbeen\ndownloaded\nand\ninstalled\nbillions\nof\ntimes.\nThe\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \ntwo\nclients\ncreated\nand\nmaintained\nby\nBitTorrent\nInc.\nare\nin\nuse\ntoday\nby\nmore\nthan\n100\nmillion\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nmonthly\nactive\nusers\naround\nthe\nworld,\nwith\naround\none\nmillion\nnew\nsoftware\ninstalls\nevery\nday.\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nOver","metadata":{"loc":{"lines":{"from":1362,"to":1572}}}}],["185",{"pageContent":"use\ntoday\nby\nmore\nthan\n100\nmillion\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nmonthly\nactive\nusers\naround\nthe\nworld,\nwith\naround\none\nmillion\nnew\nsoftware\ninstalls\nevery\nday.\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nOver\n160\ncountries\nhave\nmore\nthan\n10,000\nBitTorrent\nprotocol\nusers,\nand\n23\ncountries\nhave\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nmore\nthan\n1\nmillion\nprotocol\nusers.\nBitTorrent\nInc.\nclients\naccount\nfor\nan\nestimated\n40%\nof\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nBitTorrent protocol activity on the public internet.\n \n3\nIn\n2018,\nBitTorrent\nformed\na\nstrategic\npartnership\nwith\nTRON.\nTRON\nis\na\nblockchain\nplatform\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nthat\nwas\ncreated\nto\nprovide\nthe\nfoundation\nfor\ndecentralized\napplications.\nThe\ncollaboration\n \n \n \n \n \n \n \n \n \n \n \n \nbetween\nBitTorrent\nand\nTRON\nmakes\nthe\nTRON\nblockchain\nprotocol\nthe\nworld’s\nlargest\n \n \n \n \n \n \n \n \n \n \n \n \ndecentralized\necosystem,\nand\nthe\nBitTorrent\nprotocol\nthe\nlargest\ndecentralized\napplication\nin\nthe\n \n \n \n \n \n \n \n \n \n \n \n \nworld.","metadata":{"loc":{"lines":{"from":1572,"to":1787}}}}],["186",{"pageContent":"blockchain\nprotocol\nthe\nworld’s\nlargest\n \n \n \n \n \n \n \n \n \n \n \n \ndecentralized\necosystem,\nand\nthe\nBitTorrent\nprotocol\nthe\nlargest\ndecentralized\napplication\nin\nthe\n \n \n \n \n \n \n \n \n \n \n \n \nworld.\n \n \nBitTorrent and Distributed Applications\n \nFor\nmore\nthan\na\ndecade,\nBitTorrent\nInc.\nhas\nbeen\nexploring\ndistributed\napplications.\nWe\nhave\n \n \n \n \n \n \n \n \n \n \n \n \n \n \ninvestigated\nboth\nadaptations\nof\nthe\nBitTorrent\nprotocol\nas\nwell\nas\nthe\ncreation\nof\nentirely\nnovel\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nprotocols\nwith\nthe\naim\nof\nproviding\nservices\nincluding\ndistributed\nmessaging,\nBitTorrent-based\n \n \n \n \n \n \n \n \n \n \n \nCDN,\npeer-to-peer\nlive\nvideo\nstreaming\nand\nfile\nsynchronization,\nand\ndistributed\nwebsite\nhosting.\n \n \n \n \n \n \n \n \n \n \n \n \nThe\nrecent\nemergence\nof\nblockchain\ntechnologies\nhas\nshifted\nthe\nparadigm\nof\nwhat\nis\n \n \n \n \n \n \n \n \n \n \n \n \n \nachievable.\n \n \nWhile\nmany\nnew\ndecentralized\nprotocol\nproposals\nsuggest\nambitious\ntechnical\npaths\nforward,\n \n \n \n \n \n \n \n \n \n \n \nalmost\nall\nare\nsilent\non\nhow\nto","metadata":{"loc":{"lines":{"from":1787,"to":1994}}}}],["187",{"pageContent":"of\nwhat\nis\n \n \n \n \n \n \n \n \n \n \n \n \n \nachievable.\n \n \nWhile\nmany\nnew\ndecentralized\nprotocol\nproposals\nsuggest\nambitious\ntechnical\npaths\nforward,\n \n \n \n \n \n \n \n \n \n \n \nalmost\nall\nare\nsilent\non\nhow\nto\nconfront\nthe\nenormous\nchallenge\nof\nbuilding\ncritical\nmass,\nwhich\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nis\nthe\ntechnical\ncrux\nof\ndistributed\nsystems.\nSome\nprojects\nare\naddressing\nthis\nchallenge\nby\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nintroducing\na\ncryptographic\ntoken\nto\nexisting\nuser\nbases.\nHowever,\nthese\nprojects\nlack\nthe\n \n \n \n \n \n \n \n \n \n \n \n \n \nexperience\nBitTorrent\nhas\nin\ndesigning\na\nprotocol\nwhich\nbalances\ndiverse\neconomic\ninterests\n \n \n \n \n \n \n \n \n \n \n \n \neffectively and at scale.\n \n \nThe\nBitTorrent\necosystem\nhas\nthe\ncritical\nmass\nand\nBitTorrent\nInc.\nhas\nthe\nprotocol\nengineering\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nexpertise\nnecessary\nto\ntake\nadvantage\nof\nthe\npossibilities\nintroduced\nby\nthe\nblockchain.\nBy\n \n \n \n \n \n \n \n \n \n \n \n \n \nintegrating\nblockchain\ntechnologies\ninto\nthe\nBitTorrent\necosystem,\nwe\ncan","metadata":{"loc":{"lines":{"from":1994,"to":2210}}}}],["188",{"pageContent":"expertise\nnecessary\nto\ntake\nadvantage\nof\nthe\npossibilities\nintroduced\nby\nthe\nblockchain.\nBy\n \n \n \n \n \n \n \n \n \n \n \n \n \nintegrating\nblockchain\ntechnologies\ninto\nthe\nBitTorrent\necosystem,\nwe\ncan\nenable\ndevelopers\nto\n \n \n \n \n \n \n \n \n \n \n \n \n2\n \"Blockchain Wallet Users.\" Blockchain.com. Accessed January 17, 2019.\n \nhttps://www.blockchain.com/charts/my-wallet-n-users.\n \n \n3\n BitTorrent Inc. internal market share research.\n \n \nBITTORRENT FOUNDATION 2019 v0.8.7 WORKING DRAFT - SUBJECT TO CHANGE                                                          5","metadata":{"loc":{"lines":{"from":2210,"to":2270}}}}],["189",{"pageContent":"create\nnew,\ndecentralized\napplications\non\ntop\nof\nour\nexisting\necosystem.\nTherefore,\nwe\nbelieve\n \n \n \n \n \n \n \n \n \n \n \n \n \nthat\nBitTorrent\nis\nthe\nbest-equipped\nentity\nto\ncreate\nthe\ninfrastructure\nof\nthe\nimminent\n \n \n \n \n \n \n \n \n \n \n \n \n \ndecentralized web.\n \nBitTorrent Expansion\n \nAs we examined how BitTorrent’s expertise and ecosystem could be used to realize the\n \npotential of blockchain technologies, we identified three key insights::\n \n1.\nInternet users are reluctant to pay for digital goods and services online with fiat\n \ncurrency. Instead, they pay with their attention.\n \n \n2.\nThe BitTorrent protocol suffers from structural inefficiencies that limit the lifespan of\n \nswarms and thus limit its overall efficacy as a protocol.\n \n3.\nThere is a large untapped market for the application of BitTorrent technology to new use\n \ncases\n \nProject Overview\n \nTo\nexecute\non\nthe\nsynthesization\nof\nthese\ninsights,\nwe\nwill\ncreate\na\nplatform\nfor\nbuilding\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nelements\nof","metadata":{"loc":{"lines":{"from":2275,"to":2384}}}}],["190",{"pageContent":"cases\n \nProject Overview\n \nTo\nexecute\non\nthe\nsynthesization\nof\nthese\ninsights,\nwe\nwill\ncreate\na\nplatform\nfor\nbuilding\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nelements\nof\nthe\ndecentralized\nweb,\nenabling\napp\ndevelopers\nto\ndirectly\nreward\nconsumers\nwho\n \n \n \n \n \n \n \n \n \n \n \n \n \nprovide\nits\nunderlying\nresources\nand\nenabling\nconsumers\nto\nuse\nthis\n“found\nvalue”\nto\ntransact\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nwith publishers and app developers without fiat currency.\n \n \nIn\norder\nto\nimplement\na\ndistributed\ninfrastructure\nservices\neconomy,\nwe\nwill\nextend\nthe\n \n \n \n \n \n \n \n \n \n \n \n \n \nBitTorrent\nprotocol\nand\nintroduce\na\nnew\ntoken,\nBTT.\nWithin\nthe\nBTT\neconomy,\nend\nusers\nmay\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \noffer\ninfrastructure\nservices\nin\nsmall\nincrements\nin\nreturn\nfor\ntokens.\nA\nblockchain\nsolution\nwill\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nprovide a store of value and medium of exchange that will scale to meet expected demand.\n \nWe\nwill\naccelerate\nintroduction\nof\nthe\nplatform\nby\neliminating\ncurrent\nBitTorrent\nprotocol","metadata":{"loc":{"lines":{"from":2384,"to":2572}}}}],["191",{"pageContent":"provide a store of value and medium of exchange that will scale to meet expected demand.\n \nWe\nwill\naccelerate\nintroduction\nof\nthe\nplatform\nby\neliminating\ncurrent\nBitTorrent\nprotocol\n \n \n \n \n \n \n \n \n \n \n \n \ninefficiencies\nwith\nthe\nlaunch\nof\nBitTorrent\nSpeed.\nThis\nwill\nprovide\na\nstrong\nattraction\nfor\nthe\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nfoundational\ntechnology\nas\nwell\nas\nbroad\nfamiliarity\nof\nthe\nexistence,\nuser\nexperience\nand\n \n \n \n \n \n \n \n \n \n \n \n \n \neconomics\nof\nthe\ntoken.\nThe\nintroduction\nof\nSpeed\nwill\nalso\nprove\nthe\neffectiveness\nof\nusing\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nblockchain-based\nrewards\nfor\nthe\nprovision\nof\ninfrastructure\nservices\nin\nsmall\nincrements\n \n \n \n \n \n \n \n \n \n \n \nacross a large installed base.\n \n \nIn\nparallel,\nwe\nwill\nwork\nwith\nthird-party\ndevelopers\nto\ncreate\nand\npromote\nAPIs\nand\na\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nmarketplace\nfor\ndistributed\ninfrastructure\nservices\nbased\nbroadly\non\nnetworking\nand\nstorage\n \n \n \n \n \n \n \n \n \n \n \nprimitives,\nwhich\nare","metadata":{"loc":{"lines":{"from":2572,"to":2763}}}}],["192",{"pageContent":"to\ncreate\nand\npromote\nAPIs\nand\na\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nmarketplace\nfor\ndistributed\ninfrastructure\nservices\nbased\nbroadly\non\nnetworking\nand\nstorage\n \n \n \n \n \n \n \n \n \n \n \nprimitives,\nwhich\nare\nunderpinnings\nof\nthe\nexisting\nBitTorrent\ntechnology.\nWe\nwill\nalso\nwork\nwith\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nthird-party\npublishers\nand\napp\ndevelopers\nbeyond\nthe\nexisting\nBitTorrent\necosystem\non\nservices\n \n \n \n \n \n \n \n \n \n \n \n \nwhich consumers may spend their tokens on.\n \nUltimately,\nhundreds\nof\nmillions\nof\nend\nusers\nwill\nbe\nequipped\nwith\na\nrobust\nmeans\nof\nderiving\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nsmall\namounts\nof\nvalue\nfrom\ntheir\ntechnical\nresources,\nand\nwill\nbe\nable\nto\nspend\nthat\nvalue\non\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \ngoods and services.\n \n \nBelow,\nwe\noutline\nBTT,\naround\nwhich\nwe\nplan\nto\nbuild\na\nnew\neconomy,\nand\npresent\nthe\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nBITTORRENT FOUNDATION 2019 v0.8.7 WORKING DRAFT - SUBJECT TO CHANGE                                                          6","metadata":{"loc":{"lines":{"from":2763,"to":2963}}}}],["193",{"pageContent":"blockchain\ntechnology\non\ntop\nof\nwhich\ntransaction\nprocessing\nwill\noperate.\nThen,\nwe\noutline\nthe\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nproposed\napproach\nto\noptimize\nthe\nexisting\nBitTorrent\nprotocol\nwith\nBitTorrent\nSpeed.\nNext,\nwe\n \n \n \n \n \n \n \n \n \n \n \n \n \ndescribe\nhow\nBitTorrent\nSpeed\nwill\nbe\noperationalized\nwith\nBTT.\nFinally,\nwe\ndiscuss\nthe\n \n \n \n \n \n \n \n \n \n \n \n \n \ngeneralization\nof\nBTT\nservices\nand\ndescribe\nthe\nfirst\nthree\ndecentralized\napplications\nbeing\nbuilt\n \n \n \n \n \n \n \n \n \n \n \n \n \non the new platform.\n \nBitTorrent Tokens (BTT) and the Blockchain\n \nBitTorrent\nInc.\nis\nintroducing\na\nTRON\nTRC-10\ncryptographic\ntoken\ncalled\nBitTorrent\nToken\n(BTT).\n \n \n \n \n \n \n \n \n \n \n \n \n \nBTT\nwill\nact\nas\na\ngeneral\npurpose\nmechanism\nfor\ntransacting\nin\ncomputing\nresources\nshared\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nbetween\nBitTorrent\nclients\nand\na\nliquid\nmarket\nof\nservice\nrequesters\nand\nservice\nproviders.\nBTT\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nwill\nbe\nthe\nunit\nwhich\ndenominates\ntransactions\nfor\nthe\nprovision\nof\nservices\nin","metadata":{"loc":{"lines":{"from":2968,"to":3172}}}}],["194",{"pageContent":"BitTorrent\nclients\nand\na\nliquid\nmarket\nof\nservice\nrequesters\nand\nservice\nproviders.\nBTT\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nwill\nbe\nthe\nunit\nwhich\ndenominates\ntransactions\nfor\nthe\nprovision\nof\nservices\nin\nthe\nBTT-enabled\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nBitTorrent ecosystem. It will be made available as a divisible token, allowing for granular pricing.\n \n \nDue\nto\nexpected\nvolume,\ndirect\nuse\nof\nthe\npublic\nTRON\nblockchain\nfor\nall\ntransactions\nis\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nunfeasible.\nTherefore,\nBitTorrent\nInc.\nwill\ndeploy\nan\n“on-chain/off-chain\nexchange.”\nThe\n \n \n \n \n \n \n \n \n \n \nexchange\nwill\nenable\nthe\ntransfer\nof\ntokens\nbetween\na\nhigh-performance\nprivate\nledger\nand\nthe\n \n \n \n \n \n \n \n \n \n \n \n \n \n \npublic TRON blockchain.\n \n \nIntroduction to BitTorrent Speed\n​\nTM\n \nBitTorrent\nswarms\nsuffer\nfrom\nstructural\ninefficiencies\nwhich\nfrequently\nlead\nto\nthe\npremature\n \n \n \n \n \n \n \n \n \n \n \n \ndeterioration\nor\ndeath\nof\nswarms.\nDue\nto\nupload/download\nspeed\nasymmetry,\nfiles\nfrequently","metadata":{"loc":{"lines":{"from":3172,"to":3352}}}}],["195",{"pageContent":"inefficiencies\nwhich\nfrequently\nlead\nto\nthe\npremature\n \n \n \n \n \n \n \n \n \n \n \n \ndeterioration\nor\ndeath\nof\nswarms.\nDue\nto\nupload/download\nspeed\nasymmetry,\nfiles\nfrequently\n \n \n \n \n \n \n \n \n \n \n \n \ncomplete\ndownloading\nlong\nbefore\na\npeer\nhas\nbeen\nable\nto\nupload\nan\nequivalent\nnumber\nof\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nbytes.\nOnce\nthe\ndownloading\npeer\nhas\nthe\nentire\nfile,\nthere\nis\nno\neconomic\nincentive\nto\ncontinue\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nto\nmake\nthe\nfile\navailable\nto\nother\ndownloaders\nthrough\nseeding.\nThat\nmeans\nusers\nleave\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nswarms\nwithout\nuploading\nas\nmuch\ndata\nas\nthey\nhave\ndownloaded,\nwhich\nresults\nin\nBitTorrent\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nswarms not lasting as long as they need to.\n \nIn\nsome\ncases,\nit\nis\npossible\nfor\na\nswarm\nto\nenable\nthe\ncompletion\nof\na\ndownload\neven\nin\nthe\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nabsence\nof\na\nseed.\nThis\npossibility\nis\ncomputed\nand\ndisplayed\nin\nsome\nimplementations\nas\nan\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n“availability”\nmetric,","metadata":{"loc":{"lines":{"from":3352,"to":3584}}}}],["196",{"pageContent":"even\nin\nthe\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nabsence\nof\na\nseed.\nThis\npossibility\nis\ncomputed\nand\ndisplayed\nin\nsome\nimplementations\nas\nan\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n“availability”\nmetric,\ntypically\nexpressed\nas\nthe\nnumber\nof\ndistributed\ncopies\navailable.\nIf\nthere\nis\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n4\nat\nleast\none\nactive\nnon-seed\npeer\nholding\neach\nof\nthe\npieces,\nthen\nthe\nfile\nis\nsaid\nto\nbe\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n“available.”\nAdditionally,\nthe\nBitTorrent\nprotocol\nuses\na\ndesign\ndecision\nknown\nas\n“rarest\nfirst,”\n \n \n \n \n \n \n \n \n \n \n \n \n \nwhich\ndictates\nthat\na\nclient\nshould\nprioritize\nrequesting\nto\ndownload\nthe\npieces\nthat\nare\nheld\nby\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nthe\nfewest\npeers\nin\nthe\nswarm\nto\nwhich\nit\nhas\nconnected.\nThis\nmechanism\nis\nintended\nto\nflatten\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nthe\ndistribution\nof\npieces\nto\ndecrease\nthe\nlikelihood\nof\na\nswarm\nlosing\na\nkey\npeer\nor\npeers\nwho\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nare\nthe\nsole\nproviders\nof\na\nrequired\npiece.\nWhile","metadata":{"loc":{"lines":{"from":3584,"to":3837}}}}],["197",{"pageContent":"the\ndistribution\nof\npieces\nto\ndecrease\nthe\nlikelihood\nof\na\nswarm\nlosing\na\nkey\npeer\nor\npeers\nwho\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nare\nthe\nsole\nproviders\nof\na\nrequired\npiece.\nWhile\nthese\ntwo\nconsiderations\nmean\nthat\nseeds\nare\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nnot\nstrictly\nnecessary\nto\ncomplete\na\ndownload,\nresearch\nhas\nshown\nthat\nin\napproximately\n86%\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n4\n \n​\nVuze wiki contributors. \"Availability.\" Vuze wiki, https://wiki.vuze.com/w/Availability. Accessed January\n \n17, 2019.\n \n \nBITTORRENT FOUNDATION 2019 v0.8.7 WORKING DRAFT - SUBJECT TO CHANGE                                                          7","metadata":{"loc":{"lines":{"from":3837,"to":3941}}}}],["198",{"pageContent":"of seedless cases, this sort of collective reconstruction is not feasible.\n \n5\n \nFigure 1. Only 14% of torrents that had no seed in the swarm could reconstruct the whole file.\n \nTo\neliminate\nthis\nproblem,\nwe\nare\ndeveloping\na\nnew\nBitTorrent\nfeature\ncalled\nBitTorrent\nSpeed.\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nThis\nfeature\nis\nwill\nenable\npeers\nto\noffer\neach\nother\ncryptographic\ntoken\nincentives\nto\ncontinue\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nto seed files after the full download has completed.\n \n \nTo\nbe\nclear,\nBitTorrent\ncurrently\nfunctions\nwell.\nNothing\nproposed\nin\nthis\noptimization\nwill\nalter\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nthe\nprotocol’s\nfunctionality,\nand\nusers\nof\nthe\nprotocol\nwill\nnot\nexperience\nan\ninterruption\nin\ntheir\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nusage.\nThe\naddition\nis\nsimply\nan\noverlay\non\ntop\nof\nthe\ncurrent\nprotocol\nwhich\nwill\nallow\nexisting\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nBitTorrent\nswarm\nparticipants\nto\nexchange\ntokens\nin\nreturn\nfor\nensuring\nthe\ncontinued","metadata":{"loc":{"lines":{"from":3946,"to":4116}}}}],["199",{"pageContent":"top\nof\nthe\ncurrent\nprotocol\nwhich\nwill\nallow\nexisting\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nBitTorrent\nswarm\nparticipants\nto\nexchange\ntokens\nin\nreturn\nfor\nensuring\nthe\ncontinued\n \n \n \n \n \n \n \n \n \n \n \n \navailability of a file for download.\n \n \nBitTorrent\nSpeed\nwill\nbe\nintegrated\ninto\nfuture\nparticipating\nBitTorrent\nand\nuTorrent\nclients.\nIt\n \n \n \n \n \n \n \n \n \n \n \n \n \nwill\nadd\na\nnew\nset\nof\nextensions\nto\nthe\nBitTorrent\nprotocol,\nenabling\nusers\nto\nadvertise\ntheir\nbids\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nwithin\na\nswarm\nand\nto\ntrade\nBTT\nin\nexchange\nfor\ncontinued\nprioritized\naccess\nto\nseeds.\nThe\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nintended\nresult\nis\nthat\npeers\nwill\nchoose\nto\nseed\nfor\nlonger,\nleading\nto\nincreased\nswarm\nlongevity\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nand faster download times for all swarm participants.\n \nBitTorrent Speed and BTT Operations\n \nPeers\nwill\nbe\nable\nto\nact\nas\nboth\n“service\nrequesters”\nand\n“service\nproviders.”\nA\npeer\noffering\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nBTT\nin\nexchange\nfor\nother","metadata":{"loc":{"lines":{"from":4116,"to":4333}}}}],["200",{"pageContent":"BitTorrent Speed and BTT Operations\n \nPeers\nwill\nbe\nable\nto\nact\nas\nboth\n“service\nrequesters”\nand\n“service\nproviders.”\nA\npeer\noffering\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nBTT\nin\nexchange\nfor\nother\nusers’\nlocal\nresources\nwill\nbe\na\nservice\nrequester,\nand\na\npeer\noffering\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nlocal resources in exchange for BTT will be a service provider.\n \n5\n Kaune, S., R. C. Rumin, G. Tyson, A. Mauthe, C. Guerrero, and R. Steinmetz. \"Unraveling BitTorrents File\n \nUnavailability: Measurements and Analysis.\" ​\n2010 IEEE Tenth International Conference on Peer-to-Peer\n \nComputing (P2P)​\n, 2010. doi:10.1109/p2p.2010.5569991.\n \n \nBITTORRENT FOUNDATION 2019 v0.8.7 WORKING DRAFT - SUBJECT TO CHANGE                                                          8","metadata":{"loc":{"lines":{"from":4333,"to":4413}}}}],["201",{"pageContent":"Service Discovery\n \nThe BitTorrent Speed life cycle will begin when peers discover each other via existing BitTorrent\n \nprotocol mechanisms.\n \n \n6\nInitial Balance\n \nBTT\nwill\nbe\nairdropped\nto\nexisting\nuTorrent/BitTorrent\nusers\nso\nthey\ncan\nbootstrap\nwith\na\nsmall\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \ninitial balance. In the future, BTT will also be purchasable via crowdsale and exchanges.\n \nBidding Rounds\n \nBids\nwill\nbe\nsent\nvia\na\nnew\nBitTorrent\nprotocol\nextension\nmessage\nto\neach\npeer\nthat\nhas\nat\nleast\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \none\npiece\nwanted\nby\nthe\nservice\nrequester.\nThe\nmessage\nwill\ncontain\nthe\nnumber\nof\nBTT\nthe\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nservice requester is willing to pay per piece.\n \nAfter\nwinning\na\nbidding\nround,\na\nservice\nrequester\nmust\nestablish\nan\nescrowed\nBTT\nbalance\nwith\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nthe\nservice\nprovider.\nThey\ndo\nthis\nby\nplacing\nsome\nBTT\ninto\na\npayment\nchannel\nbetween\nthe\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nservice requester and service provider.","metadata":{"loc":{"lines":{"from":4418,"to":4594}}}}],["202",{"pageContent":"the\nservice\nprovider.\nThey\ndo\nthis\nby\nplacing\nsome\nBTT\ninto\na\npayment\nchannel\nbetween\nthe\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nservice requester and service provider.\n \n \nBidding User Interface\n \nBy default, bidding will be automated. Users’ clients will bid to and from their token balance on\n \ntheir behalf. We may enable user interface controls to allow users to toggle the feature, toggle it\n \nfor certain torrents, adjust the spending rate, set a reserve price, or exercise granular control\n \nover the bidding process.\n \nAutomatic Bidding\n \nFor the initial release, clients will use a simplified auto-bidding mechanism. In this version, the\n \nclient simply bids a fraction of the remaining BTT balance in the service requester’s wallet. This\n \nis how the bid is calculated:\n \n \ni\nd\ns\np\ne\nn\nd\ni\nn\ng\n \nr\na\nt\ne\n \n×\n \nr\ne\nm\na\ni\nn\ni\nn\ng\n \nb\na\nl\na\nn\nc\ne\n \ni\nn\n \nB\nT\nT\n)\n/\n(\nr\ne\nm\na\ni\nn\ni\nn\ng\n \nd\no\nw\nn\nl\no\na\nd\n \ni\nn\n \nk\ni\nl\no\nb\ny\nt\ne\ns\n)\nb\n=\n(","metadata":{"loc":{"lines":{"from":4594,"to":4727}}}}],["203",{"pageContent":"is how the bid is calculated:\n \n \ni\nd\ns\np\ne\nn\nd\ni\nn\ng\n \nr\na\nt\ne\n \n×\n \nr\ne\nm\na\ni\nn\ni\nn\ng\n \nb\na\nl\na\nn\nc\ne\n \ni\nn\n \nB\nT\nT\n)\n/\n(\nr\ne\nm\na\ni\nn\ni\nn\ng\n \nd\no\nw\nn\nl\no\na\nd\n \ni\nn\n \nk\ni\nl\no\nb\ny\nt\ne\ns\n)\nb\n=\n(\n \n \nThis formula implies that as a download progresses, the bid will change. For the initial release,\n \nthe client will not rebid until the bid changes by more than 10% from the previous bid.\n \n \nThe spending rate (a parameter that can vary from 0.0 to 1.0 depending on how aggressive the\n \nclient should be bidding) will be defined to be 1.0. If the number of kilobytes remaining is equal\n \nto zero, then the bid automatically stops in order to prevent division by zero.\n \n \nIn\nthe\nfuture,\nthis\nalgorithm\nwill\nbe\nrefined.\nFor\nexample,\nbased\non\nexisting\nbid\nmessage\ntraffic\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nand\ncurrent\ntransfers,\nthe\nclient\nwill\nbe\nable\nto\nestimate\na\nmarket\nrate\nfor\nbandwidth.\nThe\nclient\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n6","metadata":{"loc":{"lines":{"from":4727,"to":4890}}}}],["204",{"pageContent":"on\nexisting\nbid\nmessage\ntraffic\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nand\ncurrent\ntransfers,\nthe\nclient\nwill\nbe\nable\nto\nestimate\na\nmarket\nrate\nfor\nbandwidth.\nThe\nclient\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n6\n For detailed description of BitTorrent protocol operations, see https://en.wikipedia.org/wiki/BitTorrent.\n \n \nBITTORRENT FOUNDATION 2019 v0.8.7 WORKING DRAFT - SUBJECT TO CHANGE                                                          9","metadata":{"loc":{"lines":{"from":4890,"to":4949}}}}],["205",{"pageContent":"also has a picture of piece rarity it can use to inform bid amounts.\n \nMatchmaking\n \nThe\nBitTorrent\nprotocol\nuses\na\nsharing\nalgorithm\ncalled\n“tit-for-tat”,\nwhich\nis\nimplemented\nusing\n \n \n \n \n \n \n \n \n \n \n \n \n \na\nmechanism\ncalled\n“choking.”\nBitTorrent\nclients\nclassify\npeers\nas\neither\nchoked\nor\nunchoked.\n \n \n \n \n \n \n \n \n \n \n \n \n \nAn\nexample\nchoking\nalgorithm\nmight\nsort\npeers\nbased\non\nhow\nmuch\ndata\nthe\nclient\nhas\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nreceived\nfrom\neach\none\nsince\nthe\nchoking\nalgorithm\nwas\nlast\nexecuted.\nThe\nfirst\n​\nn\npeers\n(where\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nn\nis\nthe\nnumber\nof\nunchoke\nslots,\na\nfixed\nvalue\nchosen\nby\neach\nclient)\nare\nclassified\nas\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nunchoked and the rest as choked.\n \nOnly\nunchoked\npeers\nare\neligible\nto\nreceive\ndata.\nThe\nchoke\nstate\nof\nall\npeers\nis\nrecalculated\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nperiodically\n(typically\nevery\n15\nseconds).\nSeeds\ndo\nnot\nreceive\nany\ndata\nfrom\npeers,\nso\nthey\nuse\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nthe\namount","metadata":{"loc":{"lines":{"from":4954,"to":5174}}}}],["206",{"pageContent":"all\npeers\nis\nrecalculated\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nperiodically\n(typically\nevery\n15\nseconds).\nSeeds\ndo\nnot\nreceive\nany\ndata\nfrom\npeers,\nso\nthey\nuse\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nthe\namount\nof\ndata\nsent\nto\neach\npeer\nto\ndetermine\nwhich\npeers\nare\neligible\nto\nbe\nunchoked\nin\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nthe\nnext\nround.\nThis\nmeans\nseeds\noptimize\nfor\nmaximum\nthroughput,\nwith\nno\nregard\nfor\nany\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nother factor.\n \nThere\nis\nalso\na\nseparate\nchoking\nalgorithm\ncalled\n“optimistic\nunchoking”\nwhich\nuses\na\nnumber\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nof\nreserved\nunchoke\nslots\n(typically\none).\nOptimistic\nunchoking\nselects\na\npeer\nto\nunchoke\nin\na\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nrandom\nor\nround-robin\nfashion.\nThis\nallows\nnew\npeers\nan\nopportunity\nto\nreceive\nsome\ndata\nso\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nthat they can start reciprocating with other peers.\n \nChoking\nis\nthe\nprimary\nmeans\nof\nallocating\nresources\nwithin\na\nBitTorrent\nswarm.\nBitTorrent\n \n \n \n \n \n \n \n \n \n \n \n \n \nSpeed","metadata":{"loc":{"lines":{"from":5174,"to":5410}}}}],["207",{"pageContent":"that they can start reciprocating with other peers.\n \nChoking\nis\nthe\nprimary\nmeans\nof\nallocating\nresources\nwithin\na\nBitTorrent\nswarm.\nBitTorrent\n \n \n \n \n \n \n \n \n \n \n \n \n \nSpeed\nwill\nextend\nthis\nmechanism\nso\nthat\na\nservice\nprovider\nwill\ninclude\nboth\nBTT\nbid\ndata\nand\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \npeer upload rate in its decisions about which peer to unchoke.\n \n \nHow\nthis\ninclusion\ntakes\nplaces\nwill\nvary\ndepending\non\nhow\nthe\nclient’s\nchoking\nalgorithm\nis\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nimplemented.\nWhen\nit\ncomes\ntime\nfor\nthe\nclient\nto\nrun\nits\nchoking\nalgorithm,\nit\nfirst\ncompiles\na\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nlist\nof\neligible\nbids.\nThe\nexample\nalgorithm\ndescribed\nabove\ncould\nbe\nmodified\nto\nsort\npeers\nby\na\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \ncombination of highest eligible bid and most data received.\n \n \nWhen\nan\neligible\nbidder\nis\nunchoked,\nthe\nservice\nprovider\nwill\nsend\na\nnew\nBitTorrent\nprotocol\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nextension\nbid\nresponse\nmessage\nto","metadata":{"loc":{"lines":{"from":5410,"to":5610}}}}],["208",{"pageContent":"When\nan\neligible\nbidder\nis\nunchoked,\nthe\nservice\nprovider\nwill\nsend\na\nnew\nBitTorrent\nprotocol\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nextension\nbid\nresponse\nmessage\nto\nthe\nbidder\ncontaining\nthe\nrate\nin\nBTT/byte\nthe\nbidder\nis\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nexpected to pay. This message will be followed by a normal unchoke message.\n \n \nClients\nmay\nimplement\nany\nauction\nformat,\nbut\na\nvariant\nof\nthe\nVickrey-Clarke-Groves\nauction\nis\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nexpected\nto\nproduce\noptimum\nresults.\nSee\nFigure\n2\nfor\nan\noutline\nof\nthe\nauction\nmechanics,\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nwhich ends up being a multi-unit uniform price auction.\n \nEach\nservice\nrequester\nbids\non\nonly\none\nunchoke\nslot\nper\nservice\nprovider.\nClients\nwould\ncharge\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \neach unchoked bidder the rate of the highest losing bid.\n \n \nBITTORRENT\nFOUNDATION\n2019\nv0.8.7\nWORKING\nDRAFT\n-\nSUBJECT\nTO\nCHANGE\n \n \n \n \n \n \n \n \n \n \n10","metadata":{"loc":{"lines":{"from":5610,"to":5786}}}}],["209",{"pageContent":"Figure 2. Auction mechanics of a multi-unit uniform price auction.\n \nCaution\nmust\nbe\nexercised\nwhen\ndealing\nwith\noptimistic\nunchoking\ndue\nto\nits\nimportance\nin\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nallowing\nnew\npeers\nto\nbootstrap\ninto\nthe\nswarm.\nThe\noptimistic\nunchoke\nslot(s)\nshould\nnot\nbe\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nsubject\nto\nthe\nsame\nauction\nformat\nas\nthe\nregular\nunchoke\nslots.\nIf\nthe\nclient\nis\nusing\na\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nround-robin\nalgorithm\nfor\noptimistic\nunchoking,\nit\nshould\nonly\napply\nan\nauction\nto\nbreak\nties\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nbetween\npeers\nwhich\nhave\ngone\nthe\nsame\namount\nof\ntime\nsince\nbeing\nchoked.\nThis\nmeans\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nauctioning\nof\nthe\noptimistic\nunchoke\nslot\nwill\ntypically\nonly\nhappen\nbetween\nbidders\nthat\nhave\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nnever been unchoked.\n \nIn\nswarms\nwith\nboth\nBTT-enabled\nBitTorrent\nclients\nand\nlegacy\nBitTorrent\nclients,\nservice\n \n \n \n \n \n \n \n \n \n \n \n \nrequesters\nwill\nbe\nable\nto\noffer\nBTT\nto\nservice\nproviders.","metadata":{"loc":{"lines":{"from":5792,"to":6007}}}}],["210",{"pageContent":"never been unchoked.\n \nIn\nswarms\nwith\nboth\nBTT-enabled\nBitTorrent\nclients\nand\nlegacy\nBitTorrent\nclients,\nservice\n \n \n \n \n \n \n \n \n \n \n \n \nrequesters\nwill\nbe\nable\nto\noffer\nBTT\nto\nservice\nproviders.\nHowever,\nupload\nspeeds\nfrom\nlegacy\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nBitTorrent clients will be maximized without regard for any BTT bids.\n \nTransaction Processing\n \nOnce\na\nservice\nrequester\nreceives\nboth\nthe\nbid\nresponse\nand\nunchoke\nmessages,\nit\nopens\na\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \npayment\nchannel\non\nthe\nprivate\nledger\nwhose\noutput\nis\naddressed\nto\nthe\nservice\nprovider.\nThe\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nservice\nprovider\nexpects\npayment\nto\nbe\ndelivered\nvia\na\nnew\nor\nexisting\nchannel\nfor\neach\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \ncomplete piece received by the service requester.\n \nBelow, the service requester is the party sending BTT, and the service provider is the party\n \nreceiving it.\n \n1. The service requester creates a public key (K1) and requests a public key from the service\n \nprovider (K2).","metadata":{"loc":{"lines":{"from":6007,"to":6165}}}}],["211",{"pageContent":"receiving it.\n \n1. The service requester creates a public key (K1) and requests a public key from the service\n \nprovider (K2).\n \n \n2. When the service requester wishes to pay the service provider, it opens a channel on the\n \nprivate ledger with K2 as the destination account. When the channel is created, the\n \nservice requester transfers some of its BTT into the channel. This BTT is deducted from\n \nthe account associated with K1.\n \n \n \nBITTORRENT\nFOUNDATION\n2019\nv0.8.7\nWORKING\nDRAFT\n-\nSUBJECT\nTO\nCHANGE\n \n \n \n \n \n \n \n \n \n \n11","metadata":{"loc":{"lines":{"from":6165,"to":6202}}}}],["212",{"pageContent":"3. The service requester generates a transaction on the channel which disburses the initial\n \npayment amount to K2 and the remainder of the channel’s BTT to K1.\n \n4. The service requester signs the transaction, then sends the transaction and the signature to\n \nthe service provider.\n \n5. If the service provider has not seen the channel before, it requests the channel information\n \nfrom the private ledger. The service provider only accepts the payment if the channel\n \ninformation retrieved from the ledger matches the information received from the service\n \nrequester.\n \n6. When the service requester wishes to send another payment to the service provider, it adjusts\n \nthe transaction to allocate more value to K2. It then re-signs the new transaction and\n \nsends the transaction and the signature to the service provider.\n \n7. If the service requester wishes to send more payment, but the existing channel’s BTT is","metadata":{"loc":{"lines":{"from":6207,"to":6229}}}}],["213",{"pageContent":"sends the transaction and the signature to the service provider.\n \n7. If the service requester wishes to send more payment, but the existing channel’s BTT is\n \nentirely allocated to the service provider, the service requester opens a new channel on\n \nthe ledger and uses it to send payment as described in steps 2-4.\n \nThis\nprocess\ncontinues\nuntil\nthe\nservice\nrequester\nconfirms\nthat\nthe\ntransfer\nis\ncomplete.\nThe\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nservice\nprovider\nthen\nsigns\nthe\nlast\ntransaction\nit\nsaw\nand\nsends\nit\nto\nthe\nprivate\nledger,\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nallocating\nthe\nfinal\namount\nto\nitself.\nThis\ncloses\nthe\nchannel;\nit\ncannot\nbe\nused\nfor\nfurther\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \npayments.\n \nIn\ncase\nthe\nservice\nprovider\n​\nstops\nat\nany\npoint,\nleaving\nthe\nallocated\nvalue\nin\nlimbo,\nthe\nprivate\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nledger\nimplements\na\ntimeout\nfor\neach\nchannel.\nThe\ntimeout\nperiod\nis\nindicated\nin\nthe\nchannel’s\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \ninformation\nwhen\nthe\nservice","metadata":{"loc":{"lines":{"from":6229,"to":6399}}}}],["214",{"pageContent":"the\nprivate\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nledger\nimplements\na\ntimeout\nfor\neach\nchannel.\nThe\ntimeout\nperiod\nis\nindicated\nin\nthe\nchannel’s\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \ninformation\nwhen\nthe\nservice\nprovider\nretrieves\nit\nfrom\nthe\nledger.\nIf\nthe\nservice\nprovider\ndoes\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nnot\nclose\nthe\nchannel\nbefore\nthe\ntimeout\nexpires,\nthe\nledger\nautomatically\ncloses\nthe\nchannel\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nand disperses all of the channel’s BTT to the service requester.\n \nIf the BTT transfer does not complete after a timeout, the service requester is choked and\n \nreceives no further data. Repeated failures to transfer BTT by a service requester can result in\n \nthe service provider banning the service requester. Banned service requesters are disconnected\n \nfrom service providers, and any attempt to reconnect is rejected for a specified period of time.\n \nSimilarly, failure to verify data from the service provider can result in the service provider being\n \nbanned.\n \nEach\nparty","metadata":{"loc":{"lines":{"from":6399,"to":6521}}}}],["215",{"pageContent":"Similarly, failure to verify data from the service provider can result in the service provider being\n \nbanned.\n \nEach\nparty\nprogressively\ncontributes\npieces\nor\nBTT,\nwith\na\nsigned\ntransaction\nproduced\nfor\neach\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nstep\nin\nthe\nprocess.\nThe\nmaximum\nbreach\nexposure\nof\nthe\nservice\nprovider\nat\nany\ngiven\ntime\nis\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \ntherefore\none\npiece\nworth\nof\nbandwidth;\nsince\nservice\nrequesters\npay\nonly\non\nverified\ndelivery,\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nthey have zero breach exposure.\n \nBidding Revisions and Frequency\n \nAs\nthe\nclient\nmay\nreceive\ndata\nfor\nless\nthan\nits\nmaximum\nbid\n(and\nvery\nfrequently\nfor\nfree,\nas\nis\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \ncurrently\nthe\ncase\nin\nBitTorrent),\nthe\nbid\ncomputed\nby\ndividing\nthe\nremaining\ntotal\nspend\nby\nthe\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nremaining\ndata\nwill\ntrend\nupward\nover\ntime.\nThe\nclient\ncan\nimplement\nany\nheuristic\nit\nlikes\nto\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nBITTORRENT\nFOUNDATION\n2019\nv0.8.7\nWORKING","metadata":{"loc":{"lines":{"from":6521,"to":6726}}}}],["216",{"pageContent":"remaining\ndata\nwill\ntrend\nupward\nover\ntime.\nThe\nclient\ncan\nimplement\nany\nheuristic\nit\nlikes\nto\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nBITTORRENT\nFOUNDATION\n2019\nv0.8.7\nWORKING\nDRAFT\n-\nSUBJECT\nTO\nCHANGE\n \n \n \n \n \n \n \n \n \n \n12","metadata":{"loc":{"lines":{"from":6726,"to":6779}}}}],["217",{"pageContent":"determine\nwhen\nto\nsend\nbid\nmessages\nwith\na\nnew\nbid\nvalue;\nit\nshould\nnot,\nhowever,\nsend\nnew\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nbids\nmore\nthan\nonce\na\nminute.\nIf\nthe\nuser\nchanges\nthe\namount\nof\nBTT\nbid,\nthen\nthe\nclient\nshould\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nsend the new bid immediately.\n \nGeneralized BTT Services\n \nOptimizing\nthe\nexisting\nBitTorrent\nprotocol\nsets\na\nprecedent\nof\nallowing\nusers\nto\nstore\nvalue\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nfrom\nsharing\nsmall\namounts\nof\ninfrastructure\nin\norder\nto\nspend\nthat\nvalue\nlater.\nIt\nis\nan\nobvious\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nfirst\nstep\nin\nthe\nintroduction\nof\na\ncryptographic\ntoken,\nbut\nit\nis\na\nsmall\nfraction\nof\nwhat\nis\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nbecoming\npossible.\nWe\nare\npreparing\nto\ndramatically\nextend\nboth\nthe\nearning\nopportunities\nand\n \n \n \n \n \n \n \n \n \n \n \n \n \nthe spending opportunities for users of BTT-enabled BitTorrent clients.\n \n \nWe\nare\ndeveloping\na\nrange\nof\ngeneralized\nBTT\nservices,\nas\nwell\nas\npreparing\nto\nopen\nup\nthe","metadata":{"loc":{"lines":{"from":6784,"to":7003}}}}],["218",{"pageContent":"the spending opportunities for users of BTT-enabled BitTorrent clients.\n \n \nWe\nare\ndeveloping\na\nrange\nof\ngeneralized\nBTT\nservices,\nas\nwell\nas\npreparing\nto\nopen\nup\nthe\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nplatform\nto\nthird-party\ndevelopers\nto\nallow\nuse\nof\nthe\nwallet\nand\nBTT\nin\ntheir\napplications.\nAfter\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nextensive\ndiscussions\nwith\npartners\ninterested\nin\nour\nplatform,\nwe\nhave\nconcluded\nthat\nthe\n \n \n \n \n \n \n \n \n \n \n \n \n \nfollowing three basic BTT services should be offered by BitTorrent:\n \n(1)\nA\ndecentralized\ncontent\ndelivery\nservice\nto\nenable\nservice\nrequesters\nto\nadvertise\nbids\nand\n \n \n \n \n \n \n \n \n \n \n \n \n \n \npay\nBTT\nfor\nbandwidth\nto\nreceive\na\nparticular\npiece\nof\ncontent.\nThis\nservice\nwill\nbe\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nwell-suited\nfor\nmass\ndistribution\nof\ncontent,\nespecially\nin\nthe\npresence\nof\ncensors\nor\n \n \n \n \n \n \n \n \n \n \n \n \n \nother\nattackers.\nService\nproviders\nwill\nbe\nincentivized\nto\nserve\ncontent\nto\nas\nmany\npeople","metadata":{"loc":{"lines":{"from":7003,"to":7197}}}}],["219",{"pageContent":"mass\ndistribution\nof\ncontent,\nespecially\nin\nthe\npresence\nof\ncensors\nor\n \n \n \n \n \n \n \n \n \n \n \n \n \nother\nattackers.\nService\nproviders\nwill\nbe\nincentivized\nto\nserve\ncontent\nto\nas\nmany\npeople\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nas\npossible,\nthus\nensuring\nrobust\nperformance\neven\nwith\nhigh\nnumbers\nof\nservice\n \n \n \n \n \n \n \n \n \n \n \n \nrequesters.\n \n(2)\nA\ndecentralized\nstorage\nservice\nto\nenable\nservice\nrequesters\nto\npay\nfor\nstorage\nover\ntime,\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nand\nto\ndownload\nthe\nstored\ndata\nfrom\nservice\nproviders\nfor\na\nprearranged\nfee.\nService\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nproviders\nwill\nagree\nto\nstore\ndata\nand\nprovide\non-demand\nproofs-of-storage\nto\nthe\n \n \n \n \n \n \n \n \n \n \n \n \nservice\nrequester.\nService\nproviders\nwill\nnaturally\nseek\nout\ncontent\nwhich\noffers\nthe\n \n \n \n \n \n \n \n \n \n \n \n \nhighest\npayment\nrate\nover\ntime.\nThis\nservice\nwill\nbe\nuseful\nfor\nremote\nbackup\nand\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nsharing of private data among small groups.\n \n(3)\nA\ndecentralized\nproxy\nservice\nto\nenable\nservice","metadata":{"loc":{"lines":{"from":7197,"to":7418}}}}],["220",{"pageContent":"payment\nrate\nover\ntime.\nThis\nservice\nwill\nbe\nuseful\nfor\nremote\nbackup\nand\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nsharing of private data among small groups.\n \n(3)\nA\ndecentralized\nproxy\nservice\nto\nenable\nservice\nrequesters\nto\npay\na\nservice\nprovider\nfor\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nretrieval\nof\ncontent\nby\nURL.\nThis\nwill\nbe\nuseful\nto\nhighly\nmobile\napplications\nor\nthose\nthat\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nseek\nto\nevade\nIP-level\nnetwork\ncontrols.\nThe\nservice\nwill\nbe\ndesigned\nto\nallow\ncontent\nto\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nbe\nrequested\nin\nchunks.\nThis\nwill,\nfor\nexample,\nallow\nclients\nwith\nintermittent\n \n \n \n \n \n \n \n \n \n \n \n \nconnectivity,\nsuch\nas\nmobile\nusers\nrelying\non\nWi-Fi,\nto\nreliably\nretrieve\nweb\nresources\n \n \n \n \n \n \n \n \n \n \n \n \n \nwithout\nneeding\nto\nmaintain\nan\nopen\nconnection\nlong\nenough\nto\nreceive\nthe\ncomplete\n \n \n \n \n \n \n \n \n \n \n \n \n \ncontents.\n \n \nAs\nshown\nin\nFigure\n3,\nthe\nvarious\nenhancements\nto\nthe\nBitTorrent\nprotocol\nwill\nserve\nas\nbuilding","metadata":{"loc":{"lines":{"from":7418,"to":7633}}}}],["221",{"pageContent":"enough\nto\nreceive\nthe\ncomplete\n \n \n \n \n \n \n \n \n \n \n \n \n \ncontents.\n \n \nAs\nshown\nin\nFigure\n3,\nthe\nvarious\nenhancements\nto\nthe\nBitTorrent\nprotocol\nwill\nserve\nas\nbuilding\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nblocks for distributed applications.\n \n \nBITTORRENT\nFOUNDATION\n2019\nv0.8.7\nWORKING\nDRAFT\n-\nSUBJECT\nTO\nCHANGE\n \n \n \n \n \n \n \n \n \n \n13","metadata":{"loc":{"lines":{"from":7633,"to":7709}}}}],["222",{"pageContent":"Figure 3. BitTorrent protocol extensions.\n \nMore\nBTT\nservices\ncan\nbe\nimplemented\nand\nintroduced\ninto\nthe\nservice\nprovider\nnetwork\nas\n \n \n \n \n \n \n \n \n \n \n \n \n \n \ndemand\nemerges\nfrom\nnew\nBTT\napplications.\nBitTorrent\nInc.\nwill\nprovide\na\nforum\nfor\ndiscussion\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nand standardization of new BTT services similar to that provided for the BitTorrent protocol.\n \nThe\nBitTorrent\nprotocol\nextensions\nwill\nbe\nsubmitted\nfor\ncomment\nto\nthe\nBitTorrent\ncommunity\n \n \n \n \n \n \n \n \n \n \n \n \n \nBEP\nprocess\n–\nan\ninformal\nbut\nopen\nstandards-setting\nprocess\n–\nand\nfacilitated\nby\nBitTorrent\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n7\nFoundation,\nwhich\nhas\nguided\nprotocol\nenhancements\nfor\nmore\nthan\na\ndecade.\nFollowing\n \n \n \n \n \n \n \n \n \n \n \n \ncommunity\nfeedback,\nwe\nwill\ndevelop\nand\ntest\nour\nimplementation\nof\nthese\nextensions\nvia\n \n \n \n \n \n \n \n \n \n \n \n \n \nengineering and release management practices which are well established at BitTorrent.\n \nFurthermore,\nas\nis\nour\npractice\nwith\nhighly\nimportant","metadata":{"loc":{"lines":{"from":7715,"to":7889}}}}],["223",{"pageContent":"of\nthese\nextensions\nvia\n \n \n \n \n \n \n \n \n \n \n \n \n \nengineering and release management practices which are well established at BitTorrent.\n \nFurthermore,\nas\nis\nour\npractice\nwith\nhighly\nimportant\nupdates,\nwe\nwill\nsubsequently\nrelease\n \n \n \n \n \n \n \n \n \n \n \n \n \nthese\nextensions\nas\nan\nopen\nsource\nlibrary\nand\nestablish\nsupport\nand\nincentives\nfor\nintegration\n \n \n \n \n \n \n \n \n \n \n \n \n \n \ninto third-party BitTorrent protocol implementations.\n \nBTT Incentives\n \nThe\ncontinued\nevolution\nof\nthe\nBitTorrent\necosystem\nwill\nrequire\nboth\ncoordination\nof\nactivities\n \n \n \n \n \n \n \n \n \n \n \n \n \nand\nprovision\nof\nincentives\nto\na\nbroad\nrange\nof\nexisting\nand\nfuture\nparticipants.\nBitTorrent\nclient\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nimplementers,\nthird-party\napp\ndevelopers,\nand\nonline\npublishers\nwill\nall\nbe\neligible\nfor\na\nsystem\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nof BTT incentive awards.\n \nThe\nBitTorrent\necosystem\nhas\nproven\nthat\nmillions\nof\npeople\nwill\nenthusiastically\nshare\ntheir\n \n \n \n \n \n \n \n \n \n \n \n \n \nresources\nif\nthey","metadata":{"loc":{"lines":{"from":7889,"to":8080}}}}],["224",{"pageContent":"system\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nof BTT incentive awards.\n \nThe\nBitTorrent\necosystem\nhas\nproven\nthat\nmillions\nof\npeople\nwill\nenthusiastically\nshare\ntheir\n \n \n \n \n \n \n \n \n \n \n \n \n \nresources\nif\nthey\ncan\ncooperate\nsafely\nand\nsecurely,\nbound\nby\nthe\nrules\nof\na\nprotocol\nthey\ntrust.\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nBy\nintroducing\na\nmechanism\nfor\nvalue\nstorage\nand\nexchange,\nwe\naim\nto\ngreatly\nbroaden\nthe\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nuniverse of possible participants – either as service requesters, service providers, or both.\n \n \nTo\nmaximize\nthe\nchances\nof\nsuccess,\nit\nis\nvital\nthat\nwe\nensure\nthat\nBitTorrent\nInc.\nis\nnot\na\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \ncentral\nmonopolist\nin\nthe\nBTT-enabled\nBitTorrent\necosystem,\njust\nas\nit\nis\nfar\nfrom\na\nmonopolist\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nin\ntoday’s\nBitTorrent\necosystem.\nThe\nBTT\nproject\ndepicted\nin\nFigure\n4\nis\none\nin\nwhich\nthe","metadata":{"loc":{"lines":{"from":8080,"to":8271}}}}],["225",{"pageContent":"ecosystem,\njust\nas\nit\nis\nfar\nfrom\na\nmonopolist\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nin\ntoday’s\nBitTorrent\necosystem.\nThe\nBTT\nproject\ndepicted\nin\nFigure\n4\nis\none\nin\nwhich\nthe\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nsuccess of ecosystem partners will lead to increasing returns for all ecosystem participants.\n \n7\n Harrison, David. \"Index of BitTorrent Enhancement Proposals.\" BitTorrent.org. January 10, 2008.\n \nAccessed January 17, 2019. http://www.bittorrent.org/beps/bep_0000.html.\n \n \n \nBITTORRENT\nFOUNDATION\n2019\nv0.8.7\nWORKING\nDRAFT\n-\nSUBJECT\nTO\nCHANGE\n \n \n \n \n \n \n \n \n \n \n14","metadata":{"loc":{"lines":{"from":8271,"to":8356}}}}],["226",{"pageContent":"Figure 4. Ecosystem success benefits all participants.\n \nThe purpose of the BTT incentives will be to:\n \n●\nPromote the BTT project to current and prospective participants, whether they\n \nare service providers, service requesters or both. This means finding and\n \nintroducing new application developers who are interested in participating in\n \nservice requests or service provision.\n \n●\nGovern membership and participation rules for the BTT ecosystem, with the\n \noverarching objective of establishing a level playing field on which all can\n \nparticipate fairly.\n \n●\nGovern the equitable and transparent distribution of rewards and incentives such\n \nthat promising ideas have a fair chance and productive outcomes are fairly\n \nrewarded.\n \n●\nPartner with BitTorrent.org volunteers to facilitate discussion around future\n \nBitTorrent protocol extensions.\n \nOnce\nthe\nBTT\nproject\nis\nrunning\nsustainably,\nwe\nmay\nconsider\ntransitioning\nthe\nrules\nand\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nprocedures\nit\nhas","metadata":{"loc":{"lines":{"from":8362,"to":8424}}}}],["227",{"pageContent":"BitTorrent protocol extensions.\n \nOnce\nthe\nBTT\nproject\nis\nrunning\nsustainably,\nwe\nmay\nconsider\ntransitioning\nthe\nrules\nand\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nprocedures\nit\nhas\nestablished\nfor\nadministering\nBTT\nincentives\ninto\nan\ninstrument\nwith\nlower\n \n \n \n \n \n \n \n \n \n \n \n \n \noverhead, such as a decentralized autonomous organization (DAO).\n \n \nImplementation Considerations\n \nBlockchain\n \nBTT applications will be supported by the tens of millions of BitTorrent daily active users. To\n \nminimize opportunities for fraud, BTT applications will provide service in small increments,\n \nwaiting for payment to be confirmed before additional service is provided. This will require\n \ntransactions to be handled at a granular level and confirmed in a matter of seconds, ideally in\n \nless than a second. Even the most conservative estimates of capacity requirements anticipate\n \ndozens of transactions per second. With these needs in mind, it is clear that existing public","metadata":{"loc":{"lines":{"from":8424,"to":8497}}}}],["228",{"pageContent":"less than a second. Even the most conservative estimates of capacity requirements anticipate\n \ndozens of transactions per second. With these needs in mind, it is clear that existing public\n \nblockchains will not be able to support on-chain processing and settlement in the near future.\n \nUser Controls\n \nWe\nplan\nto\nintroduce\nfeatures\nsuch\nas\nBitTorrent\nSpeed\nand\nBTT\ntransactional\nsupport\ninto\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nBitTorrent\nand\nμTorrent\nclients\nin\nphases\nto\nallow\nus\nto\niterate\ntowards\nthe\nclearest\npossible\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nuser\neducation\njourney\nand\nthus\nto\noptimize\nend-user\nparticipation.\nParticipation\nin\nBTT\n \n \n \n \n \n \n \n \n \n \n \n \ntransactions is required to be both fully disclosed and completely optional for end users.\n \n \nBITTORRENT\nFOUNDATION\n2019\nv0.8.7\nWORKING\nDRAFT\n-\nSUBJECT\nTO\nCHANGE\n \n \n \n \n \n \n \n \n \n \n15","metadata":{"loc":{"lines":{"from":8497,"to":8610}}}}],["229",{"pageContent":"Initial Disbursement\n \nThe\nfirst\navailable\nuse-case\nfor\nBTT\nwill\nbe\nBitTorrent\nSpeed,\nwhich\nwill\nbe\nunproven\nat\nthe\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \noutset.\nSince\nnew\nservices\ntake\ntime\nto\nbecome\nprevalent,\nwe\nmay\npursue\na\nstrategy\nof\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \npre-seeding the market with promotional quantities of BTT.\n \n \nBitTorrent Wallets\n \nAs\npart\nof\nthe\nrollout\nof\nnew\nBTT-capable\nBitTorrent\nand\nμTorrent\nsoftware,\nwe\nwill\nbe\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \ndistributing\nintegrated\ncryptographic\ntoken\nwallets\nto\nall\nusers.\nAs\nwe\nwill\nbe\ndistributing\nthese\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nwallets\non\na\nlarge\nscale\nto\nmass\nmarket\nend\nusers,\nand\nnot\nnecessarily\nto\ncryptocurrency\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nenthusiasts, we will need to pay close attention to simplicity and usability.\n \nUse Case Diversification\n \n \nThe\nintroduction\nof\nBTT\nwallets\non\nthe\nscale\nanticipated\nby\nthis\nproject\nmay\ncreate\nopportunities\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nfor\nnew\nuses\nfor\nthe\ntoken\nthat\nare\nunrelated\nto","metadata":{"loc":{"lines":{"from":8615,"to":8816}}}}],["230",{"pageContent":"The\nintroduction\nof\nBTT\nwallets\non\nthe\nscale\nanticipated\nby\nthis\nproject\nmay\ncreate\nopportunities\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nfor\nnew\nuses\nfor\nthe\ntoken\nthat\nare\nunrelated\nto\nBitTorrent\ntechnology.\nWe\nexpect\nthat\nmany\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nmillions\nof\nusers\nwill\naccumulate\nsmall\nquantities\nof\nBTT\nfrom\nproviding\nservices.\nThese\nsmall\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nquantities\nmay\nnot\nhave\nmaterial\nvalue\nunless\nthey\nare\naggregated\nby\nservice\nproviders.\nSuch\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nusers may look for ways to spend their BTT that go beyond their need to incentivize seeding.\n \n \nIn\ndue\ncourse,\nwe\nexpect\nto\npublicize\nthis\nnew\nability\nfor\nusers\nto\nearn\nand\nspend\ntokens,\nand\nwe\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nexpect\nto\nexplore\npartnerships\nto\naccelerate\nmerchant\nacceptance\nof\nthis\nnew\ntype\nof\n \n \n \n \n \n \n \n \n \n \n \n \n \nmicropayment\nmechanism.\nThis\nwill\nbe\nparticularly\nadvantageous\nto\nmerchants\nwho\nwant\nto\n \n \n \n \n \n \n \n \n \n \n \n \naggregate\nand\nuse\ntokens\nto\npay\nfor","metadata":{"loc":{"lines":{"from":8816,"to":9031}}}}],["231",{"pageContent":"of\nthis\nnew\ntype\nof\n \n \n \n \n \n \n \n \n \n \n \n \n \nmicropayment\nmechanism.\nThis\nwill\nbe\nparticularly\nadvantageous\nto\nmerchants\nwho\nwant\nto\n \n \n \n \n \n \n \n \n \n \n \n \naggregate\nand\nuse\ntokens\nto\npay\nfor\ndistributed\ninfrastructure\nservices\nto\nsupport\ntheir\nongoing\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nservices.\n \nWe expect to be able to establish an economic cycle, as depicted in Figure 5, in which BTT are\n \nintroduced primarily by distributed app developers, are then traded between service requesters\n \nand service providers both within and beyond the BitTorrent ecosystem, and may ultimately\n \naggregate in materially significant pools at some service providers, who may or may not be part\n \nof the BitTorrent ecosystem.\n \n \nAt this point in the cycle, the service providers will exchange the BTT for distributed\n \ninfrastructure services provided by BitTorrent users, returning the BTT to the open market. For\n \nexample, long-term seeders who have earned a significant amount of BTT would be able to","metadata":{"loc":{"lines":{"from":9031,"to":9118}}}}],["232",{"pageContent":"infrastructure services provided by BitTorrent users, returning the BTT to the open market. For\n \nexample, long-term seeders who have earned a significant amount of BTT would be able to\n \nexchange the tokens for distributed file storage or other services.\n \n \nBITTORRENT\nFOUNDATION\n2019\nv0.8.7\nWORKING\nDRAFT\n-\nSUBJECT\nTO\nCHANGE\n \n \n \n \n \n \n \n \n \n \n16","metadata":{"loc":{"lines":{"from":9118,"to":9145}}}}],["233",{"pageContent":"Figure 5. The full BTT economic cycle.\n \nIdentity\n \nBitTorrent\nas\na\nprotocol\nhas\nnever\nprovided\nany\ntype\nof\nidentity\nservice\nbeyond\nidentifying\na\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nclient\non\na\nparticular\nIP\n+\nport\nnumber.\nEssentially,\nBitTorrent\nidentifies\ninstances\nof\nsoftware\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nrunning\non\nmachines\n–\nnot\npeople.\nThis\nis\nanalogous\nto\nthe\nidentity\nframework\nbehind\n \n \n \n \n \n \n \n \n \n \n \n \n \n \ncryptocurrencies.\nIf\na\nuser\nhas\naccess\nto\nthe\ncryptographic\ntoken\nwallet\nsoftware\nthat\nstores\na\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \ntoken,\nthen\nit\nis\ngenerally\nassumed\nthat\nit\nis\nthat\nuser’s\ntoken.\nWith\nthe\nimplementation\nof\nBTT,\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nwe\nexpect\nto\nfollow\na\nvery\nsimilar\napproach\nto\nidentity,\ntying\nBTT\ntightly\nto\na\nparticipating\npiece\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nof\nclient\nsoftware.\nBeyond\npossibly\nplacing\na\npassword\non\nthat\nwallet,\nwe\ndo\nnot\ncurrently\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nanticipate\nthat\nthe\nBTT\nproject\nwill\ndirectly\ngive\nrise\nto\nthe","metadata":{"loc":{"lines":{"from":9152,"to":9380}}}}],["234",{"pageContent":"of\nclient\nsoftware.\nBeyond\npossibly\nplacing\na\npassword\non\nthat\nwallet,\nwe\ndo\nnot\ncurrently\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nanticipate\nthat\nthe\nBTT\nproject\nwill\ndirectly\ngive\nrise\nto\nthe\nneed\nfor\nan\nadditional\nlayer\nof\nidentity\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nmanagement in BitTorrent.\n \nBTT Token Issuance\n \nWe will create a total supply of 990,000,000,000 BTT. Issued tokens will be distributed in the\n \nfollowing proportion:\n \n●\nPublic sale tokens constitute 6% of total token supply\n \n●\nPrivate sale tokens constitute 2% of total token supply\n \n●\nSeed sale tokens constitute 9% of the total token supply\n \n \nBITTORRENT\nFOUNDATION\n2019\nv0.8.7\nWORKING\nDRAFT\n-\nSUBJECT\nTO\nCHANGE\n \n \n \n \n \n \n \n \n \n \n17","metadata":{"loc":{"lines":{"from":9380,"to":9484}}}}],["235",{"pageContent":"●\nTron airdrop tokens constitute 10.1% of total token supply, to be spread out over the\n \nnext six years\n \n●\nBitTorrent protocol airdrop tokens constitute 10% of total token supply\n \n●\nBitTorrent Team and the BitTorrent Foundation were allocated 19% of total token supply\n \n●\nTRON Foundation received 20% of the total token supply\n \n●\nBitTorrent ecosystem is allocated 19.9% of the total token supply\n \n●\nPartnership tokens constitute 4% of the total token supply\n \nMore information can be found at ​\nBinance Research​\n.\n \nUsers of BitTorrent Inc.’s torrent clients,and possibly other torrent clients which choose to\n \nimplement the required set of protocol extensions, will be able to submit a CAPTCHA or proof of\n \nwork that will allow them to access an initial balance of BTT.\n \nConclusion\n \nWe\nhave\npresented\nour\nmotivation,\nqualifications\nand\nplans\nfor\nextending\nBitTorrent\nvia\nthe\nBTT\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nproject,\nstarting\nwith\na\nnew\ncore\nfeature\ndesigned\nto\nimprove\nthe\nBitTorrent","metadata":{"loc":{"lines":{"from":9489,"to":9560}}}}],["236",{"pageContent":"have\npresented\nour\nmotivation,\nqualifications\nand\nplans\nfor\nextending\nBitTorrent\nvia\nthe\nBTT\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nproject,\nstarting\nwith\na\nnew\ncore\nfeature\ndesigned\nto\nimprove\nthe\nBitTorrent\necosystem,\na\nnew\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \ncryptographic\ntoken,\nand\na\npractical\nimplementation\nof\ncryptographic\ntoken\ntransaction\n \n \n \n \n \n \n \n \n \n \nprocessing at scale.\n \nWe\nhave\noutlined\nhow\nwe\nare\ngeneralizing\nthis\napproach\nto\nenable\nother\ndistributed\napp\n \n \n \n \n \n \n \n \n \n \n \n \n \n \ndevelopers\nto\nuse\na\ndistributed\ninfrastructure\nplatform\ncomposed\nof\nmore\nthan\n100\nmillion\n \n \n \n \n \n \n \n \n \n \n \n \n \nconsumer\nBitTorrent\nclients\nfor\nthe\nprovision\nof\nnetworking\nand\nstorage\nresources\nin\nreturn\nfor\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nBTT.\n \nWe\nhave\ndescribed\nthe\nmission\nand\noperation\nof\nthe\nBTT\nincentives\nprogram,\nwhich\nwill\nbe\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \ndedicated\nto\ndriving\nthe\nnumber\nand\nsuccess\nof\nthe\nBTT\ndistributed\napps.\nIt\nwill\nmanage\nthe\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nprogressive\nrelease","metadata":{"loc":{"lines":{"from":9560,"to":9786}}}}],["237",{"pageContent":"program,\nwhich\nwill\nbe\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \ndedicated\nto\ndriving\nthe\nnumber\nand\nsuccess\nof\nthe\nBTT\ndistributed\napps.\nIt\nwill\nmanage\nthe\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nprogressive\nrelease\nand\ndistribution\nof\nBTT\nto\nthe\necosystem\nparticipants\nthat\nare\nsuccessful\nin\n \n \n \n \n \n \n \n \n \n \n \n \n \n \ndriving useful platform adoption.\n \nWe have discussed implementation considerations and challenges and how we expect to\n \naddress them.\n \nAnd\nwe\nhave\npresented\na\nplan\nfor\nhow\ntokens\nwill\nbe\nissued\nand\nshared\nin\nthe\npursuit\nof\na\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nstable,\nthriving\neconomy\nbuilt\naround\nthe\nsharing\nof\ncomputing\nresources\nby\nmillions\nof\n \n \n \n \n \n \n \n \n \n \n \n \n \necosystem participants.\n \nThe\npotential\nof\nthis\nproject\nis\ncompelling\ndue\nto\nthe\ndisruptive\ndecentralized\napplications\nthat\nit\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nwill\nenable;\nits\nopen\necosystem\napproach,\nwhich\nwill\nwelcome\nand\nreward\nparticipants\nat\nevery\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nlevel;\nand\nthe\nenormous\nhead\nstart\nthe","metadata":{"loc":{"lines":{"from":9786,"to":10001}}}}],["238",{"pageContent":"that\nit\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nwill\nenable;\nits\nopen\necosystem\napproach,\nwhich\nwill\nwelcome\nand\nreward\nparticipants\nat\nevery\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nlevel;\nand\nthe\nenormous\nhead\nstart\nthe\nBitTorrent\necosystem\nenjoys\nin\nthe\nbuilding\nand\n \n \n \n \n \n \n \n \n \n \n \n \n \n \ndeployment of a decentralized computing economy.\n \n \n \n \n \n \nBITTORRENT\nFOUNDATION\n2019\nv0.8.7\nWORKING\nDRAFT\n-\nSUBJECT\nTO\nCHANGE\n \n \n \n \n \n \n \n \n \n \n18","metadata":{"loc":{"lines":{"from":10001,"to":10101}}}}],["239",{"pageContent":"FAQ\n \nWhy not rewrite the BitTorrent protocol?\n \nWe considered a fundamental rewrite of the BitTorrent protocol to allow collaboration to be\n \npersisted over time and to ensure the “right seeding behavior” was rewarded so that valuable\n \ncontent with only occasional demand would be available for longer. We imagined a protocol\n \nwhich would both download (like BitTorrent) and hand out longer-term incentives (like bitcoin\n \nmining rewards). After lengthy consideration, we discounted this approach for several reasons:\n \n \n1. Difficulty of the problem. Implementing an incentive system at the protocol level requires\n \nprecise thinking about objectives. We found it impossible to articulate clearly what the\n \nlong-tail seeding objectives should be and how to avoid gaming them; there are plenty of\n \nBitTorrent swarms that die because no one cares (e.g., a better version of a file becomes\n \navailable). The only tractable answer seemed to be to implement a voting system to let","metadata":{"loc":{"lines":{"from":10106,"to":10129}}}}],["240",{"pageContent":"BitTorrent swarms that die because no one cares (e.g., a better version of a file becomes\n \navailable). The only tractable answer seemed to be to implement a voting system to let\n \nconsumers judge, but that seemed to call into question the desire to wrap everything\n \ninto the protocol. In short, trying to systematically discern what should and should not be\n \npreserved seemed like a problem we were poorly equipped to solve.\n \n \n2. The strict need to be better than the existing BitTorrent protocol (a.k.a. “soft-fork not\n \nhard-fork”). The BitTorrent ecosystem is now so big that a hard fork would have an\n \nextremely low chance of success. Any protocol rewrite would have to be compatible with\n \nthe existing BitTorrent ecosystem; that immediately rules out features such as penalties\n \nfor not seeding, as users would just choose clients which implemented the “old”\n \nBitTorrent protocol, which did not penalize them.","metadata":{"loc":{"lines":{"from":10129,"to":10150}}}}],["241",{"pageContent":"for not seeding, as users would just choose clients which implemented the “old”\n \nBitTorrent protocol, which did not penalize them.\n \n \n3. Conviction that we were over-complicating the solution. The likely need for human agency in\n \nthe system (people voting) convinced us we should focus on simpler extensions to the\n \ncurrent BitTorrent protocol, and design a voting system that was based around a\n \ncryptographic token. This has the advantage of allowing the market to determine what\n \nshould be seeded while leaving BitTorrent enhanced, but not changed at its core.\n \n \nWhy did BitTorrent not include incentives when it was invented?\n \nProjects that were forerunners to BitTorrent did try to imagine how a system of persistent\n \nincentives might be managed. They foundered largely due to the difficulty of finding an effective\n \nsolution to “keep the score” while operating at scale. Blockchain and distributed ledger","metadata":{"loc":{"lines":{"from":10150,"to":10172}}}}],["242",{"pageContent":"incentives might be managed. They foundered largely due to the difficulty of finding an effective\n \nsolution to “keep the score” while operating at scale. Blockchain and distributed ledger\n \nsolutions using cryptographic tokens present a powerful way to keep the score such that\n \ntransactions can be processed and a ledger may be managed at scale even without perfect\n \ntrust between all parties.\n \n \n \n \nBITTORRENT\nFOUNDATION\n2019\nv0.8.7\nWORKING\nDRAFT\n-\nSUBJECT\nTO\nCHANGE\n \n \n \n \n \n \n \n \n \n \n19","metadata":{"loc":{"lines":{"from":10172,"to":10205}}}}],["243",{"pageContent":"How can this solution help me circumvent net neutrality adversaries?\n \nProxying from IP to IP will enable users to find content that is blocked by an ISP in their\n \ngeographic area by connecting to it via an intermediary to which both site and requester can\n \nconnect.\n \n \nHow will you protect end users’ computers from malicious attacks?\n \nThe usage of end-users’ technical resources will be strictly limited to the provision of technical\n \nservices such as networking or storage within carefully bounded limits. Network connections\n \nwill be protected by uTP, a self-adjusting bandwidth mechanism which ensures applications\n \nthrottle back if there is any indication of other apps (even on other devices) using the network\n \nconnection. Storage will be encrypted and limited to a user-configurable maximum. Users will\n \nbe able to configure which applications they accept and which they do not. The provision of BTT","metadata":{"loc":{"lines":{"from":10210,"to":10231}}}}],["244",{"pageContent":"connection. Storage will be encrypted and limited to a user-configurable maximum. Users will\n \nbe able to configure which applications they accept and which they do not. The provision of BTT\n \nservices is limited to simple infrastructure operations and will in no way permit untrusted third\n \nparties to execute code on a user’s device.\n \n \nCan users opt out if they do not want to provide their resources or earn tokens?\n \nYes. Users will always be able to configure the parameters of their sharing or turn it off entirely\n \nif they choose. There will be nothing mandatory about BitTorrent extensions, and users will\n \nretain the right to opt out at any time and for any reason.\n \n \n \n \nBITTORRENT\nFOUNDATION\n2019\nv0.8.7\nWORKING\nDRAFT\n-\nSUBJECT\nTO\nCHANGE\n \n \n \n \n \n \n \n \n \n \n20","metadata":{"loc":{"lines":{"from":10231,"to":10271}}}}],["245",{"pageContent":"References\n \n \n \"Blockchain Wallet Users.\" Blockchain.com. Accessed January 17, 2019.\n \nhttps://www.blockchain.com/charts/my-wallet-n-users.\n \n \n Harrison, David. \"Index of BitTorrent Enhancement Proposals.\" BitTorrent.org. January 10, 2008.\n \nAccessed January 17, 2019. http://www.bittorrent.org/beps/bep_0000.html.\n \n \n Kaune, S., R. C. Rumin, G. Tyson, A. Mauthe, C. Guerrero, and R. Steinmetz. \"Unraveling BitTorrents File\n \nUnavailability: Measurements and Analysis.\" 2010 IEEE Tenth International Conference on\n \nPeer-to-Peer Computing (P2P), 2010. doi:10.1109/p2p.2010.5569991.\n \n \n Vuze wiki contributors. \"Availability.\" Vuze wiki, https://wiki.vuze.com/w/Availability. Accessed January\n \n17, 2019.\n \n \n Wikipedia contributors. \"Comparison of BitTorrent clients.\" Wikipedia, The Free Encyclopedia,\n \nhttps://en.wikipedia.org/w/index.php?title=Comparison_of_BitTorrent_clients&oldid=864318824.\n \nAccessed January 17, 2019.\n \n \n \n \n \nBITTORRENT\nFOUNDATION\n2019\nv0.8.7\nWORKING\nDRAFT\n-","metadata":{"loc":{"lines":{"from":10276,"to":10317}}}}],["246",{"pageContent":"https://en.wikipedia.org/w/index.php?title=Comparison_of_BitTorrent_clients&oldid=864318824.\n \nAccessed January 17, 2019.\n \n \n \n \n \nBITTORRENT\nFOUNDATION\n2019\nv0.8.7\nWORKING\nDRAFT\n-\nSUBJECT\nTO\nCHANGE\n \n \n \n \n \n \n \n \n \n \n21","metadata":{"loc":{"lines":{"from":10317,"to":10345}}}}],["247",{"pageContent":"What is BitTorrent-Chain?\nBittorrent-Chain (BTTC) is a layer 2 scaling solution, BTTC strives to solve scalability and usability issues without compromising decentralization, and can make full use of the existing Ethereum developer community and ecosystem. BTTC is fully compatible with Ethereum, and existing applications on Ethereum can be easily migrated to this BTTC. In addition to the same experience as Ethereum, users can also enjoy ultra-high throughput and extremely low fees.\n\nUsers can conduct fast, low-cost, and safe transactions on BTTC, and assets on BTTC can be easily transferred before the three main chains of Ethereum, TRON, and BSC.","metadata":{"loc":{"lines":{"from":1,"to":4}}}}],["248",{"pageContent":"Users can conduct fast, low-cost, and safe transactions on BTTC, and assets on BTTC can be easily transferred before the three main chains of Ethereum, TRON, and BSC.\n\nWhat is a side chain？\nThe side chain is an auxiliary blockchain connected to the main blockchain. The side chain may have its consensus mechanism to ensure its stability and security. The most important function of the side chain is that it can support and communicate with the main chain. This means that digital assets such as tokens can be safely transferred between the main and side chains.\n\nRead more about side chains\n\nValidator and Delegator\nYou can become either a Validator or Delegator on BTTC：\n\nValidator\nDelegator\nArchitecture\nIf you want to be a Validator, you have to know well of BTTC architecture, which means you have to learn about the core modules below,\n\nDelivery\nBTTC\nContracts\nHow to use\nNode Configure\nTo run a Validator node\nTo run a fullnode\nStaking\nValidator Staking\nDelegator Voting","metadata":{"loc":{"lines":{"from":4,"to":28}}}}],["249",{"pageContent":"Delivery\nBTTC\nContracts\nHow to use\nNode Configure\nTo run a Validator node\nTo run a fullnode\nStaking\nValidator Staking\nDelegator Voting\n\nWhat is Proof of Stake?\nProof of Stake (PoS) is a category of consensus algorithms for public blockchains that depend on a validator's economic stake] in the network.\n\nIn proof of work (PoW) based public blockchains, the algorithm rewards participants who solve cryptographic puzzles to validate transactions and create new blocks. PoW blockchain examples: Bitcoin, current Ethereum.\n\nIn PoS-based public blockchains, a set of validators take turns proposing and voting on the next block. The weight of each validator's vote depends on the size of its deposit — stake. Significant advantages of PoS include security, reduced risk of centralization, and energy efficiency. PoS blockchain examples: Eth2, BTTC, Polygon.","metadata":{"loc":{"lines":{"from":28,"to":44}}}}],["250",{"pageContent":"In general, a PoS algorithm looks as follows. The blockchain keeps track of a set of validators, and anyone who holds the blockchain's base cryptocurrency (in Ethereum's case, ether) can become a validator by sending a special type of transaction that locks up their ether into a deposit. The process of creating and agreeing to new blocks is then done through a consensus algorithm that all current validators can participate in.\n\nThere are many kinds of consensus algorithms, and many ways to assign rewards to validators who participate in the consensus algorithm, so there are many \"flavors\" of proof of stake. From an algorithmic perspective, there are two major types: chain-based PoS and BFT-style PoS.","metadata":{"loc":{"lines":{"from":46,"to":48}}}}],["251",{"pageContent":"In chain-based proof of stake, the algorithm pseudo-randomly selects a validator during each time slot (e.g. every period of 10 seconds might be a time slot), and assigns that validator the right to create a single block, and this block must point to some previous block (normally the block at the end of the previously longest chain), and so over time most blocks converge into a single constantly growing chain.\n\nIn BFT-style proof of stake, validators are randomly assigned the right to propose blocks, but agreeing on which block is canonical is done through a multi-round process where every validator sends a \"vote\" for some specific block during each round, and at the end of the process all (honest and online) validators permanently agree on whether or not any given block is part of the chain. Note that blocks may still be chained together; the key difference is that consensus on a block can come within one block, and does not depend on the length or size of the chain after it.","metadata":{"loc":{"lines":{"from":50,"to":52}}}}],["252",{"pageContent":"For more details, refer https://github.com/ethereum/wiki/wiki/Proof-of-Stake-FAQ.\n\nWho is Delegator?\nDelegators are token holders who cannot, or do not want to run a validator node themselves. Instead, they secure the network by delegating their stake to validator nodes and play a critical role in the system, as they are responsible for choosing validators. They run their delegation transaction on the staking contract on the Ethereum mainnet.\n\nThe BTT tokens are bonded with the next checkpoint committed on the TRON/BSC/Ethereum mainnet. Delegators also have an option to opt out of the system whenever they want. Similar to validators, delegators have to wait for the unbonding period, which consists of approximately 40 hours, to end before withdrawing their stake.","metadata":{"loc":{"lines":{"from":54,"to":59}}}}],["253",{"pageContent":"Fees and Rewards\nDelegators stake their tokens by delegating them to validator, obtaining a percentage of their rewards in exchange. Because delegators share rewards with their validators, delegators also share risks. Should a validator misbehave, each of their delegators are at risk of being partially slashed in proportion to their delegated stake.\n\nValidators set a commission percentage to determine the percentage of rewards that will go to them. Delegators are able to view the commission rate of each validator to understand each validator's reward distribution and a relative rate of return on their stake.\n\nVALIDATORS WITH A 100% COMMISSION RATE\nThese are validators who take all of the rewards and are not looking for delegation, as they have enough to self-stake to stake on their own.\n\nDelegators have the option to re-delegate their tokens with other validators. Rewards are accumulated at every checkpoint.","metadata":{"loc":{"lines":{"from":61,"to":69}}}}],["254",{"pageContent":"Delegators have the option to re-delegate their tokens with other validators. Rewards are accumulated at every checkpoint.\n\nBEING AN ACTIVE DELEGATOR\nDelegation should not be seen as a passive activity, as delegators are an integral part of maintaining the BTTC network. Each delegator is responsible for managing their own risk, but in doing so, delegators should aim to elect validators that are behaving well.\n\nWho is Validator?\nA validator is a participant in the network who locks up BTT tokens in the system and runs Delivery validator and Bttc block producer nodes in order to help run the network. Validators stake their BTT tokens as collateral to work for the security of the network and in exchange for their service, earn rewards.\n\nRewards are distributed to all stakers proportional to their stake at every checkpoint with the exception being the proposer getting an additional bonus. User reward balance gets updated in the contract which is referred to while claiming rewards.","metadata":{"loc":{"lines":{"from":69,"to":77}}}}],["255",{"pageContent":"Stakes are at risk of getting slashed in case the validator node commits a malicious act like double signing which also affects the linked delegators at that checkpoint.\n\nOverview\nValidators on the BTTC network are selected through an on-chain auction process which happens at regular intervals. These selected validators participate as block producers and verifiers. Once a checkpoint is validated by the participants, updates are made on the parent chain (the TRON mainnet) which releases the rewards for validators depending on their stake in network.\n\nBTTC relies on a set of validators to secure the network. The role of validators is to run a full node, produce blocks, validate and participate in consensus, and commit checkpoints on the TRON/BSC/Ethereum mainnet. To become a validator, one needs to stake their BTT tokens with staking management contracts residing on the TRON mainnet.","metadata":{"loc":{"lines":{"from":79,"to":84}}}}],["256",{"pageContent":"Core compenents\nDelivery reads the events emitted by the staking contracts to pick the validators for the current set with their updated stake ratio, which is used also by Bttc while producing blocks.\n\nDelegation is also recorded in the staking contracts and any update in the validator power or node signer address or unbonding requests comes into effect when the next checkpoint gets committed.\n\nEnd-to-end flow for a BTTC validator\nValidators set up their signing nodes, sync data and then stake their tokens on the TRON mainnet staking contracts to be accepted as a validator in the current set. If a slot is vacant, the validator is accepted immediately. Otherwise, one needs to go through the replacement mechanism to get a slot.\n\nNOTE\nThere is limited space for accepting new validators. New validators can only join the active set when a currently active validator unbonds. A new auction process for validator replacement will be rolled out.","metadata":{"loc":{"lines":{"from":86,"to":95}}}}],["257",{"pageContent":"Block producers are chosen from the validator set where it is the responsibility of the selected validators to produce blocks for a given span.\n\nNodes at Delivery validate the blocks being produced, participate in consensus and commit checkpoints on the TRON/BSC/Ethereum mainnet at defined intervals.\n\nThe probability of validators to get selected as the block producer or checkpoint proposer is dependent on one’s stake ratio including delegations in the overall pool.\n\nValidators receive rewards at every checkpoint as per their stake ratio, after deducting the proposer bonus which is disbursed to the checkpoint proposer.\n\nOne can opt out of the system at any time and can withdraw tokens once the unbonding period ends.\n\n\nBTTC PoS Architecture\nBTTC Network is a blockchain application platform that provides Proof-of-Stake sidechains.","metadata":{"loc":{"lines":{"from":97,"to":109}}}}],["258",{"pageContent":"BTTC PoS Architecture\nBTTC Network is a blockchain application platform that provides Proof-of-Stake sidechains.\n\nArchitecturally, the beauty of BTTC is its elegant design, which features a generic validation layer separated from varying execution environments like full-blown EVM sidechains.\n\nTo enable the PoS mechanism on our platform, a set of staking management contracts are deployed on TRON, as well as a set of incentivized validators running Deivery and Bttc nodes. TRON/BSC/Ethereum are the first basechains BTTC supports, but BTTC intends to offer support for additional basechains, based on community suggestions and consensus, to enable an interoperable decentralized Layer 2 blockchain platform.\n\nBTTC PoS has a three-layer architecture:\n\nStaking smart contracts on TRON\nDelivery (Proof of Stake layer)\nBttc (Block producer layer)\nBTTC smart contracts (on TRON)\nBTTC maintains a set of smart contracts on Ethereum, which handle the following:","metadata":{"loc":{"lines":{"from":109,"to":122}}}}],["259",{"pageContent":"Staking management for the Proof-of-Stake layer\nDelegation management including validator shares\nCheckpoints/snapshots of sidechain state\nDelivery (Proof-of-Stake validator layer)\nDelivery is the PoS validator node that works in consonance with the Staking contracts on TRON to enable the PoS mechanism on BTTC. We have implemented this by building on top of the Tendermint consensus engine with changes to the signature scheme and various data structures. It is responsible for block validation, block producer committee selection, checkpointing a representation of the sidechain blocks to TRON/BSC/Ethereum in our architecture and various other responsibilities.\n\nDelivery layer handles the aggregation of blocks produced by Bttc into a merkle tree and publishing the merkle root periodically to the root chain. This periodic publishing are called checkpoints. For every few blocks on Bttc, a validator (on the Delivery layer):","metadata":{"loc":{"lines":{"from":124,"to":130}}}}],["260",{"pageContent":"Validates all the blocks since the last checkpoint\nCreates a merkle tree of the block hashes\nPublishes the merkle root to the main chain\nCheckpoints are important for two reasons:\n\nProviding finality on the Root Chain\nProviding proof of burn in withdrawal of assets\nA bird’s eye view of the process can be explained as:","metadata":{"loc":{"lines":{"from":132,"to":139}}}}],["261",{"pageContent":"Providing finality on the Root Chain\nProviding proof of burn in withdrawal of assets\nA bird’s eye view of the process can be explained as:\n\nA subset of active validators from the pool are selected to act as block producers for a span. The Selection of each span will also be consented by at least 2/3 in power. These block producers are responsible for creating blocks and broadcasting it to the remaining of the network.\nA checkpoint includes the root of all blocks created during any given interval. All nodes validate the same and attach their signature to it.\nA selected proposer from the validator set is responsible for collecting all signatures for a particular checkpoint and committing the same on the main-chain.\nThe responsibility of creating blocks and also proposing checkpoints is variably dependent on a validator’s stake ratio in the overall pool.\nBttc (Block Producer Layer)\nBttc is BTTC block producer layer - the entity responsible for aggregating transactions into blocks.","metadata":{"loc":{"lines":{"from":139,"to":148}}}}],["262",{"pageContent":"Block producers are periodically shuffled via committee selection on Delivery in durations termed as a span in BTTC. Blocks are produced at the Bttc node and the sidechain VM is EVM-compatible. Blocks produced on Bttc are also validated periodically by Delivery nodes, and a checkpoint consisting of the Merkle tree hash of a set of blocks on Bttc is committed to TRON/BSC/Ethereum periodically.\n\nGeneral FAQ\nWhat is the BitTorrent-Chain network?\nBitTorrent-Chain (BTTC) is the industry's first heterogeneous cross-chain interoperable scaling protocol that enables scaling through off-chain computing via sidechains, while BitTorrent-Chain is fully compatible with Ethernet Virtual Machines (EVMs).","metadata":{"loc":{"lines":{"from":150,"to":154}}}}],["263",{"pageContent":"Can I participate in the staking process even if I don't want to run a node?\nYes, you can. BTT token holders who do not want to run their nodes can delegate their tokens to a verifier. Delegation increases the power of the verifier. The greater the power, the greater the likelihood that the Validator will become a Block Producer and Validator, and the greater the weight in the consensus.\n\nWhere will the pledged tokens be stored?\nThe pledged tokens will be locked in a contract deployed in the TRON network and the Super Delegate will not hold the delegated tokens.\n\nHow long does it take to withdraw assets from BTTC?\nDepending on network congestion, the arrival time is variable and usually takes 45 minutes to 3 hours.","metadata":{"loc":{"lines":{"from":156,"to":163}}}}],["264",{"pageContent":"How long does it take to withdraw assets from BTTC?\nDepending on network congestion, the arrival time is variable and usually takes 45 minutes to 3 hours.\n\nWhy can't I pledge if I already have enough BTT?\nPlease check if you have sufficient BTT in your wallet balance on the Tron network, under which all pledges are made. If your BTT is under another network, you need to convert it to native BTT and transfer it to your wallet on the Tron network.\n\nIs there a safe height on BTTC?\nPlease use the 128th block before the latest block as a safe height.\n\nTechnical FAQ\n1. Are the private keys same for delivery and bttc keystore?\nYes, the private key used for generating validator keys and bttc keystore is the same.\n\n2. List of Common Commands\nWe currently have an easy to dive-in list for you for the Linux packages. We will keep updating this list regularly for more convenience.\n\nFor Linux packages\n\nA. Start delivery\n$ deliveryd start\n\nB. Start delivery rest-server\n$ deliveryd rest-server","metadata":{"loc":{"lines":{"from":163,"to":185}}}}],["265",{"pageContent":"For Linux packages\n\nA. Start delivery\n$ deliveryd start\n\nB. Start delivery rest-server\n$ deliveryd rest-server\n\nC. Build bttc\n$ make bttc\n\n3. How to use developer API?\nThe BitTorrent Chain Developer APIs are provided as a community service and without warranty, so please use what you need and no more. We support both GET/POST requests and there is a rate limit of 5 calls per sec/IP.\n\nNote: Source attribution via a link back or mention that your app is \"Powered by https://bttcscan.com APIs\" is required except for personal/private usage.\n\n4. How many validators can be active concurrently?\nThere are now 12 active validators. There is limited space for accepting new validators. New validators can only join the active set when a currently active validator unbonds.\n\nA new auction process for validator replacement will be rolled out.\nDelegator FAQ\nWhat is the url of the Staking dashboard？\nhttps://wallet.bt.io/staking。","metadata":{"loc":{"lines":{"from":185,"to":207}}}}],["266",{"pageContent":"A new auction process for validator replacement will be rolled out.\nDelegator FAQ\nWhat is the url of the Staking dashboard？\nhttps://wallet.bt.io/staking。\n\n1. What is the minimum staking amount？\nThere is no minimum amount for staking, you may start with 1 BTT.\n\n2. How much reward I can earn if I stake to vote？\nPlease use the calculator here to find out https://wallet.bt.io/staking#\n\n3. Which wallets are supported？\nOnly TronLink for now.\n\n4. Is hardware wallet supported?\nYes, it is. You can use the \"Connect Hardware Wallet\" option on Metamask and connect your hardware wallet, then continue with the authorization process.\n\n5. How to claim my rewards?\nPlease go to \"My Account\" - \"Voters\" page, click \"...\" on the right side of the voting list, and select \"Receive Rewards\". For specific operations, please refer to the documentation Claim Rewards.","metadata":{"loc":{"lines":{"from":207,"to":225}}}}],["267",{"pageContent":"6. How to withdraw staked BTT?\nOn the \"My Account\" - \"Voters\" page, click \"...\" on the right side of the voting list and select \"Withdraw\". For specific operations, please refer to the documentation Withdraw Staked BTT\n\n7. How long does it take to deposit assets to the BitTorrent network？\nThe BTTC network currently supports cross-chain Ethereum/ TRON/ BSC assets, and it takes 7-8 minutes to deposit assets into the BTTC network.\n\n8. How long does it take to withdraw assets from the BitTorrent network？\nAfter the user initiates the withdrawal operation on the BTTC network, the operation information will be synchronized to the main chain immediately. Depending on the network congestion, this usually takes 45 minutes to 3 hours;","metadata":{"loc":{"lines":{"from":227,"to":234}}}}],["268",{"pageContent":"After the withdrawal operation information is synchronized to the main chain, the receiving address also needs to withdraw the assets from the contract of the corresponding chain through a signature. Due to its chain nature, the confirmation time is relatively long.\n\nValidator FAQ\n1. How to set up a validator node on the mainnet?\nSee Validator Overview.\n\n2. How can a new Validator replace an existing one?\nThere is limited space for accepting new validators. New validators can only join the active set when a currently active validator unbonds.\n\nA new auction process for validator replacement will be rolled out.\n\n3. Can I start bttc before delivery is completely synced?\nNo, you cannot. If you start your bttc without delivery being completely synced, you face issues on your bttc.","metadata":{"loc":{"lines":{"from":236,"to":248}}}}],["269",{"pageContent":"3. Can I start bttc before delivery is completely synced?\nNo, you cannot. If you start your bttc without delivery being completely synced, you face issues on your bttc.\n\n4. Validator delivery is unable to connect to peers\nThis typically means that your sentry delivery is running into issues. Check your sentry delivery and see if the service is running fine. If the service is stopped, then restarting the service on your sentry should resolve this issue. Similarly, after fixing your sentry, a restart of your delivery service should also resolve the problem.\n\n5. delivery shows \"Error: Wrong Block.Header.AppHash. Expected xxxx\"\nThis error usually occurs when delivery service is stuck on a block and there is no rewind option available on delivery.\n\nSolution:\n\nReset delivery completely\nSync from the snapshot again\n6. It is not clear which private Key I should add when I generate a validator key\nThe private key to be used is your wallet's address where your BTT tokens are stored.","metadata":{"loc":{"lines":{"from":248,"to":262}}}}],["270",{"pageContent":"7. Are the private keys the same for delivery and bttc keystore?\nYes, the private key used for generating the validator keys and bttc keystore are the same.\n\n\nStaking FAQ\n1. How to stake tokens on BTTC?\nFor staking you would need to have funds on the TRON Mainnet. Log into Tronlink on the network using the Staking Dashboard.\n\n2. I've staked my BTT tokens. How can I stake more?\nYou can navigate to \"My Stake\", choose more actions on the right side of a stake and click on \"Stake More\".\n\n3. Why am I not able to stake?\nCheck if you have funds on the Main TRON network to delegate your tokens. All staking happens on the TRON network only.\n\n4. How do I know which validator to select for better rewards?\nIt depends on your understanding and research on which validator you would want to stake on. You can find the list of validators here : https://app.bt.io/staking","metadata":{"loc":{"lines":{"from":264,"to":279}}}}],["271",{"pageContent":"BTTC Bridge\nBTTC Bridge offers safe and reliable cross-chain service between heterogeneous blockchains. It supports EVM blockchains (Ethereum, BSC) and TRON, enables decentralized asset transfers between them\n\nLaunch App\nDecentralized Transfer Across Heterogeneous Chains\nBTTC Bridge provides a decentralized solution to asset transfers across heterogeneous chains\n\n\nDecentralized Cross-Chain Protocol\nBTTC decentralized cross-chain protocol now supports TRON, Ethereum, and BSC, with more major public chains joining the league\n\n\nProof of Stake\nBTTC Bridge adopts PoS to validate and secure transactions\n\n\nVarious Token Choices\nBTTC Bridge supports popular tokens from three major blockchains\n\nSupports 100+ mainstream tokens\n\nComprehensive token mapping mechanism\n\nMap a Token\nPower Main Chain Ecosystems\nBTTC enables the decentralized transfer of mainchain tokens between various blockchains\n\n\nUSDD\n\nSUN\n\nJST\n\nNFT\n\nWIN","metadata":{"loc":{"lines":{"from":283,"to":319}}}}],["272",{"pageContent":"Comprehensive token mapping mechanism\n\nMap a Token\nPower Main Chain Ecosystems\nBTTC enables the decentralized transfer of mainchain tokens between various blockchains\n\n\nUSDD\n\nSUN\n\nJST\n\nNFT\n\nWIN\n\nMore\nUSDD\nUSDD is an over-collateralized decentralized stablecoin launched by TRON. BTTC Bridge enables users to acquire USDD tokens in different networks, empowering multi-chain prosperity of USDD\n\nJoin USDD EcosystemStart Cross-Chain Transfer\n\nSuperior Cross-Chain Experience\nBTTC endeavors to provide a decentralized, superior experience for developers and users\n\n\nSmooth Interaction\nIntuitive layout of functionalities offers a smoother user experience\n\nTry BTTC Bridge\n\nHassle-Free Transfer\nRelayers help users transfer assets across blockchains in a decentralized, easier and more cost-effective way\n\nLearn More\n\nStatus Tracking\nDeliveryScan visualizes data of the Delivery layer and offers users easy access to track the status of cross-chain transactions","metadata":{"loc":{"lines":{"from":319,"to":357}}}}],["273",{"pageContent":"Learn More\n\nStatus Tracking\nDeliveryScan visualizes data of the Delivery layer and offers users easy access to track the status of cross-chain transactions\n\nGo to DeliveryScan\nHow to Use BTTC Bridge?\nStart cross-chain transfers on BTTC in three steps\n\n\nChoose the networks\n\n\nSelect the token and enter amount\n\n\nConfirm the receiving address\n\nStep-by-Step TutorialStart Transfer\n\n\n\nFast Mode\nAn innovative, more efficient cross-chain mode provided by BTTC Bridge","metadata":{"loc":{"lines":{"from":357,"to":380}}}}],["274",{"pageContent":"Select the token and enter amount\n\n\nConfirm the receiving address\n\nStep-by-Step TutorialStart Transfer\n\n\n\nFast Mode\nAn innovative, more efficient cross-chain mode provided by BTTC Bridge\n\nJoin Now\nOverview\nFast Mode is a more efficient cross-chain solution proposed by the community. It introduces an innovative Relayer service that helps you receive your assets on the receiving networks, making cross-chain transfers easier and faster as well as averting transfer failures due to insufficient resources for the gas fee.\nFeatures & Advantages\nDecentralized\nThe fully decentralized, community-driven Relayer service makes your cross-chain transfers easier, faster, and more secure. All users can apply to be Relayers on BTTC.\n\nIsolated\nYour cross-chain assets will be delivered directly to the receiving addresses, and Relayers have no access to your assets.\n\nFaster\nRelayers automatically help you receive your assets, allowing for faster and easier cross-chain transfers.","metadata":{"loc":{"lines":{"from":380,"to":403}}}}],["275",{"pageContent":"Faster\nRelayers automatically help you receive your assets, allowing for faster and easier cross-chain transfers.\n\nLess Gas Fee\nRelayers will help you receive your assets. You won't be bothered by preparing resources for the gas fee on the receiving networks anymore.\n\nQuick Start\nFast Mode is supported for cross-chain transfers on BTTC.\nAlmost all tokens on BTTC are supported.View tokens supported\n\n01\nInitiate a transfer-out transaction\n\n02\nSelect Fast Mode\n\n03\nAsset arrives\n\nRelayer Application Project\nFacilitate cross-chain transfers, earn rewards, and co-build the BTTC ecosystem.\nAbout Relayer","metadata":{"loc":{"lines":{"from":403,"to":424}}}}],["276",{"pageContent":"02\nSelect Fast Mode\n\n03\nAsset arrives\n\nRelayer Application Project\nFacilitate cross-chain transfers, earn rewards, and co-build the BTTC ecosystem.\nAbout Relayer\n\nFacilitate transfers and earn rewards\n64.77%\nFacilitate users to complete cross-chain transfers and charge service fee as rewards.\nAPY in last 7 days\nJoin Now\nEasy application and flexible pricing\nYou can follow the guides and apply to be a Relayer in only 3 steps. Relayers can modify the fee charged for the cross-chain service as wanted.\nFlexible token scope\nRelayers can decide what tokens to support based on market conditions.","metadata":{"loc":{"lines":{"from":424,"to":442}}}}],["277",{"pageContent":"BitTorrent token (BTT) is a TRC-20 utility token issued based on the TRON Network and can be used in multiple ecosystems and almost all DApps.\nBTT tokens are all issued on TRON Network and transferred cross-chain to BTTC and other blockchain networks. Members in the BTTC ecosystem can manage and protect the operation of BTTC by staking BTT tokens. BTT token functions as the basic currency in BTTC transactions, just like the ETH token on the Ethereum Network. Users can trade on BTTC and interact with smart contracts through BTT tokens.\nData of BTT\n$0.0000003803\nPrice\n50,012,763,992,821 BTT","metadata":{"loc":{"lines":{"from":444,"to":449}}}}],["278",{"pageContent":"Total Staked \n(5.05% of circulating supply)\n14.08%\nStaking APY\nBTT — Cornerstone of the BTTC Ecosystem\nGas Token\nBTT is the basic token in BTTC transactions, paid by users as the gas fee to broadcast transactions on the chain. The gas fee is mainly used to encourage miners to handle user transactions, playing an important role in the BTT tokenomics.\nNetwork Guardian\nBTTC adopts the Proof-of-Stake (PoS) mechanism, which involves randomly selected validators to produce and validate blocks to ensure network security. Users can stake their BTT tokens for validators to participate in network governance and get rewards.\nGet BTT\nGet BTT on BTTC\nBTTC Network\nPay for the gas fee\n\nCross-chain Bridge\nThe gas token BTT on the BTTC Network refers to BTT transferred from the TRON Network via the cross-chain bridge. Tokens transferred from Ethereum and BSC, namely BTT_e and BTT_b, can be exchanged for the gas token BTT through Converter.\n\nBridge\nConverter\nGet BTT through cross-chain transfers","metadata":{"loc":{"lines":{"from":451,"to":470}}}}],["279",{"pageContent":"Bridge\nConverter\nGet BTT through cross-chain transfers\n\nGas Subsidies\nAddresses that receive cross-chain assets on BTTC for the first time will get a certain amount of BTT tokens as gas subsidies. This is not an inherent mechanism and is available only within a certain period.\n\n\nGet BTT on TRON\nTRON Network\nParticipate in BTTC network governance\n\nGet from DEXs\nDecentralized exchanges (DEXs) are open markets for TRC-20 tokens. Users can swap tokens through smart contracts. We recommend that you choose trusted DEXs to swap for BTT on the TRON Network.\n\n* DEXs are more suitable for TRX holders rather than beginners.\n\nSunSwap V1\nSunSwap V2\nSwap your tokens for BTT on TRON\n\nGet from CEXs\nDifferent from DEXs, centralized exchanges (CEXs) are more like traditional exchanges that allow users to deposit assets to their exchange wallets through traditional payment methods and swap for tokens as needed. We recommend that you choose trusted CEXs.","metadata":{"loc":{"lines":{"from":470,"to":492}}}}],["280",{"pageContent":"* Please be sure to comply with local laws and regulations when trading on CEXs.\n\nHuobi\nPoloniex\nBuy BTT through traditional payment methods\n\nGet from BTT Redenomination Plan\nSwap BTTOLD for BTT at a ratio of 1:1000 on the TRON Network.\nAbout BTT Redenomination >\n\nBTT Redenomination\nGet BTT from Other Networks\nEthereum Network\nBSC Network\nParticipate in ecosystems like Ethereum and BSC\n\nYou can transfer BTT tokens from Ethereum and BSC to the BTTC Network via BTTC Bridge or swap for BTT tokens on DEXs.\n\nUniswap (Ethereum)\nPancakeSwap (BSC)\nHave more methods? Contribute inForum\nMore Applications of the BTT Ecosystem\n\nBTFS\nUsers pay with the BTT tokens to store files on the decentralized BTFS network\n\n\nBitTorrent X\nBTT can be used to purchase various value-added services in BitTorrent X products\n\n\nJustLend DAO\nBTT is available for asset supply, borrowing, and mining on JustLend DAO\n\n\nSUN\nSUN platform offers several BTT trading pairs for decentralized exchanges","metadata":{"loc":{"lines":{"from":494,"to":530}}}}],["281",{"pageContent":"JustLend DAO\nBTT is available for asset supply, borrowing, and mining on JustLend DAO\n\n\nSUN\nSUN platform offers several BTT trading pairs for decentralized exchanges\n\n\nLegal Tender of Dominica\nBTT is granted the statutory status as an authorized digital currency in the commonwealth of Dominica\n\nMore use cases of BTT to be discovered.Learn more\n\n\nIntroduction to BTTC\nBitTorrent Chain (referred to as “BTTC” below) is the first scalable heterogeneous cross-chain interoperability protocol on TRON, featuring PoS (Proof of Stake) consensus mechanism and multi-node validation. It supports smart contract extension through sidechains and is compatible with Ethereum-based smart contracts. Together with many other functions it boasts, it enables developers to migrate and develop DApps on the chain without a hitch.\n\nThis chapter is an introduction to the BTTC ecosystem guide for developers to understand how to develop on BTTC.","metadata":{"loc":{"lines":{"from":530,"to":547}}}}],["282",{"pageContent":"Key Features of BTTC\nSpeed:BitTorrent-Chain will solve this problem by using a high-throughput blockchain. A set of block producers will be selected. Proof of Stake will be applied to validate blocks, and proofs of blocks will be periodically sent to TRON main net or other blockchains. This mechanism ensures blocks will be confirmed in an extremely short time.\nHigh Throughput:BitTorrent-Chain solves this problem by using a block producer layer, where block producers are able to produce blocks at a very fast rate.\nHigh Scalability:In the future, BitTorrent-Chain can easily access more public chains while using the same decentralized POS layer to increase scalability.\nLow Transaction Fees:The BitTorrent-Chain achieves economies of scale by conducting a large number of transactions at the block producer layer, thus reducing costs and ensuring low transaction costs.\nDeveloping with BTTC","metadata":{"loc":{"lines":{"from":549,"to":554}}}}],["283",{"pageContent":"Developing with BTTC\nTools on the ethereum blockchain are supported out of the box on BTTC. For example, Truffle, Remix and Web3js to name a few. Developers can deploy decentralised applications directly on the BTTC Donau test network or the main network if they have Ethereum development experience.","metadata":{"loc":{"lines":{"from":554,"to":555}}}}],["284",{"pageContent":"All details related to the BTTC network can be found here in the network documentation.\n\nwallet\nBTTC is EVM (Ethereum Virtual Machine) compatible. In order to interact with the BTTC network, developers first need to have an Ethereum-based wallet, either the Metamask wallet or another EVM-enabled wallet.\n\nSmart contracts\nDevelopers can use Remix, Truffle , Hardhat and other tools to test, compile, debug and deploy decentralised applications to the BTTC network.\n\nConnecting to BTTC network\nDevelopers can add the BTTC network to Metamask, which allows developers to connect to the BTTC network using RPC.\n\nNote: Developers can also use the same RPC in web3.js to connect the BTTC network.\n\n// Javascript\nconst Web3 = require('Web3')\n// Sign up for a free dedicated RPC URL at https://rpc.bt.io or other hosted node providers.\nconst web3 = new Web3('https://rpc.bt.io')","metadata":{"loc":{"lines":{"from":557,"to":573}}}}],["285",{"pageContent":"// Javascript\nconst Web3 = require('Web3')\n// Sign up for a free dedicated RPC URL at https://rpc.bt.io or other hosted node providers.\nconst web3 = new Web3('https://rpc.bt.io')\n\nBuilding a new dApp on BTTC?\nIf developers are not experienced in building decentralised applications (dApps), here are some links to resources that will give developers a general idea of the tools needed to build, debug and deploy decentralised applications (dApps) to the BTTC network.\n\nDemo: Build a dApp on BTTC\nWeb3.js\nEthers.js\nRemix\nTruffle\nMetamask\nAlready have a dApp?\nBTTC is compatible with EVM, so developers don't have to worry about the underlying architecture. Developers can easily migrate from an Ethereum Virtual Machine (EVM)-based chain to the BTTC network.\n\nWallet\nWallets are used by the client to manage your dApp integration on BTTC. There are two main types of wallets used in the BTTC ecosystem:","metadata":{"loc":{"lines":{"from":573,"to":591}}}}],["286",{"pageContent":"Wallet\nWallets are used by the client to manage your dApp integration on BTTC. There are two main types of wallets used in the BTTC ecosystem:\n\nTronLink\nMetaMask\nTronLink\nTronLink is the most feature-rich decentralized TRON wallet currently available. Sustain all of TRON's standard functions. TronLink supports testnets and custom networks via an open SDK. Simultaneously, TronLink receives support from the TRON core development team and connects seamlessly to the TRON mainnet.\n\nType: Unmanaged\n\nPrivate key storage: local\n\nCommunication with TRON: TronGrid HTTP API\n\nTo manage your assets on the TRON network, we recommend using TronLink. Please refer to the official TRON document regarding the integration of TronLink:\n\nTronWeb quickstart\nTronLink intergration\nMetaMask\nMetaMask is a free and secure wallet that enables the interaction of web applications with multiple blockchains.","metadata":{"loc":{"lines":{"from":591,"to":610}}}}],["287",{"pageContent":"TronWeb quickstart\nTronLink intergration\nMetaMask\nMetaMask is a free and secure wallet that enables the interaction of web applications with multiple blockchains.\n\nPlease download the wallet from MetaMask and add its Chrome extension to your local Google Chrome before using it.\n\nFollowing that, please create a new account in MetaMask. Please keep your password, private key, and mnemonic secure and do not share them with anyone.\n\nSetting up BTTC on MetaMask\nTo view account fund activity on BTTC, you must configure the BTTC URL on MetaMask.\n\nPlease select custom RPC here to add BTTC's mainnet or testnet.\n\n\nPlease complete the form as shown in the figure below to correctly add the BTTC mainnet.\n\nSetting up Custom Token\nThe following sections detail how to configure custom tokens on MetaMask. This method can be used to add any custom ERC-20 tokens to MetaMask","metadata":{"loc":{"lines":{"from":610,"to":628}}}}],["288",{"pageContent":"Setting up Custom Token\nThe following sections detail how to configure custom tokens on MetaMask. This method can be used to add any custom ERC-20 tokens to MetaMask\n\nIn MetaMask, click Add Token. The Token added here is the Ethereum Ropsten test network's Test Token. The address is 0x414C578d018afa9a4c9acf435a8C5fD042203901. The symbol is t. This token is only for demostration. After entering the token address, the following information will be automatically filled in, as illustrated in the figure:\n\n\nThe token will be displayed in your MetaMask account once the addition is complete.\n\nThe procedure for adding BTTC tokens to MetaMask is essentially identical to that described above. Before adding: You only need to enter the correct BTTC URL in the custom RPC.\n\nMutiple Accounts\nIf this is your first time using MetaMask, this article will walk you through the process of creating multiple accounts.","metadata":{"loc":{"lines":{"from":628,"to":639}}}}],["289",{"pageContent":"Mutiple Accounts\nIf this is your first time using MetaMask, this article will walk you through the process of creating multiple accounts.\n\nAs shown in the figure, click the circular pattern in the upper right corner and then click Create Account.\n\n\nThen enter the account name (any name can be used) in the window.\n\nIntegration\nConfigure Web3\nInstall web3 in your dApp:\n\nnpm install --save web3\n\nCreate a new file named web3.js, and enter the following code:\n\nimport Web3 from 'web3';\n\nconst getWeb3 = () => new Promise((resolve) => {\n window.addEventListener('load', () => {\n   let currentWeb3;","metadata":{"loc":{"lines":{"from":639,"to":659}}}}],["290",{"pageContent":"import Web3 from 'web3';\n\nconst getWeb3 = () => new Promise((resolve) => {\n window.addEventListener('load', () => {\n   let currentWeb3;\n\n   if (window.ethereum) {\n     currentWeb3 = new Web3(window.ethereum);\n     try {\n       // Request account access if needed\n       window.ethereum.enable();\n       // Acccounts now exposed\n       resolve(currentWeb3);\n     } catch (error) {\n       // User denied account access...\n       alert('Please allow access for the app to work');\n     }\n   } else if (window.web3) {\n     window.web3 = new Web3(web3.currentProvider);\n     // Acccounts always exposed\n     resolve(currentWeb3);\n   } else {\n     console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');\n   }\n });\n});\n\nexport default getWeb3;\n\nThe getWeb3 function of exports is used in the above code to request access to the MetaMask account by detecting the MetaMask-injected global object (Ethereum or web3).\n\nThe MetaMask document is described as follows:","metadata":{"loc":{"lines":{"from":659,"to":690}}}}],["291",{"pageContent":"The MetaMask document is described as follows:\n\nMetaMask injects a global API into websites visited by its users at window.ethereum (Also available at window.web3.currentProvider for legacy reasons). This API allows websites to request user login, load data from blockchains the user has a connection to, and suggest the user sign messages and transactions. You can use this API to detect the user of a web3 browser.\n\nThen import the file into the client code:\n\nimport getWeb3 from '/path/to/web3';\n\nAnd call the following function:\n\n  getWeb3()\n    .then((result) => {\n       this.web3 = result;\n    });\n\nSetup Accounts\nWhen sending non-query transactions, a signer account (private key) is required.\n\n  this.web3.eth.getAccounts()\n  .then((accounts) => {\n    this.account = accounts[0];\n  })\n\ngetAccounts() returns a list of all the accounts on the user's MetaMask, with accounts[0] being the first one.","metadata":{"loc":{"lines":{"from":690,"to":713}}}}],["292",{"pageContent":"getAccounts() returns a list of all the accounts on the user's MetaMask, with accounts[0] being the first one.\n\nInstantiate Contract\nAfter creating a web3 object, we need to instantiate the contract, which requires the contract's ABI and address.\n\nconst myContractInstance = new this.web3.eth.Contract(myContractAbi, myContractAddress)\n\nCall Contract\nNow that the contract object has been instantiated, we can call contract methods.\n\nThe send() method is used to modify the state of the chain, and the call() method is used as queries.\n\nCall the function call()\n  this.myContractInstance.methods.myMethod(myParams)\n  .call()\n  .then (\n    // do stuff with returned values\n  )\n\nCall the function send()\n  this.myContractInstance.methods.myMethod(myParams)\n  .send({\n    from: this.account,gasPrice: 0\n  })\n  .then (\n    (receipt) => {\n      // returns a transaction receipt}\n    )","metadata":{"loc":{"lines":{"from":713,"to":740}}}}],["293",{"pageContent":"Network Details\nBTTC-Mainnet\nBTTC-Testnet\nBTTC is a layer-2 network of TRON/BSC/Ethereum network. The following is the network structure of the BTTC mainnet:\n\n\nBTTC Network\nNetwork Name: BitTorrent Chain Mainnet\nRPC URL 1: https://rpc.bt.io\nRPC URL 2: https://bttc.trongrid.io\nChainID: 199\nSymbol: BTT\nBlock Explorer 1: https://bttcscan.com\nBlock Explorer 2: https://scan.bt.io\nData Snapshots Download: https://snapshots.bt.io\nBTTC Infrastructure Providers\nYou can also use other infrastructure providers' RPC services:\n\nGetBlock\nAnkr\nETH Network\nNetwork Name: Ethereum Mainnet\nRPC URL: https://mainnet.infura.io/v3\nChainID: 1\nSymbol: ETH\nBlock Explorer: https://etherscan.io\nBSC Network\nNetwork Name: Binance Smart Chain\nRPC URL: https://bsc-dataseed.binance.org\nChainID: 56\nSymbol: BNB\nBlock Explorer: https://bscscan.com\nTRON Network\nThe access to the TRON netowrk requires the Tronlink Chrome plug-in.\n\nAfter logging in to the Tronlink wallet, users need to switch to mainnet.","metadata":{"loc":{"lines":{"from":743,"to":778}}}}],["294",{"pageContent":"After logging in to the Tronlink wallet, users need to switch to mainnet.\n\nRPC URL：https://api.trongrid.io\nBlock Explorer：https://tronscan.org\n\n\nGas Token - BTT\nBitTorrent token(BTT) is a cryptocurrency that is the native token of the Bittorrent-Chain (BTTC). Similar to Ether (ETH) to Ethereum, BTT is the engine that powers BTTC. No matter sending BTT or calling the smart contract of BTTC, users need to pay in BTT as gas fee to use the BTTC network. This fee acts as an incentive to reward block producers for processing and validating the action you want to perform.\n\nOn BTTC, BTT tokens are used as native tokens, which means that users can send BTT to other accounts and pay gas fee with BTT, just as users send ETH to other accounts and pay gas fee with ETH on Ethereum.\n\nThe example of how to send BTT tokens from one account to another on BTTC is shown as follows.\n\nlet Web3 = require(\"web3\");","metadata":{"loc":{"lines":{"from":778,"to":791}}}}],["295",{"pageContent":"The example of how to send BTT tokens from one account to another on BTTC is shown as follows.\n\nlet Web3 = require(\"web3\");\n\n// Replace value of rpc with https://pre-rpc.bt.io/ for Donau\n// Or let rpc = \"https://bttc.trongrid.io\";\nlet rpc = \"https://rpc.bt.io\";\n\nconst provider = new Web3.providers.HttpProvider(rpc);\nconst web3 = new Web3(provider);\n\n// Add your private key\nweb3.eth.accounts.wallet.add(\"pvt-key\");\n\n// Send 10 BTT\nweb3.eth\n.sendTransaction({\nfrom: \"your address\",\nto: \"to address\",\nvalue: web3.utils.toWei(\"10\", \"ether\"),\ngas: 8000000,\n})\n.then(function (receipt) {\nconsole.log(receipt);\n});\n\nBittorrent-Chain Mainnet\nThe BTT tokens can be consumed to unlock various applications and services on the BTTC mainnet network. The way to obtain BTT tokens on the BTTC mainnet network is shown as follows.\n\nPurchase BTT Token\nThe BTT token can be purchased from the following places:","metadata":{"loc":{"lines":{"from":791,"to":821}}}}],["296",{"pageContent":"Purchase BTT Token\nThe BTT token can be purchased from the following places:\n\nBinance\nOKEx\nBITTREX\nHuobi\nbithumb\nHitBTC\nBITFINEX\nKuCoin\nUPbit\nGate.io\nCOINTIGER\nbitbns\nSunSwap\nCoinSpot\nCoinEx\nabcc\nBitForex\nchangelly\nDigiFinex\nBitpie\nBitMax\nBitMart\nExShell\nAnyBit\nchangehero\nBigONE\nexmo\nTRUST\nkraken\nGet BTT Token by Cross-chain Bridge\nTronLink and MetaMask are the two types of wallet used in the BTTC ecosystem, users can transfer BTT between BitTorrent Chain and TRON/ Ethereum/ BSC through BTTC cross-chain bridge.\n\nPlease refer to the wallet instructions and pay attention to setting the network as the mainnet.\n\nCongratulations, then you can interact with the BTTC mainnet.\n\nBittorrent-Chain Donau Testnet\nGetting the BTT tokens on the Donau testnet is really easy, users can deposit BTT tokens from the faucet smart contract deployed on Donau testnet.\n\nWays to get BTT tokens from faucet for Donau testnet:","metadata":{"loc":{"lines":{"from":821,"to":863}}}}],["297",{"pageContent":"Ways to get BTT tokens from faucet for Donau testnet:\n\nChoose Bittorrent-chain Donau testnet\nChoose BTT token\nEnter your account address and confirm\nUsers can also use TronLink and MetaMask to interact with Donau testnet.\n\nPlease refer to the wallet instructions and pay attention to setting the network as the Donau testnet.\n\nEdit this page\n\n\n\n\nBitTorrent Token\nTokenizing the world’s largest decentralized file sharing protocol with BTT\nBTT is a TRC-20 utility token based on the blockchain that powers features of the most popular decentralized protocols and applications in the world. DApps powered by BTT include BitTorrent Speed, BitTorrent File System, and others in the pipeline.\n\nBTT Services\n\nLearn how products use BitTorrent Token.\n\nBitTorrent Speed\nGet faster download speeds and BTT token rewards.\n\nBitTorrent Speed is available as a feature of BitTorrent and µTorrent Web, as well as µTorrent Classic.","metadata":{"loc":{"lines":{"from":863,"to":888}}}}],["298",{"pageContent":"BitTorrent Speed\nGet faster download speeds and BTT token rewards.\n\nBitTorrent Speed is available as a feature of BitTorrent and µTorrent Web, as well as µTorrent Classic.\n\nWith BitTorrent Speed enabled, downloaders will have the option of providing tokens to uploaders in exchange for faster download speed. By introducing an incentive of earning BTT tokens, uploaders have a reason to seed files longer, and to dedicate more of their bandwidth and storage to other torrent clients in the network. BTT, which serves as a crypto torrent token in BitTorrent Speed, is responsible for powering a healthier BitTorrent protocol.\n\nLearn morelearn more\nBitTorrent Speed\nHow it Works\n\nEnable BTT and enjoy faster download speeds.\n\nStep 1 - Enable your wallet\n\nWhen downloading or upgrading to a new version of BitTorrent or µTorrent Web, or µTorrent Classic, the torrent software will be enabled with a wallet and BTT token balance.\n\n\nStep 2 - Enjoy faster download speeds","metadata":{"loc":{"lines":{"from":888,"to":906}}}}],["299",{"pageContent":"Step 2 - Enjoy faster download speeds\n\nWhen downloading torrents, BitTorrent Speed automatically bids BitTorrent (BTT) to other users for faster speeds. Just use the torrent program like normal, there is nothing else you need to learn or do.\n\n\nStep 3 - Earn BTT\n\nWhen a torrent file finishes downloading, you can automatically earn BitTorrent (BTT) by seeding. The integrated wallet allows for secure storage of your BTT, which you can send to other wallets.\n\n\nBTFS is both a protocol and network implementation that provides a p2p mechanism for storing and sharing digital content in a decentralized filing system.\n\nTraditional file storage systems have many disadvantages, including centralization or control by a single entity, the ability for governments to censor, higher costs, and low fault tolerance.","metadata":{"loc":{"lines":{"from":906,"to":918}}}}],["300",{"pageContent":"Traditional file storage systems have many disadvantages, including centralization or control by a single entity, the ability for governments to censor, higher costs, and low fault tolerance.\n\nBTFS is a decentralized file storage system supported by millions of BitTorrent user nodes.* By running on the blockchain, which has a Delegated proof of Stake method of processing blockchain transactions, BTFS addresses these limitations. BTFS represents the first decentralized storage system that can be used by decentralized application (DApp) developers. Soon, BTT will be introduced into the BTFS ecosystem to incentivize a fair and abundant file system.","metadata":{"loc":{"lines":{"from":918,"to":920}}}}],["301",{"pageContent":"BitTorrent-Chain Whitepaper\nV1.0\nSep. 2021","metadata":{"loc":{"lines":{"from":1,"to":3}}}}],["302",{"pageContent":"1 Introduction\nWith the development of decentralized networks,\nnew business models and\norganizational structures have gradually emerged,\namong which smart contract-enabled\nplatforms have attracted a lot of attention and have\nfully demonstrated their impact on\ncurrent society and business. However\n, they still\nhave bottlenecks in performance,\nscalability and cost-ef\nfectiveness. \nThese barriers\nprevent them from being adopted on a\nlarge scale.\nBitTorrent-Chain's vision is to provide a high-performance,\nhighly scalable, low-cost\nsolution for blockchain platforms that delivers a\nsuperior user experience for\ndecentralized applications without sacrificing decentralization\nwhile leveraging the\nexisting developer ecosystem.TRON and Ethereum are\nchosen as the first public chain\nplatforms to demonstrate the scalability of BitT\norrent-Chain.\nWe plan to build support to\nmore blockchains, to allow the immediate transfer\n,\nexchange and conversion of digital\nassets in the future.","metadata":{"loc":{"lines":{"from":5,"to":34}}}}],["303",{"pageContent":"platforms to demonstrate the scalability of BitT\norrent-Chain.\nWe plan to build support to\nmore blockchains, to allow the immediate transfer\n,\nexchange and conversion of digital\nassets in the future.\n2 Why BitTorrent-Chain\nA variety of decentralized applications, such\nas decentralized finance, have become\ncore drivers of the \nTRON network and other smart contract\nplatforms. Meanwhile more\ntypes of decentralized applications are being developed\nin large numbers, but the\ncurrent blockchain ecosystem is not suf\nficient to\nsupport the demand for large-scale\napplications. Poor user experience with Dapps, slow\nblock validation, high transaction\nfees and low scalability are all factors that prevent\nusers from using blockchain\napplications at scale. \nThe following sections describe\nhow the BitT\norrent-Chain will\naddress these issues.\n●\nSlow T\nransactions\nCurrently\n, the most significant disadvantages\nof POW(Proof-of-W\nork) based\nblockchain platforms are low transaction processing","metadata":{"loc":{"lines":{"from":34,"to":68}}}}],["304",{"pageContent":"orrent-Chain will\naddress these issues.\n●\nSlow T\nransactions\nCurrently\n, the most significant disadvantages\nof POW(Proof-of-W\nork) based\nblockchain platforms are low transaction processing\nspeed and limited throughput.\nBitTorrent-Chain will solve this problem by\nusing a high-throughput blockchain. \nA set\nof block producers will be selected. Proof of Stake\nwill be applied to validate blocks, and\n2","metadata":{"loc":{"lines":{"from":68,"to":84}}}}],["305",{"pageContent":"proofs of blocks will be periodically sent to \nTRON main net or other blockchains. \nThis\nmechanism ensures blocks will be confirmed in an extremely\nshort time.\n●\nLow Throughput\nA certain time interval is required between\nblock production in current mainstream\nblockchain platforms to ensure suf\nficient time for\nblock propagation. In addition, there is\na limit on the block size to ensure fast block propagation\nin the network, which leads to\na limit on the number of transactions in a block.\nBitTorrent-Chain solves this problem by using\na block producer layer\n, where block\nproducers are able to produce blocks at a very fast\nrate.\n●\nLow Scalability\nIn the future, BitT\norrent-Chain can easily\naccess more public chains while using the\nsame decentralized POS layer to increase scalability\n.\n●\nHigh T\nransaction Fees\nThe BitT\norrent-Chain achieves economies of scale\nby conducting a large number of\ntransactions at the block producer layer\n, thus reducing\ncosts and ensuring low\ntransaction costs.","metadata":{"loc":{"lines":{"from":86,"to":122}}}}],["306",{"pageContent":"ransaction Fees\nThe BitT\norrent-Chain achieves economies of scale\nby conducting a large number of\ntransactions at the block producer layer\n, thus reducing\ncosts and ensuring low\ntransaction costs.\n3 Introduction to BitTorrent-Chain\n3.1 Architecture\nThe BitT\norrent-Chain is a blockchain application platform\nwith an overall structure\ndivided into three layers.\n●\nRoot Contracts layer: Root contracts on \nTRON and other\nblockchain networks\nwill support functions of staking, mapping tokens\nto BitTorrent-Chain by\ndepositing/withdrawing funds, etc.\n●\nValidator layer: V\nalidates BitT\norrent-Chain blocks\nand periodically sends\ncheckpoints to the \nTRON and other supported blockchain\nnetworks.\nBridge: Responsible for listening to events\non each chain, sending event\nmessages, etc.\n3","metadata":{"loc":{"lines":{"from":122,"to":154}}}}],["307",{"pageContent":"Core: Consensus module, including verification of Checkpoint (snapshot of\nBitTorrent-Chain chain state), consensus of Statesync\nevents & Staking events.\nREST-Server: Provides related \nAPI services.\n●\nBitTorrent-Chain layer\n.\n3.2 Actors\nThe BitT\norrent-Chain ecosystem will have the following\nparticipants.\n●\nEnd-users\n●\nDapp Developers\nDevelopers can extend their applications\nbased on the BitT\norrent-Chain to\nprovide better services to users.\n●\nValidator\n4","metadata":{"loc":{"lines":{"from":156,"to":178}}}}],["308",{"pageContent":"A certain number of BitT\norrent Token (BTT) will need to be stake to qualify as a\nValidator\n. Validators are responsible for validating\nBitTorrent-Chain blocks and\nsubmitting Checkpoints to other blockchain networks\nsuch as \nTRON.\n●\nBlock Producer (BitT\norrent-Chain)\nBlock producers are periodically selected\nfrom the V\nalidator and are responsible\nfor BitT\norrent-Chain's block production.\n3.3 Core Functions\nBitTorrent-Chain is a blockchain application platform\nwith core functions including\ncross-chain, of\nf-chain extension, etc.\nThe cross-chain process is as follows.\n●\nUsers can deposit crypto assets in the BitT\norrent-Chain\ncontract on the main\nchain (currently supported using \nTRON & Ethereum)\n●\nAfter depositing assets into the BitT\norrent-Chain\ncontract and receiving\nconfirmation from the main chain, the token will appear\non the BitT\norrent-Chain\nChain.\n●\nUsers can transfer tokens to whomever they want faster\n,\nwith almost negligible\ntransaction fees.\n●","metadata":{"loc":{"lines":{"from":180,"to":221}}}}],["309",{"pageContent":"confirmation from the main chain, the token will appear\non the BitT\norrent-Chain\nChain.\n●\nUsers can transfer tokens to whomever they want faster\n,\nwith almost negligible\ntransaction fees.\n●\nUsers can withdraw tokens to the main chain at any\ntime by creating proof of\nremaining tokens on the Root contract.\n3.4 Consensus\nThe BitT\norrent-Chain achieves faster block confirmation\ntimes through a PoS\nmechanism in the V\nalidator layer and a block producer-based\nmechanism in the\nBitTorrent-Chain layer\n. Also, BitT\norrent-Chain uses\ncheckpoints and burning proof\nmechanisms to achieve final validation on the main\nchain. With this mechanism, the\nBitTorrent-Chain achieves high-speed asset transfers\nacross chains.\n5","metadata":{"loc":{"lines":{"from":221,"to":249}}}}],["310",{"pageContent":"3.4.1 Validator\nTo become a V\nalidator\n, one needs to stake BitT\norrent\nTokens (BTT) in the \nTRON Root\ncontract to become a V\nalidator in the PoS V\nalidator layer\n, which provides a highly\ndecentralized foundation for the BitT\norrent-Chain\nChain.\n3.4.2 Block Producers\nBlock producers in the BitT\norrent-Chain layer are\nperiodically selected from the\nValidators and are responsible for the aggregation\nof transactions. \nThe VM in\nBitTorrent-Chain is compatible with the EVM.\n4 Usage Scenarios\nDevelopers can easily build all kinds of applications\non the BitT\norrent-Chain, such as\n(but not limited to)\n●\nDEX\nThe BitT\norrent-Chain will have all the features\nof a trading platform: faster and\ncheaper transactions, and support decentralized exchange\nfor reliable and easy crypto\ntransactions. Decentralized trading will be the future\nof digital assets, providing better\nsecurity and solvency than centralized exchanges.\n●\nDefi\nDecentralized finance has evolved as one of","metadata":{"loc":{"lines":{"from":251,"to":290}}}}],["311",{"pageContent":"transactions. Decentralized trading will be the future\nof digital assets, providing better\nsecurity and solvency than centralized exchanges.\n●\nDefi\nDecentralized finance has evolved as one of\nthe core drivers of all major blockchain\nnetworks. Developers can build such applications on\nBitTorrent-Chain, allowing users to\nexperience fast, ef\nficient, and secure Defi applications\nof all kinds.\n●\nGaming + NFT\nGames will be an important part of the BitT\norrent-Chain\necosystem. For example,\nNFT in-game assets can be bought, sold, and traded\nin bulk on the BitT\norrent-Chain,\nwhile developers can also save the game state on the\nsidechain. Developers and users\nwill have a truly fast, ef\nficient and secure sidechain\nto build and participate in games.\n6","metadata":{"loc":{"lines":{"from":290,"to":315}}}}],["312",{"pageContent":"5 Network Economics\n●\nNumber of V\nalidators\nSetting the number of V\nalidators too high\ncan lead to high incentive costs. \nThe\ncurrent set number of V\nalidators is 21.\n●\nValidator Rewards\nValidator rewards include Checkpoint submission\nrewards and transaction fees.\n●\nBlock Time\nBitTorrent-Chain sets a block time of\n2 seconds, which means that a block will\nbe produced every 2 seconds.\n●\nNumber of Block Producers\nIf you set too many block producers it\nwill result in more transaction fees. \nThe\ncurrent set number of block producers is 21.\n●\nBlock (block producer) bonus\nThe fee generated by the transaction will\nbe rewarded to the block producer\n.\n6 Development Roadmap\nThe BitT\norrent-Chain team hopes to conduct\nresearch and investigation based on\nvarious topics and needs raised by the community\n,\nincluding but not limited to\n●\nSupport for more other great blockchain networks in\nthe future.\n●\nTransactions that support privacy\n●\nInteroperability across blockchain networks\n7 Summary","metadata":{"loc":{"lines":{"from":317,"to":361}}}}],["313",{"pageContent":",\nincluding but not limited to\n●\nSupport for more other great blockchain networks in\nthe future.\n●\nTransactions that support privacy\n●\nInteroperability across blockchain networks\n7 Summary\nIn this paper\n, we have introduced the various\nactors in the BitT\norrent-Chain\necosystem and their features. Developers can easily\nbuild dApps including Defi,\ngames+NFT\n, let users enjoy services with high speed\nand low cost. Innovations and\nbreakthroughs of applications have reached their bottlenecks\nbecause of the\ncentralization trend of the traditional internet,\nwhich may prevent the market from\n7","metadata":{"loc":{"lines":{"from":361,"to":384}}}}],["314",{"pageContent":"growing. \nThe BitT\norrent-Chain adopts a decentralized mechanism, encouraging\ndevelopers to seek breakthroughs with the base of\nour reliable technology and highly\nautonomous ecology\n. We believe the BitT\norrent-Chain\nwill bring happiness to \nTRON and\nother blockchain platforms.\n8","metadata":{"loc":{"lines":{"from":386,"to":397}}}}],["315",{"pageContent":"Hackathon / HackaTRON Season 1 Winner Announcement\n\nHeya Tronics, thank you all for waiting patiently. After combining the voting scores from all judges and the community, the final results for Season 1 are out!\n\nWe would like to thank all judges for taking extra time to check out all Hackathon projects closely, and also thank all community members for being a part of this hackathon event.\n\nThe TRON DAO team has read all of the sincere comments posted here and truly appreciate your suggestions and compliments. We will continue to listen to the community and make subsequent Grand Hackathons better!","metadata":{"loc":{"lines":{"from":1,"to":7}}}}],["316",{"pageContent":"Remember, this hackathon is not a mere competition. Every single one of the contestants here is a winner as you are building for the greater good. You are here not only to help improve the TRON and BTTC ecosystem, your participation will also help contribute to the development of a truly decentralized web. The TRON DAO team would like to say a big THANK YOU for joining us in this Grand Hackathon!\n\nSeason 1 Top winners for Web3 track:\n\nNo 1. #W3. Cctechmx dCloud: A Web3 Cloud Storage Mobile app \n\nNo 2. #W8. GockeFi GockeFi, Your Metaverse Money Managment Made Simple\n\nNo 3. #W5. Ennovasol Link´n Red : Decentralized The Market \n\nNo 4. #W7. DID Network DID Network-An open platform for decentralized identity \n\nNo 5. #W10. SafeMoney Dev team SafeMoney - Developing a Sustainable and Reliable Tron Ecosystem \n\nSeason 1 Top winners for GameFi track:\n\nNo 1. #G9. TronNinjas TronNinja Arcade by the TronNinja Team - Play, Earn, Stake!","metadata":{"loc":{"lines":{"from":9,"to":25}}}}],["317",{"pageContent":"Season 1 Top winners for GameFi track:\n\nNo 1. #G9. TronNinjas TronNinja Arcade by the TronNinja Team - Play, Earn, Stake! \n\nNo 2. #G8. Moniwar MONIWAR - The Biggest Idle Epic Puzzle Game On Blockchain \n\nNo 3. #G5. Quiz Arena Quizarena by Team Quiz Arena - A Learning Journey into Metaverse\n\nNo 4. #G4. Meta Insurgent Meta Insurgent - 1st VR-Metaverse Person Shooter (FPS)\n\nNo 5. #G2. Siren Siren- Assistance of DOTA2 (MOBA GAMING) on blockchain using AI - GameFI\n\nSeason 1 Top winners for NFT track:\n\nNo 1. #N2. TuruGlobal VersacBrickSquad by TuruGlobal \n\nNo 2. #N1. Team Cubie Cubie 3D NFT GameFi \n\nNo 3. #N8. Team Kraftly Kraftly NFT Marketplace\n\nNo 4. #N6. The Nolians NoleCoin - The movement\n\nNo 5. #N9. USTX Team Real NFT by USTX Team - Unique NFTs you can touch and feel.\n\nSeason 1 Top winners for DeFi track:\n\nNo 1. #D8. JustMoney JustMoney - Building an ecosystem for the next generation of decentralized applications to power Web3","metadata":{"loc":{"lines":{"from":25,"to":51}}}}],["318",{"pageContent":"Season 1 Top winners for DeFi track:\n\nNo 1. #D8. JustMoney JustMoney - Building an ecosystem for the next generation of decentralized applications to power Web3 \n\nNo 2. #D4. USTX Team Up Stable Token eXperiment by USTX Team - A low volatility asset ecosystem\n\nNo 3. #D10. XDAO Create your DAO with XDAO in 1 minute\n\nNo 4. #D6. InterCrone World InterCrone World\n\nNo 5. #D9. Centiiv Centiiv: Connecting Africa to the Global Market Through Blockchain \n\nLastly, we would like to say that the TRON DAO team is always open to feedback. Please note that we may be making small adjustments to the details and dates of TRON Grand Hackathon Season 2 and 3 based on the community feedback we received. Therefore, keep the voices coming and we will try our best to make everything better. More details will be provided before the next hackathon starts. Stay tuned!\n\ndCloud: A Web3 Cloud Storage Mobile app\nTRON Hackathon\nHackathon Season 1\nweb3\nFeb 2022\nNov 2022\n\ncctechmx\n\n8\nFeb '22\nProject Name : dCloud","metadata":{"loc":{"lines":{"from":51,"to":76}}}}],["319",{"pageContent":"dCloud: A Web3 Cloud Storage Mobile app\nTRON Hackathon\nHackathon Season 1\nweb3\nFeb 2022\nNov 2022\n\ncctechmx\n\n8\nFeb '22\nProject Name : dCloud\n\nProject Track :Web3\n\nTeam Name : cctechmx\n\nTeam Member(s) : 1\n\nWhat is dCloud?:\n\ndCloud is a mobile decentralized cloud file storage app.\n\nCurrently available for Android as a proof of concept:\n\nGitHub - simbadMarino/dCloud: dCloud: Web3 Cloud Storage Mobile App 39\niOS version under development:\n\nKEY DIFFERENTIATORS:\n\nMore Flexible / Lower price (as per march 23th):\n\ndCloud (BTFS): $ 0.007 (GB/Month | NO Max limit | Pay what you us\niCloud: $0.014 (GB/Month | Max 200GB | Pay in FULL ($2.99))\nGoogle Drive: $0.016 (GB/Month | Max 100GB | Pay in FULL($1.68) )\nDropbox: $0.006 (GB/Month | Max 2TB | Pay in FULL ($11.99))\nKeep your files ownership. Files in the network are privately stored in the BTFS network.","metadata":{"loc":{"lines":{"from":76,"to":112}}}}],["320",{"pageContent":"dCloud is Open source. (Commonly overlooked by users it is an enormous advantage over competition. This offers additional security as the code can be reviewed by experts around the globe as well as use cases can be expanded in a faster / cost efficient way.)\n\ndCloud revenue model is community friendly, it provides economical benefits to:\n\nDevs/ early investors\ndCloud BTFS host nodes\nEngaged users which provides feedback, improvement ideas and bug reports.\nUSE CASES:\n\nCloud storage backup\nLong term files backup like family photos, important files, etc.\nTemporary big files sharing\nFiles which are not possible to share on popular apps like email, whatsapp, telegram, etc\nMobile auto-backup file system (similar to iCloud)\nLow IT budget companies storage solution.\ndWeb creator & browser (similar to IPFS hosted sites)\nPROJECT GOAL :\n\nCreate an Open Source Web3 Cloud storage mobile app enabling its own ecosystem to enjoy a self-sustainable and shared economy by:","metadata":{"loc":{"lines":{"from":114,"to":132}}}}],["321",{"pageContent":"Create an Open Source Web3 Cloud storage mobile app enabling its own ecosystem to enjoy a self-sustainable and shared economy by:\n\nMotivating developers to build quality and enjoyable features for hosts and renters alike to share a transaction fee pool.\n\nPromote storage network fairness and stability by providing proportional benefits and income to efficient and honest nodes (Managed by BTFS core).\n\nMake the user experience as secure, delightful and affordable as possible to keep an ever growing user base.\n\nProject Info :\n\ndCloud Info.pdf (1.1 MB)\n\nProject Repo : GitHub - simbadMarino/dCloud: dCloud: Web3 Cloud Storage Mobile App 39\n\nYoutube channel: https://www.youtube.com/channel/UC2Wgz3cwS2RtZzT71pPvwlw 11\n\nProject Details :","metadata":{"loc":{"lines":{"from":132,"to":148}}}}],["322",{"pageContent":"dCloud idea was born back in 2020 from community feedback on BitTorrent telegram chat, after the BTFS v1 main net release we all wanted to have decentralized dropbox-like mobile app in which you can easily backup your data without giving away your freedom, privacy and big bags of money.\nWhen BTFS v1 airdrops began some advanced users from the TRON SRs and Devs discord channel took the lead and started to create host nodes on servers, laptops and even Raspberry Pis 2 (which, based on experience end up being the hosts favorite setup) . We all shared ideas on how to make nodes more energy efficient and improve the overall node stability to get more contracts and thus more $BTT.","metadata":{"loc":{"lines":{"from":150,"to":151}}}}],["323",{"pageContent":"More and more people were interested on having their own nodes to enjoy the airdrops coming from BitTorrent team, thus, users with high cost servers started to get burn due to a higher competition with smaller and more energy efficient nodes. A clear path was paved favoring small nodes over big servers. Fairness and decentralization is possible with BTFS.","metadata":{"loc":{"lines":{"from":152,"to":152}}}}],["324",{"pageContent":"October 2020. BTFS was compiled and executed for the first time on a physical Android device using Termux 3 terminal emulator, this gave us the confidence on the portability capabilities of BTFS and the architecture proposal of dCloud was born:\n\nOS Bootstrap → dCloud devs (Built separately per OS)\nBTFS binaries → BitTorrent\nReact Native (GUI) → dCloud devs (Android + iOS shared code)\nBy separating dCloud code like this we’ll be able to reduce the developing effort. BitTorrent team delivers the binaries, dCloud team devs focuses on implementing them to the specific OS environment and code a single Graphical Interface for both major mobile platforms: Android and iOS.","metadata":{"loc":{"lines":{"from":154,"to":159}}}}],["325",{"pageContent":"Mid 2021. Android OS bootstrap is completed and basic GUI is developed for BTFS v1, however we faced major roadblocks to make the app available on Google Play due to Peer to Peer code restrictions by Google Play policies, so the development switches the effort towards improving the app instead of complying with Google Play.\n\nNow on Feb 2022 after thousands of code lines and tons of passion dCloud is a reality (not perfect yet but working towards it). We have released a BTFS v2 compatible app and proudly can say it is now in a proof of concept stage. Basic UI functions for Android are implemented as well as out-of-the-box FULL BTFS v2 node features.","metadata":{"loc":{"lines":{"from":161,"to":163}}}}],["326",{"pageContent":"dCloud Github repo 39 has been released as Free & Open Source since May 2021 and will continue like this forever. We believe that keeping a FOSS 3 will boost dCloud development in the future and will encourage further ramifications and use cases for both BTFS and dCloud. Being a FOSS project does not imply it won’t have a revenue stream, it just means anyone can collaborate to improve it or to build on top of it.\n\nFor testing and bug bounty topics please refer to: dCloud testing & $BTT bug bounty program 10\n\nRevenue model:\n\nOccasional user (Under 5GB/Month per month)\n\nFree storage\nLimited features\nTransaction dev fee activated (to avoid system abuse) | Optional Ads\nFrequent user ( Over 5GB/Month with no license)\n\nIf storage limit is reached user will pay for the extra storage.\nLimited features\nTransaction dev fee activated (to avoid system abuse) | Optional Ads\nFrequent user (Over 5GB/Month with available license)","metadata":{"loc":{"lines":{"from":165,"to":181}}}}],["327",{"pageContent":"Free storage up to X (Depending on NFT license plan, TBD)\nApp Features expanded depending on purchased NFT license.\nReduced transaction fee\nEnterprise usage\n\nFree storage up to X (Depending on NFT license plan, TBD)\nDedicated BTFS gateways (decentralized web share points)\nSpecial collaborative tools\nProject Milestones :\n\nAchieved milestones:\n\nPrototype realization → 2020 (Done)\n\nArchitecture definition → 2021 (Done)\n\nProof of concept (Android) → 2021 (Done)\n\nFOSS conception → 2021 (Done)\n\nHackathon milestones:\n\nMar 15","metadata":{"loc":{"lines":{"from":183,"to":205}}}}],["328",{"pageContent":"Prototype realization → 2020 (Done)\n\nArchitecture definition → 2021 (Done)\n\nProof of concept (Android) → 2021 (Done)\n\nFOSS conception → 2021 (Done)\n\nHackathon milestones:\n\nMar 15\n\ndCloud video tutorials on GitHub/YouTube → Done (Please check our channel: https://www.youtube.com/channel/UC2Wgz3cwS2RtZzT71pPvwlw9 3)\nMain-net migration → Done (dCloud: A Web3 Cloud Storage Mobile app - #13 by cctechmx)\nWBTT withdrawal feature added → Done (dCloud: A Web3 Cloud Storage Mobile app - #13 by cctechmx)\nExtra milestone : We’ve updated dCloud BTFS binaries to 2.1.1( Release v1.3.0 dCloud · simbadMarino/dCloud · GitHub)\nMar 31 → Completed (dCloud: A Web3 Cloud Storage Mobile app - #64 by cctechmx)","metadata":{"loc":{"lines":{"from":205,"to":221}}}}],["329",{"pageContent":"WBTT <–> BTT swap method and GUI too l (this is an important upgrade to avoid users dealing with different wallet interfaces)\nImplement a small dev fee (5 BTT per file stored) to test the bttc send-btt-to API and make sure gas fees are low enough to support this.\nDecision made between these different methods of achieving a full BTFS on iOS based on experimentation considering: feasibility, ease of use, scalability.\n(iSh x86 linux (i686 binary) terminal emulator running in background (similar to dCLoud Android approach)\nWasm BTFS binary using aShell terminal running in background (similar to dCLoud Android approach)\ndarwin BTFS attached as library in Xcode project.\nApr 15 (Moved to April 30) → Completed (dCloud: A Web3 Cloud Storage Mobile app - #66 by cctechmx)","metadata":{"loc":{"lines":{"from":223,"to":229}}}}],["330",{"pageContent":"Extended development team hired to focus on React Native GUI and requirements defined and shared with third parties.\nBTFS binaries updated if any new BTFS version is released.\nApr 30 (Moved to May 15) → Completed (dCloud: A Web3 Cloud Storage Mobile app - #67 by cctechmx)\n\niOS proof of concept ready but not fully integrated in a single app\nImproved GUI commits (to date) available in dCloud repository and fully open sourced.\nMay 15 (Moved to May 30)\n\niOS app fully integrated in a single app\nProfessional GUI finished as per the following features: dBrowser (similar to dropbox interface), dWeb explorer first version released, Wallet manager.\nBeyond hackathon milestones\n\nFOSS dev fee model implementation → 2023\n\nIn-app Host user Experience feature(GUI) → 2023\n\nSelf Sustaining project–> 2024\n\nPROJECT REQUIREMENTS\nBelow you can find a detailed description of latest requirements to be followed as guideline during the current and future development processor dCloud.","metadata":{"loc":{"lines":{"from":231,"to":250}}}}],["331",{"pageContent":"PROJECT REQUIREMENTS\nBelow you can find a detailed description of latest requirements to be followed as guideline during the current and future development processor dCloud.\n\nSpecial thanks to @WindsOfChange92 for the review!\n\nGockeFi, Your Metaverse Money & Assets Management Made Simple\nTRON Hackathon\nHackathon Season 1\nweb3\nMar 2022\nMay 2022\n\ngockefi\n\n13\nMar '22\nProject Name: GockeFi\nProject Track: Web3\nTeam Name: GockeFiTeam\nWebsite: GockeFi.io 30\nTeam Member(s): 2 (Web3 Blockchain Developer & Data Scientist)\nProject Repo: https://github.com/gockefiApp 9\nProject Goal: Help metaverse users better track their invesments and become profitable.\nProject Details: We’re building the next disruptive app to help you manage your metaverse investments by making it easy to track your investments, earnings, NFTs, lands and help you become profitable","metadata":{"loc":{"lines":{"from":250,"to":273}}}}],["332",{"pageContent":"Our brand new twitter account: https://twitter.com/GockeFiApp 16\nBefore this Hackaton we just started this crowdfund for our App on MirrorDao 4 because we’re highly motivated Team and we believe on this project.\n\nWhat is the GameFi potential?\nGameFi, Play to Earn (P2E) or Blockchain gaming is one of the hottest topics in the cryptocurrency industry right now by enabling gamers to make money from playing games it’s poised to disrupt the $180.3 billion for global gaming market according to Newzoo reports.\n\nThe Play to Earn model is the first games trend to watch in 2022\ntrends-to-watch-2022\ntrends-to-watch-2022\nWhat is our motivation ?\nThe Metaverse is full of money-making opportunities but also full of high risks. We’re a team of two people Web3, Blockchain developer and data scientist, really passionate about every piece of the Web3 revolution and metaverse and heavily invested in Play 2 Earn ecosystem.","metadata":{"loc":{"lines":{"from":275,"to":285}}}}],["333",{"pageContent":"As early Axie infinity players we’ve been into this from the beginning and experienced the good and bad of this world and know how easy it is to earn money or lose the investment.\nAxie-Infinity-logo-artwork-header\nAxie-Infinity-logo-artwork-header\nWhat is so special about this ecosystem?\nThe GameFi ecosystem is community based, and NFTs play a major role in the gameplay, some people invest in tokens by buying low and selling high and others invest all-in the gameplay by playing or flipping in-game lands or NFTs and start earning in an everyday basis but also many lost a lot of money because the lack of financial tracking tools.\n\nNewzoo_Global_Games_Market_by_Segment-1920x1080\nNewzoo_Global_Games_Market_by_Segment-1920x1080\n2021 Global Games Market ready to be disrupted by blockchain gaming.","metadata":{"loc":{"lines":{"from":287,"to":295}}}}],["334",{"pageContent":"Newzoo_Global_Games_Market_by_Segment-1920x1080\nNewzoo_Global_Games_Market_by_Segment-1920x1080\n2021 Global Games Market ready to be disrupted by blockchain gaming.\n\nThe huge opportunity in front of us:\nWe spotted a huge potential in this wild west metaverse which is the lack of personal finance and money management tools or apps. If you remember in the web2 a lot of apps have made it through helping people manage their finances like mint.com 1. And we want to be the mint of the metaverse and more than that.\n\n\nMany P2E gamers suffer from tracking their expenses and earnings and do not know if they did breakeven or not and if they started profiting and this is where our application comes for help.\n\nWe chose the name GockeFi as the GameFi Pocket or the Pocket Of the Metaverse.","metadata":{"loc":{"lines":{"from":295,"to":305}}}}],["335",{"pageContent":"We chose the name GockeFi as the GameFi Pocket or the Pocket Of the Metaverse.\n\nSneak Peak of the GockeFi WebApp User Interface:\nGockeBoard showing the connected wallet balance in USD$ with live conversion to realtime value of $USD, the number of NFTs held by the account, The amount of SLP tokens earned, Total investments by the user and how he earned from the day he started reporting in the GockeFI App.\niP-QyOgaq8GxJQrSB7Yn8\niP-QyOgaq8GxJQrSB7Yn8\nGockeBoard of Axie Infinity.\n\nThe following image is where you can add your daily earnings and see the liveconversion to US dollar or your local currency.\n\n\nAdd SLP earnings\n\nThis below is the GockeBoard of BombCrypto Game on Binance Smart Chain, showing how close to profit.\n\nzfvIxO_vGUTDoIImYfB5J\nzfvIxO_vGUTDoIImYfB5J\nBombCrypto on BSC P2E GockeBoard\n\nEarnings history are stored and live currency conversion is done on the fly.","metadata":{"loc":{"lines":{"from":305,"to":324}}}}],["336",{"pageContent":"zfvIxO_vGUTDoIImYfB5J\nzfvIxO_vGUTDoIImYfB5J\nBombCrypto on BSC P2E GockeBoard\n\nEarnings history are stored and live currency conversion is done on the fly.\n\nYou can also access to your games from the GockeMenu on the right side like in Discord.\n_Iuplv6MaGnH60yGnMaMy\n_Iuplv6MaGnH60yGnMaMy","metadata":{"loc":{"lines":{"from":324,"to":332}}}}],["337",{"pageContent":"GockeBoard and GockeMenu\nGockeFi web dApp features:\n• Optional Email Signup.\n• Add Wallet(Tron wallet, Metamask, etc…) or only paste wallet address.\n• Chains: Tron, Eth, Polygon, BSC, AVAX, Fantom.\n• The Gockeboard : Dashboard of all your Play2Earn, NFTs, Lands, tokens investments data in one place.\n• The GockeMenu : a Discord like Tab of your Play2Earn for easy access.\n• Live data of your balance, NFTs, Lands, investments, earnings.\n• Account sharing for Guilds and Teams with scholarship management.\n• Multiple accounts per Play2Earn.\n• Daily, weekly, monthly earnings prediction using machine learning and deep learning.\n• Budget tracking\n• Live local currency value display.\n• Live token to local currency conversion.\n• NFTs Investment Tracking.\n• Lands Investment Tracking.\n• Dark Mode.\n• API for partnership with game creators\n• GameFi Explorer with listing of P2E like AppStore with public comments and stars.\n• Best P2E voting system.\n• Watchlist.\n• Trending Metaverse Games, NFTs .","metadata":{"loc":{"lines":{"from":334,"to":355}}}}],["338",{"pageContent":"• API for partnership with game creators\n• GameFi Explorer with listing of P2E like AppStore with public comments and stars.\n• Best P2E voting system.\n• Watchlist.\n• Trending Metaverse Games, NFTs .\n• Leaderboard with your friends or your team.\n• Calendar of upcoming events, airdrops, IDOs, IGOs and ICOs with notifications.\n• GockeFi Mobile App.","metadata":{"loc":{"lines":{"from":355,"to":362}}}}],["339",{"pageContent":"NFT tracking will replace Excel spreadsheets like the following:\nimage\nimage\n\nnft tracking\nnft tracking\nThe dApp is NFT membership based with a free basic limited account for non GockeFi NFT holders.\n\nWe have 4 types of NFTs:\n\nWealthy GockeFier\nMezDodXXEeitAhiaanOfF (1)\n\nLegend GockeFier\nNkUbNYGJLp9ORganxx3fv\n\nEpic GockeFier\noGqR11YgwsP485DjXQK3X\n\nRare GockeFier\nTniKQvHHAni3VZSWI6I8P\n\nProject Milestones:\n\nMar 13, 2022: Start of Hackathon, we should already have first mockup of the GockeBoard with functioning user interface, no coding just UI/UX. (Milestone achieved)\n------------------ Update on project------------------------\nOur motivation lead us to reach our first milestone before time which is having a funtionning User interface as you can see in the following GIF:","metadata":{"loc":{"lines":{"from":364,"to":390}}}}],["340",{"pageContent":"record_000002\nMar 31, 2022: Implementation of Email signup, Wallet connection, Connecting to Tron chain, Tokens on Tron, ETH, BSC listing, Live data : balance, NFTs. Ability to add daily earnings and store for later use with live conversion to USD currency.\n\nApr 13, 2022: We will launch our GockeApi for game creators to implement and start sharing players earnings directly to their GockeFI account.\nAlso we will start the developement of NFT tracking screen to get rid of excel spreadsheets,\n\nApr 30, 2022: Dark Mode and NFT Tracking ready, and start of alpha-test with real users.","metadata":{"loc":{"lines":{"from":392,"to":398}}}}],["341",{"pageContent":"Apr 30, 2022: Dark Mode and NFT Tracking ready, and start of alpha-test with real users.\n\nMay 13, 2022: End of Hackathon one. alpha version of GockeFi app ready to be used to track PlayToEarn Data, live balance, Acquired NFTs, users can save the amount on tokens earned and get the live value in $usd and also they will get rid of excel spredsheets and start using a live on cloud datatable to store their data.\nNot only this but our API will be ready for game creators to implement and start sharing players data directly to their GockeFi account.","metadata":{"loc":{"lines":{"from":398,"to":401}}}}],["342",{"pageContent":"Aug 31, 2022: We will develop and implement more features such as prediction of earnings based on machine learning and deep learning, Budget Tracking, PlayToEarn marketplace for game creators to submit their games for showcase with ability for visitors to upvote and comment publicly and start our Marketing campaign,\nDec 31, 2022: By the end of the year, we will launch the GockeCalendar for users to save upcoming dates for IGOs, NFTs mint date etc.\n\nJan - Mars 2023: we will work on the mobile version ios and Android of the webApp and ship it to the world.","metadata":{"loc":{"lines":{"from":403,"to":406}}}}],["343",{"pageContent":"Jan - Mars 2023: we will work on the mobile version ios and Android of the webApp and ship it to the world.\n\nUseful and motivational links:\nNewzoo’s Games Trends to Watch in 2022 1\nAxie Infinity Surpasses $4 Billion in Lifetime NFT Trading Volume 1\nGames will adopt blockchain in 2022 through esports and P2E models: Report\nWarner Music Group announces partnership with blockchain gaming developer Splinterlands\nGaming ecosystem lets all players participate in play-to-earn opportunities 1\nZynga Plans First NFT Games, Web 3 Acquisitions in 2022 1\n\nLink´n Red : Decentralized The Market\nTRON Hackathon\nHackathon Season 1\nweb3\nFeb 2022\nFeb 4\n\nJavierGarza\n\n6\nFeb '22\nProject Name: Link´n Red\n\nProject Track: Web3\n\nTeam Name: Ennovasol 22\n\nTeam Member(s): 5 ( Software Engineering + Mechatronic´s + Industrial Engineering )\n\nProject Goal: We design a tool where the supplier sell online products, services and NFT´s in a professional and effective way.","metadata":{"loc":{"lines":{"from":406,"to":435}}}}],["344",{"pageContent":"Project Goal: We design a tool where the supplier sell online products, services and NFT´s in a professional and effective way.\n\nWe offer a direct link to the personalized page. Example: linknred.com 31 /SupplierName\n\nOur goal is that each suppliers increase sales through collaborative marketing, rewarding\ncustomers with cripto gift points.\n\nProject Info:\n\nProject Repo: www.linknred.com 52\nLNR12\nLNR12\n\nLNR13\nLNR13\n\nLNR1\nLNR1\n\nLNR2\nLNR2\n\nLNR3\nLNR3\n\nLNR4\nLNR4\n\nLNR5\nLNR5\n\nLNR6\nLNR6\n\nLNR7\nLNR7\n\nLNR8\nLNR8\n\nLNR9\nLNR9\n\nLNR10\nLNR10\n\nLNR11\nLNR11\nProject Details: [Logo NFT Link´n Red 17]\n\nProject Milestones:\n\nMarch 2022: 1: Finish implementing the Tronlink digital wallet + 2: Facilitate international trade and promote voluntary compliance of the taxpayer obligations, follow the correct tax application and customs legislation, contributing to strengthening the national security (1st step: considering the Mexican regulation)","metadata":{"loc":{"lines":{"from":435,"to":487}}}}],["345",{"pageContent":"April 2022: Finish self-management modules for suppliers (registration - cancellation and changes of products and services) so that they have total control of the personalized page, example: www.linknred.com 8 /suppliername\n\nMay 2022: 1: Implement NFT’s market + 2: Connect Link´n Red with ERP (Enterprise Resource Planning) eplus + 3: Evolve the current mechanism of Link’n Red points and give it an identity of crypto tokens in the TRON blockchain\n\nJune 2022: Upgrade multilanguage version\n\nJuly2022: Create a marketing plan to capitalize Link´n Red proyect\n\n\nSeptembres 2022: Connect Link´n Red with others ERP ( Enterprise Resource Planning) Example: SAP, Oracle, etc\n\nAfter October 2022: Continue Innovating ( Example: Enter Link’n Red into the metaverse, Artificial intelligence, Virtual Reality)\n\nDID Network-An open platform for decentralized identity\nTRON Hackathon\nHackathon Season 1\nweb3\nFeb 2022\nMar '22","metadata":{"loc":{"lines":{"from":489,"to":507}}}}],["346",{"pageContent":"DID Network-An open platform for decentralized identity\nTRON Hackathon\nHackathon Season 1\nweb3\nFeb 2022\nMar '22\n\nDIDNetwork\nFeb '22\nVision\nWith the development of Web 3.0, many applications beyond DeFi have emerged, such as social network and information flow. Simple wallet login is not enough to support a wide range of application scenarios.\n\nWe hope to build an open data platform around the user’s wallet identity and tap into the value of the on-chain data to serve the increasingly rich Web 3.0 scenarios in the future.\n\nWhat it does\nDID Network is an open platform based on on-chain data. Users can bind their wallets and generate their own passports. The nodes of DID Network will parse the on-chain data and get the aggregation results, such as DeFi scores, user behavior analysis, and so on.\n\nWe have three core products:","metadata":{"loc":{"lines":{"from":507,"to":524}}}}],["347",{"pageContent":"DID Passport： We provide each user with a unified decentralized identity. This identity is tied to wallets and contains the analysis results of all on-chain behavior. All data is owned by the users and users can decide which data is open to the public. The DID Passport is the profile of the decentralized identity. Users can connect their wallets on different chains and get a profile with on-chain behavior analysis.\nDID Engine： The transactions on the blockchain represent the user’s interaction. By analyzing the transactions, we can generate a complete user profile around the user’s identity. The DID engine is a multi-chain engine that can produce valuable information by extracting and analyzing the on-chain data. To prove that the data itself is trustworthy and correct, we adopt the solution of Off-chain Computing and On-chain Validation.","metadata":{"loc":{"lines":{"from":526,"to":527}}}}],["348",{"pageContent":"DID Network： The DID Network will build an open platform based on DIDs. We will develop some first-party apps to explore Web 3.0 scenarios, and we will also provide open SDK and API for 3rd party apps to build an open identity ecosystem together. Third-party applications can stake DID tokens to access user data. Users can choose to disclose or hide their on-chain information, including raw transactions, asset statistics, behavioral analysis, on-chain scores, etc.\nHow we built it\nFirst-Party Applications (By Us)","metadata":{"loc":{"lines":{"from":528,"to":530}}}}],["349",{"pageContent":"On-Chain Credential System： DID Network offers a lightweight solution for event organizers and community managers to build and distribute non-transferable NFT badges and reward their community members.\nOn-Chain Score for SHO： With the analysis through different dimensions, we provide various types of on-chain behavioral scores, such as DeFi Score and Farming Score.\nThird Party Applications (By Partner)\n\nWeb 3.0 Application： To make credit loans, advertisements, and other on-chain data-related products available in DeFi, a large volume of authentic data is required. DID Network aims to be a pioneer in the challenging journey.\nPart of Metaverse Identity： Future metaverses, however the definitions, will cover tremendous settings from finance, entertainment, social, and much more. DID Network will be the infrastructure for building Metaverse identity.\nLinks\nWebiste：https://didnetwork.org/ 29\n\nGithub：DID Network · GitHub 8\n\nDemo：DID Network Demo.mov - Google Drive 3","metadata":{"loc":{"lines":{"from":532,"to":543}}}}],["350",{"pageContent":"Github：DID Network · GitHub 8\n\nDemo：DID Network Demo.mov - Google Drive 3\n\nSafeMoney - Developing a Sustainable and Reliable Tron Ecosystem\nTRON Hackathon\nHackathon Season 1\nweb3\nMar 2022\nAug '22\n\nSafeMoney\n\n5\nMar '22\nBaoziswap, SafeMoney, SafeMoney Coin Eyes, KattyCat NFT, Bestcoin Voting Website\n\nTeam Name: SafeMoney Dev Team\nTeam Members : 11 Developers as at Feb 2022\nProject Name: Baoziswap\n\nBaoziswap Project Goal:\nThe goal of the Team in the development of this exchange is to provide a cheap and better exchange solution on the Tron Blockchain, users of our swap get 50% Energy discount on swap made which made Baoziswap on the of the cheapest exchange in the Tron Blockchain.\n\nAlso, the Dev Team discovered most swap/exchanges doesn’t support tax token swap and we come up with the solution which is Baoziswap which supports tax tokens which is one the reasons it is tagged Game Changer under the Tron Blockchain.","metadata":{"loc":{"lines":{"from":543,"to":567}}}}],["351",{"pageContent":"Futhermore, with Baoziswap token owners and Developers earn more money from fee for using and listing their token with us on Baoziswap.\n\nBaoziswap Project Details :\n\nBaoziswap launched on 20 Feb 2022 not too long ago and has performed very well with a lot of already successful transaction and good remarks from users, the exchange is developed and powered by the SafeMoney Dev Team a team with one of the best Support system in the Tron Blockchain.\n(upload://aMh2AfRJzqO25KtNFMzEhehGH1M.png)\n\nBaoziswap is developed with ReactJs, Solidity and web3.js framework\n\nProject link: [https://baoziswap.com 22]\nProject Name: SafeMoney\nSafeMoney Project Goal :\nThe goal of the development of SafeMoney token is for earning passive income, the goal is to provide solution for investors that will want to grow their wealth by earning passive income, if earning passive income is a goal under Tron Blockchain then SafeMoney (SafeMoney) is the next Token to invest in.","metadata":{"loc":{"lines":{"from":569,"to":581}}}}],["352",{"pageContent":"Project Link :\nhtpps://safemoney.network\nProject Name: SafeMoney Coin Eyes\n\nSafeMoney Coin Eyes Project Goal:\nSafeMoney Coin Eyes goal is for promotion of SafeMoney and other token under the Tron Blockchain, it is a website where users can add the token under Tron Blockchain that they support add it as an eyes to their pictures and they can upload on all social media to show their support and loyal to the token.\n\nProject Link: [https://eyes.bestcoin.finance/ 9]\n\nProject Name : KattyCat NFT\nKattyCat NFT project Goal:\nKattyCat NFT is a project With 50,000 different cats NFTs (50000 safemoney has token holders) this is project inspired by the love of pet (Cats) and having a world for them also in the coming Metaverse.\n\nProject Link: [coming soon]\nProject Name: Bestcoin Voting Site","metadata":{"loc":{"lines":{"from":583,"to":597}}}}],["353",{"pageContent":"Project Link: [coming soon]\nProject Name: Bestcoin Voting Site\n\nBestcoin Project Goal:\nBest coin is project developed and power by SafeMoney Dev Team, the goal is to promote tokens under the Tron Blockchain that is, to enhance the reach of tokens under the Blockchain on this web community members of each token come and show loyalty to their token by voting for them on the website and this make investors discover new tokens under Tron Blockchain with a great community supporting it.\n\nProject Link: [https://bestcoin.finance 14 ]\n\nThe Dev Team also have an incoming Metaverse projects yet to be released, which will be launched soon currently ongoing.\n\nFuthermore, we are planning on creating some Blockchain gaming projects, where users come and earn money buy playing Blockchain games.\n\nThis is a project for locking LP token for a limited time still under development too\nThese are upcoming projects","metadata":{"loc":{"lines":{"from":597,"to":610}}}}],["354",{"pageContent":"This is a project for locking LP token for a limited time still under development too\nThese are upcoming projects\n\n\nTronNinja Arcade by the TronNinja Team - Play, Earn, Stake!\nTRON Hackathon\nHackathon Season 1\ngamefi\nMar 2022\nAug '22\n\nTronNinjas\n\n24\nMar '22\nNinjaHead\nNinjaHead\nName: : TronNinja arcade\nProject Track : GameFi\nTeam name: TronNinjas\nWebsite: http://tronninjas.com/ 54\nTwitter: https://twitter.com/tronninjas 10\nDiscord: TronNinjas 2\nTeam Member: 6 @TronNinjas Mo Founder - @TMMS - @CryptoRhino - @Stian - @cryphic @mambam8\n\nGithub\n\n\nGitHub\n\nTronNinjasProject 10\nTronNinjasProject has 2 repositories available. Follow their code on GitHub.\n\nProject Goal:","metadata":{"loc":{"lines":{"from":610,"to":643}}}}],["355",{"pageContent":"Github\n\n\nGitHub\n\nTronNinjasProject 10\nTronNinjasProject has 2 repositories available. Follow their code on GitHub.\n\nProject Goal:\n\nAt its core, the Tron ninja arcade was born out of love for something which died long ago; playing games in arcades was more than gaming; it was a social hub for people when not everyone could have a computer. You would spend your days with friends competing, playing, and socializing at your local Arcade — That is what we are trying to encapsulate here; not only playing games but the social aspect of Tron Ninjas is as essential. We are trying to digitalize the local Arcade and bring back an old art form in a new medium. Our future plans include building a mini Roblox style metaverse - dubbed the Ninjaverse\n\nProject Info and details:\n\nTronNinjas is a NFT GameFi project on the Tron blockchain where you will be able to use your NFTs as characters in-game, whilst earning our in-game token TronNinjas Token (TNT) in the TronNinjas Arcade.","metadata":{"loc":{"lines":{"from":643,"to":657}}}}],["356",{"pageContent":"The TNT token can be earned just by playing single-player games, or in weekly and monthly competitions competing for bigger prizes with other NFT holders.\nTronNinjas also have their own store where you can spend your TNT for upgrades, a percentage of the store revenue will be sent to our staking contract. Where users can stake their TronNinja NFT.\n\nYou can stake your NFT and TNT and earn TNT from our staking contract. Staked NFTs earn 55% and TNT 40% the last 5% belongs to the OGTNT token.\n\nSince the TronNinja arcade conception, the team has been working tirelessly to reach the goals we set ourselves. We want to take this opportunity to thank all the members of the Tron community for their continued support; watching people get excited about our events and products makes it all worthwhile.","metadata":{"loc":{"lines":{"from":659,"to":664}}}}],["357",{"pageContent":"Today, we discuss the TronNinjas’ past, present, and future in this letter from the TronNinja Team. There have been some questions. This document is to outline with the community the plans and vision for the future.\n\nWhat is TronNinjas all about?\n\nAt its core, the Tron ninja arcade was born out of love for something which died long ago; playing games in arcades was more than gaming; it was a social hub for people when not everyone could have a computer. You would spend your days with friends competing, playing, and socializing at your local Arcade — That is what we are trying to encapsulate here; not only playing games but the social aspect of Tron Ninjas is as essential. We are trying to digitalize the local Arcade and bring back an old art form in a new medium.\n\nThe past — First 90 days","metadata":{"loc":{"lines":{"from":666,"to":672}}}}],["358",{"pageContent":"The past — First 90 days\n\nWe started the project to release a set of arcade games that people could play using their NFT attributes to gain an advantage. The original roadmap outlined that once the Ninja Minting was complete, we would release our first game.\n\nAs in life, things do not always go according to plan. Before minting had been completed, we released our first game Ninja Pacman and launched our P2E system, allowing users to earn Tron Ninja Tokens (TNT) while playing games. The response from the community was positive the game was received well, all who play it enjoy it. It’s important to note that our roadmap is fluid; we believe this approach allows us to set a plan of the minimum we can achieve in the given time and allows us to react to growth.\n\nLet the games begin!","metadata":{"loc":{"lines":{"from":672,"to":678}}}}],["359",{"pageContent":"Let the games begin!\n\nThe first TronNinja gaming tournament went live and was a roaring success, and the event was sponsored by many great Tron projects that allowed us to offer up a $2000 prize to the winner. We intend to keep having weekly events that bring people together.\nWhat’s a token without a market?\n\nWe launched on JustMoney.io 9 to allow the Ninjas a place to trade their earned TNT.\n\nThe present\n\nWe are continuing to grow our platform, maintaining and improving our system with the help of the community — Every week, we host a 48-hour tournament with prizes for the winners. As the community grows, we grow with them, providing valuable feedback on the system and what they would like to see in the future.\n\nThe future","metadata":{"loc":{"lines":{"from":678,"to":689}}}}],["360",{"pageContent":"Our plans are not dependent on the TronNinja Minting being complete; however, our fluid roadmap will change once complete. Our ultimate goal is to enter the metaverse space. The whole ninja Arcade was born out of a love for something that was lost long ago; playing games in arcades was more than gaming; it was a social hub for people back in the day when not everyone could have a computer. You would spend your days with friends competing, playing and socializing — That is what we are trying to encapsulate here. Welcome to the Ninjaverse, a mini metaverse where people can meet, compete and socialize, a game where you can walk around interacting with each other. Your Ninja NFT’s gaming attributes will give you better game ability. The Ninjaverse is full of Arcade machines; you walk up to one, take a TNT coin out of your pocket, it zooms in, you play the mini-game. There is a massive leader board in the centre of the room when there is a tournament on; everyone can see their scores.","metadata":{"loc":{"lines":{"from":691,"to":691}}}}],["361",{"pageContent":"one, take a TNT coin out of your pocket, it zooms in, you play the mini-game. There is a massive leader board in the centre of the room when there is a tournament on; everyone can see their scores. There will be many events in the Ninjaverse. This is our vision! Like a mini Roblox style world full of arcade machines that anyone can own! We created a little video of what we feel this could look like in the future - TronNinjas Ninjaverse - YouTube 11","metadata":{"loc":{"lines":{"from":691,"to":691}}}}],["362",{"pageContent":"Dapp screenshots\n\nStaking\nStaking\nTouraments\nTouraments\nTouraments2\nTouraments2\nWebsiteEnter\nWebsiteEnter\nWebsiteMainPage\nWebsiteMainPage\nGames\nGames\nNinjaStore\nNinjaStore\nProject Past Milestones:\n\n• User Energy sales system to allow users to buy energy cheaper when staking NFTs\n\n• Four games live in our P2E system.\n\n• The first project on Tron to allow users to stake their NFTS and earn a share of the sales via the Ninja Store.\n\n• The Ninja Store - An online store that allows users to purchase in-game upgrades giving users and advantage in the retro e-sports events\n\n• Grown an active and engaged community on discord\n\n• Sold over 500 Ninja NFTs\n\n• Launched our in-game token (TRC-20) TNT (TronNinjaToken)\n\n• Press release on Yahoo Finance - Tron Ninjas encapsulate the classic Arcade in a metaverse 3\n\nFuture Milestones next two months:\n\nWithin Q1 -\n\n15th March Now complete\n\nTNT Liquidity mining with multiple pools (Phase one).\n\nUpdate","metadata":{"loc":{"lines":{"from":693,"to":735}}}}],["363",{"pageContent":"Future Milestones next two months:\n\nWithin Q1 -\n\n15th March Now complete\n\nTNT Liquidity mining with multiple pools (Phase one).\n\nUpdate\n\nGood news everyone. We have now been able to complete phase one of our upcoming TNT liquidity mining release. The smart contract is ready and will allow us to dynamically add new liquidity pools in the future. This is phase one phase two will include the release and the UI.\n\nTNT Liquidity mining with multiple pools (Phase one). Now available in our public git repo.\n\n31st March Now complete\n\nUpdate\nThe game is now ready and has been launched!\n\n\nGitHub\n\nGitHub - TronNinjasProject/NinjaJump 3\nContribute to TronNinjasProject/NinjaJump development by creating an account on GitHub.\n\nWe expect to release a new game into the TronNina arcade. We will integrate it into our P2E system allowing users to earn TNT. We will then be able to include this in our weekly GameFi E-Sport events.\n\n15th April Now Ready\n\nUpdate","metadata":{"loc":{"lines":{"from":735,"to":764}}}}],["364",{"pageContent":"15th April Now Ready\n\nUpdate\n\nWe have now released the TNT LP mining to a small group. All users will be able to benefit from mining TNT from next week.\n\nTNT Liquidity mining with multiple pools (Phase two).\n\nWe will have ready the UI for our TNT Liquidity mining; We will then release this to our users. It will allow users to earn TNT while providing liquidity for DEXS on Tron.\n\n30th April\n\nUpgrade P2E system.\n\nBy this date, we will change the current P2E system; now, the users are paid out from a wallet using the wallet’s PK. We will deploy a smart contract to replace this system. It will lock in the game allocated TNT, which the contract will own. When users earn TNT, it will be controlled through the new contract.\n\n15th May\n\nChange the P2E system to allow sending of TNT from games played to our staking contract. For each 5 TNT earned while paying games, 1 TNT will be added to the staking for all users.","metadata":{"loc":{"lines":{"from":764,"to":782}}}}],["365",{"pageContent":"15th May\n\nChange the P2E system to allow sending of TNT from games played to our staking contract. For each 5 TNT earned while paying games, 1 TNT will be added to the staking for all users.\n\nWe will continue to upgrade the P2E system, which will provide staked rewards when any games are played. This will require updates to our current staking contract, Ninja store contract, and P2E system.\n\nUpdate\n\n\nGitHub\n\nTronNinjasProject 10\nTronNinjasProject has 2 repositories available. Follow their code on GitHub.\n\n\nTRON\n\nTRONSCAN | TRON BlockChain Explorer 1\nTRONSCAN is the first blockchain browser in the tron community. It supports multiple login methods and provides a complete browsing and search experience. Experience the tron-ecology in the TRONSCAN blockchain...\n\nWe have now finished the last of the TronDAO hackathon milestones and the new contract is now live.","metadata":{"loc":{"lines":{"from":782,"to":802}}}}],["366",{"pageContent":"We have now finished the last of the TronDAO hackathon milestones and the new contract is now live.\n\n⁃ TNT to staking contract from games played and not only from store items bought.\n⁃ Claim rewards page.\n⁃ TNT will now been locked in a smart contract\n\nWhat does this mean for you? First of all you need to unstake all your NFTs, TNT and OGTNT from the old staking page and stake it again on the V2 page. We know some will have energy issues so both pages will be available until everything has been moved to V2, but only the V2 contract will receive rewards.\n\nIn the claim rewards page all TNT earned from games played will be claimable every 24 hours.\n\nFuture Milestones within the next 12 months:\n\nExpect to release MacOs and windows desktop versions of the TronNinja App. This application will improve the current system. This will be followed by IOS and Android applications.\n\nUpgrade the system to allow for the communities’ battle and two-player battles with wager system.","metadata":{"loc":{"lines":{"from":802,"to":816}}}}],["367",{"pageContent":"Upgrade the system to allow for the communities’ battle and two-player battles with wager system.\n\nRelease a game where your NFT character can be used in game with their abilities\n\nOnce Ninja NFT minting is complete - Start working on our vision of the Ninjaverse (Details above.) TronNinjas Ninjaverse - YouTube 11\n\nRelease of a fully-featured NInja NFT marketplace.\n\nMONIWAR - The Biggest Idle Epic Puzzle Game On Blockchain\nTRON Hackathon\nHackathon Season 1\ngamefi\nMar 2022\nNov '22\n\nmoniwar","metadata":{"loc":{"lines":{"from":816,"to":831}}}}],["368",{"pageContent":"1\nMar '22\nProject Name : Moniwar\nProject Track : GameFi (Play To Earn, Yeild Farming, NFT, GameBase)\nTeam Name : Monihub\nTeam Member(s) : Moniwar is a game project developed by a team of experts in the field of games with nearly 15 years of experience with traditional games in Vietnam. With the trend of NFT in the game, we quickly transformed and created Moniwar with the combination of Mobile Game + Blockchain + NFT technology\nProject Goal : The First Idle Epic Puzzle Game On Blockchain\nProject Info : MONIWAR DreamPaper - Moniwar | Play to Earn 10\nProject Report :\nGame Trailer: [MONIWAR - Official Trailer 2 - YouTube ] (MONIWAR is OUT NOW - The Biggest Idle Epic Puzzle Game On Blockchain - YouTube 4)\nProject Details :\nWebsite: https://moniwar.io 18\nWhitepaper: https://docs.moniwar.io\nPlay Game: https://playtoearn.moniwar.io 5\nFollow Twitter: https://twitter.com/moniwar_game 7\nJoin Telegram Channel: Telegram: Contact @MoniwarAnnouncements","metadata":{"loc":{"lines":{"from":833,"to":848}}}}],["369",{"pageContent":"Whitepaper: https://docs.moniwar.io\nPlay Game: https://playtoearn.moniwar.io 5\nFollow Twitter: https://twitter.com/moniwar_game 7\nJoin Telegram Channel: Telegram: Contact @MoniwarAnnouncements\nJoin Telegram Group: Telegram: Contact @MoniwarOfficial 2\nFollow Facebook: Moniwar\nSubbrice Youtube: https://www.youtube.com/c/MoniwarOfficial\nFollow Medium: https://moniwar.medium.com/\nInstagram: https://www.instagram.com/moniwario/\nFollow Tiktok: TikTok 3\nJoin Discord: MoniWar Central","metadata":{"loc":{"lines":{"from":848,"to":858}}}}],["370",{"pageContent":"Moniwar is inspired by the famous and widely loved game around the world: Battle of Legend & Candy Crush Saga, combined with the stories of ancient Greek myths and with the leading NFT and DeFi technologies in the blockchain. But it is so much more. It is also the combination of GamePad + NFT Yield Farming + GameFi Play to earn. With novel pet collecting and upgrading mechanisms, Moniwar makes your diamond-matching battles more exciting than ever! We already have real products and have launched on website, android, windows and coming soon macOS and iOS as well as a clear earning mechanism, we are always confident in our product even though the market is up or down.\n\n241243859_116425160759881_1427681804865923845_n\n241243859_116425160759881_1427681804865923845_n\nWe have the Founder/CEO, Mr. Quoc Bao, who has more than 13 years of experience in the video game industry and 4 years of building blockchain technology application. He is currently the Head of Technology in BAS.","metadata":{"loc":{"lines":{"from":860,"to":864}}}}],["371",{"pageContent":"The core tram also includes the leader in their field, each of them is in charge of different part of the game formation, developement, to ensure providing the best experience for our players.\n\nWe are so confident to make a wonderful game for our users to have an amazing playing experience. The profile of Moniwar consultants: Trung Nguyen - Co-Founder & CEO Axie Infinity ; Loi Luu - Co-Founder & CEO of Kyber Network; Henry Tran - Founder Hub Global; Long Vuong - Founder & CEO Tomochain; Tuan Pham - Chairman of TFI; Thanh Dao - Founder & CTO of LaunchZone.\n\nz2958302675443_679d670142377c5d1b4a119d0dcafb77\nz2958302675443_679d670142377c5d1b4a119d0dcafb77\nWe listed on PancakeSwap, MEXC, ONUS, ApeSwap, Poocoin, ONTO Wallet, Coin98 Wallet,… In the future, Moniwar will offer 2 more mechanisms to meet the needs of players and expand the game.","metadata":{"loc":{"lines":{"from":866,"to":872}}}}],["372",{"pageContent":"License: Moniwar allows players to design more Heroes, and characters that pass team’s review can receive a reward for creation. Those characters will also become NFTs circulated in the game\nDAO: The DAO mechanism will also be included to listen to the community’s opinions and empower the project to be more suitable for development.\nMONIWAR is honored to officially be in the top 7 most interesting projects in the Most Valuable Builder IV (MVB IV) campaign organized by BNB Chain.\n\nFLzCS4vakAAvExS\nFLzCS4vakAAvExS","metadata":{"loc":{"lines":{"from":874,"to":879}}}}],["373",{"pageContent":"FLzCS4vakAAvExS\nFLzCS4vakAAvExS\n\nThis is a special treat for our holders of Moniwar: in near future they will be entitled to private allocation participation from other projects we invested in, and you can earn gigantic amount of money, because all of the projects we invested in are 5x, 10x or more now. Pay close attention to our news and make sure you hold MOWA tokens. The more tokens $MOWA holders have, the greater the chance they have of receiving NFT airdrops from MONIWAR partners and maybe create NFT by self.\n\nQuizarena by Team Quiz Arena - A Learning Journey into Metaverse\nTRON Hackathon\nHackathon Season 1\ngamefi\nFeb 2022\nMar '22\n\nQuizarena\n\n1\nFeb '22\nProject Name: Quiz Arena\n\nProject Track: GameFi\n\nTeam Name: Quiz Arena\n\nTeam Members: [8]\n\nProject Goal: Our mission is to create a decentralized learning platform & ecosystem that ultimately adds social value and impact on improving the quality of life for everyone through :","metadata":{"loc":{"lines":{"from":879,"to":903}}}}],["374",{"pageContent":"Project Goal: Our mission is to create a decentralized learning platform & ecosystem that ultimately adds social value and impact on improving the quality of life for everyone through :\n\nQuiz Arena Quiz Game\nQuiz Arena Quiz Game was created to make the learning process easy, fun and engaging.\nThus, it can ignite the interest of personal development.\n\nQuiz Arena Academy\nQuiz Arena Academy was inaugurated to provide readily accessible knowledge for everyone. Thus, a plethora of well curated library of knowledge is made available to all. The academy has plans to partner with reputable institutions to provide accredited certifications in the form of NFTs for individuals who have completed the online courses. Hence, equipping individuals with the most recent skillset required in the modern workforce.","metadata":{"loc":{"lines":{"from":903,"to":910}}}}],["375",{"pageContent":"Quiz Arena EduDAO\nLastly, to achieve decentralization, Quiz Arena EduDAO was founded. The team will first established the guidelines and expectations of Quiz Arena EduDAO. Following which, the EduDAO will begin to transition toward a community driven organisation. Whereby community members who are holding onto Quiz Arena (QZA) token are eligible to cast their vote for the nomination of new curriculum structures, treasury spending on scholarship, and etc.\n\nProject Info:\nSlides 2\nWebsite 10\nTwitter 7\nWhitepaper\n\nProject Details:\nQuizarena is a Free-to-Play ( F2P) quiz and puzzle blockchain game where everyone can start playing without the need to pay. Quizarena also utilize the Compete-to-Earn ( C2E ) model to reward players with tokens through engaging gameplay animations and the participation of Player-Versus-Player (PVP) and tournaments. With the combination of F2P and C2E models, Quizarena gives players the opportunity to learn, play and earn rewards at the same time.","metadata":{"loc":{"lines":{"from":912,"to":922}}}}],["376",{"pageContent":"Adopting the F2P model allows players who are unfamiliar with blockchain, cryptocurrency and non-fungible token (NFT) the opportunity to be part of the community instantly. F2P players will be exposed to questions about blockchain, cryptocurrency, NFT and endless suites of topics.\n\nGame Features of Quiz Arena :\n\nQuizFi — Learn to Earn\nFree single player quiz challenges for anyone who would like to kickstart their learning process, all they would need to do is to create an account. Focusing on the quiz & puzzle gaming metaverse, Quizarena aims to create a new financial system integrated with blockchain and gaming.\n\n\nQuiz-Fi PvE.2\nQuiz-Fi PvE.2","metadata":{"loc":{"lines":{"from":924,"to":933}}}}],["377",{"pageContent":"Quiz-Fi PvE.2\nQuiz-Fi PvE.2\n\nBattle Quiz — PvP\nWager and Battle players worldwide to win tokens through interactive and entertaining gameplay.\nQuizarena Tournament — PvP Leaderboard\nTournaments would also be able to provide a huge reward as we would have an ever-increasing prize pool, and NFT heroes as rewards. Get number 1 on the leaderboard, earn tokens and NFT heroes collectibles.\nProject Milestones:\n\nMar 13, 2022:\nStart of Hackathon, Quiz Arena has social media ready and build a community. Quiz Arena quiz game is in development stage for the final product launch.\n\nMar 31, 2022:\nThe completion of “Battle Quiz” and “Tournament” game mode.\n\nApr 13, 2022:\nActual Closed Beta Testing of the Quiz Arena will begin and work on improving overall gameplay experience and bug.\n\nApr 30, 2022:\nFull release of Quiz Arena gameplay.\n\nMay 13, 2022:\nEnd of Hackathon one. Quiz Arena full gameplay is ready,\nusers will be able to interact with the QuizFi and Battle Quiz game features.","metadata":{"loc":{"lines":{"from":933,"to":956}}}}],["378",{"pageContent":"May 13, 2022:\nEnd of Hackathon one. Quiz Arena full gameplay is ready,\nusers will be able to interact with the QuizFi and Battle Quiz game features.\n\n\n\nMeta Insurgent - 1st VR-Metaverse Person Shooter (FPS)\nTRON Hackathon\nHackathon Season 1\ngamefi\nFeb 2022\n ​Back\nDec '22\n\nMetaInsurgent\n\n6\nFeb '22\n1-01 (9)\n1-01 (9)\nProject Name: Meta Insurgent\nProject Track: GameFi\nTeam Name: Meta Insurgent\nTeam Member(s): 8 members in total including freelancers.\nProject Goal: Aim to be the leading VR-Metaverse First Person Shooter in this industry!\nProject Info: Pitch Deck: https://drive.google.com/file/d/1EhLC3ijh2SAG7dNJMftN8a1Lt-jXDsdX/view?usp=sharing 6\nProject Repo:\nGame Trailer: Meta Insurgent - Official Trailer 2 - YouTube 15\nProject Details:\nWebsite: MetaInsurgent.com 16\nTwitter: https://twitter.com/MetaInsurgent 7\n\nimage\nimage\nImage_2\nImage_2","metadata":{"loc":{"lines":{"from":956,"to":991}}}}],["379",{"pageContent":"image\nimage\nImage_2\nImage_2\n\nimage\nimage\nUsing the Oculus Quest 2, Meta Insurgent is built on the immersive VR-Metaverse First Person Shooter (FPS) where users will strategize their offensive and tactical movement in engaging their opponents in the VR arena. Users will get to customize their avatar profile, weapons system and enhance their tactical movement through teleport pod.\n\nWeapon Demonstration: Sniper_GameMode.mp4 - Google Drive 3\n\nimage\nimage\nimage\nimage\nNFT Skin Features\nMeta insurgent will be providing series of NFT skins as of skin integration to enhance their outlooks, proving a top-notch gaming experience within the arena.\nNFT Skin Preview: 5_NFT_Avatar_1.mp4 - Google Drive 1\n\nimage\nimage\nProject Milestones:","metadata":{"loc":{"lines":{"from":991,"to":1012}}}}],["380",{"pageContent":"image\nimage\nProject Milestones:\n\nMar 13: We will be completing our game environment, mechanic testing and at the same time, NFT designs\nMar 31: We aim to launch our game beta testing to allow users to play and interact.\nApr 30: We will developing our NFT marketplace where users will be able to equip our different NFT weapon skins that come with different rarity.\nMay 30: We will be able to conduct our 1st tournament launch.\n\nSiren- Assistance of DOTA2 (MOBA GAMING) on blockchain using AI - GameFI\nTRON Hackathon\nHackathon Season 1\ngamefi\nFeb 2022\nAug '22\n\nsiren\n\n1\nFeb '22\nWebSite\n\nProject Name : Siren\nProject Track : GameFi\nTeam Name : Siren Team\nTeam Member(s) : 5\nProject Goal :\nUsing AI for upgrade players skills in DOTA2 by analyzing user match history base on player recent game.\nThe first specialize assistance for DOTA2\nAll Transactions going to be on blockchain\nHolding competitions for DOTA2 tournaments\nNotices signed team for them matches.","metadata":{"loc":{"lines":{"from":1012,"to":1043}}}}],["381",{"pageContent":"Project Milestones\nSiren is a first specialized assistance application for Dota2 That using AI on blockchain.\nEvery single transactions going to be on chain net .\nFree part of application usable for all folks.\nThis system covering multi languages.\nSupporting Android , IOS and web\nBrief description of project :\nDOTA2 is a MOBA Gaming which 5 player on each team and containing two teams with a DIRE and RADIANT defense their ancient from other teams.\nOur project name is a SIREN so what we going exactly to do ?\nWe decide using AI for upgrade players skills in DOTA 2 by analyzing user match history base on player game , tell them weakness and strength against Items , Heroes and etc.\nAlso launching an holding for competitions that players able to find each other and enjoy tournament , each team in bracket going to be informed match times and other matches history.\nThis application going to be launch on Android , IOS and web .","metadata":{"loc":{"lines":{"from":1045,"to":1056}}}}],["382",{"pageContent":"This application going to be launch on Android , IOS and web .\nPlayers able to enjoy free part of application or premium , free part of applications contains generally details of game such as Heroes , Items , new patch update also collecting some information about top ranked teams ( Professional ) and them players.","metadata":{"loc":{"lines":{"from":1056,"to":1057}}}}],["383",{"pageContent":"VersacBrickSquad by TuruGlobal\nTRON Hackathon\nHackathon Season 1\nnft\nFeb 2022\nMar 29\n\nTuruGlobal\n\n7\nFeb '22\nimage\nimage\nProject Name: VersacBrickSquad\nProject Track: NFT & DEFI\nTeam Name: TuruGlobal\nTeam Member(s): 21\nProject Goal: Make real estate investment available for all\n\nReal Estate investment for the People\n\nWho doesn’t dream of owning a piece of real estate in prime locations in a major city around the Globe?\n\nThis dream is mainly reserved for people with enough financial resources to purchase a real estate asset with their own funds, and many people are excluded from pursuing this dream due to lack of funds.\n\nThe Versac Brick Squad is a collection of DAO’s investing in real estate assets jointly managing the assets in a platform structure provided by TuruGlobal and with that making Real Estate investment accessible for the people.","metadata":{"loc":{"lines":{"from":1059,"to":1084}}}}],["384",{"pageContent":"Every real estate asset managed has its own DAO and ownership in this DAO is represented by the Brick NFT’s held for that particular real estate asset.\n\nIn summary\n\nEvery Brick NFT represents a partial ownership of a real estate asset. There are different type of bricks with different intrinsical values. The value of a real estate asset defines how many bricks are minted for that particular DAO.\n\nThe bricks can be traded on an NFT platform to give liquidity to the bricks. For trading of bricks a royalty fee will be charged by TuruGlobal. Every real estate project has its own bricks in the following dominations:\n\nBronze VBS brick: 250 USDT\nSilver VBS brick: 1000 USDT\nGold VBS brick: 5000 USDT\nValue & Revenue.\n\nValue.\n\nOwning a brick will give the right to receive the proportional share of income generated by the Real Estate project.","metadata":{"loc":{"lines":{"from":1086,"to":1101}}}}],["385",{"pageContent":"Value.\n\nOwning a brick will give the right to receive the proportional share of income generated by the Real Estate project.\n\nEvery appartment bought by TuruGlobal is burdened with the cost of procuring (tax, legal, service fee & furbishing).- The total costs of the purchase of the apartment is summed up and defined as the Property Value.\n\nThen the Property Value is split up in bricks, which will be put up for sale to sell partial ownership of the apartment to brick holders. Per real estate project there is a one time mint of a specific amount of uniquely identifyable bricks (NFT’s) representing the original value of the asset. If the value of the asset goes up, the value of the brick in principle follows.\n\nGovernance\n\nEvery property has its own DAO and the collection of all DAO’s is called the Versac Brick Squad","metadata":{"loc":{"lines":{"from":1101,"to":1111}}}}],["386",{"pageContent":"Governance\n\nEvery property has its own DAO and the collection of all DAO’s is called the Versac Brick Squad\n\nOnce all bricks of an apartment are sold out, we will have a apartment governance platform on Discord for every specific DAO where the group of owners can interact. Key decisions can be made there based on 2/3 majority rules like:\n\nSell the property to cash in on value increase.\nChange rental profile from long term rent to AirBNB or vice versa.\nOther significant changes.\nTuruGlobal Discord:\n\n\nDiscord\nDiscord - A New Way to Chat with Friends & Communities 2\nDiscord is the easiest way to communicate over voice, video, and text. Chat, hang out, and stay close with your friends and communities.\n\nTuruGlobal will invest in order to hold an initial share of 20% in all the DAO’s. This way TuruGlobal team will be participating in all governance groups. With a 20% share it has a right to vote, but the vote is not decisive allowing a true DAO operation and set up.","metadata":{"loc":{"lines":{"from":1111,"to":1127}}}}],["387",{"pageContent":"Brick sales and resales - MultiChain\n\nThe VBS Brick NFT’s are minted and made available on three different blockchains:\nTRON and BSC for the bronze, silver and gold Bricks\nEthereum only for the gold bricks to minimize the impact of its gas Fees.\n\nOwning a brick gives you proportion of the passive income generated by the real estate asset.\n\nThe bricks are liquid assets and can be sold on the NFT exchange platfroms of use. Every resale will be eligable for a royalty fee of 2.5%. This royalty fee is income for TuruGlobal for managing the platform. Depending on the NFT exchange used, there can be platform and / or gas fees.\n\nVersacBrickSquad\n\nVersacBrickSquad is a TuruGlobal module managed by the team behind TuruGlobal and is therefore a part of the TuruGlobal Ecosystem.","metadata":{"loc":{"lines":{"from":1129,"to":1141}}}}],["388",{"pageContent":"VersacBrickSquad\n\nVersacBrickSquad is a TuruGlobal module managed by the team behind TuruGlobal and is therefore a part of the TuruGlobal Ecosystem.\n\nimage\nimage\nTuruGlobal\nTuruGlobal will hold 20% of Versac Brick Squad real estate projects and will give TuruGlobal community members a chance to owning a part of this portfolio through distributing of a $VBS token backed by their bricks to its loyal community. The $VBS tokens will be TRC20 tokens fully backed by Brick NFT’s owned by TuruGlobal.\nThe $VBS tokens will only be available for Team Members, BabyTuru Millionaire Club members and holders of Single Mint $BabyTuru NFT’s. $VBS can only be bought with either $turu or $BBT tokens. All part of the TuruGlobal Ecosystem.\n\nExample Project\n\nimage\nimage\nWhitePaper\nThe whitepaper, (work in progress) is shown in the file here:\nVBS.pdf (1.0 MB)\n\nWebsite\nThe website is ready and can be viewed at:\n\n\nVersacBrickSquad","metadata":{"loc":{"lines":{"from":1141,"to":1163}}}}],["389",{"pageContent":"Example Project\n\nimage\nimage\nWhitePaper\nThe whitepaper, (work in progress) is shown in the file here:\nVBS.pdf (1.0 MB)\n\nWebsite\nThe website is ready and can be viewed at:\n\n\nVersacBrickSquad\n\nNft | VersacBrickSquad 3\nThe VersacBrickSquad is a collection of crypto fueled DAO’s investing in real estate assets and jointly managing the assets in a platform structure provided by TuruGlobal and thereby making Real Estate investment accessible to anyone.\n\nTimeLine\nPlease see below our updated timeline for the project, aligning with the milestones put forward by the Hackathon rules:\nimage\nimage\nUse of funds\nIn case VersacBrickSquad would win a prize in this Hackathon, the received funds would be used for:","metadata":{"loc":{"lines":{"from":1163,"to":1185}}}}],["390",{"pageContent":"Marketing efforts to get the name of VersBrickSquad to a wider community\nLegal fees\nVBS community management fees\nEarlier set up of a second property as part of the VBS\nQ&A\nWe would like to ask for community engagement to ask questions about the VBS so we can start filling up our Q&A section of our website and white paper.\n\nQuestion:\nI would like to know the names of some of teh countries that this project will give an investment oppertunity on :blush: Hope for Caribbeans in the future :crossed_fingers:\n\nAnswer:\nAs the real estate legislation is different per country, we will switch on countries one by one. Easiest is to start with countries where we have team members living in order to get the right representation and legal documentation in place.\n\nWe don’t have any team members living in the Carribian (yet :-)) so that is not planned to be part of the first wave. Though if we can convince a team member to move there, it might get its turn earlier…","metadata":{"loc":{"lines":{"from":1187,"to":1200}}}}],["391",{"pageContent":"Question:\nWill some of the properties be vacation cottages or are you guys focusing on City properties? Will the holders have any advantages interms of vacations stays etc. ? :eyes:\n\nAnswer:\nThe first properties will be city properties. Every property will have its own group of owners (the DAO with their own discord channel in our server) This DAO will have a TuruGlobal community manager and one of the goals of the community manager is to record ideas and feedbacks.\n\nIf we see appetite for holiday cottages, we can go into that direction. As one of the basics of VersacBrickSquad is to give a voice to the community. Then when we buy a holiday cottage it is for the DAO to decide whether investors will get free stays reducing the returns or rather focus on returns. They will have the power to make key decisions based on a 2/3 majority…\n\nQuestion:\nOne more question, what responsibilities / liabilities will the holders of versac bricks have?","metadata":{"loc":{"lines":{"from":1202,"to":1211}}}}],["392",{"pageContent":"Question:\nOne more question, what responsibilities / liabilities will the holders of versac bricks have?\n\nAnswer:\nThe key responsibility is to collect their part of the income generated by the real estate object :slight_smile:\nBut besides that they will be considered as a group to influence their objects destiny.\nFor example they can decide to go for AIRBNB rental rather then long term rental or they can decide to have the object sold if the price went up a lot. But all decisions based on 2/3 majority vote.\n\nQuestion:\nWhat is a DAO?\n\nAnswer:\nA DAO is a Decentralized Autonomous Organisation. All our real estate assets will be managed by DAO’s with involvement of TuruGlobal team as part of the DAO.\n\nUpdated April 10\n\nCubie 3D NFT GameFi\nTRON Hackathon\nHackathon Season 1\nnft\nFeb 2022\nAug '22\n\nSuperJack\n\n3\nFeb '22\nCubie logo\nCubie logo\nWebsite 15 — Cubies Gallery 6 — Twitter 8 — Github 6","metadata":{"loc":{"lines":{"from":1211,"to":1240}}}}],["393",{"pageContent":"Updated April 10\n\nCubie 3D NFT GameFi\nTRON Hackathon\nHackathon Season 1\nnft\nFeb 2022\nAug '22\n\nSuperJack\n\n3\nFeb '22\nCubie logo\nCubie logo\nWebsite 15 — Cubies Gallery 6 — Twitter 8 — Github 6\n\nProject Name : Cubie\nProject Track : NFT\nTeam Member(s) : 2\nProject Goal : Video gaming is a booming billion-dollar industry that is expected to rise enormously in the following decade. The boundaries between gaming as leisure and profit-making activity have already become blurred.\n\nHowever, in the current market, there are not many video games that give players a chance to earn decent money. We believe there is a huge opportunity in the market for video games with play-to-earn features.\nDecentralized solutions guarantee transparency, fairness, privacy and safety.\nNFT takes ownership and uniqueness to the ultimate level.\nWe want to bring good NFTs with great use case on Tron.\nBrief description of project :","metadata":{"loc":{"lines":{"from":1240,"to":1266}}}}],["394",{"pageContent":"CUBIE is a community-driven NFT GameFi platform empowering users by rewarding them for their engagement and enjoyment. By using innovative tokenomics, utilizing finance and games.\nCheck Our website : cubie.art 32\n\nCubies are original 3D NFT project on tron with good community support. we minted 70 Cubies(NFT) till now and all sold out.\nCheck here : Sales 3\n\nJoin Cubie\nJoin Cubie\nNFT mining :\nWe have created a unique yield farming mechanisms that puts your NFTs to work. By staking Cubies users can farm the $CUBE token.\n\nEach CUBIE has a randomly generated hash power that can be upgraded by consuming other CUBIE NFTs. The total hash power is calculated by adding up the hash power of all your Cubies. The amount of $CUBE tokens mined is dependent on your weighted average of the total hash power across the platform.\n\nThe amount of $CUBE tokens released per day is also dependent on the total hash power across the platform.\n\ncubie token logo\ncubie token logo\nCubie NFT utility :","metadata":{"loc":{"lines":{"from":1268,"to":1285}}}}],["395",{"pageContent":"The amount of $CUBE tokens released per day is also dependent on the total hash power across the platform.\n\ncubie token logo\ncubie token logo\nCubie NFT utility :\n\nEach Cubie NFT had a certain fixed amount of $CUBE token to it. User can burn their cubie(NFT) and get the $CUBE token Fixed to it.\n\nEach CUBIE has a randomly generated hash power that can be upgraded by consuming other CUBIE NFTs.\n\nCubies can be sent for mining and Earn $CUBE Tokens Depending on Cubie Hash power.\n\nMilestones of the project :\n\nLaunched our first Free to play game Cubie bird : Cubie Bird Game 15\nCubie Bird Game\nCubie Bird Game\nWe made some good partnerships with top community projects on Tron.\nJustMoney DEX 4\nBabyTuru 2\nKraftly NFT Marketplace 2\nFuture Milestones :","metadata":{"loc":{"lines":{"from":1285,"to":1306}}}}],["396",{"pageContent":"NFT Contract (TRC-721) Release & Migrations.\nLaunching 50% of Cubie NFTs for minting.\ndevelop 3D cubie game with good graphics and use cases to attract more users.\nPlatform Website (Dapp).\nMystery Box Integration.\nCUBIE IS FREE TO PLAY, PLAY TO EARN ECOSYSTEM.\n\nKraftly NFT Marketplace\nTRON Hackathon\nHackathon Season 1\nnft\nFeb 2022\nMay '22\n\nkraftly\n\n2\nFeb '22\nFM4hpcoXIAMo3oz\nFM4hpcoXIAMo3oz\n1500x500\n1500x500\nProject Name : Kraftly NFT Marketplace\nProject Track : NFT\nTeam Name : KraftlyCorp parent soliditygods.com 22\nTeam Member(s) : 5 currently as of FEB 2022\nProject Goal: Kraftly.io 21 is a decentralized marketplace for NFTs, rare digital items, and collectibles. Mint, trade, and collect.\nThe marketplace was built on TRON blockchain to provide a solution for users not used to paying high gas fees on Ethereum\n\nProject Info :\n04\n04","metadata":{"loc":{"lines":{"from":1308,"to":1339}}}}],["397",{"pageContent":"Project Info :\n04\n04\n\nKraftly.io 21 is a P2P decentralized TRC721 marketplace protocol that runs on TRON blockchain which allows users to do the following\nMint and own TRC721 NFT on TRON blockchain against uploaded media files such as video, music, animation, images (.jpg, .png, .jpeg, .gif, .mp3, .mp4)\n1\n1\nCreate a ‘crypto punks type’ blind auction collection where the buyer not only mints the NFT upon purchase but your collection uses Kraftly.io 21 's fair-distribution algorithm to randomize the ‘who gets what’ NFT process\nBLIND AUCTION SHOWCASE\n2\n2\n\nBLIND AUCTION MINT (For NFT buyers)\n3\n3\n\nBLIND AUCTION Gallery\n4\n4\n\nBLIND AUCTION Create (For Creators)\n5\n5\nTrade NFTs that are minted on Kraftly.io 21 marketplace using various type of auctions (Buying or Selling)\n6\n6\nTrade secondary NFTs that uses different TRC721 smart contract or NFTs that are NOT minted on Kraftly.io 21 NFT marketplace ( Also supports creator royalty)\n7\n7\n\n8\n8\nProject Repo: kraftlychef · GitHub 10","metadata":{"loc":{"lines":{"from":1339,"to":1372}}}}],["398",{"pageContent":"8\n8\nProject Repo: kraftlychef · GitHub 10\n\nProject Details: Kraftly.io 21 is created and run by parent soliditygods.com 22. Solidity Gods is a team of induvial people with love for Solidity and basic blockchain tech. The team aims to bring forward multiple awesome product and services revolving around blockchain in general and use their skills and experience to solve 1 small problem at a time and introduce solutions.\n\nKraftly.io 21 is built using React.js and utilizes a web3.js-like plugin called TRONWeb.js hence users can attempt to sign up with both personal computers and mobile devices like cellphones or tablets as long as they have access to a TRON wallet basically any device works!!\n\nThe marketplace was built on TRON blockchain to provide a solution for users not used to paying high gas fees on Ethereum\n\n01\n01\n3P2\n3P2\n02\n02\nprofile\nprofile\nref\nref\nPartners and Investors\n\n9\n9\nProject Milestones:","metadata":{"loc":{"lines":{"from":1372,"to":1396}}}}],["399",{"pageContent":"01\n01\n3P2\n3P2\n02\n02\nprofile\nprofile\nref\nref\nPartners and Investors\n\n9\n9\nProject Milestones:\n\nKraftly.io 21 was launched in August 2021 and we are really glad to say this but with generous support from APENFT and the TRON community we’ve already completed all of our major milestones in only 6 MONTHS that’s a record :star_struck:\n\nNevertheless here goes a short summary of our journey and we are still working on\n\nAugust 22, 2021 : Launch of Kraftly.io 21 (NFT Mint Only)\n\nAugust 26, 2021 : Launch of first NFT trading smart contract\n\nSeptember 2,2021 : Launch of Kraftly NEO and Kraftly’s fair-mint smart contract for conducting blind auctions for generative artworks etc and we launched first ever 100% original community crated artwork project aka CRYPTO CLOUD 1S\n\nSeptember 8, 2021 : Launch of Kraftly’s native token $KTY\n\nSeptember 10,2021 : Launch of NFT bid war and anti-snipe tech smart contract\n\nSeptember 24, 2021 : Mint NFTs with your favorite TRC20 coins → New Smart Contract","metadata":{"loc":{"lines":{"from":1396,"to":1426}}}}],["400",{"pageContent":"September 10,2021 : Launch of NFT bid war and anti-snipe tech smart contract\n\nSeptember 24, 2021 : Mint NFTs with your favorite TRC20 coins → New Smart Contract\n\nSeptember 30th,2021 : Major GUI update allowing users to like NFTs and Follow their favorite creators on Kraftly.io 21\n\nOctober 16th,2021 : Generous investment from APENFT and TRON DAO and establishment of long-term partnership\n\nOctober 21, 2021 : Launch of blind auction public (A FEATURE THAT BLOCKCHAIN INDUSTRY HAS NEVER SEEN BEFORE ) along with new smart contract\n\nNovember 28, 2021 : Launch of secondary NFT marketplace that supports NFT that are NOT minted on Kraftly.io 21 and added APENFT Token as a trade currency on Kraftly.io 21 marketplace\n\nDecember 17, 2021 : Lunched NFT Burn , Transfer , Referral , KTY Burn panel , Airdrop Panel , NFT Trader Rewards Panel , NFT Creator rewards panel\n\nJanuary 10th , 2022 : Added batch upload for NFTs\n\nJanuary 25th : Support added for BTFS and IPFS\n\nCurrent Work","metadata":{"loc":{"lines":{"from":1426,"to":1444}}}}],["401",{"pageContent":"January 10th , 2022 : Added batch upload for NFTs\n\nJanuary 25th : Support added for BTFS and IPFS\n\nCurrent Work\n\nQ1 2022 : Launch of new smart contract that will allow users to link media and mint NFT on their own custom contract using Kraftly.io 21 (You will be able to deploy your own TRC721 contract and link it with Kraftly.io 21 and use Kraftly.io 21 to link media and mint NFTs on your own contract)\n\nQ1 2022 : Availability of Royalties of above mentioned smart contract users\n\nResearch Work\n\nIn the mean time we are working on studying ways to use EIP 2981 as whole on TRON blockchain although we don’t want to associate this research with any timeline because we would have already long solved the problem of royalty by then\n\n----------------------------------- END OF PRESENTATION FOR HACKATHON -----------------------------\n\n---------------------------------- START OF MILESTONES TRACKING ------------------------------------------\n\nPHASE 1 → PROJECT STARTED\n\nPHASE 2 → 1ST MILESTONE","metadata":{"loc":{"lines":{"from":1444,"to":1464}}}}],["402",{"pageContent":"---------------------------------- START OF MILESTONES TRACKING ------------------------------------------\n\nPHASE 1 → PROJECT STARTED\n\nPHASE 2 → 1ST MILESTONE\n\n1.PROJECT COMPLETION : We are at 90% - Released the 80% ,\nGUI polish and backend/database optimization ~ 10%\n\nIncluding a screenshot here : → Screenshot by Lightshot\nlist\nlist\nYes we are 100% on time and we will complete 100% of the milestones before the end of April (not May)\nWe have 100% in house , high skill devs to make new ideas possible very fast.\n\nLINK : Kraftly → The new smart contract which does all the things mentioned in Point 2\n\nPlease follow this link, this is an user guide made for our potential and current users : Collection - Kraftly Docs\n\nSee this screenshot ----->>>>\n\nhow\nhow\n\nLightshot\n\nScreenshot\nCaptured with Lightshot\n\n<<<----- This shows the 4 SECTIONS that deals with the developed product","metadata":{"loc":{"lines":{"from":1464,"to":1493}}}}],["403",{"pageContent":"See this screenshot ----->>>>\n\nhow\nhow\n\nLightshot\n\nScreenshot\nCaptured with Lightshot\n\n<<<----- This shows the 4 SECTIONS that deals with the developed product\n\nDemo video of dev creating a mintable collection : - YouTube <<<- you can also follow this video step by step and test our development.\n\nIn case of any confusion you can directly reach our customer support here : Telegram: Contact @kraftlynft (Customer support reply may vary from few minutes to few hours based on timezone , customer support services are generally offline during the Asian night hours)\n\n\n1. What problem does this current update solves in the NFT space apart from minting NFTs on custom TRC721?\n\nhttps://www.youtube.com/watch?v=9tZXU34XlWc\n\n2. GUI change \n\nhttps://www.youtube.com/watch?v=vX51-VnmTXw\n\n\nNoleCoin - The movement\nTRON Hackathon\nHackathon Season 1\nnft\nFeb 2022\nMar '22\n\nChevkev\n\n1\nFeb '22\nTime to #signup the Nolians for the TRON hackathon DAO!","metadata":{"loc":{"lines":{"from":1493,"to":1530}}}}],["404",{"pageContent":"NoleCoin - The movement\nTRON Hackathon\nHackathon Season 1\nnft\nFeb 2022\nMar '22\n\nChevkev\n\n1\nFeb '22\nTime to #signup the Nolians for the TRON hackathon DAO!\n\nWe are happy to join the forum and explain our project to the Tron Hackaton DAO team\n\nProject Name: NoleCoin 13\n\nProject Track: NFT, DEFI & Philanthropy\n\nTeam Name: The Nolians\n\nTeam Members: 8\n\nProject Goal: Better the world with philanthropic activities using the blockchain as well as building epic products for our community to enjoy\n\nAbout the Founder:","metadata":{"loc":{"lines":{"from":1530,"to":1555}}}}],["405",{"pageContent":"Team Members: 8\n\nProject Goal: Better the world with philanthropic activities using the blockchain as well as building epic products for our community to enjoy\n\nAbout the Founder:\n\nI Kevin come from Amsterdam and have been building the NOLE project with the Nolians since 2018, I had several companies but decided in 2018 to start entrepreneurship on the blockchain, starting with charities around the world, building up the first community members, the first products on the market, learned a lot about the do’s and don’ts and our first success was achieved on the TRON blockchain thanks to our strong community who have shown a lot of commitment in recent years to put NOLE on the map!\n\nMilestones on the TRON chain\n\nWe are joining the Hackaton with our NoleLegends 5 DApp!\n\nAn NFT DApp NoleLegends+ that launched one of the very first NFTS in the TRON scene :rocket:\n\nmore info:\n\n\nreddit","metadata":{"loc":{"lines":{"from":1555,"to":1572}}}}],["406",{"pageContent":"We are joining the Hackaton with our NoleLegends 5 DApp!\n\nAn NFT DApp NoleLegends+ that launched one of the very first NFTS in the TRON scene :rocket:\n\nmore info:\n\n\nreddit\n\nr/NoleCoinWorld - An invitation to our Virtual world NoleLegends 17\n23 votes and 22 comments so far on Reddit\n\nBETA: game.nolelegends.com 11 (Login with Tronlink)\n\nGameplay footage: Evolving your Legend with NoleLegends! - YouTube 3\n\nThe following modules of the NoleLegends game are live and working currently:\n\nPlanting and watering :white_check_mark:\n\nHarvesting fruits :white_check_mark:\n\nLife ( if watered once in 72hrs ) - Unlimited :white_check_mark:\n\nSell harvested fruits :white_check_mark:\n\nTrade unplanted legends :white_check_mark:\n\nTransfer unplanted legends :white_check_mark:\n\nMinting :white_check_mark:\n\nDecorations :white_check_mark:\n\nNot Live yet:\n\nSpells :x:\n\nWe’ve done charity work all over the world donating TRX to the people in need\n\nVideo: NoleCoin The movement - YouTube","metadata":{"loc":{"lines":{"from":1572,"to":1612}}}}],["407",{"pageContent":"Decorations :white_check_mark:\n\nNot Live yet:\n\nSpells :x:\n\nWe’ve done charity work all over the world donating TRX to the people in need\n\nVideo: NoleCoin The movement - YouTube\n\nWe see this as a great opportunity to show our project to the world as well as participate in the bounty that the hackathon is offering us!\n\nNoleCoin community:\n\nNoleCoin has:\n\n:white_check_mark: A VIP Core supporter room of 400+ supporters, investors, philanthropists projects, and more\n\n:white_check_mark: An Inner Circle community of 20 + Nolians helping us build the project\n\n:white_check_mark: Several real-life use cases such as nolecrafts 2 and our merchandise 1 line where you can pay with our currency to obtain products.\n\n:white_check_mark: A decentralized community where everyone is involved in project decision-making with votes in the chats.","metadata":{"loc":{"lines":{"from":1612,"to":1634}}}}],["408",{"pageContent":":white_check_mark: A decentralized community where everyone is involved in project decision-making with votes in the chats.\n\n:white_check_mark: Our community is supporting our trading, our NFTs, our products as well as creating opportunities for the project. Our power is in the decentralized community that we have that is working hard every day to put ourselves on the map\n\nFeel free to join us for a chat on telegram or discord\n\nDiscord\n\nTelegram 3\n\nHackaton tweet 1\n\nWe wish all the participants good luck! Time to #signup the Nolians for the TRON hackathon DAO!\n\nReal NFT by USTX Team - Unique NFTs you can touch and feel\nTRON Hackathon\nHackathon Season 1\nnft\nMar 2022\nNov '22\n\nSirluke\n\n7\nMar '22\nbanner\nbanner\nProject Name : Real NFT\nProject Track : NFT\nTeam Name : USTX Team\nTeam Member(s) : 3, Sirluke, Benna, Aska","metadata":{"loc":{"lines":{"from":1634,"to":1664}}}}],["409",{"pageContent":"Sirluke\n\n7\nMar '22\nbanner\nbanner\nProject Name : Real NFT\nProject Track : NFT\nTeam Name : USTX Team\nTeam Member(s) : 3, Sirluke, Benna, Aska\n\nProject Goal: The “Real NFT” project aim is to bring a little more reality into the NFT world.\nReal NFT will be the link between digital art and hand-crafted tangible art-pieces. It will be possible to purchase the digital version of the item, the NFT, but the owner of the NFT will also be able to claim the real piece of art, that will delivered worldwide.\n\nProject Info:\n20220228_RealNFT.pdf (2.0 MB)\nProject website 27\n\nProject repo: Real NFT Github Repo 11","metadata":{"loc":{"lines":{"from":1664,"to":1682}}}}],["410",{"pageContent":"Project Info:\n20220228_RealNFT.pdf (2.0 MB)\nProject website 27\n\nProject repo: Real NFT Github Repo 11\n\nProject Details: Our team shares the romantic idea that NFT can still be considered art, with the added value that being digital more people can share it.\nWe believe that some characteristics of an art piece are fundamentally connected to the item itself, being something you can touch, feel and view with your own eyes. Appreciate the little imperfections that make it really unique, not because it’s randomly generated by a computer, but because it’s hand-made by an artist with his own hands.\nThe collections promoted by Real NFT will have a dual life: in the digital world as NFT and in real life as tangible art pieces.\n\nThe Grugni collection\nIn the Idea of the Autor, Barzulfo, the Grugni are the intermediaries to a supersensible reality, witnesses of spirits of the places and nature with which we have now lost contact, symbols of a hidden reality forgotten by man.\nimage\nimage","metadata":{"loc":{"lines":{"from":1682,"to":1695}}}}],["411",{"pageContent":"How it works\nThe Real NFT featured collection will be published on the project website (real-nft.art 27).\nAuctions will be held on the main NFT marketplace on Tron.\nClaim of the tangible art-piece will follow the NFT auctions.\nA portion of each sale will be used to buyback USTX tokens.\n\nProject Milestones:\n\nMar 13, 2022: Start of Hackathon, social media channels created and start of promotional activity (DONE!)\nMar 31, 2022: Grugni collection presentation video completed and published (DONE!)\nApr 13, 2022: Website finished, items data completed, ready for auctions (DONE!)\nApr 30, 2022: Grugni collection auctions begin (DONE!)\nMay 13, 2022: End of Hackathon one. Presentation of next Real NFT artist “Griso” (DONE!)\nMay/June 2022: Griso collections teasing. Grugni auctions continue.\nQ3 2022: Griso auctions begin. More artists join the Real NFT family.\nQ4 2022: Website redesign, with better integration with NFT marketplace","metadata":{"loc":{"lines":{"from":1697,"to":1712}}}}],["412",{"pageContent":"Project Updates:\nMarch 13th, created social channels and start promotion\nAs planned, today we created the Twitter and TG accounts of the project:\n\nhttps://twitter.com/Real_NFT_ 4\n\n\nTelegram\n\nRealNFT 1\nOfficial telegram group of the Real NFT project https://real-nft.art\n\nMarch 31st, Grugni collection video published on youtube:\n\nUSTX Real NFT 1°Collection - The Grugni\nUSTX Real NFT 1°Collection - The Grugni\nMay 6, 2022: Grugni collection auctions begin\n\nhttps://apenft.io/collections/tgrugni\n\n*May 26, 2022: Next artist presented: GRISO\n\nRealNFT - RealNFT, unique collectibles living in the digital and real world – 23 May 22","metadata":{"loc":{"lines":{"from":1714,"to":1736}}}}],["413",{"pageContent":"https://apenft.io/collections/tgrugni\n\n*May 26, 2022: Next artist presented: GRISO\n\nRealNFT - RealNFT, unique collectibles living in the digital and real world – 23 May 22\n\nGRISO - RealNFT\nMask NFT Art It is said everyone wears a mask There are many types of masks. The mask of courage, the mask of indifference, the mask of generosity, the mask of cynicism Griso creates his masks perhaps trying to find what real person is underneath...\nJustMoney - Building an ecosystem for the next generation of decentralized applications to power Web3\nTRON Hackathon\nHackathon Season 1\ndefi\nMar 2022\nAug 12\n\nJustMoney\n\n11\nMar '22\nswap-screenshot\nswap-screenshot\nProject Name: JustMoney Exchange\nProject Track: DeFi\nTeam Name: JustMoney\nTeam Member(s): 8\n\nProject Goal: Allow crypto users to trade and offer cryptocurrencies on several chains - cross chain ; facilitate the creation of a payment system that will allow crypto users to purchase goods and services online using cryptocurrency.","metadata":{"loc":{"lines":{"from":1736,"to":1762}}}}],["414",{"pageContent":"Project Info and details:","metadata":{"loc":{"lines":{"from":1762,"to":1762}}}}],["415",{"pageContent":"Genesis\nTo understand what JustMoney Exchange is and its purpose, we have to go back to July 2021. When JustMoney started, the vision of the project was to build a payment system allowing people to use their cryptos to purchase online, regardless of whether e-stores accepted cryptos or not. The initial intention was to use existing DEX’s, like Justswap (now known as Sunswap) on Tron, to swap assets in order to facilitate transactions. A few weeks later, we realized that Sunswap and most of the other swaps had a big issue with tokens that have implemented a taxation system (like Safemoon or, in our case, JM token).\nFor more details about the issue, read our medium article 30\nWe found ourselves in a dire situation, the liquidity pool was leaking and the only solution was to create our own swap, the first swap that would fully support taxed tokens. August 2021, JustMoney.exchange was born on Tron.","metadata":{"loc":{"lines":{"from":2726,"to":2729}}}}],["416",{"pageContent":"Today, JustMoney.exchange is a multichain automated market maker (AMM) that had already integrated six blockchains so far (Tron, BSC, ETH, Polygon, BTTC, Zenith Chain). Our goal is to build a bridge EVM-EVM and TVM-EVM that will allow users to make cross chain swaps. Our token, $JM, currently based on Tron, will be issued on different blockchains with an unique total supply that will be regulated by a mint and burn function.","metadata":{"loc":{"lines":{"from":2730,"to":2730}}}}],["417",{"pageContent":"What is JustMoney Exchange’s vision\nJustMoney’s team value a series of aspects that are crucials to us:","metadata":{"loc":{"lines":{"from":2732,"to":2733}}}}],["418",{"pageContent":"UI/UX: To be successful, a product should be easy and pleasant to use. We are talking with our community everyday and every suggestion we receive from them is very important.\nDuty of care: Before we whitelist a token, we always analyze the project and discuss it with the team of the project. We take our duty of due diligence very seriously and don’t hesitate to refuse a project that fails to demonstrate seriousness and competence.\nGather projects together: We believe that an ecosystem needs some synergy in order to improve. For that purpose, we highly value partnerships and have already entered into several with projects we appreciate, such as TuruGlobal, Krafty, TokenGoodies and many more.","metadata":{"loc":{"lines":{"from":2735,"to":2737}}}}],["419",{"pageContent":"Gather blockchains together: Regarding this point we are on the exact same line as Tron’s founder, H.E. Justin Sun. We believe that future success will only be made by the cooperation and integration of the different blockchains. This is why we are adamant that we are making the correct choice of not only building a multi chain DEX but a cross chain one.\nCEX/DEX’s complementarity: DEXs are often opposed to CEXs as competing organizations. We think that they are both complementary and both have their role to play in the crypto world. More and more CEXs have started to build their own smart chain. So with JustMoney as a multi chain and soon to be a cross chain solution, we aim to build partnerships with those who are willing to integrate their chain on our DEX.\nWhitePaper: https://justmoney.io/whitepaper 26","metadata":{"loc":{"lines":{"from":2738,"to":2740}}}}],["420",{"pageContent":"GitHub repo link: https://github.com/justmoney-io 17\n\nProject Milestones:\n\n\nCoin eyes generator: This is a fun marketing tool allowing project communities to edit their social media profile pictures the same way that “laser eyes” does, whilst using their favorite project’s logo instead: CoinEyes Generator 11\neyes\neyes\nJustMoney AMM DEX: The first DEX on Tron that fully support taxed tokens: JustMoney Exchange 20","metadata":{"loc":{"lines":{"from":2742,"to":2750}}}}],["421",{"pageContent":"JustMoney Swap Widget: We have created and offer to every partner and listed project a widget that allows their users to swap tokens and gives them the opportunity to provide liquidity directly on their own website\nwidget\nwidget\nTelegram bots: We also offer Telegram bots that provide tokens prices, charts and volume on several timeframes\nJustMoney Launchpad: New projects can launch their token on the following, launchpad.justmoney.exchange 7. We create a webpage with the design of the project and a countdown timer that indicates the beginning of the fair launch. We have already successfully launched several tokens : Babyturu ($BBT), Kraftly ($KTY), Tronninjas ($TNT) and T-rex ($TREX)\nbbt\nbbt\nJustMoney Multichain DEX: JustMoney is the first multichain swap fully supporting taxed tokens and the first DEX built on Bittorrent Chain. The DEX currently supports Tron, BTTC, BSC, ETH, Polygon and Zenith with other chains to follow\nCandlesticks charts and a Trade history tabs have been added","metadata":{"loc":{"lines":{"from":2752,"to":2760}}}}],["422",{"pageContent":"Candlesticks charts and a Trade history tabs have been added\nJustMoney Cryptocurrency gift cards platform: This system allows people to purchase and gift listed tokens to their friends/family/loved ones. We have partnered-up with nft artists such as Line Hammett and TheRealSnowmen who have designed cards that are sent by email to the cryptocurrencies receivers\ngift\ngift","metadata":{"loc":{"lines":{"from":2760,"to":2763}}}}],["423",{"pageContent":"Listing of JustMoney DEX on CMC and CG (exchange listing): forms have been filled and sent\nJustMoney cross chain swap: We are building a bridge that will not only allow transactions from EVM chains to EVM chains but also to and from Tron Blockchain\n$JM, multichain token: Our token, currently on Tron only, will be multichain and the total supply will be shared between chains. The bridge will allow the token to “travel” from a chain to another whilst keeping the total supply unchanged. Helping other projects to follow that path will accelerate the movement toward a more decentralised crypto world and facilitate the coming of projects on Tron Network. Indeed, other tokens will be able to use the bridge as well\nCross chain swap widget: This will allow users to make cross chain transactions directly on the website of their favorite project\nIn addition, we are currently working on several new partnerships and listings\nDetailed roadmap for the Hackathon:\n\nMarch 13","metadata":{"loc":{"lines":{"from":2765,"to":2772}}}}],["424",{"pageContent":"March 13\n\nbridge testing starts on testnet :heavy_check_mark:\nWidget available for BTTC :heavy_check_mark:\nMarch 31\n\ntoken v2 contract finished (bridgeable contract, will work as instrument for cross-chain swaps later) :heavy_check_mark:\nmulti-chain widget ready :heavy_check_mark:\nApril 13\n\nbridge on mainnet :heavy_check_mark:\nbridge UI live :heavy_check_mark:\nv2 contract ready and can swap old JM 1:1 to a new one :heavy_check_mark:\nApril 31\n\ncan add other projects to use the bridge :heavy_check_mark:\nMay 13\n\ncross-chain swap working :heavy_check_mark:\ncross-chain widget ready :heavy_check_mark:\n\nUp Stable Token eXperiment by USTX Team - A low volatility asset ecosystem\nTRON Hackathon\nHackathon Season 1\ndefi\nFeb 2022\nNov '22\n\nSirluke\n\n13\nFeb '22\nbannerLoghi\nbannerLoghi\nProject Name: Up Stable Token eXperiment\nProject Track: DeFi\nTeam Name: USTX Team\nTeam Member(s): 3, Sirluke, Benna, Aska","metadata":{"loc":{"lines":{"from":2772,"to":2809}}}}],["425",{"pageContent":"Project Goal: USTX aim is to bridge the gap between stablecoins (no volatility, no grow) and normal cryptos (high volatility, high grow potential). USTX algorithm reduces price volatility, protects investors value while providing consistent grow potential. The long term goal is to build an ecosystem around USTX, that can support worldwide adoption of the token. Currently the project has a DEX for trading USTX against TRX, USDT, USDJ, USDC and TUSD. It also has a very flexible staking platform, that has been chosen by the vast majority of our holders, with a TVL of over 75% of the circulating supply. The next steps in the roadmap are: the voting platform and the cross-chain bridge, that will allow simple and secure trasfer of USTX between Tron and potentially any EVM compatible chain, like BTTC. We also believe that one of the keys to success is to cooperate with other projects in the Tron ecosystem. That’s why we made a partnership with Kraftly, that has added the possibility to mint","metadata":{"loc":{"lines":{"from":2811,"to":2811}}}}],["426",{"pageContent":"BTTC. We also believe that one of the keys to success is to cooperate with other projects in the Tron ecosystem. That’s why we made a partnership with Kraftly, that has added the possibility to mint NFTs using USTX. We also have very good relations with other projects and teams, like Cubie, TronNinjas, Tron Spark and JustMoney, to name a few.","metadata":{"loc":{"lines":{"from":2811,"to":2811}}}}],["427",{"pageContent":"Project Info:\nUSTX Website 58\nOfficial Telegram group 8\nUSTX presentation video 6\n\nProject Repo: USTX Github Repo 4\n\nProject Details: USTX project began in 2021, following a public testnet phase, the token was launched in October, the DEX in November and SunSwap and Coinsbit listing in December. In January the staking dApp was launched and now the TVL is over 75% of the circulating supply.\nBut the project is far from finished, we need to keep growing both in userbase and utility, that’s why we decided to join this Hackathon with two specific goals: launch the voting portal and the cross-chain bridge.","metadata":{"loc":{"lines":{"from":2813,"to":2821}}}}],["428",{"pageContent":"Voting and governance portal\nWe have a great community that was involved in many decisions about the project along the way, but we think that a more formal recognition of the holders in the decision-making progress is due. The voting portal will allow holders to cast votes on propositions regarding strategic decisions about the project future. Voting power will come from staking, in a similar way to Tron voting system: 1 vote for every 1000USTX in stake. The voting process will be implemented on-chain, using a purpose built smart contract, deployed on Tron. Voting will not require energy from the user, but the team will provide energy to the contract. A demo of the voting dApp (only frontend) is online here. 11","metadata":{"loc":{"lines":{"from":2823,"to":2824}}}}],["429",{"pageContent":"image\nimage\nCross-chain bridge","metadata":{"loc":{"lines":{"from":2826,"to":2828}}}}],["430",{"pageContent":"USTX is a unique token in the cryptoverse since it sits in between stablecoins and unpegged tokens. We believe it has many use cases across all blockchains and similarly to what happens to most stablecoins, we want USTX to live in as many blockchains as possibile. The hearth of the project (the liquidity management algorithm and governance platform) will always be on Tron, but we want users on as many bloclchains as possible. So, as first step we need is a bridge with some characteristics: be compatible with EVM based blockchains, have low infrastructure costs, be decentralized (as much as possible), allow for token transfer in any direction on any of the blockchain supported. After some research we decided to develop our own bridge. USTX bridge will be implemented mostly on-chain with the highest level of decentralization possible. The user will have control of all transactions: sending USTX on side A and withdrawing USTX on side B. The transfer will be untaxed, only the transaction","metadata":{"loc":{"lines":{"from":2829,"to":2829}}}}],["431",{"pageContent":"highest level of decentralization possible. The user will have control of all transactions: sending USTX on side A and withdrawing USTX on side B. The transfer will be untaxed, only the transaction fees will be due. The only centralized element is represented by a transaction witness that monitors the transactions on source and destination chains providing the necessary signature allowing the withdraw on the target chain. The smart contracts integrate all security measures to prevent double transactions and guarantee the funds. The token total supply will be shared among all blockchains, using the lock/release method on Tron (Tronscan will always report the correct total supply of the token) and mint/burn on secondary chains. This will allow USTX to be one token, with one price and one supply, across multiple blockchains.","metadata":{"loc":{"lines":{"from":2829,"to":2829}}}}],["432",{"pageContent":"image\nimage\nAfter the bridge is deployed, USTX will launch several Cross-launch events, landing on other blockchains, one at a time. Every cross-launch will be structured with incentives mechanism and will provide additional liquidity for token buyback, marketing and listing on new exchanges. Since the main DEX and the governance platform will remain on Tron, we expect new users from other blockchains to be attracted to the Tron ecosystem.\n\nimage\nimage\nThe hackathon funding will be used for development, marketing and bug bounty rewards.\n\nProject Milestones:","metadata":{"loc":{"lines":{"from":2831,"to":2839}}}}],["433",{"pageContent":"Mar 13, 2022: Start of Hackathon, USTX participation will be shared on all our social media accounts. The front-end design of the voting platform will be finalized and deployed. Work on smart contracts ongoing. DONE\nMar 20, 2022: Voting smart contract deployed on Nile testnet. Integration with front-end and testing continues. DONE\nMar 27, 2022: Voting smart contracts are deployed on mainnet. Final testing takes place. DONE\nMar 31, 2022: The voting and governance portal is officially active and the first proposition will take place: which is the next blockchain USTX should launch on? DONE\nApr 13, 2022: Voting results are available. Cross-chain bridge contracts are deployed on testnets and a first version of the dApp is released for testing. Community testnet and bug bounty programs are launched. DONE\nApr 30, 2022: Complete dApp is released and smart contracts are deployed on mainnet. Real life testing begins. DONE","metadata":{"loc":{"lines":{"from":2841,"to":2846}}}}],["434",{"pageContent":"Apr 30, 2022: Complete dApp is released and smart contracts are deployed on mainnet. Real life testing begins. DONE\nMay 13, 2022: End of Hackathon one. The cross-chain bridge is officially available to users. DONE\nJune, 2022: The first cross-launch event takes place on USTX Cross-launchpad. Liquidity is raised for listing, marketing and buyback.\nAugust, 2022: Staking will be available on all blockchains where USTX is present, as an incentive to holding and keep TVL around 75%.\nDec 31, 2022: By the end of the year, we plan to have USTX launched and listed on at least other 3 blockchains. A first redesign of the dApps and website will be done. More partnerships will be defined.","metadata":{"loc":{"lines":{"from":2846,"to":2850}}}}],["435",{"pageContent":"Project Progress:\nMarch 13, first milestone: Voting dApp frontend release.\nToday we released the final (99%) version of the voting user interface. Check it out on: dex.ustx.io/votingDEMO.html 5\nimage\nimage\nMarch 24th, Voting dApp testing begins.\nThe testing starts today, on dex.ustx.io/votingCTN.html\nimage\nimage\nMarch 31st, The voting and governance portal is officially online.\n\ndex.ustx.io\nUSTX VOTING 4\nVoting platform for USTX token\n\nimage\nimage\nApr 13, 2022: Voting results are available. Cross-chain bridge contracts are deployed on testnets and a first version of the dApp is released for testing.\nhttps://dex.ustx.io/teleportCTN.html\nimage\nimage\nMay 29, 2022: The cross-chain bridge is online on mainnet and open to the users\n\nCreate your DAO with XDAO in 1 minute\nTRON Hackathon\nHackathon Season 1\ndefi\nMar 2022\nMar '22\n\nXDAO\n\n1\nMar '22\nProject Name : XDAO 12\nProject Track : DeFi\nTeam Member(s) : 10\n\nProject Goal : We want to make Decentralized Finance more accessible for people.","metadata":{"loc":{"lines":{"from":2852,"to":2890}}}}],["436",{"pageContent":"XDAO\n\n1\nMar '22\nProject Name : XDAO 12\nProject Track : DeFi\nTeam Member(s) : 10\n\nProject Goal : We want to make Decentralized Finance more accessible for people.\n\nWhat is XDAO\n\nIn XDAO a group of people can easily create a Decentralized Autonomous Organization (DAO), deposit crypto assets, manage them by voting, sell DAO shares and directly interact with DeFi protocols.\n\nIn short, XDAO is a fully customizable DAO builder for treasury management, multisig wallet and the platform for investment. DAOs on XDAO can be any-sized companies.\n\nTeam\n\nThe XDAO team consists of more than 10 people with rich experience in traditional finance and cryptosphere. We have been hard at work throughout the year. Successfully launched the first version of the protocol and brought XDAO to perfection already in the current version.\n\n:dart::dart::dart: What can be done with XDAO:\n\n– Manage the treasury of the DeFi project","metadata":{"loc":{"lines":{"from":2890,"to":2912}}}}],["437",{"pageContent":":dart::dart::dart: What can be done with XDAO:\n\n– Manage the treasury of the DeFi project\n\n– Manage and distribute (salary, marketing, etc.) capital in any organization on the blockchain\n\n– Invest in DeFi with shared assets\n\n– Buy NFTs and collectively participate in GameFi\n\n– Carry out charitable activities\n\n– Participate jointly in allocations, IDO, Launchpad\n\n– Manage family assets\n\nand much more!\n\nimage\nimage\nMultichain Support: Ethereum, Polygon, BSC, Avalanche, Fantom, Aurora, Optimism, Boba, Celo, OEC, Metis, Heco, Moonbeam, Moonriver, TRON (soon!)\n\n:chart_with_upwards_trend: TVL $50M+\n\n380x growth in 2.5 months from the launch of Version 2.0\n\nMilestones\n\nApril 2021 - Launch of V1 on BSC Mainnet\n\nJune 2021 - Launch on Polygon\n\nSeptember 2021 - XDAO V2 Smart contracts Development + 2 Audits passed\n\nOctober 2021 - XDAO V2 Interface development + Media campaign","metadata":{"loc":{"lines":{"from":2912,"to":2946}}}}],["438",{"pageContent":"June 2021 - Launch on Polygon\n\nSeptember 2021 - XDAO V2 Smart contracts Development + 2 Audits passed\n\nOctober 2021 - XDAO V2 Interface development + Media campaign\n\nDecember 2021 - XDAO V2 Official launch on Ethereum, BSC, Polygon, HECO + Private Investment round + API Snapshot Integration\n\nQ1 2022 (now) - Available on 14 blockchains, $50m+ TVL, 700+ DAOs + Three modules have been developed + Integration of Tron\n\nQ2 2022 - Launch of XDAO Token + Launchpad + Listing on DEXes and CEXes\n\nQ3 2022 - Modules development + Media campaign\n\nKiiller features\n\nXDAO Connect (interact with any DeFi Protocol directly from your DAO)\nHow it works: XDAO CONNECT 😱 Super Fast And Stable - YouTube 3\n\nHybrid voting system (less gas without sacrificing safety)\n\nDAO creation in 1 minute\n\nModular architecture (upgrade your DAO for any purposes)\nModules\nModules\nMulti-token system (separate management rights and investment rights)\n\nLinks\n\n:star: Project:","metadata":{"loc":{"lines":{"from":2946,"to":2976}}}}],["439",{"pageContent":"DAO creation in 1 minute\n\nModular architecture (upgrade your DAO for any purposes)\nModules\nModules\nMulti-token system (separate management rights and investment rights)\n\nLinks\n\n:star: Project:\n\n:small_orange_diamond: dApp: xdao.app\n:small_orange_diamond: Docs: docs.xdao.app\n:small_orange_diamond: Github: XDAO Platform · GitHub 6\n\n:bell: Our social media:\n\n:small_orange_diamond: Twitter: twitter.com/xdaoapp 9\n:small_orange_diamond: Instagram: instagram.com/xdaoapp\n:small_orange_diamond: Medium: XDAO Blog 2\n:small_orange_diamond: YouTube: youtube.com/channel/UCC58I-ghebVRepbwVsyJnCQ\n:small_orange_diamond: Telegram (channel): Telegram: Contact @xdaoapp 4\n\n:speech_balloon: Discussions:\n\n:small_orange_diamond: Telegram :us: Telegram: Contact @xdao_eng 3\n:small_orange_diamond: Telegram :ru: Telegram: Contact @xdao_rus\n:small_orange_diamond: Telegram :cn: Telegram: Contact @xdao_cn\n:small_orange_diamond: Discord: discord.gg/AjyGhmQvFT","metadata":{"loc":{"lines":{"from":2976,"to":3004}}}}],["440",{"pageContent":"Feel free to ask any questions and join our community! :grinning:\n\nInterCrone World\nTRON Hackathon\nHackathon Season 1\ndefi\nFeb 2022\nJul '22\n\nintercroneswap\n\n1\nFeb '22\nProject Name: InterCrone World\nProject Track: DeFi\nTeam Name: InterCrone\nTeam Member(s): 5; BigDealCompany, Monahawk, Blu, ParthaDhar, Safebitcoin\nProject Goal: Userfriendly one Stop Swap-Earn-Gaming Plattform\nProject Info: https://docs.intercroneswap.finance 17\nProject Repo: App: ISwap 4\nGithub: ISwapV2 · GitHub 7\n\nProject Details: InterCrone World is focused to be an open source, multichain one Stop Swap-Earn-Gaming Plattfrom.\nThe new way of InterCrone start with the update to V2.\nThe main part is that in V2, 8,33% of all fees will be used to buyback and burn InterCrone.\n\nProject Milestones:\n\nMar 13, 2022: Start of Hackathon, we should already have finished our Swap on Tron and prepare the start on BTTchain.\ndashboard\ndashboard\n\nMar 31, 2022: Start on BTTchain is ongoing and we will enable the first LP-Farms","metadata":{"loc":{"lines":{"from":3006,"to":3038}}}}],["441",{"pageContent":"Mar 31, 2022: Start on BTTchain is ongoing and we will enable the first LP-Farms\n\nApr 13, 2022: Start of the NFT Minting of the Quokka Warriors. NFT Warriors stacked on the platform in different areas to get Bonus in different Coins.\n\n\nApr 30, 2022: Start LP-Farms on BTTchain\nMay 13, 2022: Swap and staking function are finish and user are able to swap and farm.\n\nCentiiv: Connecting Africa to the Global Market Through Blockchain\nTRON Hackathon\nHackathon Season 1\ndefi\nMar 2022\nApr '22\n\nCentiiv\n\n2\nMar '22\nProject Name: Centiiv\n\nProject Website:https://centiiv.com/ 21\n\nProject Track: DeFi, Web3, Fintech\n\nWhitepaper:Whitepaper 3","metadata":{"loc":{"lines":{"from":3038,"to":3063}}}}],["442",{"pageContent":"About Centiiv\nCentiiv is a project with the lofty aim of connecting Africa to the rest of the world through blockchain. In order to achieve this aim, Centiiv has developed a utility token to power an ecosystem of technologically driven solutions in different sectors of Africa’s economy. The use cases of Centiiv are built to satisfy the everyday life of Africans. The actualisation of Centiiv roadmap will help solve major problems facing Africa around commerce, transportation and logistics, financial technology (Fintech) and Technological incubation. Sectors such as eCommerce, fintech, entertainment, mobility/logistics and so on are areas in which people interact with on daily basis which is why Centiiv’s ecosystem is being built around them as we believe that with the integration of the blockchain technology, Africans will get to access opportunities in various ways.","metadata":{"loc":{"lines":{"from":3065,"to":3066}}}}],["443",{"pageContent":"The Centiiv ($CNT) token is the unique currency which will be powering the activities within the ecosystem both directly and indirectly. Centiiv is a multi-chain project which is being built on different Blockchain networks including Tron, BSC, Celo, and Polygon.","metadata":{"loc":{"lines":{"from":3067,"to":3067}}}}],["444",{"pageContent":"Project Milestone: Centiiv Pay\n\n4cc35dff-737f-4407-aeea-e3bd95a1237c\n4cc35dff-737f-4407-aeea-e3bd95a1237c\nCentiiv Pay is a P2P Payment system built on the Blockchain to facilitate cross-border payments in Africa. With Centiiv Pay, users can seamlessly and swiftly make cross-border remittances. We are on a mission to revolutionize payments in Africa. Our solution is built to enable Africans maximise the use of blockchain beyond the scope of cryptocurrency.\n\nCentiiv Pay https://centiivpay.com/ 9\n\nVideo Demo Video Demo 3\n\nPicthdeck Pitchdeck 2","metadata":{"loc":{"lines":{"from":3069,"to":3079}}}}],["445",{"pageContent":"Hackathon / HackaTRON Season 2 Winner Announcement\n\nThis season of the TRON Grand Hackathon has been quite a blast! We would like to thank all those who have participated from projects, developers, voters, active forum members, and voices! :heart:\n\nWe would also like to thank our judges from across the industry and among universities who took the time out of their busy schedules to go over 200+ down-selected submissions. That is no small task!","metadata":{"loc":{"lines":{"from":1,"to":5}}}}],["446",{"pageContent":"We would also like to thank our judges from across the industry and among universities who took the time out of their busy schedules to go over 200+ down-selected submissions. That is no small task!\n\nIn this hackathon, we have tried our best to make the community voting as fair as possible. Although it is obvious that vote buying is not allowed from the practice we had in Hackathon season 1, we made an attempt to emphasize our view, as well as the community’s view again on vote buying during the voting stage. We dis-allowed vote buying as it goes against a fair and honest vote. We have battled against thousands of bots and removed duplicate/spam voting. To all those who voiced up and flagged bad posts, our moderation and hackathon forensic team can’t thank you enough. Every little bit helps. :heart_eyes:","metadata":{"loc":{"lines":{"from":5,"to":7}}}}],["447",{"pageContent":"Season 2 has been a much bigger success than season 1 with more participants, community topic engagement on this forum, inviting others from outside of TRON, and attracting an overall larger community. We will continue to improve upon each and every hackathon and for season 3, we already have a few revisions in the pipeline, mostly from the wonderful community feedback 8 we received. So, stay tuned! :wink:\n\nWe encourage everyone to please leave feedback about your experience with TRON Grand Hackathon 2022 Season 2, whether it be good or bad. We will read every single community response and take it into account to further improve for season 3.\n\nRemember, it is you, the community, that makes TRON DAO great! Thank you.\n\nAnd now, the moment that you have been waiting for… :drum:…","metadata":{"loc":{"lines":{"from":9,"to":15}}}}],["448",{"pageContent":"Remember, it is you, the community, that makes TRON DAO great! Thank you.\n\nAnd now, the moment that you have been waiting for… :drum:…\n\nCongratulations to our judges-selected winners! :tada:\nThese projects have been judged by multiple criteria such as their originality & creativity, technicality & design, business model & feasibility, usability, practicality and their contribution to the crypto ecosystem.\n\nWithout further ado, the 5 judges-selected hackathon winners and 3 runner-ups for each category are:\n\nSeason 2 Web3 Category Winners:\n1st Prize $60k - Kattana \n2nd Prize $40k - Calamus Finance \n3rd Prize $30k - MistTrack Analytics Platform \n4th Prize $25k - DAO Cake \n5th Prize $20k - HolaChain \n1st Runner Up $5k - Adshares ($ADS) \n2nd Runner Up $5k - NRG & Community DAO\n3rd Runner Up $5k - CertiFi","metadata":{"loc":{"lines":{"from":15,"to":32}}}}],["449",{"pageContent":"Season 2 NFT Category Winners:\n1st Prize $60k - Umbre \n2nd Prize $40k - Apexgo \n3rd Prize $30k - Decentralease \n4th Prize $25k - Helix Checkout \n5th Prize $20k - NFTmall\n1st Runner Up $5k - Picasarts.io\n2nd Runner Up $5k - Station Bids\n3rd Runner Up $5k - Swap Station\n\nSeason 2 DeFi Category Winners:\n1st Prize $60k - Meson \n2nd Prize $40k - Dazzle Protocol \n3rd Prize $30k - Tron Security Dashcam \n4th Prize $25k - Hikaru finance \n5th Prize $20k - Wink Financial\n1st Runner Up $5k - shielding.cash\n2nd Runner Up $5k - tpMarket\n3rd Runner Up $5k - Allbridge Core\n\nSeason 2 GameFi Category Winners:\n1st Prize $60k - Score Milk \n2nd Prize $40k - Caloriecoin E2E JumpGame \n3rd Prize $30k - Cukies World \n4th Prize $25k - TronVerse \n5th Prize $20k - Rill\n1st Runner Up $5k - TronNinjas GameFi\n2nd Runner Up $5k - Flynn\n3rd Runner Up $5k - GU3SS\n\nWe also have 3 bonus hackathon prizes to give out.","metadata":{"loc":{"lines":{"from":34,"to":64}}}}],["450",{"pageContent":"We also have 3 bonus hackathon prizes to give out.\n\nBonus: Devpost Community Prize $5,000 - Determined by popular choice voting on Devpost by DevPost community members. This is reward is given to the most popular project after removing bots and spam votes performed by the DevPost team.\n\nThe bonus DevPost community Prize of $5k goes to - D10 Baoziswap - Live Staking Pool by SafeMoney Dev Team - Maintaining and Developing a Great and Sustainable Ecosystem on Tron Blockchain with Baoziswap Staking Pool 7\n\nBonus: Potential Project Prize $5,000 - Determined by the TRON DAO team based on a project’s potential value. Awarded to a project that did not win another prize.\n\nThe bonus Potential Project Prize of $5k goes to - W2 MeDo by Vad - Decentralized freelance platform 2\n\nBonus: TRON Ecosystem Prize $5,000 - Determined by the TRON DAO team based on a project’s valuable contribution to the TRON Ecosystem. Awarded to a project that did not win another prize.","metadata":{"loc":{"lines":{"from":64,"to":74}}}}],["451",{"pageContent":"Bonus: TRON Ecosystem Prize $5,000 - Determined by the TRON DAO team based on a project’s valuable contribution to the TRON Ecosystem. Awarded to a project that did not win another prize.\n\nThe bonus TRON Ecosystem Prize of $5k goes to - W9 Tokenomeme – The first multichain meme aggregator 3\n\nKattana\nKattana.io Leading trading environment for DeFi. Entry point for global blockchain users. Kattana - is a trustable cross-chain trading terminal for DEXs and CEXs.\n\nProject Name: Kattana\n\nProject Track: Web3\n\nTeam Members: Ilya Demydonok - CEO at Kattana Dmytro Bieliaiev - CTO at Kattana\n\nIntroduction:\n\nKattana.io\n\nLeading trading environment for DeFi. Entry point for global blockchain users.\n\nKattana - is a trustable cross-chain trading terminal for DEXs and CEXs.\n\n|624x328\n\nhttps://app.kattana.io/pancakeswap/0xb5D108578Be3750209d1b3A8f45FFee8C5a75146\n\nKattana plans to support Tron Chain, and see a major integration opportunity here:","metadata":{"loc":{"lines":{"from":74,"to":99}}}}],["452",{"pageContent":"|624x328\n\nhttps://app.kattana.io/pancakeswap/0xb5D108578Be3750209d1b3A8f45FFee8C5a75146\n\nKattana plans to support Tron Chain, and see a major integration opportunity here:\n\nKattana will fully support Tron network - which means that each trade and each transaction will be recorded in Kattana database for further use.\n\nBoth within Kattana trading terminal itself (trading and analytical tools) and for providing specific data to third parties through the API (existing and future products on Tron network) API example: https://data-api.kattana.trade/docs/ The main goal for Kattana is to become a strategic infrastructure, data and development partner with Tron Ecosystem\n\nFrom the very beginning, Kattana will integrate the work with DEXs built on Tron (such as SunSwap), as a first milestone.\n\nJust after that, Kattana is planning to develop and release:","metadata":{"loc":{"lines":{"from":99,"to":111}}}}],["453",{"pageContent":"Just after that, Kattana is planning to develop and release:\n\nReal-Time toolkit (like IFTT - If This Then That) - it is a trigger service, where users/developers can set custom triggers and get notifications when the conditions are met.\nBig Data toolkit - is a service with the help of which, according to custom requests, it is possible to access historical data for a specific date - price, trading volume, liquidity, etc.\nCoin service - is a service that aggregates data for a specific token/coin and gives access to them via API (addresses of smart contracts, their features, etc. (e.g. Coingecko API)\nTrading and analytical tools - bulk wallet’s p&l calculator, real trading volume checker, limit orders, trading chart layouts with user’s orders placed, etc.\nIn the case of Tron DAO, there is a need for developers to discover and interact with Tron, and its blockchain data.\n\nKattana tools and APIs offer the best and easy way to attract developers to Tron.","metadata":{"loc":{"lines":{"from":111,"to":119}}}}],["454",{"pageContent":"Kattana tools and APIs offer the best and easy way to attract developers to Tron.\n\nA big data provider (such as Kattana) is a very necessary infrastructure that becomes the entry point to the network for new developers and users as a result.\n\nKattana are working with data since and able to provide any requested information and its variations at the request of third-party developers, which can be used to create new Tron products that will accumulate the required pace of Tron development as a whole.\n\nThe result of this will be the attraction of users to Tron Network.\n\nLast but not least:\n\nFinally, The trading terminal is the very necessary infrastructure that becomes the gateway to the network for new traders.\n\nKattana already released the main product to the public which is operating on the mainnet with more than 270k active users monthly and this number is growing.","metadata":{"loc":{"lines":{"from":119,"to":131}}}}],["455",{"pageContent":"Kattana already released the main product to the public which is operating on the mainnet with more than 270k active users monthly and this number is growing.\n\n\nCalamus Finance - Money Streaming on TRON\nYour decentralized crypto streaming platform - Automate real-time salary, startup vesting or any transactions with enhanced security and transparency\n\n Like 40  Comment 2\n\n\n\n\n\n\n\n\n\n\nInspiration\nCurrently, many platforms support payments with fiat money, which could be used for investing, payroll, purchases, etc. Nevertheless, these platforms encounter several shortcomings, including:","metadata":{"loc":{"lines":{"from":131,"to":149}}}}],["456",{"pageContent":"Most platforms do not allow periodic automation of payments. Instead, users must manually transfer the money when the work is done.\nWorkers always stand a risk of wage theft.\nLabour hirers might risk low-quality work, for example, if payment is made in advance.\nWorkers have to wait for a specific date to receive/use the money, usually every month or after the contract ends.\nMost platforms do not support payment with tokens.\nThus, to solve these issues, we have made use of blockchain and (the application of) tokens to create the very first crypto streaming protocol on TRON.\n\nAt Calamus Finance, we aim to facilitate the process of constant payments and token vesting transparently and securely.\n\nWe choose TRON because it is a comprehensive platform with TVM (highly compatible with EVM); thus, we can save time for R&D and focus more on building features instead.","metadata":{"loc":{"lines":{"from":151,"to":160}}}}],["457",{"pageContent":"We choose TRON because it is a comprehensive platform with TVM (highly compatible with EVM); thus, we can save time for R&D and focus more on building features instead.\n\nWhat it does\nCalamus Finance is a decentralized crypto streaming protocol that allows people to send/receive payments on any time basis and vest tokens automatically.\n\nCalamus Finance supports all TRC-10, TRC-20 tokens and the native token - TRX.\n\nMain functions:\n\nPayroll: Pay your employees by the second quickly. Company will have complete control over frequency, liquidity amount and duration. Cancellation is possible at any time by the payer and/or payee.\nToken Vesting: Reward your team, advisors and investors with tokens automatically without any fear of foul-play\nMultisig wallet (coming soon): Wallet is owned by many people, and transactions are only made under agreements from multiple owners.\nUsers can:","metadata":{"loc":{"lines":{"from":160,"to":172}}}}],["458",{"pageContent":"Connect their Tronlink wallet with the app\nChoose TRX or any TRC-10, TRC-20 tokens.\nConfigure a payment frequency: per second, minute, hour, day, week, month or year. Most traditional companies would pay their employees by week or month.\nSet start and end time of payments\nConfigure advanced settings like cancellation or stream transferring.\nSet total payment amount\nFill in the recipient's address and extra information like email address, contract title, etc.\nCancel stream at any time if mutual consensus is not met.\nTransfer the stream to a new recipient’s address.\nSet an initial release amount at cliff date (for startup vesting).\nData from these features are validated at DApp and Smart Contract, hence minimizing human risk and improving security.\n\nHow we built it\nUse Case Diagram We divided our journey into 3 phases: Build Smart Contracts, Build DApp and Deploy & Debug. To build Smart Contracts, we use:","metadata":{"loc":{"lines":{"from":174,"to":187}}}}],["459",{"pageContent":"How we built it\nUse Case Diagram We divided our journey into 3 phases: Build Smart Contracts, Build DApp and Deploy & Debug. To build Smart Contracts, we use:\n\nSolidity version 0.8.0\nOpen Zeppelin\nSmart Contracts Use map: Smart Contracts Use map\n\nOur tech stack:","metadata":{"loc":{"lines":{"from":187,"to":194}}}}],["460",{"pageContent":"Our tech stack:\n\nNextJS 12 and React 17\nShopify Polaris: a React UI component suitable for building admin apps.\nTronweb Javascript library and Tronlink Javascript Object to interact with TronLink wallet and perform account-related actions.\nChartJS to build reports on the dashboard.\nMoment JS to process stream time on the Frontend and contribute to data reporting.\nMongo Atlas DB to store Recipient’s extra information because storing unnecessary information on-chain will increase fee when creating streams and sometimes exceed the logic limit of a Solidity Smart Contract.\nTron Scan public API to collect user’s token balance on registered wallet address.\nDiadata (Oracle) public API with coinmarketcap as the data source to collect information about TRX to USD price, thus providing an insightful display for users.\nTo deploy Smart Contracts on Testnet, we use TronBox, TronIDE and TronScan to deploy and debug Smart Contracts.","metadata":{"loc":{"lines":{"from":194,"to":204}}}}],["461",{"pageContent":"Challenges we ran into\nAlthough the tech stack used inTRON is relatively basic for a Web3 developer, we encountered multiple technical problems which take quite some time to solve:","metadata":{"loc":{"lines":{"from":206,"to":207}}}}],["462",{"pageContent":"Issue 1: Some OpenZeppelin's contracts had errors when compiled with TronBox. Thus, we had to customize the contracts by OpenZeppelin.\nIssue 2: TronBox cannot deploy contracts. We chose TronIDE and Tronscan to replace TronBox in deploying.\nIssue 3: Interacting with the wallet on Frontend. Some examples and sample codes do not run correctly, are hard to set up and use obsolete, incompatible libraries. Luckily, the team can still connect to the wallet by customizing these examples based on TronWeb's document.\nIssue 4: Smart Contracts failure. Some Smart Contracts, which can deploy on Ethereum Testnet, can fail on TVM due to various reasons, some of which relate to data type or using an external library.\nAccomplishments that we're proud of\nBuild a Money Streaming protocol on a new platform and support all tokens available on TronLink.\nOvercome technical challenges to accomplish goals.\nDevelop technical functions so that users on Tron Network can pay, receive and vest tokens easily.","metadata":{"loc":{"lines":{"from":209,"to":216}}}}],["463",{"pageContent":"Overcome technical challenges to accomplish goals.\nDevelop technical functions so that users on Tron Network can pay, receive and vest tokens easily.\nGain a lot of in-depth knowledge about blockchain and finance.\nWhat we learned\nThroughout the journey, we have learned to","metadata":{"loc":{"lines":{"from":216,"to":220}}}}],["464",{"pageContent":"Build a complete dApp on TRON.\nDeploy a Smart Contract and the concept of it on TRON Blockchain. Use the TronWeb library to interact with Wallets and Smart Contracts.\nUnderstand the Crypto Payment model & usage on a Defi app.\nGeneral knowledge of libraries and APIs in various languages.\nTechnical knowledge on how to solve existing problems of fiat payment systems.\nWhat's next for Calamus Finance - Money Streaming on TRON\nGo live on TRON mainnet.\nMultisig Wallet\nIntegrate Invoice-related features when creating steam.\nImprove admin tools and interface to become a professional payment platform.\nDevelop API for Developers to easily interact with our data.\nMuti-chain\nIntegrate with more wallets, opening more choices for users.\nIssue tokens and set up tokenomics for Calamus Finance","metadata":{"loc":{"lines":{"from":222,"to":235}}}}],["465",{"pageContent":"MistTrack Analytics Platform\nMistTrack analytics platform combines a number of SaaS systems designed specifically to target crypto money laundering. It's the one-stop destination for all of your investigating needs.\n\n\n\nInspiration\nThe emergence of cryptocurrency scams propagated through popular social media platforms represents a noteworthy increase in frauds that target the general public. Many of whom are likely unfamiliar with cryptocurrencies or the pervasiveness of these scams. One of the worst things that can happen to you while dealing with cryptocurrencies is discovering that you’ve fallen victim to one of these scams. Being a victim of a scam is inherently stressful, and choosing what to do next is always a challenge. Tracking your lost funds is a complicated process that, understandably, can be frustrating. This realization can ultimately lead to a pursuit of some sort of anti-money laundering investigation down the line.","metadata":{"loc":{"lines":{"from":239,"to":245}}}}],["466",{"pageContent":"What we do\nMistTrack was created by SlowMist as an anti-money laundering (AML) tracking tool that focuses on combating cryptocurrency money laundering activities. Some of its core functions include wallet risk scoring, transactional analysis, fund tracing, and address monitoring. Our vision is to create a crypto tracking and compliance platform for everyone.","metadata":{"loc":{"lines":{"from":247,"to":248}}}}],["467",{"pageContent":"The MistTrack AML tracking system has amassed over 200 million addresses, containing various wallets from major trading platforms throughout the world. MistTrack provides full intelligence data assistance for AML analysis and research purposes. It has compiled thousands of addresses belonging to various entities, along with 100K addresses deemed as risky, and over 90M addresses tied to malicious activities. MistTrack delivers full intelligence data assistance for anti-money laundering analysis and has reviewed over 1000 logged address entities. Users are currently able to investigate wallets on the TRON, BSC, and Ethereum network. However, we will be adding new networks & tokens in the near future.","metadata":{"loc":{"lines":{"from":250,"to":250}}}}],["468",{"pageContent":"Challenges\nEarly this year, MistTrack was made available to the public, as with any new service, we were destined to encounter obstacles as it's part of the processes. Only by overcoming these challenges, will we make MistTrack a better product. That is why we strongly encourage our users to report any issues and provide feedback on how we can make it better.\n\nAccomplishments\nMistTrack was originally created as an internal application to assist our team in an investigation. However due to the increase of fraud, scams and other malicious actors in this, we were unable to assist with all the inquiries asking for help. By making it available to the public, we were able to assist victims indirectly and provide them with a fighting chance in tracking down their stolen funds. MistTrack was utilized in various minor and major investigations to aid in the recovery of stolen funds.","metadata":{"loc":{"lines":{"from":252,"to":256}}}}],["469",{"pageContent":"Going Forward\nAs this is a continuous process, we require community support to aid in research and the improvement of our product. In addition to improving the user experience, we will be adding new networks and tokens to MistTrack.\n\n\nDAO Cake\nMaking founder contributions easy. Bringing DAO tech to communities & startups.\n\n\n\n\n\n\n\n\n\nIncentivise & pay DAO members with ease!\nAt amaDAO.io we've been working with DAOs to better understand their needs. The inspiration for DAO Cake came from those discovery interviews with DAOs over the last 10 months. What we found is that for every tokenized DAO there were at least 10 more that were not.","metadata":{"loc":{"lines":{"from":258,"to":274}}}}],["470",{"pageContent":"We found web3 communities with tokenisation in their roadmap still needed the tools of DAOs: proposals, voting, payments, equity share tracking on chain, yet without their own token. More so, as many of these projects were early and decisions still to be made; they needed tools to be easy to use, easy to get started and without complex configuration or dev resources.\n\nFrom our interviews; consistently we heard that the founding process was full of excitement and energy, everyone involved wanted the same things. However, if there was one thing that caused fiction it was the arguments over contributions which impacted that founding energy. DAO Cake sets out to solve that issue. For the TRON hackathon we’ve focused on the requirements prior to the token generation event. This is often the most troublesome; in the absence of a DAO’s own token there needs to be a mechanism for trust.","metadata":{"loc":{"lines":{"from":276,"to":278}}}}],["471",{"pageContent":"What it does\nDAO Cake solves the problem every multi founder team experiences: measuring and rewarding contributions. The typical (imperfect) approach for startups is to split equity equally between each member of the founding team, with the expectation each is bringing equal value. This is not a solution for DAOs as the entire founding community are the ‘founders’. Even if still at the infancy this could be ten or more people committing time and effort in varying degrees to form the DAO.\n\nTRON provides an efficient on-chain ledger and runs the most widely used and readable industry standard smart contract language (Solidity). DAO Cake stores transactions on the TRON Blockchain and its' Smart Contract code runs in the TVM (Tron Virtual Machine).","metadata":{"loc":{"lines":{"from":280,"to":283}}}}],["472",{"pageContent":"The contributions are transactions which claim an amount similar to IOUs (I Owe yoU). In our case, there is no ‘I’ so we term these DOU (DAO Owes You) or ‘Dough’. This makes the DApp easy to use and suitable for startups and communities that do not know if they are going to ultimately generate a token, they may simply have a founding event where all the contributions (DOUs) are tallied and the equity share split accordingly to each contributor. We’ll call this event ‘Baking’. Beyond the hackathon we’ll add features that will allow various forms of Token generation methods for the Bake: Airdrops, NFT Badges etc for contributors.\n\nDAO Cake brings to TRON a powerful tool to serve the thousands of new web3 communities and startups. Beyond DAO Cake, our team at amaDAO.io have been working on a suite of products to serve DAOs in facets relating to the future of work.\n\nArchitecture\nDAOCake Process Overview","metadata":{"loc":{"lines":{"from":285,"to":290}}}}],["473",{"pageContent":"Architecture\nDAOCake Process Overview\n\nWe’ve kept the model simple yet sufficiently complex and considered for this application. You could say we did not want to “over cook it” (Cake pun intended). We believe the best smart contracts are simple and easy to read so that anyone (technical or not) can understand what is happening. We also wanted to keep this DApp open for anyone to use. With more time we can assess market needs and adjust the implementation where needed (see: roadmap)\n\nSmart Contract features","metadata":{"loc":{"lines":{"from":290,"to":295}}}}],["474",{"pageContent":"Smart Contract features\n\nTRON TVM Solidity - Secure, type-safe and readable\nEvent emitting - For integration with GraphQL (tracing / audit capable)\nSimple extensible model based on: Proposal -> transaction lifecycle through voting which can be easily adapted to various types of work associated with an organisation.\nInbuilt consensus rules and the ability to update though a proposal and voting.\nExternal ID fields to assist integration with external databases.\nOn-chain data maintained to only the critical elements and references necessary for on chain actions.\nBlob storage ID (for immutable IPFS or BTFS storage) to encode references to large data PDF for invoices, proposal docs etc\nDeployed to Shasta TestNet: https://shasta.tronscan.org/#/contract/TCPsXZWsTzSGFxAqtbcBG3eFTcJvcDNjet/code","metadata":{"loc":{"lines":{"from":295,"to":304}}}}],["475",{"pageContent":"DApp front end The original idea was to develop a Smart Contract only and integrate into other tools we've already developed and make it available for 3rd party and community integration. The Smart Contract alone is a powerful product and useful for our immediate application. However, the rest of the team has become interested in the product and see potential for both a stand alone Native Mobile app and ReactJ dashboard. We're now working on the MVP dApp in React / NextJS.\n\nTeam\nAt amaDAO, we’re a team of 5 engineers covering skill-sets from blockchain, front-end dedicated Mobile Native and ReactJS. Over the course of the last 8 months we’ve evaluated and built products on 5 different blockchains in search of the right fit for our backend. Our core team has worked together in the future-of-work industry for over 6 years. We’ve all been heads down on building out the core platform. As the solution architect, I personally experimented with TRON in my spare time.","metadata":{"loc":{"lines":{"from":306,"to":309}}}}],["476",{"pageContent":"Deliverables\nWith the limited resources (me) and time available I’ve focused purely on the smart contract. We’ve commenced the front-end in React but have not had time to integrate. We will continue to work on this over the coming weeks to bring the full benefit of the DAO Cake vision to a stand alone DApp.","metadata":{"loc":{"lines":{"from":311,"to":312}}}}],["477",{"pageContent":"Roadmap\nImplement Smart Contracts on TRON TVM (DONE)\ndApp services layer connected to contract on Shasta Testnet (DONE)\nComplete front-end of DApp MVP (50% DONE)\nImplement ‘Bake’ action for pay out (from escrow) to wallets to member slices\nCustomer testing of DApp. Feedback on UX, any limitations?\nReview incentives / disincentives for application in larger DAO communities\nGenerate Internal $DOU token with tokenomics to incentivise participation in voting/proposals (TRC20 Asset Tokens)\nProvide alternative Bake actions for token issuance (TRC20) or NFT (TRC-721) achievement badges.\nLaunch dApp on Mainnet\nBuild iOS and Android native apps.\nLaunch dApp with chosen business model (Token, SaaS, Service fee?)\nAssess other applications: eg: measuring open source GitHub contributions.\nNative App UX","metadata":{"loc":{"lines":{"from":314,"to":327}}}}],["478",{"pageContent":"Business model\nDAO Cakes’ target audience is both web3 startup and DAO founders. We’ll publish the product to Product Hunt, Indie hackers, Reddit and through founder niche campaigns. We’ll generate users through campaigns we’ve planned for amaDAO which include a web3 jobs marketplace and an on-chain CV; the target audience is the same. Revenue will mostly come through amaDAO products and add ons. We’ve had little time for gauging reaction, however potential business models for DAO Cake include the following:\n\nMonthly SaaS fee per seat or per organization (includes support)\nA small percent eg: 5% of $DOU on a TGE\nPercentage fee on block signing events.\nWhat's next for DAO Cake - TRON\nThere are currently approx 4,800 indexed and tokenized DAOs. We’re targeting the 40k+ DAOs who are essentially startups or web3 communities that have not yet tokenized or formalised their structure.","metadata":{"loc":{"lines":{"from":329,"to":336}}}}],["479",{"pageContent":"We’re excited by the potential to simplifying fledgling ‘DAO’ operations and payments. But also excited by the potential to bring thousands more daily transactions to the TRON blockchain.\n\n\nHolaChain, Web3 Secured W2W Communication Infrastructure\nSend, receive TRON dMails or exchange on-chain messages with no ads, no data mining & no tracking. HolaChain secures your E2EE communication and enables white-label SDKs for Web3 projects.","metadata":{"loc":{"lines":{"from":338,"to":342}}}}],["480",{"pageContent":"Whenever we speak about online security we consider it a topic important to us. We give away our privacy on a daily basis and as the saying goes “if you are not paying for the product, then you are the product”. Securing your digital communications should be your highest priority when going online. There are too many threats to trust any company with your private data. Blockchain has always offered the promise of enabling private, immutable W2W communication while retaining data and identity ownership, it is by design the perfect privacy tool. However, it could never really take off due to early-generation blockchains' scalability and cost constraints. We believe that TRON more than meets all the main parameters (i.e. network decentralization, stable performance, low transaction cost, fast transaction finality) to support private on-chain communication. At the same time, its thriving ecosystem would benefit from the social dMail & dChat communication layers.\n\nBackground key points:","metadata":{"loc":{"lines":{"from":344,"to":346}}}}],["481",{"pageContent":"Background key points:\n\nPrivacy & anonymity today are an illusion\nThe right to privacy should be above all and provided for all online communications\nUntraceable private E2EE communication has remained an elusive goal\nBlockchain protocols offered great promise but scalability, throughput and cost were always an issue\nWeb3 projects & DAOs all use Web2 communication tools, which goes against the decentralization ethos\nImmutable on-chain W2W email & messaging is prime to become the future of secure private communication\nSolution key points:","metadata":{"loc":{"lines":{"from":346,"to":354}}}}],["482",{"pageContent":"Establishing a Web3 communication TRON MainNet and DAppChain framework that is web, desktop & mobile interoperable\nBringing social communication to the Web3 Ecosystem\nE2EE secure, immutable, censorship-resistant, scalable & accessible »on-chain« email & messaging\nWeb3 wallet login, no signup or personal information\nResistant to data mining, data tracking, email spoofing & identity theft\nPrivate, group & community messaging\nCurated chat groups\nFile & media sharing via decentralized storage\nStand-alone app, White-labels & SDKs\nInteroperable with all major Tron wallets\nWhat it does\nHolaChain is a next-gen Web3 framework that enables users to send, receive dMails or exchange on-chain messages with no ads, no data mining & no tracking, while SDKs & white labelling enable direct dMail & dChat integration into Web3 partner UIs or wallets.","metadata":{"loc":{"lines":{"from":356,"to":367}}}}],["483",{"pageContent":"How we built it\nHolaChain is an application-specific brand spin-off built on the 4thTech framework, that has been in the making since 2018. There are two TRON deployment possibilities. The deployment on TRON MainChain or the deployment on DAppChain, the sidechain of TRON.\n\nPrivacy by design was our guiding approach, which simply means that we put into consideration how we could preserve privacy, guarantee protection, and obfuscate metadata to the largest possible degree at the forefront of all our Architectural decisions. At the same time, no personal data whatsoever is collected by the protocol.\n\nThe framework consists of six main parts. Due to the sheer size of the project, the TRON dMail (i.e. FOURdx Protocol) was developed for the hackathon. The dMail is fully developed, deployed on TRON Nile & Shasta TestNets and ready for TRON MainChain. Other solutions are in development and a part of the project roadmap.","metadata":{"loc":{"lines":{"from":369,"to":374}}}}],["484",{"pageContent":"⚙️ (1) dMail (EVM SC): Solidity-based E2EE email protocol resilient to data mining & spoofing, that enables users to share content, files and media from wallet to wallet.\n\ndMails are encrypted with AES encryption\nAll encrypted attachments are stored on either 4thTech temporary GDPR compliant cloud storage or permanent decentralized storage\nA JSON metadata file is created that includes sender and recipient details, dMail subject, content, and attachment details (i.e. name, stored location, and checksum).\nA JSON metadata file is encrypted with AES encryption and stored in storage.\nA JSON metadata file URL & checksum are sent to TRON Smart Contract.\nAfter transaction finality, the recipient Client B load and decrypt a JSON metadata file and loads and decrypt all the attachments.\nFile encryption example:\n\n// Symmetric encrypt\nconst symKey = crypto.randomBytes(32);\nconst iv = crypto.randomBytes(16);\nconst cipher = crypto.createCipheriv('aes-256-cbc', symKey, iv);","metadata":{"loc":{"lines":{"from":376,"to":389}}}}],["485",{"pageContent":"// Symmetric encrypt\nconst symKey = crypto.randomBytes(32);\nconst iv = crypto.randomBytes(16);\nconst cipher = crypto.createCipheriv('aes-256-cbc', symKey, iv);\n\nconst symEncrypted = Buffer.concat([cipher.update(fileData), cipher.final()]).toString(\n    'base64',\n);\n\n// Asymmetric encrypt - encrypt just symmetric key & iv\nconst key = new NodeRSA();\nkey.importKey(publicKey, 'pkcs8-public');\n\nconst symPrefix = `${symKey.toString('base64')}:${iv.toString('base64')}`;\nconst encrypted = key.encrypt(symPrefix, 'base64');\n\n// Join asymmetric and symmetric part\nconst data = Buffer.from(`${encrypted}:${symEncrypted}`);\nSave to blockchain:\n\n// Save data to blockcahin\nconst txDetails: TransactionDetails = await blockchainService.sendDocument(\n    envelope.sender.account,\n    envelope.recipient.account.address,\n    envelopePath,\n);\nSmart Contract link: dMail SC","metadata":{"loc":{"lines":{"from":389,"to":415}}}}],["486",{"pageContent":"⚙️ (2) dChat Protocol (EVM SC): Solidity-based W2W messaging protocol that enables on-chain E2EE private messaging, group chat & curated community chats.\n\n⚙️ (3) dID Protocol (Typescript, Vue.js): Serves as a public key exchange point between users and connects wallets during the dMail & dChat data exchange process.\n\n⚙️ (4) UI platform (Typescript, Vue.js): Written with TypeScript, a superset of JavaScript and utilises Vue 3 framework. Serves as HolaChat native UI and White-label GUI framework.\n\n⚙️ (5) SDK framework (Typescript): EVM dMail & dChat SDK framework enables back-end partner integration into their UIs or Wallets.","metadata":{"loc":{"lines":{"from":417,"to":423}}}}],["487",{"pageContent":"⚙️ (5) SDK framework (Typescript): EVM dMail & dChat SDK framework enables back-end partner integration into their UIs or Wallets.\n\n⚙️ (6) Encryption (AES, ECDH): While the message or email is encrypted with Advanced Encryption Standard (i.e. AES), the Elliptic-Curve Diffie-Hellman (i.e. ECDH) key agreement protocol is used for generating a secret key (i.e. used in AES encryption). The implementation of the Elliptic-Curve Diffie-Hellman protocol will enable the interoperability of HolaChain communication protocols with popular TRON Web3 wallets.\n\nWe were thinking about a two-step approach to TRON deployment:\n\nDue to TRONs EVM interoperability, tested network resilience, security, low TX cost and fast transaction finality we see real TRON MainChain integration potential that could enable:","metadata":{"loc":{"lines":{"from":423,"to":429}}}}],["488",{"pageContent":"Due to TRONs EVM interoperability, tested network resilience, security, low TX cost and fast transaction finality we see real TRON MainChain integration potential that could enable:\n\nSocial dMail & dChat layers with private & secure W2W on-chain communication\ndMail & dChat SDK framework for direct back-end integration into ecosystem partners UIs or Wallets\nW2W exchange of data & media via BTFS decentralized storage\nIn step 2, we believe that an application-specific TRON sidechain (e.g. HolaChain) is needed to enable stable, scalable, and even lower-cost blockchain infrastructure to power the future on-chain W2W communication. Due to TRON dAppChain EVM interoperability, TRON MainChain shared security and battle-tested design framework, we see real integration possibilities for;","metadata":{"loc":{"lines":{"from":429,"to":434}}}}],["489",{"pageContent":"Web, mobile & desktop dMail & dChat framework at scale\nSDK dMail & dChat framework for web, mobile & desktop\nLow-cost W2W exchange of data & media via BTFS decentralized storage also suitable for Enterprise\nFees:\nThere are two approaches to project tokenomics;\n\nIn the case of TRON MainChain deployment fees are charged in TRX (i.e. one, email or one message = one transaction), while the protocol charges an additional service fee. The service fee is charged on-chain and represents a small % of the transaction cost.\n\nIn the case of HolaChain DAppChain the Hola token utility is quite straightforward. The token would be used as gas while also having governance functions.","metadata":{"loc":{"lines":{"from":436,"to":444}}}}],["490",{"pageContent":"In the case of HolaChain DAppChain the Hola token utility is quite straightforward. The token would be used as gas while also having governance functions.\n\nChallenges we ran into\nWe spent over four years developing the 4thTech multi-chain communication building blocks, which are built around privacy and ecosystem integrations deployed on various Layer 1s. As time passed, some of the chosen L1s did not pan out due to interoperability or scalability issues. So the main challenge is to find the most suitable underlying network that would fit all the main requirements and make on-chain private communication usable at scale.","metadata":{"loc":{"lines":{"from":444,"to":447}}}}],["491",{"pageContent":"E2EE group messaging was always difficult to achieve, this goes for Web2 and especially for Web3. Developing the tech to support on-chain E2EE group messaging was a challenge in itself. We solve it by random generation of the secret key, that is used to encrypt/decrypt messages. The secret key is distributed to all group members and separately encrypted with Advanced Encryption Standard (i.e. AES) over the Elliptic-Curve Diffie-Hellman (i.e. ECDH) key agreement protocol.\n\nThis opens a whole new chapter in Web3 on-chain communication and could disrupt traditional Web2 communication platforms.","metadata":{"loc":{"lines":{"from":449,"to":451}}}}],["492",{"pageContent":"This opens a whole new chapter in Web3 on-chain communication and could disrupt traditional Web2 communication platforms.\n\nAccomplishments that we're proud of:\n⚡️ 2018: Ethereum dID, dMail, dNotary mainnet deployment (EVM, Solidity)\n⚡️ 2020: SI-Chain dID, dMail, dNotary deployment (EVM, Solidity)\n⚡️ 2020: Tolar HashNet, dID, dMail, dNotary (EVM, Solidity)\n⚡️ 2021: Edgeware, dID, dMail, dNotary (Substrate, Rust)\n⚡️ 2021: Solana, dID, dChat, dMail, dNotary (Rust)\n⚡️ 2022: Moonbeam, dID, dMail, dNotary (EVM, Solidity)\n⚡️ 2022: EVMOS, dID, dMail, dNotary (EVM, Solidity)\n⚡️ 2022: TRON, dID, dChat, dMail, dNotary (EVM, Solidity)","metadata":{"loc":{"lines":{"from":451,"to":461}}}}],["493",{"pageContent":"What we learned\nBlockchain has always offered the promise of enabling private, immutable W2W communication while retaining data and identity ownership, it is by design the perfect privacy tool.\nDue to stability and scalability issues, early-generation blockchains can not sustain the on-chain communication infrastructure.\nUser migration from “free” but not private Web2 communication platforms to payable but private Web3 infrastructure will be challenging, so new incentive onboarding models will have to be introduced.\nWith the rise of privacy awareness and Web3 adoption in general, the on-chain W2W email & messaging could become the dominant communication and as such can become the future of private online communication. The privacy and security of Web3 native features are just too good to be overlooked.\nHow to test?\nStep 1: DL & setup FOURwaL (follow the link below)\nStep 2: Login to the 4thTech staging UI or login to TRON White-label TestNet (follow the links below)","metadata":{"loc":{"lines":{"from":463,"to":470}}}}],["494",{"pageContent":"How to test?\nStep 1: DL & setup FOURwaL (follow the link below)\nStep 2: Login to the 4thTech staging UI or login to TRON White-label TestNet (follow the links below)\nStep 3: Airdrop TRON TestNet tokens to the FOURwaL account (address available in the accounts tab)\nStep 4: Click the “dMail” TAB\nStep 5: Add new contact by pasting the FOURwaL TRON TestNet recipient address\nStep 6: Start sending dMails\nStep 7: Check your transactions by clicking on the Explorer links available in the UI","metadata":{"loc":{"lines":{"from":470,"to":477}}}}],["495",{"pageContent":"🔗 FOURwaL Chromium DL\n🔗 FOURwaL Mozilla DL\n🔗 TRON dMail & dChat White-label UI\n🔗 UI-staging\n🔗 TestNet token mint\n\n💡 Note: Minimum TRON Shasta TestNet token balance is needed to send or receive TRON TestNet dMails!\n\n[Web3] Adshares ($ADS) in TronDAO Ecosystem!\nAdshares is an advertising Web3 protocol designed to provide blockchain-based ad software to ad tech industry. Metaverse & Game monetization allows community to monetize their virtual assets.\n\n\n\n\n\n\n\nInspiration\nThe main goal of Adshares is to become the standard for web3 advertising. The Adshares protocol is already successfully operating on Ethereum, Polygon and BNB Chain, enabling metaverses and blockchain-based games to provide more utility to their users.\n\nWhat it does\nYou can think of Adshares as an engine for monetizing the lands, NFT or any space. By creating a bridge to the Tron network and BTTC, ADS coin (TRC-20) will enable users to earn money on their lands in metaverses and games in the Tron DAO ecosystem","metadata":{"loc":{"lines":{"from":479,"to":500}}}}],["496",{"pageContent":"How we built it\n$ADS will be used as the fuel/backend for monetization and metaverses will be able to use the native token of the game for their users. In addition, the bridge will also enable the expansion and development of the BTTC chain. We see a great value and potential in joining the growing Tron ecosystem, based on its constant growth and development.\n\nThe first step is to create an ADS bridge to the Tron DAO network. Then, it will be possible for any metaverses, games, BTTC and other projects in the Tron ecosystem to integrate with Adshares Protocol, enriching utilities with monetization in the form of digital programmatic ads. Wrapped ADS Coin allows Metaverse creators to add extra utility to the project’s native token. Payouts from ads can be distributed in a native project token which is causing instant and constant demand for the project tokens.\n\nProject Milestones:\n\nInfrastructure Development","metadata":{"loc":{"lines":{"from":502,"to":509}}}}],["497",{"pageContent":"Project Milestones:\n\nInfrastructure Development\n\nDevelop a bridge smart contract\nADS on TRX\nLaunch of the bridge\nAdding the Wrap/Unwrap function to ADS native wallet\nSunSwap DEX listing\n\nAdding the initial Liquidity Pool ADS/TRX\nWrap / Un-wrap tests\nMarketing Activities","metadata":{"loc":{"lines":{"from":509,"to":521}}}}],["498",{"pageContent":"Start the awareness campaign across TRON community\nConduct the Discord live meeting devoted to the topic\nMetaverse campaigns promoting ADS/TRX on SunSwap and ADS (TRC-20)\nWebsites campaigns promoting ADS/TRX on SunSwap and ADS (TRC-20)\nAccomplishments that we're proud of\nAdshares as a decentralized advertising Web3 protocol designed to provide blockchain-based ad software to the ad tech industry. The protocol enables advertisers to manage all their digital advertising from one place - and helps creators and publishers to monetize their space in Metaverse, blockchain games, NFT exhibitions, websites and any advertising space in the world (DOOH). The mission of Adshares is to become the global web3 advertising standard. Available to any media, websites, metaverses, games, social media, VR/AR, and mobile apps. Adshares serves over 200 million impressions each month and since the beginning of its metaverse presence it’s been over 3 million impressions inside Decentraland and others.","metadata":{"loc":{"lines":{"from":523,"to":528}}}}],["499",{"pageContent":"This is what Adshares does for the market:","metadata":{"loc":{"lines":{"from":530,"to":530}}}}],["500",{"pageContent":"Provides decentralized Web3 ad networks and software\nSimplifies blockchain adoption by the ad tech industry\nBrings transparency to advertising buying and value chain\nHelps agencies manage their digital advertising assets\nDigital space monetization across Web2 and Web3\nAdvertising transactions without intermediaries\nEnables placing ads in web3 apps and the Metaverse\nEnables publishers to be paid directly and immediately\nWhat's next for [Web3] Adshares ($ADS) in TronDAO Ecosystem!\nAfter the completion of bringing Adshares into Tron Ecosystem, the Metaverse Collaboration Phase can be started. Adshares will want to actively help develop the web3 space of TRON projects, allowing them to utilize the Adshares Protocol and all its features. Integration of the first metaverse or game present in TRON ecosystem will be a huge step that will allow to create a case study. Adshares will provide the complete functionality of the protocol for this metaverse users.","metadata":{"loc":{"lines":{"from":532,"to":541}}}}],["501",{"pageContent":"Afterwards, Adshares would be looking into potential collaboration with BitTorrent. The Client may utilize web3 advertising protocol and the possibility of providing extra utility to BTT token.\n\nNRG & Community DAO - By TronNinjas Team\nTron NRG is a Decentralized P2P energy rental service that allows users to save on Tron transaction fees by renting energy!\n\n\n\n\n\n\n\n\n\nInspiration:\nWe noticed early on a constant demand for energy rental from Tron users. The current energy market, as it is today, is fragmented. Not one system can pool users' resources to provide a one-stop shop for energy rental; A JustLend of the energy market, if you will. The current market size is estimated to be around *$3.2 million annually. Our inspiration for this project came from a demand for the service & DAOs. It allows us to create a system that will give back to the community sustainably—allowing longevity to support start-ups on Tron. *Source: Dapp Radar\n\nWhat it does:\nExplainer video","metadata":{"loc":{"lines":{"from":543,"to":560}}}}],["502",{"pageContent":"What it does:\nExplainer video\n\nTron NRG is a Decentralized P2P energy rental service that allows users to save on Tron transaction fees by renting energy! Users who provide energy benefit from receiving 60% of the rental fee while providing a low-cost service. Furthermore, from the end of Q4 2022, 10% of all rental fees are sent to the community DAO, allowing providers to vote on funding for Tron project proposals. The sharing economy meets perpetual crowdfunding on the Tron blockchain.\n\nNRG\n\nNRG\n\nNRG\n\nThe NRG rental service is built to provide energy for those who need it but also allows those who have extra TRX to earn passive income.\n\nRenting NRG:\n\nRenting energy is made easy. Go to our Dapp TronNRG.com, connect your wallet, choose the period and the amount and approve. Easy, affordable and stable NRG 24/7.\n\nSupplying NRG:","metadata":{"loc":{"lines":{"from":560,"to":577}}}}],["503",{"pageContent":"Renting NRG:\n\nRenting energy is made easy. Go to our Dapp TronNRG.com, connect your wallet, choose the period and the amount and approve. Easy, affordable and stable NRG 24/7.\n\nSupplying NRG:\n\nSupply NRG to the system and start earning passive income on your TRX. To provide, you need to swap to the NRG token. NRG token is a non-tradable token stable to TRX. 1 TRX = 1 NRG. Supplying is easy. Just go to our website TronNRG.com, and swap your TRX to NRG.\n\nHow we built it:\nNRG Tron, at its core, is a collection of smart contracts that perform the functions required to freeze TRX to provide energy to any account. The Dapp was made using various technologies. Net 6, Solidity, JavaScript Node.js, HTML, JS, and CSS. The application is hosted on AWS.\n\nDiagram\n\n1) NRG providers exchange TRX to NRG – TRX is held in the contract and used to freeze energy which the user can swap back for TRX . There is a 72 hour unlocking period which ensures open orders to be closed.","metadata":{"loc":{"lines":{"from":577,"to":590}}}}],["504",{"pageContent":"2) NRG users can use the system to rent energy on Tron, helping reduce the cost of their transaction fees.\n\n3) The community DAO is phase two of the NRG project and will go live in Q4 2022.\n\nChallenges we ran into:\nCreating a fully Decentralized system to allow energy rental was a challenge in itself. The concept and design were challenging, which led us to investigate the capabilities of the TVM in great detail. This investigation led us to realize that our services could, in fact, not only be fully decentralized but could also remove some of the limitations on current energy rental services. When renting energy from NRG, users can rent for an unlimited period. Although we have limited the number of days to six, this will increase as the system grows.","metadata":{"loc":{"lines":{"from":592,"to":597}}}}],["505",{"pageContent":"Accomplishments that we're proud of:\nNRG Tron is a great addition to the Tron ecosystem. We are proud to be part of the growth we see on Tron. We believe the system will not only help support users by reducing transaction fees but will continue to support the Tron ecosystem in many years to come. Although it has been a challenging journey, we are proud of our achievements as a team. Solving problems is at our core, and we feel proud to have created Tron NRG to solve a problem that we saw and overcome the challenges in every step.","metadata":{"loc":{"lines":{"from":599,"to":600}}}}],["506",{"pageContent":"What's next for NRG:\nFrom the end of Q4 2022, the NRG Community DAO will be live. 10 % of all earnings from NRG rental service will go back to the TRON Community. We are serious about giving back and building TRON. You have an impact on the NRG Community DAO. Users of the NRG rental service are automatically members of the DAO and have the right to nominate projects for the funding that the DAO received from the energy rental service. For Tronics by Tronics.\n\nThe NRG Community DAO is a Kickstarter for projects on TRON. It can be an NFT project, token, exchange, marketplace or any project built with TRON in its core and is new or struggling with getting the recognition it deserves; We don't control that; you do!\n\nCertiFi - Academic Credentials Powered by Blockchain\nBlockchain based Credential Platform that lets institutions issue credentials and learners store, verify and share their credentials. Transcript Issuing cost for CertiFi ($0.56) << Conventional ($5+).","metadata":{"loc":{"lines":{"from":602,"to":608}}}}],["507",{"pageContent":"Inspiration\nCredential Verification is a $10+ Billion business. National Student Clearinghouse & Parchment are some legacy companies that earn huge amounts because of an outdated and slow to adapt education industry.\n\nMarket Potential\n\nWe all have dealt with credentials at some point. Whether it is transcripts and degree certificates from universities or verification letters from past employers, this is a tedious process involving lot of bookkeeping. What if there was a better, cheaper and faster solution that we could use? A few universities (mentioned below) are already doing it and we have helped them do it. Now, we want to push for a mainstream adoption of the blockchain technology for credential verification with our platform, CertiFi.\n\nCertiFi","metadata":{"loc":{"lines":{"from":618,"to":625}}}}],["508",{"pageContent":"CertiFi\n\nCertiFi is a natural fit - a blockchain based solution wins over the conventional system which requires a trusted intermediary who charges expensive fees. Colleges charge $2-$15 for issuing a transcript once where the middleman has a take rate of 20-30%. We are able to issue and certify transcripts and other credentials for <$1 due to TRON's low gas fees and sustain a lower take rate. We store the uploaded credentials on IPFS as of now. The certification is immutable once granted. This is a blockchain business with strong unit economics!!\n\nThese credentials can be used for admission to courses, background verification for employees, new kinds of job portals where degrees and other qualifications automatically make job seekers eligible for certain jobs, etc. The possibilities are endless once we have moved out the 'proving' part of credentials and made verification a trust-less process.\n\nWhat it does\nWe enable 3 things:","metadata":{"loc":{"lines":{"from":625,"to":632}}}}],["509",{"pageContent":"What it does\nWe enable 3 things:\n\nInstitutions like Universities can issue credentials like transcripts or degree certificates to students. The contents of the transcript are hashed and stored on IPFS. We certify that the transcript has been issued by institution to the student. We secure this information on the TRON ledger by storing the hashed issuer, recipient and credential file relation.\n\nLearners can then view all their credentials in one place if the data is stored on the school's servers. They can export their credentials and keep it with them. They can verify the credentials whenever they'd like.\n\nVerifiers can verify the credentials with a valid link OR a downloaded credential file. This validates the issuer, recipient and the credential relationship and enforces trust when recruiting students to a course or a job.","metadata":{"loc":{"lines":{"from":632,"to":639}}}}],["510",{"pageContent":"**Currently the institution and individual view are both accessible to any address. We intend to integrate DID to verify which addresses are institutions in the future. **A verifier does not need a Tron Address to verify credentials! Only the issuer and the recipient need an address. We can even do away with the need for an address for a recipient by using downloaded credentials.\n\nCertiFi Features\nCertiFi Features\n\nHow we built it\nCertiFi Diagram\n\nWe used the TronWeb library and lots of documentation resources to build our product. Our experience with implementing the technology in a real world case helped us a lot.\n\nYou need the Tron Extension and to be on the Shasta Testnet to use the demo.","metadata":{"loc":{"lines":{"from":641,"to":651}}}}],["511",{"pageContent":"You need the Tron Extension and to be on the Shasta Testnet to use the demo.\n\nChallenges we ran into\nThe storage of files is a big challenge. We need to determine a location to store the credential file and make it accessible securely and in a decentralized manner. The files per say do not need to be stored in a decentralized fashion because they can be downloaded by the recipient. What matters is the validation of the credential which can be done with an offline copy of the file as well.","metadata":{"loc":{"lines":{"from":651,"to":654}}}}],["512",{"pageContent":"Onboarding institutions from legacy systems involves writing lot of backwards compatible systems. The legacy CRM softwares used by institutions can be a pain to work with and the few universities we worked with required us to rewrite a lot of our software to support the use case. We have then gone ahead and pulled out the the common features and made the existing code extensible to enable these custom mods for each institution resulting in this platform, CertiFi. The platform can be extended easily because it has all the core functionalities and can offer APIs easily.\n\nAccomplishments that we're proud of\nWe have implemented similar systems at Maryville University and Oral Roberts University and have reduced costs for transcript issuance. We intend to make this platform open and let more institutions use the public blockchain for issuing credentials.","metadata":{"loc":{"lines":{"from":656,"to":659}}}}],["513",{"pageContent":"What we learned\nCryptography + Web3 opens a huge potential for innovations and solves a lot of web2 problems.\nTronWeb Implementation and Usage\nIPFS Implementation and Usage\nWhat's next for CertiFi\n2022 Q3 Build bulk credential issuance. Integrate with PeopleSoft & Ellucian for pulling student records from legacy systems.\n\n2022 Q4 Build a robust data hosting solution with ability to pin credentials.\nUmbre\nBuild NFT Collections Without Code.\n\n\n\nOverview\nUmbre is a one-stop service for all NFT creators. Umbre allows you to generate and deploy a TRC-721 contract on the Tron blockchain with any information and features. After the deployment, you can use mint button for integration, with which anyone can mint your NFT collection.\n\nWe saw how rapidly the NFT community on the Tron blockchain is developing and decided to release Umbre on Tron to make it easier for creators to go from the idea of a collection to its implementation.","metadata":{"loc":{"lines":{"from":661,"to":677}}}}],["514",{"pageContent":"Features\nTron Blockchain. One of the leading blockchains. High efficiency along with low commissions.\n\nTRC-721 contracts. Umbre supports Tron TRC-721 contract generation. Create efficient and purpose built contracts for your project in a few minutes.\n\nEasy deployments. No delay or confusion, click a single button and be live in one minute.\n\nBuilt for all. Create collections of 100 or 10,000. Umbre provides you all the tools for a perfect launch.\n\nMinting Button. Umbre you take your collection public with a simple embed button that works on all no-code website builders.\n\nOwn everything. With Umbre you own everything. From contract to IPFS to mint button - your project is totally decentralized.\n\nAnalytics. Get detailed metrics about who mints and owns your collection and recommendations on how to scale better.\n\nFree for all. Umbre is open for all. No payment upfront. No email signup. Just connect your wallet and launch.","metadata":{"loc":{"lines":{"from":679,"to":694}}}}],["515",{"pageContent":"Free for all. Umbre is open for all. No payment upfront. No email signup. Just connect your wallet and launch.\n\nMarketplace ready. Once launched your collection is automatically listed and compatible with all NFT marketplaces.\n\nRoadmap\nJuly. In July, we started developing Umbre and have already launched the project on the Nail Testnet. Now the basic functionality is already available in the form of creating and deploying collection contract, as well as the mint functionality.\n\nAugust. In August, we plan to release the beta version on the Mainnet. We plan to collect feedback from the first users and improve our service for a mass release.\n\nSeptember. In September, we plan to add several important features: whitelisting, admin airdrops, delayed mint launch, full-fledged dashboard and a few more.\n\nOctober. In October, we are planning a mass release of Umbre. We are also planning an advertising campaign and collaboration with some communities.","metadata":{"loc":{"lines":{"from":694,"to":705}}}}],["516",{"pageContent":"October. In October, we are planning a mass release of Umbre. We are also planning an advertising campaign and collaboration with some communities.\n\nApexgo\nApexgo is an NFT API solution focused on bringing NFT utility to enterprises, developers, and NFT enthusiasts. The objective is to integrate NFTs to everyone's day to day activities.\n\n\n\nInspiration\nApexgo sees a need for an NFT specific API that provides the tools necessary to make comprehensive applications for NFTs. Current APIs only touch the surface of what is truly needed to cross over NFT utility to the day to day lives of individuals. Our API focuses on a B2B and B2C approach in order to increase mass adoption of NFTs.\n\nWhat it does\nApexgo offers solutions that allows businesses, developers, and NFT enthusiasts the ability to integrate NFTs into their business model, their applications, and their everyday lives without the burden of having to be a tech guru.","metadata":{"loc":{"lines":{"from":705,"to":716}}}}],["517",{"pageContent":"How we built it\nWe built Apexgo with both a business-to-business and business-to-consumer approach. We are the only NFT API that is doing this. Apexgo provides an NFT API for businesses and developers to incorporate NFT technology. Furthermore, Apexgo gives collection creators full control of their collection while giving the users access to all their NFT data along with products, applications, and services that are exclusive for their collections.\n\nChallenges we ran into\nIn order to provide the most out of our API tools, it is important to test multiple solutions for speed, reliability, and accuracy. Our team has performed many tests and enhancements in order to improve the experience to our end users.","metadata":{"loc":{"lines":{"from":718,"to":722}}}}],["518",{"pageContent":"Accomplishments that we're proud of\nWe now offer the best NFT focused API that anyone can use thanks to a very intuitive and easy to understand UI. We offer features such as NFT collection creator rarity certification, a free Apexgo Discord bot for collections, and an OpenSea Chrome extention to name a few.\n\nWhat we learned\nWe have learned that the NFT market has very limited resources at the moment. Apexgo aims to unleash the full potential of NFTs.\n\nWhat's next for Apexgo\nApexgo will continue to build tools that will help bridge NFTs to the day to day activities of millions of individuals worldwide.\n\nDecentralease\nDecentralease is a zero-collateral NFT renting and leasing platform built on the novel ERC-4907 standard.\n\n\n\n\n\n\n\n\n\nDecentralease\nAn NFT renting and leasing protocol to power the next generation of digital asset rights.","metadata":{"loc":{"lines":{"from":724,"to":745}}}}],["519",{"pageContent":"Decentralease\nAn NFT renting and leasing protocol to power the next generation of digital asset rights.\n\nInspiration\nUtility NFTs are destined to play a critical role in the next generation of web3 dApps. However, current NFT implementations are flawed in that they are relatively illiquid and impose high financial barriers to entry.\n\nMy inspiration for Decentralease came from my interest in Web3 games, which are destined to utilize NFTs in some form. As a curious gamer myself, I have wanted to 'try' several Web3 games before without wanting to commit the capital to 'buy' the required assets. Thus, I set out to create an NFT renting marketplace.\n\nIn my search for existing rental protocols, I came across two existing implementations:","metadata":{"loc":{"lines":{"from":745,"to":753}}}}],["520",{"pageContent":"In my search for existing rental protocols, I came across two existing implementations:\n\nCollateralized renting\nSmart contract wallets\nWhile both seemed viable, the former fails to address the barrier to entry problem and the latter suffers from the need for perpetual maintenance and overcomplexity. Then, I saw the news of the finalization of the newest ERC standard: ERC-4907. ERC-4907 standardizes the creation of rentable NFTs by adding a separate user role in addition to the existing owner role. Thus, an asset owner can rent their assets to renters by setting the user address on the contract to the renter's address. As I realized the importance of this new standard, I set out to build a rental marketplace on top of it.","metadata":{"loc":{"lines":{"from":753,"to":757}}}}],["521",{"pageContent":"What it does\nDecentralease is an NFT renting and leasing protocol built on the novel ERC-4907 standard. My implementation, TRC-4907, is an extension of TRC-721 which adds an additional \"user\" role, separating ownership and usage rights. This enables the asset owner to assign a user without giving up ownership privileges.\n\nThe two main user groups on Decentralease are asset owners and asset renters.","metadata":{"loc":{"lines":{"from":759,"to":762}}}}],["522",{"pageContent":"The two main user groups on Decentralease are asset owners and asset renters.\n\nAsset Owners\nAsset owners hold digital assets. Currently, many assets are underutilized, as a lack of active usage means the asset is essentially frozen. With the ability to rent, asset owners can earn income on their assets while they are idle. For instance, an Axie Infinity player with hundreds of characters can rent out their reserve characters as they are unable to use all of their assets at once. Further, rental ability unlocks liquidity for NFTs. For the same Axie player, the only way he/she can currently liquidate his/her characters is by selling them, a permanent action. With Decentralease, he/she can rent out these assets without permanently selling the asset.","metadata":{"loc":{"lines":{"from":762,"to":765}}}}],["523",{"pageContent":"Asset Renters\nAsset renters want to use digital assets in dApps, but do not own the asset. Through Decentralease, they can use dApps without purchasing assets. This lowers barriers to entry for the renter, allowing them to temporarily 'try out' an asset before fully committing to a purchase.\n\nHow I built it\nDecentralease's architecture is separated into two categories:\n\nContracts\nClient\nContracts\nThe two most important contracts for Decentralease are ComplexDoNFT.sol and Marketplace.sol.\n\nCOMPLEXDONFT\nComplexDoNFT is a wrapper that enables a TRC-4907 token to be listed in the marketplace. A unique ComplexDoNFT contract must be deployed for each TRC-4907 contract that is listed on the Marketplace. This contract is necessary, as opposed to directly interfacing with the TRC-4907 contract, to ensure that the owner of the asset cannot freely set the user while a token is under an active rent. The process of interfacing with the ComplexDoNFT is as follows:","metadata":{"loc":{"lines":{"from":767,"to":779}}}}],["524",{"pageContent":"TRC-4907 contract owner creates a new ComplexDoNFT by specifying the original contract address and market address\nOwners of tokens from the original collection 'stake' their tokens to the ComplexDoNFT contract and receive a vNFT (Voucher NFT) which can be redeemed to reclaim the original token\nOwner of a vNFT list their token for rent through the marketplace\nRenter fulfills an order through the marketplace and receives a temporary doNFT, which allows them to freely set the user on the original contract.\nAsset owner reclaims their original NFT by burning their vNFT. This can only be done if there are no outstanding doNFTs for the current timestamp.\nMARKETPLACE","metadata":{"loc":{"lines":{"from":781,"to":786}}}}],["525",{"pageContent":"Asset owner reclaims their original NFT by burning their vNFT. This can only be done if there are no outstanding doNFTs for the current timestamp.\nMARKETPLACE\nThe marketplace contract handles rental listings and the creation of doNFTs (described in previous section). Lenders can list their assets for rent using the createLendOrder method on the contract by specifying the maximum available duration and a set of variable-rate pricing brackets. Renters can rent assets using the fulfillOrderNow method, which mints a doNFT to the renter. This requires payment from the renter in the lender's currency of choice. The doNFT allows the renter to freely set the user role on the original asset.","metadata":{"loc":{"lines":{"from":786,"to":788}}}}],["526",{"pageContent":"Client\nThe client is a React app built on top of the Next.js framework. The client requires a connection to the correct network, which in this case is the BitTorrent Chain Donau testnet. The app will redirect you to the correct chain if you connected to the wrong chain. Currently, the client supports Metamask and Coinbase wallets, with more integrations to come.","metadata":{"loc":{"lines":{"from":790,"to":791}}}}],["527",{"pageContent":"Challenges I ran into\nThe biggest challenge I ran into was that there are very few protocols that use TRC-4907 - the standard was finalized less than a month ago. Thus, I had to create my own TRC-4907 tokens and applications of those tokens in order to ensure that the protocol was working properly. I envision more widespread adoption of the standard with time, as it will certainly unlock a whole new set of possibilities for NFT-related projects. While they were developed before the finalization of this standard, Decentraland and ENS already implement the same pattern in their own contracts, so these collections are already compatible with Decentralease.\n\nWhat's next for Decentralease\nWhile digital-native web3 gaming assets are a perfect beachhead for the protocol, I see immense potential for more creative applications of TRC-4907. Some that come to mind are:","metadata":{"loc":{"lines":{"from":793,"to":797}}}}],["528",{"pageContent":"Free trials for web3 games issued by game developers\nSubscription services like Spotify and Netflix, where the creator is the owner and users must pay them directly\nBuy-now-pay-later with automatic reclamation\nFinancial instruments for real-world assets represented on-chain (i.e. a house represented by an NFT with a mortgage)\nMy next step is to build #1, which will entail creating an interface for game developers to list their assets for free and require statements in the method for handling free trial claims to ensure that a particular address can only claim on a free trial.\n\nAdditionally, I plan to build a user-friendly interface for migrating a TRC-721 contract to TRC-4907 with a factory. The success of Decentralease will require widespread adoption of TRC-4907.\n\nHelix Checkout\nThe easiest way to buy and sell NFTs on TRON!","metadata":{"loc":{"lines":{"from":799,"to":808}}}}],["529",{"pageContent":"Helix Checkout\nThe easiest way to buy and sell NFTs on TRON!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n✨ Inspiration\nBuying and selling NFTs is way harder than it has to be. To buy an NFT, firstly, you need to sign up to an exchange and buy the right crypto-currency. After you find all your ID and upload a selfie, it still all needs to be verified, which can take days.\n\nOnce you finally have your crypto, you need to set up a wallet like TRON link with your confusing 24 word passphrase, “spaceship”, “monkey”, “dishwasher” - which you can’t lose and have to keep super safe and secure. Only after all that can you actually buy your NFT, which involves confusing things like signing transactions and using smart contracts.\n\nLet’s face it, the user experience for buying NFTs is broken - but we can fix it.\n\n💳 What it does\nHelix Checkout provides NFT creators a simple, fast, safe and secure way to sell NFTs on the TRON blockchain via credit card to consumers.","metadata":{"loc":{"lines":{"from":808,"to":833}}}}],["530",{"pageContent":"💳 What it does\nHelix Checkout provides NFT creators a simple, fast, safe and secure way to sell NFTs on the TRON blockchain via credit card to consumers.\n\n🛍️ Checkout\nFor NFT consumers, the checkout experience is simple and familiar. As part of the checkout process, the user authenticates using a magic link which also sets up a TRON wallet linked to that email address to securely store NFT purchases.\n\nOnce the buyer has authenticated, all they need to do is select their payment method, enter their payment details and click pay. The buyer is then presented with a confirmation screen so that they can track the progress of their NFT transaction.\n\nAfter the NFT transaction is complete, the buyer can immediately see their purchase in their wallet. It’s just that simple.\n\nHelix Checkout","metadata":{"loc":{"lines":{"from":833,"to":843}}}}],["531",{"pageContent":"After the NFT transaction is complete, the buyer can immediately see their purchase in their wallet. It’s just that simple.\n\nHelix Checkout\n\n📈 Seller Dashboard\nAs an NFT creator, adding a checkout is quick and simple. After deploying a Helix compatible NFT contract, sellers can login to the dashboard and search for their contract address. The search retrieves all the token information and pre-fills the checkout details, as well as making sure the contract has successfully implemented the Helix Checkout interface.\n\nAll the seller has to do now is hit ‘Add checkout’ and that’s it! The checkout has been created. The seller can now share their checkout link and sell NFTs directly to consumers using credit cards.\n\nHelix dashboard\n\n👛 Wallet\nBuyers are not required to bring their own wallets - we create one for them to make the checkout process a breeze!\n\nHelix wallet\n\n⚙️ How it works\nFirstly, NFT creators must create their NFT contract and implement the Helix Checkout interface:","metadata":{"loc":{"lines":{"from":843,"to":860}}}}],["532",{"pageContent":"Helix wallet\n\n⚙️ How it works\nFirstly, NFT creators must create their NFT contract and implement the Helix Checkout interface:\n\ncontract IHelixCheckoutInterface {\n  // Required\n  // Used by Helix Checkout to mint and deliver the NFT to the customer                \n  function claimTo(address userAccount) public payable returns (bool);\n\n  // Required\n  // Gets the price of the NFT\n  function price() public view returns (uint256);                  \n}\nIt is highly recommended that NFT creators record their token details on TronScan. This is where Helix Checkout pulls the token metadata from to simplify the checkout creation process.\n\n🏗️ How we built it\nWe've built Helix Checkout on a modern technology stack, including React and Node.js, written in Typescript, hosted on Firebase.\n\nOur technologies and services we have used include:","metadata":{"loc":{"lines":{"from":860,"to":879}}}}],["533",{"pageContent":"Our technologies and services we have used include:\n\nTron Web Javascript SDK\nTronScan APIs\nStripe Payments SDK\nCoinMarketCap API\nFirebase - Authentication, Firestore, Hosting, Analytics\nSolidity smart contract\n🤔 Challenges we ran into\nWorking with the various SDKs (Ton Web, TronScan, Stripe, CoinMarketCap) required a lot of upfront research and understanding. Some of the blockchain-specific aspects of the project (e.g. signing transactions, authentication via private keys) were also particularly tricky new flows for our team. Fortunately, we started researching solutions very early on when the hackathon was announced, so we were able to give ourselves ample time to learn all these new technologies and overcome the hurdles.","metadata":{"loc":{"lines":{"from":879,"to":888}}}}],["534",{"pageContent":"😊 Accomplishments that we're proud of\nWe are really happy with the simple user experience and clean UI that we have developed for the checkout process. It is responsive, and makes it so easy for people to buy NFTs. We really see this as being able to drive adoption of TRON and help creators sell their digital assets with ease.\n\n🎓 What we learned\nHow to implement TRC-721 contracts and deploy them on TRON\nTron Web SDK functionality\nStripe payments and integration\nBest UX flows for checkouts\n🚀 What's next for Helix Checkout\nWe want to create a Javascript SDK to make it easy for developers to embed the checkout within their apps.\n\nWe also have a roadmap of features we wish to develop Roadmap","metadata":{"loc":{"lines":{"from":890,"to":901}}}}],["535",{"pageContent":"We also have a roadmap of features we wish to develop Roadmap\n\n❤️ Demo\nPlease head to Helix Checkout and hit the 'Demo Checkout' button to test it out. We have set up a demo token that can be purchased to test out the checkout flow. The demo is using the Shasta Testnet and test Stripe account, as we didn't want to have to actually charge users real money to demo the solution! Please use a real email address to authenticate. Once authenticated, you can use these credit card details to make a purchase: Credit card number: 4242 4242 4242 4242 Expiry: 01 / 25 CCV: 123\n\nCode available for review on request\n\n\n\nNFTmall\nNFT Infrastructure & Phygital NFT Commerce Provider for BTTC","metadata":{"loc":{"lines":{"from":901,"to":911}}}}],["536",{"pageContent":"Code available for review on request\n\n\n\nNFTmall\nNFT Infrastructure & Phygital NFT Commerce Provider for BTTC\n\n\n\n\n\n\n\n\n\n\n\nInspiration\nThe Inspiration and idea of NFTmall developed some time ago, as we all were talented crypto investors, but we mainly were in it ‘for the tech’. A big part of our combined interest was in the NFT utility. When more and more NFT platforms came out, we were researching existing NFT marketplaces and their limitations. Besides, we saw incredible chains that lack the NFT utility in scale, which stops them from revealing their true potential. As the crypto space evolved, and the infrastructure got improved, we decided to create an all-in-one solution that will ease the user experience of the NFTverse.","metadata":{"loc":{"lines":{"from":911,"to":929}}}}],["537",{"pageContent":"We have identified the issue of lack of quality NFT projects and games on the BitTorrent Chain despite its advanced technology, and we thought it was because of the lack of robust NFT infrastructure. So our team has decided to develop just that - an all-in-one NFT infrastructure that combines the NFT marketplace, NFT minting platform, NFT materialisation service, and an NFT Launchpad(aka INO platform).\n\nWhat it does\nB2C\nA robust multi-chain NFT platform that empowers creativity. It allows NFT creators to have fun while earning. We are a next-gen NFT marketplace & Launchpad for NFT creators, traders, and enthusiasts. Our platform is synergizing DeFi and e-commerce to achieve a fully autonomous and royalty-driven marketplace.","metadata":{"loc":{"lines":{"from":931,"to":935}}}}],["538",{"pageContent":"B2B SaaS\nWheels don’t have to be reinvented over and over again. Building a robust NFT marketplace is not an easy task. Furthermore, 1000 NFT games don’t have to build 1000 different marketplaces, those siloed environments will cause scattered communities, degraded UX, shallow liquidity and waste of energy and money that could’ve been spent on building what matters most - their game. So why not build a unified interconnecting marketplace together?\n\nNFTmall team wants to empower innovative projects to achieve their dreams much FASTER and CHEAPER by leveraging NFTmall’s like-minded community and infrastructure including white-label marketplace, NFT Launchpad, and NFT trading, indexing and search engines.\n\nLearn more: https://docs.nftmall.io/developer/integrating-nftmall-protocol","metadata":{"loc":{"lines":{"from":937,"to":942}}}}],["539",{"pageContent":"Learn more: https://docs.nftmall.io/developer/integrating-nftmall-protocol\n\nThis achieves, \"nftmall.io\" means the consumer software applications created, operated, and made publicly available by NFTmall for transactions involving Digital Assets and the NFTmall or Third parties DEX systems. The NFTmall DApps consisted of the world wide web application hosted at https://nftmall.io/ (the \"NFTmall Website\"). In the future, NFTmall may release one or more mobile applications (the \"NFTmall Mobile Apps\").\n\nHow we built it\nNFTmall Protocol consists of","metadata":{"loc":{"lines":{"from":942,"to":947}}}}],["540",{"pageContent":"Exchange smart contracts\nSmart contracts are responsible for atomically exchanging NFT and BTT or BRC20 tokens.\nWritten in Solidity and deployed to BTTC mainnet.\nOff-chain order book\nSigned sell orders and bids are stored off-chain in DB and are executed atomically by the trading counterparty. (e.g sell order is executed by a buyer, a bid is executed by a seller)\nNFT indexer\nA backend service that monitors transactions and indexes metadata of ALL NFTs of ALL collections on BTTC & other Chains.\nNFT search engine (NFT Explorer)\nA backend service that allows filtering NFTs and collections using various criteria.\nMarketplace API\nA backend service responsible for displaying NFTs, collections, user profile management and authentication.\nFrontend UI\nEverything beautiful you see on our site. https://bttc.nftmall.io\nPlus an upcoming mobile app","metadata":{"loc":{"lines":{"from":949,"to":962}}}}],["541",{"pageContent":"Frontend UI\nEverything beautiful you see on our site. https://bttc.nftmall.io\nPlus an upcoming mobile app\nNFTmall has a governance token called $GEM, once we establish a DAO with $GEM holders, we are going to fully open source our works to achieve a higher level of decentralization and transparency.","metadata":{"loc":{"lines":{"from":962,"to":965}}}}],["542",{"pageContent":"\"NFTmall\" means the unincorporated association of GEM holders. \"NFTmall DEX System\" means the smart contracts for creating, buying, selling, and transferring NFTs/Digital assets that are officially supported in the NFTmall DApps. The NFTmall DEX System is comprised of the smart contracts deployed to the following - BSC, Ethereum, Polygon, Avalanche, ThunderCore, BitTorrent network, and other blockchain networks and is visible on the NFTmall official Github. ( \"NFTmall Governance Platform\" means the websites, forums, technologies, and methods established from time to time by NFTmall for the coordination, voting, and other official activities of GEM holders in connection with the NFTmall DAO. \"nftmall.io\" means the NFTmall dApps and NFTmall DEX Systems collectively.","metadata":{"loc":{"lines":{"from":967,"to":967}}}}],["543",{"pageContent":"Challenges we ran into\nBudget. We’re a small company building NFTmall and we have limited funds, and things can be quite costly.\nLiquidity. NFT liquidity also is an issue for NFT marketplaces, nftmall.io is trying to solve the liquidity issue by acting as a digital asset aggregator for NFTs minted on third-party contracts and making available the deepest liquidity to the NFTmall users.\nBeing able to sustain a high volume of NFT trading. The crypto markets can be a roller-coaster, creating nice momentum waves to ride on, but also times when people and crypto projects are discouraged. We had to build our platform scalable in order to sustain unpredictable load during peak hours.\nToo low default gas price set by MetaMask. Transactions on BTTC usually require a gas price of 300,000+ GWEI. We had to solve an issue with MetaMask (a popular web3 wallet) that suggests too low gas price like 300 GWEI as a default value, resulting in forever stuck transactions.","metadata":{"loc":{"lines":{"from":969,"to":973}}}}],["544",{"pageContent":"Quality. Finding high-quality digital asset projects.\nAccomplishments that we're proud of\nWe had a lot of positive triumphs along the way that we’re so proud of. If we want to summarize it in a list:","metadata":{"loc":{"lines":{"from":974,"to":976}}}}],["545",{"pageContent":"We have been accepted into the ThunderCore Dev Accelerator program and launched nftmall.io on the ThunderCore chain under an exclusive Strategic Partnership as NFTmall is the default #1 NFT marketplace on the ThunderCore chain.\nNFTmall currently supports BitTorrent Chain as well as ThunderCore. We are working hard to integrate even more chains such as Ethereum, Polygon, BSC, and Avalanche, to bring NFT creators, traders, and gamers from many other chains to BitTorrent Chain.\nWe have been accepted into the AWS Activate Program for innovative startups. https://twitter.com/NFTmall/status/1509972497583644672\nIPFS, the Filecoin team has provided us grants to further accelerate our growth.\nLaunching big programs with big partners. Including ThunderCore, CoinMarketLeague, Oasis__DAO, and more.\nWe’ve integrated Transak to allow users to purchase crypto using fiat directly on our site. https://bttc.nftmall.io/purchase-crypto","metadata":{"loc":{"lines":{"from":978,"to":983}}}}],["546",{"pageContent":"We’ve integrated Transak to allow users to purchase crypto using fiat directly on our site. https://bttc.nftmall.io/purchase-crypto\nWe’ve also integrated UnstoppableDomains, to allow the UD community to log in using the UD wallet and transfer to UD.\nWhat we learned\nOur journey was incredibly interesting so far and we’ve learned quite a lot in the process and still learning every day. Integrating with BitTorrent let us test all our functionalities on a large scale. As well as we will also be deploying on Tron and some other networks using it, in the coming days and months. We learned about each chain's uniqueness and capabilities. We now truly understand how much the crypto space is evolving every day at an extraordinarily fast pace with this immersive technology.","metadata":{"loc":{"lines":{"from":983,"to":986}}}}],["547",{"pageContent":"We learned the importance of robust NFT infrastructure with top-notch UI/UX in order to build a vibrant NFT ecosystem on a chain. Just like a chain needs a great block explorer visually displays all types of transactions of Fungible Tokens. Just like that, a chain requires a robust NFT infrastructure for Non Fungible Tokens including the NFT marketplace and launchpad to make its NFT ecosystem thrive. NFTmall team wants to indefinitely support the lovely community here and become an integral part of the NFT ecosystem.","metadata":{"loc":{"lines":{"from":988,"to":988}}}}],["548",{"pageContent":"What's next for NFTmall\nScaling Faster Further and Beyond. We workaholics at nftmall.io are building our platform with scaling in mind from day one. As our platform is live on several main nets and more and more users are joining, we are anticipating exponential growth in our partner chains.\nPhygital NFT Commerce. Being the first to present ‘Phygital’ (Physical & Digital) utility to the NFT world. (Materialize your NFT in its physical form - Verify its authenticity by scanning the QR code on the front) - We already have the MVP of that! Wanna see it? contact us.\nNo-code NFT Collection Minting. In the past, minting an NFT collection required special technical knowledge and hiring developers. We are going to simplify this process to allow creators to create their NFT collections easily and efficiently.","metadata":{"loc":{"lines":{"from":990,"to":993}}}}],["549",{"pageContent":"Public NFT API for 3rd party project integration. Building a robust NFT marketplace for your game is hard. Really. We’ve been there. Fortunately, we can now help you to focus on what you know and do best - your game. Saving a ton of energy, time, and money you would otherwise spend to develop a marketplace for your project. Best part? Your community can trade your NFTs using your own token!\nSocial Features. Enabling users following, NFT likings, commenting, and direct chatting (soon) Enabling social interactions and chat service.\nLaunch of NFTmall DAO. NFTmall Governance Forum is a platform for a higher level of decentralisation.\nPioneer of GameFi Infrastructure - Home of Game NFTs and NFT Games. We want to become the leader in GameFi and MetaFi space. Mint, Buy & Sell your Multichain Game NFTs through NFTmall. Bridging the gap between web2 & web3. NFTmall integration with popular web2 game app through partnership and introducing game Economy & NFT in the gamification.","metadata":{"loc":{"lines":{"from":994,"to":997}}}}],["550",{"pageContent":"NFT Games.🤫 (Did anyone tell you about NFTmall Games? Probably not. because it’s secret yet.) Last but not least, we have an ambitious plan to bring massive Web2 games to the web3 world leveraging NFTmall’s powerful Multichain Game NFT Marketplace. We are in talks with prominent web2 game studios with millions of monthly active players. We are not going to share too much on this topic just yet but our games may hit the market earlier than you think.\nKeep an eye on us. 👀","metadata":{"loc":{"lines":{"from":998,"to":999}}}}],["551",{"pageContent":"Picasarts.io on TRON - The Defi NFT Marketplace\nThe Defi NFT Marketplace on TRON to mint, sell, buy NFTs and Loan, Lending Borrowing, Staking, Loyalty Program for NFTs\n\n\n\n\n\n\n\n\n\nInspiration\nTrading in NFTs has spiked at an unprecedented speed. There are 10+ million NFTs on the market; the highest one was sold for $91.8 million (The Merge). Yet, NFT's function is only restricted to buy-and-sell. Apparently, there is more we can do with them.\n\n→ We decided to create the very first Defi NFT platform on TRON.\n\nAt Picasarts on TRON, we aim to offer NFT owners a convenient, secure and multi-chain platform to make the most value out of their NFTs.\n\nWe chose TRON because it is a comprehensive platform with TVM (highly compatible with EVM); thus, we can save time for R&D and focus more on building features instead. Plus, TRON's BTFS is the perfect low-cost media storage system we are looking for.","metadata":{"loc":{"lines":{"from":1002,"to":1020}}}}],["552",{"pageContent":"What it does\nPicasarts on TRON is an all-in-one financial solution for NFTs. Users can trade, stake, take a loan and join loyalty programs with NFTs.\n\nFundamental functions:\n\nBuy/Sell/Auction NFTs on the marketplace\nSetup Royalty fee\nMinting NFT on TRON\nNFT Launchpad\nFT factory\nIntegrate with TRX Wallet\nUse BTFS to store media\nOutstanding functions:\n\nArrange a loan with NFTs as collateral\nThe web app will act as a platform to connect Lenders and Borrowers. Borrowers can use their NFT as collateral. The value of that NFT is determined by mutual consent. Arrange a loan\n\nStake NFTs\nNFT Creators (Artists) will sell copies of their NFTs to Collectors. Collectors can then stake those NFTs in a pool created by Artists and earn rewards periodically. The reward can be a fungible token issued by Artists on Picasarts on TRON (i.e., ART).","metadata":{"loc":{"lines":{"from":1022,"to":1040}}}}],["553",{"pageContent":"With ART, Collectors can gain an advantage in buying more NFTs from Artists at private sales before launch day. Collectors can also possess governance over Artists and their collections. As a token, ART may also have monetary value and can be traded on a platform (i.e., Ethereum).\n\nCollectors can withdraw their NFTs from the pool at any time.\n\nLoyalty Program on-chain (Coming soon)\nPicasarts on TRON offers a loyalty program for all NFT sellers and buyers on the platform. For each transaction, traders will be rewarded with a number of points, which will then be accumulated and exchanged for promotional codes and other benefits on Picasarts on TRON.\n\nUse Case Diagram\n\nHow we built it\nSince TRON already has a complete toolset from TVM, TronWeb, and TronIDE to REST API, Oracle, BTFS, etc., we decided to develop based on what TRON already supports.\n\nOur tech stack:","metadata":{"loc":{"lines":{"from":1042,"to":1054}}}}],["554",{"pageContent":"Our tech stack:\n\nSolidity and OpenZeppelin library (https://docs.openzeppelin.com/) to write smart contracts because TVM is highly compatible with Ethereum smart contracts.\nTronBox to compile smart contracts.\nTronscan to deploy and interact with contracts on testnet\nTronWeb library interacts with the blockchain and users' accounts on Frontend and simultaneously loads contracts to read and write them.\nTronLink extension to create accounts that interact with dApp.\nBTFS gateway to provide endpoints for uploading and viewing files.\nNginx proxy to map nodes on the server with real domain with SSL certificate\nNodeJS, NextJS and Ant design to complete the web app's Frontend and enhance the user's experience.\nChallenges we ran into\nAlthough the tech stack used inTRON is relatively basic for a Web3 developer, we encountered multiple technical problems which take quite some time to solve:","metadata":{"loc":{"lines":{"from":1054,"to":1065}}}}],["555",{"pageContent":"Issue 1: Some OpenZeppelin's contracts had errors when compiled with TronBox. Thus, we had to customize the contracts by OpenZeppelin.\nIssue 2: TronBox cannot deploy contracts. We chose TronIDE and Tronscan to replace TronBox in deploying.\nIssue 3: Interacting with the wallet on Frontend. Some examples and sample codes do not run correctly, are hard to set up and use obsolete, incompatible libraries. Luckily, the team can still connect to the wallet by customizing these examples based on TronWeb's document.\nFrom a business side, we need to figure out unique features that differentiate Picasarts on TRON from other marketplace platforms. This part is particularly challenging since we have to look for unknown uses of NFTs and validate their potential. We tried to put ourselves in others' shoes to see if there's any other way to maximize the functions of NFTs.","metadata":{"loc":{"lines":{"from":1067,"to":1070}}}}],["556",{"pageContent":"Accomplishments that we're proud of\nBuild an NFT Marketplace on a new platform with limited resources.\nOvercome technical challenges to accomplish goals.\nPromote the use of NFTs and diversify the value of NFTs.\nDevelop a full-functioning platform on 3rd attempt.\nGain a lot of in-depth knowledge about blockchain and finance.\nAble to take a loan with our own NFTs.\nWhat we learned\nThroughout the journey, we have learned to","metadata":{"loc":{"lines":{"from":1072,"to":1080}}}}],["557",{"pageContent":"Build a complete dApp on TRON.\nDeploy a smart contract and the concept of it on TRON Blockchain. Use the TronWeb library to interact with Wallets and Smart Contracts.\nUnderstand BTFS's model & usage, as well as Nodes configuration.\nGeneral knowledge of libraries and APIs in various languages.\nTechnical knowledge on how to increase the value of NFTs, from which to promote the launch of more NFT projects.\nBuild up new business models/features: NFT loan, pool staking and loyalty program.\nWhat's next for Picasarts.io on TRON - The Defi NFT Marketplace\nGo live on TRON mainnet.\nNFT Lending and Borrowing: Improve NFTs Validation scheme.\nConfigure BTFS into a storage host to receive the host Node reward.\nSeeking organic users and building a community.\nImprove user experience and flow.\nOptimize the Web Frontend page to look more artistic.\nCall for investment and mentoring.\n\nStation Bids\nFully decentralized NFT auction house on TRON","metadata":{"loc":{"lines":{"from":1082,"to":1098}}}}],["558",{"pageContent":"Station Bids\nFully decentralized NFT auction house on TRON\n\n\n\n\n\n\n\nInspiration\nWhen I joined this hackathon I wanted to know the needs of this ecosystem. I searched for a bit and decided to push the progress of the web3 and build a fully decentralized NFT auction house.\n\nThere are currently no tools to auction your NFTs in a fully decentralized way. Most people use centralized solutions, which goes against the main blockchain principles. Creating a decentralized auction house is the next step in web3 growth. Also, I wanted to make it really intuitive to use, so that every user could benefit from that project.\n\nWhat it does\nIt allows users to create NFT auctions on TRON in a fully decentralized way.\n\nUsers can create auctions and interact with a smart contract using the intuitive frontend. Additionally, it's deployed on the IPFS, which makes the project even more decentralized.\n\nIt also has an easy and intuitive interface to manage and view your portfolio:","metadata":{"loc":{"lines":{"from":1098,"to":1117}}}}],["559",{"pageContent":"It also has an easy and intuitive interface to manage and view your portfolio:\n\nTron won on your auctions\nNFTs that you successfully auctioned\nAll currently available auctions\nAll unclaimed auctions\nHow we built it\nThe project is built and deployed on the growing Tron ecosystem. Its core logic is based on EVM-based smart contracts written in Solidity. Frontend is created using React with Typescript to make a code more readable and easier to understand for new developers. It's also deployed on IPFS, which makes it more decentralized.\n\nChallenges we ran into\nCompleting everything before the deadline was really hard. I wish I had more time to add even more features. The core infrastructure is there and users can test the working and deployed version of the application.\n\nWhat we learned\nLearned what is Tron and how it can be used for future projects. During my research, I learned a lot about the current Tron ecosystem and technical aspects.","metadata":{"loc":{"lines":{"from":1117,"to":1130}}}}],["560",{"pageContent":"What we learned\nLearned what is Tron and how it can be used for future projects. During my research, I learned a lot about the current Tron ecosystem and technical aspects.\n\nWhat's next for\nIf I get to win the hackathon I want to further develop this project and turn it into a feature-rich platform for everything related to NFT management, auctioning, and trading. In my opinion, it will be a very valuable NFT project for the Tron ecosystem.\n\nSwap Station\nSwap Station is a one of a kind marketplace for NFT collectors to showcase, discover, and swap NFTs across different blockchains. So instead of selling NFTs for crypto, you swap them!\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat it does\nSwap NFTs across different blockchains\nSwapStation.io is a one of a kind marketplace for NFT collectors to showcase, discover, and swap NFTs across different blockchains. So instead of selling NFTs for crypto, you are swapping them for other NFTs whether they're on the same blockchain or across different chain.","metadata":{"loc":{"lines":{"from":1130,"to":1153}}}}],["561",{"pageContent":"You can import any NFTs to SwapStation, put your token up for trade and start receiving swap offers. Likewise, if you see anything you like you can place an offer using a token you wish to exchange for. The swap takes place when both parties accept the trade.\n\nOne of the best things about SwapStation is that nearly everything is free. We wanted to make this platform available to everyone, so no gas fee is required when importing, creating listings and making offers. The only time a payment is required is when an actual swap transaction takes place.","metadata":{"loc":{"lines":{"from":1155,"to":1157}}}}],["562",{"pageContent":"Features\nImport any NFT into your personal collection.\nPut your tokens up for trade by creating discoverable listings.\nBrowse other listings to find interesting NFTs where you can offer up your own NFT to exchange for it.\nManage your collections, listings and offers through a personal dashboard.\nAccept offers for your NFT to make an exchange.\nSwap transactions takes place in the blockchain and is immutable.\nNo gas fees for importing, listing and making offers. You only pay when a swap is confirmed.\nHow we built it\nProcess\n\nSeller/Maker imports NFT from supported blockchains into SwapStation, then puts their NFT up for trade by creating a listing.\n\nBuyer/Taker browses available listings and make an offer on a listing by importing their own NFT into SwapStation.\n\nIf seller accepts an offer, the listed NFT is transfered to the buyer and the offered NFT is transfered to the seller.\n\nSeller can cancels a listing and remove it from discoverability and all pending offers.","metadata":{"loc":{"lines":{"from":1159,"to":1176}}}}],["563",{"pageContent":"Seller can cancels a listing and remove it from discoverability and all pending offers.\n\nBuyer can retract an offer for a listing if it has not been accepted by the seller yet.\n\nSAME-CHAIN SWAP PROCESS\nSame-Chain Process\n\nCROSS-CHAIN SWAP PROCESS\nCross-Chain Process\n\nTechnologies\nArchitecture\n\nArchitecture\n\nWeb Application (UX)\n\nThe frontend web application is developed in React using the NextJS framework. Currently supports integration with TRON blockchain via TronLink and TronWeb. Upcoming integrations with Ethereum, NEAR and NEO blockchains.\nAPI\n\nThere is a REST API that interface between the frontend web application with the underlying offchain database. The API is developed in NodeJS Express. We have plans to expand this API in the future to allow for third party integrations with SwapStation.\nOffchain Database","metadata":{"loc":{"lines":{"from":1176,"to":1197}}}}],["564",{"pageContent":"Most of the data powering the frontend application is held in an offchain database, which includes imported NFT collections, listings, offers and carbon copies of swap tranasction records. The only time where a transaction takes place in the blockchain is when an offer is accepted and a swap needs to take place.\nThe primary purpose of this offchain database is to allow for zero fees so anyone can create as many listings and offers as they wish without worrying about cost, and they only need to pay once they decide to make a swap.\nBlockchain Smart Contract (TRON)\n\nSwapStation: TRON Smart Contract writen in Solidity repesenting the swap contract. This contract is responsible for the swap transaction that takes place when an offer is accepted. See SwapStation Contract functions for functions.\n\nNFT: A sample ERC-721 NFT contract using OpenZeppelin standard. We are using this contract as a sample for developing and testing the integration with the application.","metadata":{"loc":{"lines":{"from":1199,"to":1205}}}}],["565",{"pageContent":"NFT: A sample ERC-721 NFT contract using OpenZeppelin standard. We are using this contract as a sample for developing and testing the integration with the application.\n\nChallenges we ran into\nThe challenging part about trying to build multichain support is that each blockchain has their own development stack, integration means and various NFT standard: TRC-721 (TRON), ERC-721 (Ethereum), NEP-171 (NEAR), NEP-11 (NEO). This meant that we will need to build contracts and integrations for each blockchain that we want to support. We forsee this as a huge task but we're taking things one step at a time by starting with TRON.\n\nAccomplishments that we're proud of\nWe're particularly happy to complete the MVP in a short time, and to have developed the technical details required to bring this project to life.\n\nFuture work\nThere's a lot of work to be done before the product could be considered production ready:","metadata":{"loc":{"lines":{"from":1205,"to":1214}}}}],["566",{"pageContent":"Future work\nThere's a lot of work to be done before the product could be considered production ready:\n\nPrepare a strategic roadmap of the project which will include development and marketing efforts.\nBuild the core team.\nRefine the user experience for better NFT discovery and collections management.\nExpand the number of supported blockchains.\nPenetration tests and close any gaps in security vulnerabilities.\nImplement transaction fees as a monetization strategy so the project can be self-sustainable.\n\n\nMeson\nMeson introduces a next-gen cross-chain user experience on stablecoins - lightning-fast swap with unbelievably low cost among Ethereum, various high-performance public chains, and Layer 2's.\n\n\n\nWhat is Meson?\n\nMeson introduces a next-gen cross-chain user experience on stablecoins - lightning-fast swap with unbelievably low cost among Ethereum, various high-performance public chains, and Layer 2's.\n\nWhy swap on Meson?","metadata":{"loc":{"lines":{"from":1214,"to":1234}}}}],["567",{"pageContent":"Why swap on Meson?\n\nWith revamped tech stack and product design, Meson has launched on 12 high-performance chains including Ethereum, BNB Chain, Tron, Avalanche, Polygon, Fantom, Harmony, Aurora (NEAR), Evmos (Cosmos), Conflux eSpace, as well as Layer-2 networks such as Arbitrum and Optimism, providing minutes-fast, super economical, and point-to-point stablecoins swaps with no slippage nor gas fee.\n\nMeson Product Highlights\n\nMeson is a stablecoins swap protocol facilitating cross-chain swap exchange among any network. Currently supporting Ethereum, BNB Chain, Tron, Avalanche, Polygon, Fantom, Harmony, Aurora (NEAR), Evmos (Cosmos),Conflux eSpace, as well as Layer-2 networks such as Arbitrum and Optimism, with additional EVM/non-EVM networks planned throughout the Year of 2022.\n\nMeson makes swap fees as low as 0 and gas-free for non-Ethereum chains with transactions finality in 1-2 minutes.","metadata":{"loc":{"lines":{"from":1234,"to":1242}}}}],["568",{"pageContent":"Meson makes swap fees as low as 0 and gas-free for non-Ethereum chains with transactions finality in 1-2 minutes.\n\nMeson can do cross-chain, stablecoins exchange, and token transfer transactions altogether in one single swap, with ZERO slippage and gas fee.\n\nMeson provides intuitive UI with a dedicated 1-on-1 live support channel.\n\nHow Meson Achieve Fast and Economical Swaps\n\nTechnically, Meson is a stablecoins swap protocol based on atomic swaps, creating a more secured tech stack that's independently operating from existing bridging solutions.\n\nOur solution will be a great complement to existing cross-chain bridges, providing a lot more direct and cost-saving cross-chain channels to ever-growing Meson networks of chains. With Meson, users get more incentives to move funds with the minimum cost of cross-chain to try out the projects on cross-chain ecosystem and in turn expand the user base for both Meson and overall crypto community.\n\nThe Road Ahead — Meson’s roadmap","metadata":{"loc":{"lines":{"from":1242,"to":1254}}}}],["569",{"pageContent":"The Road Ahead — Meson’s roadmap\n\nAfter more than six months of product design, function development, and robust testing, Meson App has been flawlessly running several months on both testnets and main nets, during which world-renowned auditors have been invited to conduct independent code audits on Meson. The first audit report will be made available to the general public together with Meson App.\n\n\n\nDazzle Protocol\nThe easy first step into DeFi","metadata":{"loc":{"lines":{"from":1254,"to":1261}}}}],["570",{"pageContent":"Dazzle Protocol\nThe easy first step into DeFi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInspiration\nAccording to studies, by December 2021 there were 80 million Blockchain wallet users worldwide and that is equivalent to only 1% of the world population. In countries like Venezuela or Argentina, where the stability of the local currency is low due to extraordinary economic situations, it is where the adoption of cryptocurrencies is most observed, specifically in situations where people send their relatives money for various expenses or want to protect themselves from the strong effects of the inflation by exchanging the local currency for dollar-pegged stablecoins such as USDC, however, what about those who do not have virtual wallets? How many steps do they need to take to create one and add funds to it? Taking into account that in the first handling it should be: Safe, practical and fast.","metadata":{"loc":{"lines":{"from":1261,"to":1281}}}}],["571",{"pageContent":"What it does\nDazzle is a dApp that allows you to send tokens and NFT’s to anyone through a simple link, so you can onboard your friends into DeFi just by sending them a link via email or your favorite messaging app.\n\nWith the Smartwallet feature users can get a wallet who is linked to a social account like Google, Facebook, Github, Twitter, etc. That's the only they need to send tokens, they can receive tokens in the Smartwallet too. At the moment only the Google authentication provider is enabled and is working with the Tron blockchain integration.\n\nHow we built it\nDazzle’s architecture is made up of three parts: the Smart Contracts for Dazzle Protocol and the Smartwallets which are made in Solidity and deployed over the Hedera network and Tron blockchain, the backend where we have an API with ExpressJS and the frontend made with ReactJS. For the interaction with the user’s wallet, Hashpack is used for the Hedera Network and TronLink is selected for Tron.","metadata":{"loc":{"lines":{"from":1283,"to":1289}}}}],["572",{"pageContent":"Challenges we ran into\nWe couldn't deploy the Smartwallet contract using the Clone Factory pattern, that pattern would allow us to save even more in fees when deploying a user's Smartwallet. As workaround we are using a regular contract deploy for them.\n\nAccomplishments that we're proud of\nMake a multichain deploy\nModel an easy and accessible gateway to the DeFi ecosystem.\nThe Smartwallet is experimental and something that we are very excited to implement as direct and simple experiences at this level we believe are key to mass adoption.\nWhat we learned\nSmart contracts in Tron and interactions with TRC20 and TRC721 standards.\nInteractions between the dApp and the TronLink wallet.\nWhat's next for Dazzle Protocol\nRe-test the implementation of the Clone Factory pattern for the Smartwallets.\nInclude a better fee calculation strategy for Smartwallet interactions.\nDeploy in more blockchains.","metadata":{"loc":{"lines":{"from":1291,"to":1304}}}}],["573",{"pageContent":"Tron Security Dashcam\nThe Tron Security Dashcam is a start-of-the-art collection of risk dashboards that monitors fishy activity that happens on-chain, & also notifies Tron Security experts about what's happening in Web3.\n\n\n\n\n\n\n\n\n\n\n\nInspiration\nI'm a Web3 Security engineer and data scientist. Please check out my Web3 security company Rektify AI, we are building the future of decentralized blockchain security and have a weekly radio show every Saturday discussing security best practices and weekly hack recaps.","metadata":{"loc":{"lines":{"from":1306,"to":1320}}}}],["574",{"pageContent":"I’ve picked up a lot of experience analyzing DeFi hacks in my former position as a head database engineer at a DeFi insurance firm and doing smart contract audits for Code4rena. Throughout my research and development, I learned that the dream of mass adoption is dependent upon blockchain education and security. Most of the vulnerabilities that pillage cryptocurrencies are not scams or rug pulls, it’s technical errors made apparent through smart contracts, servers, and central points of failure. As far as the Tron blockchain, I wanted to create a monitor for the protocol since it is susceptible to DDos and Dos due to its nature as a PoS protocol.\n\nWhat it does\nMonitors fishing activity on the blockchain, Tron bridges, and keeps inventory on holders to ensure the security of the network. The Tron Security Dashcam(TSD) is a web application that can be of use to the Tron foundation to prevent attacks from being deployed on the network.","metadata":{"loc":{"lines":{"from":1322,"to":1325}}}}],["575",{"pageContent":"How we built it\nFor the front-end we used javascript, html, css, and WebFlow to bring the stack together. Users are able to toggle the data visualizations at the bottom of the dashboard. For analysis and data visualizations we used Python. We also launched a STORJ instance to decentralize our data used for the web application.\n\nChallenges we ran into\nThe biggest challenge was finding open-source relevant attack data provided by TRONSCAN. The toughest part was finding more intricate data that would contribute to the presence of a vulnerability. I’m sure if we were afforded this data the data products we created would be more dynamic and insightful. We were disappointed that we were able to use Covalent API because the Tron chain is not compatible with their platform but we were about to defeat that hurdle by creating an API Key.","metadata":{"loc":{"lines":{"from":1327,"to":1331}}}}],["576",{"pageContent":"Accomplishments that we're proud of\nPlugging the back-end and front-end together Launching the web app Deploying the Tron API Tracking the growth of Tron holders\n\nWhat we learned\nTRONSCAN is very different from Etherscan. Typically with blockchain scanner systems with a plethora of raw data is a blockchain data scientist's greatest wish. However, the TRONSCAN allows access to download .csv files instantly as well as real-time images of on-chain event data. We also learned that creating a security product requires security and our ideas will be addressed in future work.\n\nWhat's next for Tron Security Dashcam\nIn the future, we plan to make the bridge more dynamic and interoperable. We worked with the data that was open-source and was relevant to the potential that the Tron blockchain had to display a vulnerability. Also, increasing the number of dashboards from 4 to 16 would be a next step in making TSD a reliant product.\nHikaru finance\nInvest. Trade. Grow.","metadata":{"loc":{"lines":{"from":1333,"to":1342}}}}],["577",{"pageContent":"Beta in Testnet\nTry Hikaru here: https://hikaru.fi\n\nInspiration\nTRON is a powerful platform, but at the moment it does not provide enough tools for investors.\nThe tokenstation.dev team is ready to present our worthy solution to this problem - the Hikaru.fi Protocol. It is an automated portfolio manager and trading platform.\n\nHikaru for investors\nHikaru.fi is an automated portfolio manager that allows you to diversify your holdings smarter than ever. Instead of paying fees to a fund manager, let a decentralized community of professional arbitrageurs rebalance your portfolio. What's more, you'll also earn on the commissions.\n\nJust set and forget - it is really that simple.","metadata":{"loc":{"lines":{"from":1350,"to":1360}}}}],["578",{"pageContent":"Just set and forget - it is really that simple.\n\n\n\nHikaru for traders\nHikaru.fi is a trading platform for everyone. Any user can easily exchange cryptocurrency in a convenient form of swap, getting access to a huge liquidity market \"under the hood\". Professionals, on the other hand, find a huge number of new earning opportunities for themselves thanks to holders who need to rebalance their portfolios.","metadata":{"loc":{"lines":{"from":1360,"to":1365}}}}],["579",{"pageContent":"Hikaru for devs\nHikaru.fi targets easy integration of any DEX that can follow predetermined interfaces that can be expanded as the system grows.\nFor the start of the project we decided to provide a very powerful utility to TRON community - pools that consist of multiple tokens and can have unequal distribution in pool. In classical pools (Uniswap V2-like) - tokens are in 1:1 ratio, in Hikaru.fi pools token ratio is a customizable parameter. This kind of pools is useful for different DeFi projects as it enables them to be more flexible and users as it expands available options for investment.\n\nFor more technical details please check our GitHub\n\nHikaru for beginners\nHikaru.fi is also actively studying the issues of potential users - people who are not yet familiar with cryptocurrencies, but would really like to “try”. For them, we are already developing a completely new experience from the use of DeFi. Just stay tuned.","metadata":{"loc":{"lines":{"from":1369,"to":1376}}}}],["580",{"pageContent":"Hikaru for TRON ecosystem\nHikaru.fi is a possibility to attract a new stream of users to the TRON ecosystem. Traders will find new arbitrage opportunities on the blockchain. Investors will get a completely new financial instrument: more pragmatic and less risky than Sunswap due to diversification, and more profitable than JustLend.\n\nTherefore, Hikaru.fi will only expand the already incredible possibilities of the TRON ecosystem.\n\nWink Financial\nA Web3 Payroll & Treasury Management solution for web3 companies. Our mission is to empower DAOs, blockchain gaming studios & crypto companies to operate with agility and financial clarity.\n\n\n\n\n\n\n\n\n\nInspiration\nPayroll is one of the most annoying and least attractive things to undertake. On top of that, it takes you out of focus and is not the core of your business. It is a problem on a global scale, and to top it all off, in crypto, it is a repetitive, tedious, manual task that is very likely to make mistakes.","metadata":{"loc":{"lines":{"from":1378,"to":1395}}}}],["581",{"pageContent":"CEOs dedicate themselves to doing this, they lose up to 5% of their monthly time. Then, when the company grows, they have to delegate it, and usually it is to a person, who knows nothing about the crypto world.\n\nOn the other hand, our Head Of Payroll was our major inspiration, a 55+ year old user, who had never used anything in the crypto world. We developed the APP so that she can pay salaries quickly, safely, and in a single click, however many employees you have.\n\nWhat it does\nWink is a Web3 Payroll & Treasury Management solution for web3 companies that allows companies to pay with any crypto faster and easier than ever.","metadata":{"loc":{"lines":{"from":1397,"to":1402}}}}],["582",{"pageContent":"What it does\nWink is a Web3 Payroll & Treasury Management solution for web3 companies that allows companies to pay with any crypto faster and easier than ever.\n\nThrough an Excel file you will be able to pay to yours employees, it’s too simple. After that, you choose how to hold their working capital, whether it be in BTC, ETH, or any stablecoin or even all of them combine. Done this, employees can also choose in which Token’s they want to collect their salary and in which wallet they want it to be deposited, being able to change it freely, without having to report the change to anyone.\n\nFor example: you can have all your working capital in USDT, and one of your employees can choose to receive 100% of their salary in BTC, and another can choose 50% in ETH and 50% in DAI.","metadata":{"loc":{"lines":{"from":1402,"to":1407}}}}],["583",{"pageContent":"For example: you can have all your working capital in USDT, and one of your employees can choose to receive 100% of their salary in BTC, and another can choose 50% in ETH and 50% in DAI.\n\nIn this way, our Web3 solution offers transparency, fast delivery, optimized fees and a user experience prepared for people who do not know about blockchain. In addition, no KYC process is required, facilitating and speeding up onboarding for any type of company that is AML compliant.","metadata":{"loc":{"lines":{"from":1407,"to":1409}}}}],["584",{"pageContent":"How we built it\nOur solution was built after we executed a wrong transaction. As a result of this, we lost the total amount transferred. Our first MVP was built around one-to-one transfers over the Ethereum blockchain. Afterwards, we worked on batch transfer. This allowed us not only to save operation time but also to save on gas costs. Finally, we could launch our Web3 solution over the Binance Smart Chain blockchain. Wink started as internal software of Think and Dev a devshop, and when we realized it had the potential to become a whole product. So we made a spin off and dedicate a 5 people team, composed of full stack js developers with experience in blockchain and smart contracts.\n\nChallenges we ran into\nOne of the biggest challenges was that we had to redesign the customer journey in order to improve the user experience. On the other hand, we had to overcome several technical obstacles related to multiple blockchains.","metadata":{"loc":{"lines":{"from":1411,"to":1415}}}}],["585",{"pageContent":"Accomplishments that we're proud of\nWe have designed a solution that simplifies payments and expense management by providing efficient tooling to save money and time. We offer a quick onboarding process with no KYC, the ability to pay salaries in one minute and on time, multi-coin, automation, and the capability to save up to 90% on fees and costs.\n\nWhat we learned\nSome of us are IT profiles, so we had to learn several concepts related to the financial and payroll processes. According to that, we noticed that it is common that people, in general, don't have enough financial knowledge. We've learned that blockchain space needs financial infrastructure to reduce errors, improve processes and help people without deep technical knowledge","metadata":{"loc":{"lines":{"from":1417,"to":1421}}}}],["586",{"pageContent":"What's next for wink\nPayroll is just the beginning and it is the spearhead to insert the new products that we are going to launch in the next 18 months. Expanding our range of services not only to the universe of payments 3.0, but also to treasury, investments, loans, and more. In addition, we are going to add new features such as: Dashboard, Reporting, Integration with quickbooks, SAP, Integration with exchanges.\n\nshielding.cash\nshielding transfer of BTTC based on ZKSnark\n\nInspired by Tornado Cash on Ethereum, we build privacy solution on BTTC.\n\nWhat it does\nShielding Cash is a decentralized, non-custodial privacy solution built on BTTC. It improves transaction privacy by breaking the on-chain link between recipient and destination addresses.\n\nHow we built it\nOpen the shielding.cash app directly or follow the instruction on https://github.com/shieldingcash/shielding-ui-minified.","metadata":{"loc":{"lines":{"from":1423,"to":1435}}}}],["587",{"pageContent":"How we built it\nOpen the shielding.cash app directly or follow the instruction on https://github.com/shieldingcash/shielding-ui-minified.\n\nChallenges we ran into\nFully understood zero knowledge proofs (zk-SNARKs) to achieve privacy and porting Tornado Cash to BTTC network.\n\nAccomplishments that we're proud of\nTransaction privacy solution on BTTC.\n\nWhat we learned\nPrivacy knowledge especially zero knowledge proofs(zk-SNARKS)\n\nComplete skills for web3 development\n\nWhat's next for shielding.cash\nERC20 token deployment on BTTC\n\nShielding Cash support on TRON network\n\ntpMarket - Prediction Market on Tron\ntpMarket is a prediction market where users can be both market makers and takers. It supports 3 markets on testnet (TRX, BTC and JST) and 9 on mainnet (TRX, BTC, JST, ETH, SUN, NFT, BTT, USDT, USDC).","metadata":{"loc":{"lines":{"from":1435,"to":1455}}}}],["588",{"pageContent":"Inspiration\nAfter seeing multiple accounts on twitter engaging in making bets against each others, most famously the Algod vs Do Kwon bet regarding Luna and UST https://www.theblock.co/post/137687/terraform-labs-do-kwon-bets-1-million-on-lunas-future-price, we saw that a prediction market for over/under bets is necessary and sought after in the crypto space. With oracles and smart contracts it's possible to remove the escrow, and automate the whole process from the creation of a bet to the payout of a bet.\n\nWhat it does\nAs a user you can create a market or buy a side of market that someone else has created. Two example scenarios are:\n\nYou are bullish BTC and is certain that it will be above $30k on January 1st 2023.\nYou are bearish a stablecoin and think that it will depeg.\nWe take example 1 from above and show how a bet can go from creation to payout on tpMarket. First, you'll need to choose some parameters:","metadata":{"loc":{"lines":{"from":1459,"to":1467}}}}],["589",{"pageContent":"Strike Price: $30 000 (the price BTC needs to hit for you to win)\nExpiry: 2023-01-01 (the end date)\nPosition Size: 1000 TRX (what should the payout be?)\nOver Odds: 5.00 which is the same as 20% (your side)\nUnder Odds: 1.25 which is the same as 80% (the opponent's side)\nNOTE: Over Odds + Under Odds = 100% always because we take 0 fees.\n\nUnder Price = Position Size / Under Odds = 1000 / 1.25 = 800 TRX\n\nSomeone buys it for 800 TRX which means that you'll receive 800TRX, making the input for your bet:\n\nYour stake = Position Size - List Price = 1000 - 800 TRX = 200 TRX\n\nAnd your opponents stake is of course 800 TRX. This table explains what will happen on January 1st:","metadata":{"loc":{"lines":{"from":1469,"to":1482}}}}],["590",{"pageContent":"Your stake = Position Size - List Price = 1000 - 800 TRX = 200 TRX\n\nAnd your opponents stake is of course 800 TRX. This table explains what will happen on January 1st:\n\nBTC PRICE\tWINNER\tPAYOUT\n$BTC is above $30000 ->\tYou\t200 TRX * 5.00 = 1000TRX\n$BTC is below $30000 ->\tNot You\t800 TRX * 1.25 = 1000TRX\nSo to summarize, if you win you'll get 1000TRX and your stake is only 200 TRX, which makes sense since 200 * 5.00 = 1000 and your odds was 5.00! When 2023 is here and if BTC is above $30k then you just go to the page that's showing active positions and click exercise, and you'll receive the payout.\n\nHow we built it\nThere are two major smart contracts, Exchange.sol which handles how markets gets transferred between users and PredictionMarket.sol which handles the creation and payouts of markets. The frontend is built with Typescript and React.","metadata":{"loc":{"lines":{"from":1482,"to":1492}}}}],["591",{"pageContent":"Challenges we ran into\nThe WinkLink pricefeeds are stale on testnet (not updated since october), which is a shame since they would be useful when testing. That made it a little harder for us.\n\nAccomplishments that we're proud of\nThe fact that it's now really simple to go from the creation of a market all the way to the payout. Also the fact that you as a user can be both a maker and a taker.\n\nWhat we learned\nThat everything that needs for a market to be created is a maker, and when everyone can be a maker then you'll hopefully get tons of markets.\n\nWhat's next for tpMarket - Prediction Market on Tron\nKeep working on the UI and the general UX of the website\nOptimize the contracts to consume less energy.\nGet support for more markets, and they don't have to be for cryptocurrencies.\nMake it possible to have whatever token you want as collateral for a position","metadata":{"loc":{"lines":{"from":1494,"to":1507}}}}],["592",{"pageContent":"Allbridge Core\nAllbridge Core enables users to transfer native stablecoin liquidity between Tron and various EVM/non-EVM chains via decentralized cross-chain messaging protocols with an additional privacy layer.\n\n\n\n\n\n\n\nInspiration\nAllbridge officially launched back in July 2021. In our time of working on Allbridge, we have gained valuable experience in providing seamless cross-chain transfers. Since the mainnet launch, our users bridged over $6.2B by transferring assets between 14 supported networks.\n\nWhile the original bridge architecture supported both the native and wrapped types of transfers, the last couple of months clearly demonstrated the shift in the market tendencies toward the provision of native stablecoin transfers.\n\nIn our latest product, Allbridge Core, we set out to create the ultimate bridge experience, enabling users to bridge stablecoin liquidity between both EVM and non-EVM networks by offering a convenient platform for native stablecoin swaps.","metadata":{"loc":{"lines":{"from":1510,"to":1524}}}}],["593",{"pageContent":"Our particular focus on the Tron ecosystem allows us to tap into the largely underutilized market of TRC20 USDT by the existing products on the market.\n\nThe new bridge architecture encompasses all of our previously acquired experience and focuses on solving the sore points in the cross-chain transfers by providing a simple and intuitive one-click bridge experience, connecting Tron with EVM and non-EVM networks.\n\nWhat it does\nAllbridge Сore enables users to transfer stablecoins in a fast, cheap, and trustless way by providing a native bridge that connects EVM and non-EVM chains via decentralized cross-chain messaging protocols with an additional privacy layer.\n\nIn addition, the platform offers farming opportunities to the liquidity providers, who may leverage its advantages to supply single-asset liquidity in exchange for stablecoin rewards.","metadata":{"loc":{"lines":{"from":1526,"to":1533}}}}],["594",{"pageContent":"In addition, the platform offers farming opportunities to the liquidity providers, who may leverage its advantages to supply single-asset liquidity in exchange for stablecoin rewards.\n\nHow we built it\nThe development began in mid-June, after the bridge architecture had been finalized. At first, we created an MVP of the new architecture for internal testing. We proceeded with outlining the UI of the Allbridge Core and designing it around the new stablecoin bridge.\n\nAt the same time, we were working on developing our cross-chain messaging protocol for conducting native stablecoin transfers on Tron.\n\nIt is our pleasure to showcase the result of our development process by presenting the test transfers between Tron and Ethereum in our demo video.\n\nChallenges we ran into\nOne of the main challenges was developing a model enabling the support of the native stablecoin transfers at low slippage and ensuring that networks have sufficient liquidity to process the transactions.","metadata":{"loc":{"lines":{"from":1533,"to":1543}}}}],["595",{"pageContent":"A lot of attention has been put into testing the functioning stable curve exchange model, which would balance out the exchange rates based on the size of the liquidity pools and reduce slippage.\n\nMoreover, Allbridge Core utilizes single-sided liquidity pools, facilitating cross-chain transfers of native liquidity by incentivizing the liquidity provision of native stablecoins on each chain.\n\nAccomplishments that we're proud of\nWhile certain messaging protocols are limited in their coverage of networks, we circumvented the issue by creating a flexible bridge architecture, enabling us to use any cross-chain messaging protocol on the market, thereby expanding the list of available chains our bridge may offer.\n\nWe’ve also built an internal messaging layer, which allows us to complete the transfers of the native stablecoins between Tron and other supported networks.","metadata":{"loc":{"lines":{"from":1545,"to":1552}}}}],["596",{"pageContent":"We’ve also built an internal messaging layer, which allows us to complete the transfers of the native stablecoins between Tron and other supported networks.\n\nIn addition, while most bridges currently require several steps to transfer assets from one network to another, Allbridge Core provides a one-click solution to move your stablecoin assets and offers a possibility to convert part of the transfer amount into the gas token.\n\nLastly, the bridge will offer customized security levels ranging from password-protection to ZK transactions, allowing you to perform anonymous transfers.\n\nWhat we learned\nWe learned more about designing a stable curve exchange and explored various cross-chain messaging protocols on the market.\n\nThis experience has provided us with an opportunity to join the Tron ecosystem and contribute to its expansion by building a product that will enable more users to access Tron from various EVM and non-EVM networks.","metadata":{"loc":{"lines":{"from":1552,"to":1561}}}}],["597",{"pageContent":"What's next for Allbridge Core\nThroughout the summer, we will work on finalizing the product and integrating more chains and tokens.\n\nWhen the bridge is thoroughly tested and deployed, the ability to upgrade the contracts will be disabled, as well as the admin access to ensure that the bridge remains non-custodial.\n\nWe aim to release the Allbridge Core to mainnet this autumn and cross the $1,000,000,000 milestone in bridged volume by the end of 2022.\n\nScore Milk\nScore Milk is a platform built for the easy onboarding of games to Web 3.0. Our solutions include PvP patent pending bot deterrence, community/guild solutions, and a game dev SDK for easy onboarding.","metadata":{"loc":{"lines":{"from":1563,"to":1571}}}}],["598",{"pageContent":"Inspiration\nWe started building our platform in early 2020 when most of the blockchain games in existence were gambling applications. Although gambling is a big market, we felt that we needed a way to bring traditional gamers to Web 3.0 at a large scale. We set out to build a scalable gaming architecture that would allow the average gamer to compete with their peers in PvP skill-based games. Over the last 2+ years, our platform has matured and adapted to unite gamers, game developers, and guilds.\n\nAs a gaming studio who wanted to bring fun games to the blockchain space, we also set out to build several proof-of-concept games that will launch exclusively on our platform.","metadata":{"loc":{"lines":{"from":1575,"to":1578}}}}],["599",{"pageContent":"As a gaming studio who wanted to bring fun games to the blockchain space, we also set out to build several proof-of-concept games that will launch exclusively on our platform.\n\nWhat it does\nOur platform provides Web 3.0 solutions that allow game developers to easily integrate and monetize their games via our platform, without the need to be a blockchain developer. It allows any game to utilize our payment module for tournaments and competitive gaming. This will allow hundreds of thousands of games to become a part of Web 3.0 without much effort. From simple games such as Street Fighter and PacMan, to AAA games such as Call of Duty, they can now integrate into web 3.0 with a sustainable monetization model.","metadata":{"loc":{"lines":{"from":1578,"to":1581}}}}],["600",{"pageContent":"How we built it\nWe built our platform with scalability in mind. We are using a microservices architecture in order to facilitate scaling as our platform grows. We also use AWS scaling solutions to accomplish this. We had to test many technologies before finding the right one that fits our needs.\n\nChallenges we ran into\nWhen providing PvP gameplay to users, security is the #1 challenge for the platform. In April 2021, the ScoreMilk co-founders filed for a patent that aids in the deterrence of bots and cheaters. This technology is now patent pending. What it does is that it utilizes human-only readable content as actual gameplay elements. This gives the real player an advantage over any software bot.\n\nAccomplishments that we're proud of\nBuilding a solution that addresses some of the biggest barriers to blockchain gaming adoption.","metadata":{"loc":{"lines":{"from":1583,"to":1590}}}}],["601",{"pageContent":"Accomplishments that we're proud of\nBuilding a solution that addresses some of the biggest barriers to blockchain gaming adoption.\n\nWe already have a working prototype where one of our proof-of-concept games, called Snake, is integrated into our beta. It can be tested from the link provided below. You can currently play with TRX or Wrapped Ethereum(Polygon). More blockchains will be integrated soon. This has not been made public as we are still tweaking it. It is simply shared with you for testing. Also, this game already utilizes our patent pending tech.\n\nlink\n\nWhat we learned\nWe learned that blockchain gaming has a lot of challenges. Nonetheless, a good team can overcome these challenges with creativity and perseverance.","metadata":{"loc":{"lines":{"from":1590,"to":1598}}}}],["602",{"pageContent":"link\n\nWhat we learned\nWe learned that blockchain gaming has a lot of challenges. Nonetheless, a good team can overcome these challenges with creativity and perseverance.\n\nWhat's next for Score Milk\nOur next goal is to grow our network and execute our business plan in order to bring mass adoption to blockchain gaming. We are looking to find strategic partners and investors that will help us grow and become the best gaming platform for Web 3.0.\n\n\nCaloriecoin E2E JumpGame\nE2E (Excercise To Earn) Smart Jump Rope Game CalorieCoin\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n☑️ 1.Inspiration\nhttps://res.cloudinary.com/devpost/image/fetch/s--vRfc2dbV--/c_limit,f_auto,fl_lossy,q_auto:eco,w_900/https://i.esdrop.com/d/f/heh2xfCDQX/tmCQpazIJT.jpg\n\nExercises, including jumping rope, have a problem that they are boring because there is no motivational means. CALORIECOIN TRON DAPP “JUMPCOIN” SOLVES THIS PROBLEM.\n\nhttps://i.esdrop.com/d/f/heh2xfCDQX/FWoRxHayyz.png","metadata":{"loc":{"lines":{"from":1598,"to":1643}}}}],["603",{"pageContent":"https://i.esdrop.com/d/f/heh2xfCDQX/FWoRxHayyz.png\n\nExisting IoT skipping ropes simply collect exercise record data,There is no jump rope using E2E, metaverse game , and NFT But Calorie coin jump rope has a distinct difference in ideas compared to existing products. Using Metaverse technology and TRON blockchain technology\n\nCALORIECOIN TRON DAPP “JUMPCOIN” SOLVES THIS PROBLEM.\n☑️ 2.What it does\nDistictive Point 01) Exercise To Earn (E2E)\nhttps://i.esdrop.com/d/f/heh2xfCDQX/D0NvjY8pb2.png\n\nCalorie Coins are paid as a reward for jumping rope Excercise. With caloriecoin, You can purchase items such as scales , fitness center tickets selling by the caloriecoin company, or withdraw caloriecoin into real cash.\n\nDistictive Point 02) JumpRope Match Game on Metaverse\nhttps://res.cloudinary.com/devpost/image/fetch/s--qZx25d1e--/c_limit,f_auto,fl_lossy,q_auto:eco,w_900/https://i.esdrop.com/d/f/heh2xfCDQX/9r5Pl6FjQf.jpg","metadata":{"loc":{"lines":{"from":1643,"to":1655}}}}],["604",{"pageContent":"Users eachother in New York and San Francisco, or San Francisco with Seoul Korea can play jump rope match game in real time on Metaverse. The winner can acquire caloriecoins by smart contract. It gonna be very interesting jump rope match game\n\nDistictive Point 03) NFT items connecting Real world with Metaverse\nhttps://res.cloudinary.com/devpost/image/fetch/s--sZRTpJHE--/c_limit,f_auto,fl_lossy,q_auto:eco,w_900/https://i.esdrop.com/d/f/heh2xfCDQX/kQd3ZNixzH.jpg\n\npurchasing game NFT items worn by the Metaverse Avatar, sending same a real product tagged NFT QR code. (Yoga clothes, smartwatch , jumprope etc..) It connects metaverse and the real World into one same space.\n\n☑️3.Development State\n01) IOT HARDWARE DEVELOPMENT STATE https://i.esdrop.com/d/f/heh2xfCDQX/WNth2XNuaz.jpg\n\nJumpRope hardware products have also been developed up to the mass production stage.\n\n02) SOFTWARE DAPP DEVELOPMENT STATE https://i.esdrop.com/d/f/heh2xfCDQX/tmCQpazIJT.jpg","metadata":{"loc":{"lines":{"from":1657,"to":1669}}}}],["605",{"pageContent":"JumpRope hardware products have also been developed up to the mass production stage.\n\n02) SOFTWARE DAPP DEVELOPMENT STATE https://i.esdrop.com/d/f/heh2xfCDQX/tmCQpazIJT.jpg\n\nSW demo development has been completed. that is not simply UI/UX image, but is available for actual sale. Please check App video link below.\n\n03) TRON BLOCKCHAIN DEVELOPMENT STATE https://i.esdrop.com/d/f/heh2xfCDQX/opQlTJgTw1.png\n\nPlese check Caloriecoin Token minting and transaction record on TRON blockchian By jumpCoin dapplication. TestNet_Link\n\n☑️ 4.Challenges we ran into\nhttps://i.esdrop.com/d/f/heh2xfCDQX/TsB3HuvwCt.png\n\nThrough the development of object recognition using artificial intelligence, ordinary jump rope, not only smart jump rope, is also being made available in \"CoinJump\" applications.\n\nRelated Video1 Related Video2 Github Link\n\n☑️ 5.Accomplishments that we're proud of\nSep 26, 2019 **2019 TIPS·Tech Incubator Program for Startup - Excellence Award Related Articles link","metadata":{"loc":{"lines":{"from":1669,"to":1687}}}}],["606",{"pageContent":"Related Video1 Related Video2 Github Link\n\n☑️ 5.Accomplishments that we're proud of\nSep 26, 2019 **2019 TIPS·Tech Incubator Program for Startup - Excellence Award Related Articles link\n\nNov 11, 2019 **2019 Anyang Youth Startup Festival - Grand Prize Related Articles link\n\nDec 17, 2019*(VIRTUAL MONEY MINING TYPED EXERCISE MANAGEMENT APPARATUS USING EXERCISE MACHINE) apply for a patent* Patent doc\n\nOct 30,2020: Chungbuk Blockchain Technology Startup Idea Competition - Excellence Award\n\nAug 19, 2021: CalorieCoin apply for a trademark(EU)\n\nFeb 25, 2022: Wemade Blockchain Hackathone - Excellence Award\n\nMay 21, 2022: Kangwon Contents Korea Lab top prize award\n\nhttps://i.esdrop.com/d/f/heh2xfCDQX/lVWbFo02jB.png\n\n☑️ 6.Business Plan\n** TRADEMARK REGISTERATION**\nhttps://res.cloudinary.com/devpost/image/fetch/s--rEKQF5EC--/c_limit,f_auto,fl_lossy,q_auto:eco,w_900/https://i.esdrop.com/d/f/heh2xfCDQX/6j8Bmp9kP7.png","metadata":{"loc":{"lines":{"from":1687,"to":1708}}}}],["607",{"pageContent":"Brand name Caloriecoin that is easy to connect with the concept of E2E is currently registered. by CEO BAEK KWANG IL on EURO , south korea , Singapole including USA\n\nSTEP 1 : SELLING SMART ROPE\nhttps://i.esdrop.com/d/f/heh2xfCDQX/iYYsVbOFfV.png\n\nDemo Dapp is on testnet. But After Transfering TRON main network , Business Plan is to Pre-Selling on TRONDAO and crowdfunding through Kickstarter in September , and selling the products on Amazon in November.\n\nSTEP2 : SMART IOT PRODECTS\nhttps://i.esdrop.com/d/f/heh2xfCDQX/CJtPEHxY6d.png\n\nThe Calorie Coin team will not just stop at the jumping rope service, but will expand the items to include scales, hula hoops, core exercise equipment, smart tape measure, trade mill, smart watch, spinning bike, heart rate monitor, yoga mat, etc.","metadata":{"loc":{"lines":{"from":1710,"to":1720}}}}],["608",{"pageContent":"STEP3 : WORLD FRIST BLOCKCHAIN FITNESS CENTER IN SEOUL KOREA-(COINFITNESS)\nhttps://res.cloudinary.com/devpost/image/fetch/s--yFlm95zx--/c_limit,f_auto,fl_lossy,q_auto:eco,w_900/https://i.esdrop.com/d/f/heh2xfCDQX/Bgwx14IX9X.jpg\n\nIn addition, in 2023, the Calorie Coin team will be the first in the world’s blockchain history to launch a blockchain FitnessCenter in Seoul,South Korea. Receiving investment from VC, aiming to open a fitness center in the United States Too.\n\nSTEP4 : \"COINRUN\", \"COINSTEP\", \"COINBIKE, COINHULA\")\nhttps://i.esdrop.com/d/f/heh2xfCDQX/9k9Cfzr8dc.png\n\nIn addition to coin jumping using jump rope , we are planning \"COINRUN\", \"COINSTEP\", \"COINBIKE\" and \"COINHULA\" that will use cycle machines, running machines, and runpods. After expanding the caloric coin world view, we will make the contents of various sports (game, coaching video, coin mining) available to users through one app.\n\nHomePage_Link\n\nCOINJUMP","metadata":{"loc":{"lines":{"from":1722,"to":1734}}}}],["609",{"pageContent":"HomePage_Link\n\nCOINJUMP\n\nCOINRUN(The COINRUN project is also well advanced and ready. Currently, it is written in Korean, so it may be inconvenient to see, but I will prepare the English version ASAP.)\n\nhttps://i.esdrop.com/d/f/heh2xfCDQX/5UPg8OLbsI.png\n\n☑️ 7.CalorieCoin Team\nhttps://i.esdrop.com/d/f/heh2xfCDQX/Sbao3hlvan.jpg\n\nCaloriecoin is fitness tech-based blockchain Startup and sports Equipment distribution company in south korea aiming USA market Also wonderful team member with Good developer , Designer and Product Manager Detail Link\n\n☑️ 8.Queation and Contact\nIf you have any questions, please feel free to contact me.\n\nPhone Number : +82 1033753948\n\nEmail : 100k1@naver.com\n\nHomePage : https://runmatefitness.imweb.me/","metadata":{"loc":{"lines":{"from":1734,"to":1754}}}}],["610",{"pageContent":"Phone Number : +82 1033753948\n\nEmail : 100k1@naver.com\n\nHomePage : https://runmatefitness.imweb.me/\n\nHEADER\tTITLE\nIR Pitching\thttps://periodic-packet-362.notion.site/Tron-IR-Pitching-Video-9d6c10d6014e49efa90ea91623d8076e\nDemo videos\thttps://youtu.be/KDTFi4IcXFA\nGitHub\thttps://github.com/caloriecoin\nApk Download ☑️\thttps://drive.google.com/drive/folders/11ZxalDS_Wj5pY63mxRujufzI8tH87rfY?usp=sharing\nUI/UX\thttps://scene.zeplin.io/project/62d1d44c336278128d39ad74\nTRONSCAN (NILE testnet) ☑️\thttps://nile.tronscan.org/#/token20/TK6XHBYhqjFnDNKrgBy4YRX8seHiMxUHo8\nCOINJUMP_PitchDeck PPT\thttps://docs.google.com/presentation/d/1pauPaD5TW1Tm9yiRNIiaEnj82cjFvERu/edit?usp=sharing&ouid=111350305339741841042&rtpof=true&sd=true\nCOINRUN_PitchDeck PPT\thttps://drive.google.com/drive/folders/1k2ZyThPjc75j31EC7UDqsmFTIy5t95Gd?usp=sharing (The Coinrun project is also well advanced and ready. Currently, it is written in Korean, so it may be inconvenient to see, but I will prepare the English version ASAP.)","metadata":{"loc":{"lines":{"from":1754,"to":1768}}}}],["611",{"pageContent":"TronVerse\nTronVerse is an open world combat game built on the Unreal engine that utilizes the Tron Bull Club NFT collection. TronVerse will also provide a gaming rig to onboard other NFT collections.\n\n\n\nInspiration\nThe Tron Bull Club team wanted to lead the charge in developing an open world that other Tron NFT collections can utilize to bring utility to the NFT scene on Tron.\n\nWhat it does\nTronVerse allows other NFT collections to integrate into an open world platform that is being created by some of the most talented individuals in the gaming space.\n\nHow we built it\nWe are building our game on the Unreal engine with an emphasis on quality that will rival that of other shooter games such as COD and Valorant.\n\nChallenges we ran into\nWe converted a 2D NFT collection into 3D game playable characters along with rig specifications that will allow the Tron Bull NFT collection to live in many metaverse worlds.","metadata":{"loc":{"lines":{"from":1770,"to":1785}}}}],["612",{"pageContent":"Challenges we ran into\nWe converted a 2D NFT collection into 3D game playable characters along with rig specifications that will allow the Tron Bull NFT collection to live in many metaverse worlds.\n\nAccomplishments that we're proud of\nWe launched a simple version of our gameplay mechanism for our community which has gotten a lot of supports from the Tron NFT community. This is just a sample of the full scale platform that we are developing.\n\nWhat we learned\nWe learned that Tron has a very vibrant community that is extremely eager to have a quality gaming platform that brings utility to the Tron NFT space. The support from other collections has been overwhelming.\n\nWhat's next for TronVerse\nTronVerse will continue to build out the ecosystem in order to make Tron one of the blockchain gaming leaders.","metadata":{"loc":{"lines":{"from":1785,"to":1795}}}}],["613",{"pageContent":"What's next for TronVerse\nTronVerse will continue to build out the ecosystem in order to make Tron one of the blockchain gaming leaders.\n\nCukies World\nPlay-and-Earn multichain open world game with endless possibilities: explore the infinite archipelago, collect resources, build new tools, craft special gems, learn new skills, and enjoy!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInspiration\nWe noticed that most play-to-earn games are focused on PVP modes, and Cukies World is essentially the opposite.\n\nOur main inspiration is Animal Crossing game. We decided to create the infinite archipelago: an open world that players can explore at their own pace and discover something new every day.\n\nPlayers will chill in their islands, and slowly work on them to change their appearance, making them look exactly as they would like.\n\nWhat it does\nCukies World is a Play-and-Earn game where each player will control a Cuki: an NFT representing the games’ main character.","metadata":{"loc":{"lines":{"from":1795,"to":1825}}}}],["614",{"pageContent":"What it does\nCukies World is a Play-and-Earn game where each player will control a Cuki: an NFT representing the games’ main character.\n\nPlayers can explore the infinite archipelago, collect resources, build new tools, craft special gems, learn new skills... the possibilities are endless!\n\nAs they play they will complete different missions and tasks to earn Gem Dust (GEMD), the internal token of the ecosystem.\n\nCompleting missions will also increase Cukies experience, allowing them to learn different mechanics to improve their skills. Cukies have 5 different skills that they can improve: miner, engineer, gatherer, farmer and scout.\n\nHow we built it\nWe are building Cukies World using Unreal Engine 4. Our main focus is on creating an immersive gaming experience, so users can feel a connection with the Cuki they are controlling, so they are eager to keep playing and learning more about Cukies World story.","metadata":{"loc":{"lines":{"from":1825,"to":1835}}}}],["615",{"pageContent":"We used one of the amazon web services, s3, to store all the information related to our NFTs (images, metadata, 3d models) that is currently being displayed in our marketplace. It's working great and we never had an issue. We are also implementing aws gaming solution prior to the game launch.\n\nChallenges we ran into\nBuilding a real game is not something that can be done in a couple of months, and crypto community tends to be quite impatient.\n\nSince we started developing Cukies World ecosystem back in August 2021 we had to deal with this, which can be stressful sometimes.\n\nAccomplishments that we're proud of\nThere are several things that we have achieved so far:\n\nAll 1st Gen NFTs (12,000) have been minted by our community (2,700+ holders).\n\nWe have developed a staking platform where users can stake their NFTs to earn Cuki Points.\n\nTo reward our early supporters, we developed a breeding platform where users can use their Original Cukies and their Cuki Points to breed a baby Cuki.","metadata":{"loc":{"lines":{"from":1837,"to":1851}}}}],["616",{"pageContent":"To reward our early supporters, we developed a breeding platform where users can use their Original Cukies and their Cuki Points to breed a baby Cuki.\n\nWe have developed our own marketplace for Cukies NFTs, that will be used for in-game resources also once the game is launched.\n\nOur team has grown to 20+ people now, with wide experience in different areas related to gaming, such as but not limited to: art design, illustration, animation, music & sound effects, modeling, p2e economy and game development.\n\nWe have created a bridge for NFTs between Tron and Binance Chain, that will allow us to reach more users that will be able to play games in Tron.\n\nWe have started the process to bridge to Polygon Network as the first step to become a multichain game.\n\nWe won 2 prizes in the Gamefi category in the Tron Hackathon: 3rd one in the judges voting, and the 4th one in the community voting.","metadata":{"loc":{"lines":{"from":1851,"to":1861}}}}],["617",{"pageContent":"We won 2 prizes in the Gamefi category in the Tron Hackathon: 3rd one in the judges voting, and the 4th one in the community voting.\n\nWe know how important the game lore is for gamers, and we are proud of the story we are building around Cukies World. Click here to watch the first video about Cukies’ story\n\nWe have already released an alpha demo version for PC so users can have a taste of how the game development is going.\n\nWhat we learned\nCrypto spaces moves quite fast, and developing something fast to follow a trend it's not the best thing to do. Our first idea was creating a click-to-earn game so the community could start \"playing\" and earning, and in the meantime develop the open world game that we are currently working on.\n\nBut we watched how most games trying to do the same were dying, and that's why we dismissed this idea and decided to take enough time to launch a final game that users would enjoy playing.","metadata":{"loc":{"lines":{"from":1861,"to":1870}}}}],["618",{"pageContent":"But we watched how most games trying to do the same were dying, and that's why we dismissed this idea and decided to take enough time to launch a final game that users would enjoy playing.\n\nWhat's next for Cukies World\nWe have several things in our roadmap, these are the ones scheduled for the coming months:\n\nPolygon bridge\nToken sale and listing\nSingle player game launch\nCukies lending and scholarship program\nIsland NFTs offering\nCooperative game mode\n\nRill\nRill is a platform that will be used for e-sport tournaments. Players get rewarded instantly or after a game round has been concluded and distribute prizes depending on their achievements\n\n\n\n\n\n\n\nInspiration\nWe both love playing videogames and enjoy watching other people play games. Especially in a competitive environment.","metadata":{"loc":{"lines":{"from":1870,"to":1892}}}}],["619",{"pageContent":"What it does\nRill is a platform that will be used for eSport tournaments. Players get rewarded instantly or after a game round has been concluded and distribute prizes depending on their achievements. The cool thing is we are able to involve the audience that are watching tournaments by letting set bounties on players they are watching. When a player kills another player that's got a bounty on his head, he will be rewarded with the promised amount that got set by the person that placed the bounty. On the other side we have the tournament organizers that are able to create tournaments and define what prize money they are giving away to the winners. But they are also able to select predefined challenges for the players. Predefined challenges are like \"Kill 7 enemies in 1 round with a sniper\" or \"Survive 5 rounds without killing anyone\". When a challenge has been achieved, the player gets rewarded with a Badge, which is an NFT)\n\nHow we built it\nWe have 3 parts","metadata":{"loc":{"lines":{"from":1894,"to":1898}}}}],["620",{"pageContent":"How we built it\nWe have 3 parts\n\nSolidity This part are the brains. It lets you create tournaments, private matches, distribute prize money and NFTs, place bounties, emit events (like when a new bounty has been placed) and much more. It basically has all the functionality that's needed to have Rill going.\n\nNodejs This part of the platform is mainly the listener and emitter of events, both from games and from solidity. We can also use this for interaction with metadata if needed. Besides that we are also able to host dedicated game servers for the corresponding game (when supported)\n\nReact The UI has been build with React\n\nChallenges we ran into\nThe biggest challenge was learning Solidity, as we don't have much blockchain knowledge. Also finding games that already have an API that we can consume.","metadata":{"loc":{"lines":{"from":1898,"to":1908}}}}],["621",{"pageContent":"Challenges we ran into\nThe biggest challenge was learning Solidity, as we don't have much blockchain knowledge. Also finding games that already have an API that we can consume.\n\nAccomplishments that we're proud of\nThat we were actually able to have a working case, as this was our first solidity project. Also we are happy that we found a great use case, where we really know we are able to revolutionize this part of the industry. AND that we able to leverage the API of the popular game Counter-Strike: Global Offensive\n\nWhat we learned\nLearned a lot about blockchain, solidity and how Tron works.\n\nWhat's next for Rill\nIf we win or don't win, that doesn't matter for us. We want to continue working on Rill and release this as a product which we are proud of. We genuinely believe this is a game changer for the eSports industry. We have quite a lot of upcoming features in mind. The dream would be to quit our jobs and work full time on Rill","metadata":{"loc":{"lines":{"from":1908,"to":1918}}}}],["622",{"pageContent":"TronNinjas GameFi\nAt its core, the Tron ninja arcade was born out of love for something which died long ago; playing games in arcades was more than gaming; it was a social hub...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInspiration:\nAt its core, the Tron ninja arcade was born out of love for something which died long ago; playing games in arcades was more than gaming; it was a social hub for people when not everyone could have a computer. You would spend your days with friends competing, playing, and socializing at your local Arcade — That is what we are trying to encapsulate here; not only playing games but the social aspect of Tron Ninjas is as essential. We are trying to digitalize the local Arcade and bring back an old art form in a new medium.","metadata":{"loc":{"lines":{"from":1920,"to":1938}}}}],["623",{"pageContent":"What it does:\nTronNinjas is a NFT GameFi project on the Tron blockchain where you are able to play arcade games and earn our in-game token TronNinjas Token (TNT). The TNT token can be earned just by playing single-player games and in our bi-weekly tournaments with other NFT holders. We also have the Tronninjas store, where you can spend your TNT for upgrades.\n\nA percentage of the store revenue will be sent to our staking contract, where users can stake their TronNinja NFT. You can stake your NFT and TNT and earn TNT from our staking contract. Staked NFTs earn 55% and TNT 40% the last 5% belongs to the OGTNT token. Since the TronNinja arcade conception, the team has been working tirelessly to reach the goals we set ourselves.\n\nOur submission for season two is an expansion on our first submission which includes a focus on brining the ninja arcade to the next level. We have been able to change the whole feel of the Ninja arcade focusing on bringing a brand new identity to TronNinjas.","metadata":{"loc":{"lines":{"from":1940,"to":1945}}}}],["624",{"pageContent":"We have been working hard and rebranding every aspect of the arcade in line with a quality you would expect to receive on the Tron Network. We have notable made some significant changes to four of our games which have been completely rebranded in line with the new arcade with the addition of two new classic games. Whack a mole and Ninja basketball.\n\nChallenges we ran in to:\nThe challenges we ran into with the arcade while rebranding were the lack of resource and creating an identity that brings the arcade into the present while still maintaining that classic retro feel. We were able to overcome this by researching the styles and identities of a whole generation of gamers. As a result, we believe we have been able to maintain the classic retro feel by adding a modern spin.","metadata":{"loc":{"lines":{"from":1947,"to":1950}}}}],["625",{"pageContent":"Accomplishments that we're proud of:\nWe are continuing to grow our platform, maintaining and improving our system with the help of the community — As the community grows, we grow with them, providing valuable feedback on the system and what they would like to see in the future.\n\n• Season 1 TRONDAO Hackathon winner GameFi.\n\n• User Energy sales system to allow users to buy energy cheaper when staking NFTs\n\n• Four games live in our P2E system.\n\n• The first project on Tron to allow users to stake their NFTS and earn a share of the sales from the store.\n\n• The Ninja Store - An online store allowing the purchase of upgrades giving users an advantage in the games.\n\n• Grown an active and engaged community\n\n• Sold over 1,000 Ninja NFTs\n\n• Launched our in-game token (TRC-20) TNT (TronNinjaToken)\n\n• Listing TNT on Justmoney.io\n\n• Press release on Yahoo Finance.\n\n• Listing on coinmarketleague.com\n\n• Listing NFTs on APENFT.\n\n• TNT Liquidity mining with multiple pools.","metadata":{"loc":{"lines":{"from":1952,"to":1979}}}}],["626",{"pageContent":"• Listing TNT on Justmoney.io\n\n• Press release on Yahoo Finance.\n\n• Listing on coinmarketleague.com\n\n• Listing NFTs on APENFT.\n\n• TNT Liquidity mining with multiple pools.\n\nWhat we learned:\nWe have learned a lot from our community. We wouldn´t be here if it wasn’t for them. We use the feedback we get active and build with that in mind.\n\nWhat´s next for TronNinjas:\nRight now we are implementing a major rebranding of the TronNinjas. The re-brand is a major facelift of the entire TronNinja and includes new logos, a new website, 2 more arcade games, a marketing campaign and interaction with TronNinja users and other TRON projects. • New logo\n\n• New website\n\n• 2 new ninja-style arcade games\n\n• Hosting bi-weekly Twitter spaces with TRON subjects.\n\n• New partnership announced at the end of July.\n\n• Bringing more value to TronNinjas NFTs.","metadata":{"loc":{"lines":{"from":1979,"to":2003}}}}],["627",{"pageContent":"• New website\n\n• 2 new ninja-style arcade games\n\n• Hosting bi-weekly Twitter spaces with TRON subjects.\n\n• New partnership announced at the end of July.\n\n• Bringing more value to TronNinjas NFTs.\n\nWe have now completed our rebrand, since we anticipate a soon-to-come growth, not only with the TronNinjas but in blockchain technology and in the TRON Blockchain in particular. We are preparing to be front and centre of the new wave of blockchain users while making the arcade as user-friendly as possible.\n\nIn the years to come, we will see massive growth in our area and we will be ready for it. We are also committed to networking and working closely with other TRON projects. We believe standing together makes us stronger and as an original OG project on the TRON network, we will give everything we got to grow the product and help other projects grow.\n\nThe rebrand and games will be implemented in two steps.","metadata":{"loc":{"lines":{"from":2003,"to":2017}}}}],["628",{"pageContent":"The rebrand and games will be implemented in two steps.\n\n• Testing games and website in a closed group (Our OG group) • Opening to the public.\n\nWe hope you enjoy the TronNinja Arcade as much as we enjoy working on it.\n\nFlynn, Web2 to Web3 Gamefi integration tools\nWith Flynn tools, you can easily integrate your game or product into the Web3 world using familiar technologies and practices from the Web2 world. Create Web3 applications using a familiar stack!\n\n\n\n\n\n\n\n\n\nTry it out links: https://flynn.ambersoft.llc/authorization - client side https://api-flynn.ambersoft.llc/api-docs/ - API docs\n\nInspiration\nThe idea came from creating our products and interacting with Web2 companies, that are interested in the world of Web3 but have no expertise or understanding to move their products to new heights. We had the idea, what if we will create a product that can make the process of moving to Web3 simple and clear?\n\nWhat it does\nWe can divide Flynn tools into the following services:","metadata":{"loc":{"lines":{"from":2017,"to":2040}}}}],["629",{"pageContent":"What it does\nWe can divide Flynn tools into the following services:\n\nTRC20 Manager Allows you to create, transfer, mint, and burn tokens (an analog of hard/soft currency from the gaming industry)\n\nTRC721 Manager Allows you to create, transfer, mint, and burn NFT-721 (an analog of unique in-game items, TRC721 is also suitable for the implementation of randomly generated items.)\n\nTRC1155 Manager Allows you to create, transfer, mint, and burn NFT-1155 (an analog of in-game items, and also suitable for the implementation, for example, AWP Dragon Lore in NFT-form)\n\nTRC20 Bridge It’s the main trick, that makes the process of moving to Web3 easier. TRC20 Bridge allows you to implement and remove tokens from the game to the blockchain and back.\n\nNFT721/1155 Bridge NFT Bridge is the tool that allows you to implement and remove NFT 721 and 1155 standards from the game and back.","metadata":{"loc":{"lines":{"from":2040,"to":2051}}}}],["630",{"pageContent":"NFT721/1155 Bridge NFT Bridge is the tool that allows you to implement and remove NFT 721 and 1155 standards from the game and back.\n\nHow we built it\nWe have been forming this idea for a long time and implementing it in our projects. When we discovered the hackathon, we decided to challenge ourselves and create the MVP product in a week. We shaped a team of IT and Web3 professionals to create a platform demonstrating to you that developing Web3 projects is rather simple. It will also allow you not to stuff your head with the complexities and challenges of blockchain technologies!","metadata":{"loc":{"lines":{"from":2051,"to":2054}}}}],["631",{"pageContent":"Challenges we ran into\nOne of the main difficulties was the question: How to provide a set of tools, that would meet all the possible requirements. We don’t intend to create a new almanac on thousands of lines of documentation but strive to give all basic advantages and abstractions from the world of blockchain. And then we shaped the concept of Managers and Bridges tools. The one allows controlling the main abstractions of the blockchain as simply as in the CMS, and the other allows players/users to blockchain their assets, or vice versa to bring their assets from the blockchain into the product.","metadata":{"loc":{"lines":{"from":2056,"to":2057}}}}],["632",{"pageContent":"The second challenge was to create a program, which could organize the conducting transactions on the blockchain backend. Operations such as input/output of valuable resources should be atomic and reliable. To do this, the concept of a fault-tolerant transaction service was implemented in a blockchain with detailed logging of information. We call it Wallet Service. At the MVP stage, we don’t release this tool trying to avoid complicating the implementation ideology.\n\nAlso, one of the main problems with working with TRC721 is getting the user’s “inventory”, because the standard does not provide the methods to get all tokens that the user has. We create the tool to solve this problem. It indexes transactions on tracker tokens so that all NFTs are displayed later. (method/v1/erc721/inventory).\n\nAccomplishments that we're proud of\nAs a result, we created a lightweight service for asset interaction from the blockchain world as simple as working with CMS.","metadata":{"loc":{"lines":{"from":2059,"to":2064}}}}],["633",{"pageContent":"Accomplishments that we're proud of\nAs a result, we created a lightweight service for asset interaction from the blockchain world as simple as working with CMS.\n\nWhat we learned\nBlockchain should be understood and should not frighten developers.\n\nWhat's next for Flynn, Web2 to Web3 Gamefi integration tools\nFor increasing the transaction bandwidth we will create multi-wallet support for one account.\n\nRegardless of the current network load and RPC points, Wallet Service will be released to ensure fault tolerance and high stability\n\nAbility to integrate private RPC points for interaction with blockchain for more flexible infrastructure management.\n\nNFT marketplace constructor\n\nAlso you can read more at by reading our presentation: https://drive.google.com/file/d/16p5-UbI2SdFX276qVHDl72sMi4u_sQqf/view?usp=sharing","metadata":{"loc":{"lines":{"from":2064,"to":2079}}}}],["634",{"pageContent":"NFT marketplace constructor\n\nAlso you can read more at by reading our presentation: https://drive.google.com/file/d/16p5-UbI2SdFX276qVHDl72sMi4u_sQqf/view?usp=sharing\n\nGU3SS - Bet on all sports\nDecentralized betting app developed using smart contracts on TRON blockchain. Unrestricted, uncensorable, no KYC required, totally anonymous, you only need your TronLink wallet to play all you want.\n\n\n\nInspiration\nBetting is the most restricted business in the world and blockchains solve that issue with decentralization and anonymous wallets, just pick any team in any event, anywhere, anytime, without restrictions, invasive KYC or tedious registration, and play without limits!\n\nWhat it does\nGU3SS allows you to bet on any sport like Baseball, Basketball, Football, Soccer, Hockey, etc and will allow in the future any person to open their own pools for sports or events in their localities making it a truly decentralized and uncensorable betting platform","metadata":{"loc":{"lines":{"from":2079,"to":2092}}}}],["635",{"pageContent":"How we built it\nWe used NodeJS on the server, PostgreSQL as database for blockchain replication and HTML, JS, CSS on the client UI. TronWeb and Tronlink are required to interact with the smart contracts, place bets and cashout winnings\n\nChallenges we ran into\nGas prices are somewhat high in TRON so we had to learn to stake in order to use energy and bandwith to get free transactions, once we overcame that hurdle everything was smooth sailing into the horizon\n\nAccomplishments that we're proud of\nThe simplicity of the app allows anybody with TronLink installed to bet on any sport on earth without restrictions\n\nWhat we learned\nTronWeb is definitely a great way to communicate with smart contracts, a new addition to our crypto toolbox.\n\nWhat's next for GU3SS - Bet on all sports\nIn version 2.0 we will allow anybody to create their own pools for betting on any imaginable event or competition, stay tuned!","metadata":{"loc":{"lines":{"from":2094,"to":2107}}}}],["636",{"pageContent":"What's next for GU3SS - Bet on all sports\nIn version 2.0 we will allow anybody to create their own pools for betting on any imaginable event or competition, stay tuned!\n\nBaoziswap - Live Staking Pool by SafeMoney Dev Team - Maintaining and Developing a Great and Sustainable Ecosystem on Tron Blockchain with Baoziswap Staking Pool\nTRON Hackathon\nHackathon Season 2\ndefi\nJul 2022\nDec '22\n\nSafeMoney\n\n13\nJul '22\nProject Name: Baoziswap - Live Staking Pool\nProject Track: DeFi\nTeam Name: SafeMoney Dev Team\nTeam Member(s): 8 Team Members\nProject Repo/Website: Baoziswap Website 51\n\nBaoziswap - SafeMoney V 2.0 Staking Pool 12\n\nDevPost URL: SafeMoney Dev Team | Dev Post Portfolio 24\n\nBaoziswap Goals:\n\nBaoziswap is a decentralised exchange on the TRON Blockchain with the aim and goal of making exchanges and swaps of tax tokens and non tax tokens on Tron Blockchain as easy as possible. Having this in mind it is our aim and goal :","metadata":{"loc":{"lines":{"from":2107,"to":2133}}}}],["637",{"pageContent":"To Help TRX communities grow even more better with the benefits that comes with Cross Chain\n\nTo Maintain and Develop a Great and Sustainable Ecosystem on Tron Blockchain with Baoziswap Staking Pool\n\nTo help SafeMoney Team as well as the community of newly and established tokens on Tron Blockchain remain more stable and strong even during the bearish Market\n\nTo provide a more sustainable solutions for tax and non tax tokens on Tron Blockchain\n\nTo help build a good communities and an option to earn by staking on Baoziswap.\n\nTo provide as simple as possible user interface for exchanges of Tax and non tax tokens on Baoziswap\n\nProject Info:\n\nBaoziswap Origin and Source","metadata":{"loc":{"lines":{"from":2135,"to":2149}}}}],["638",{"pageContent":"To provide as simple as possible user interface for exchanges of Tax and non tax tokens on Baoziswap\n\nProject Info:\n\nBaoziswap Origin and Source\n\nBaoziswap is an exchange on the TRON Blockchain with the aim and goal of making exchanges and swaps of tax tokens and non tax tokens on Tron Blockchain as easy as possible. Baoziswap launched not too long ago with the above aim of providing solutions to the great community of developed and developing tokens on Tron Blockchain not forgetting the Inspiration that birth Baoziswap in mind. The Team has been working tirelessly to make sure we deliver the best for Tron Blockchain.\n\nThe Birth of Baoziswap Staking Pool\nHaving our goals in mind, the team came up with another solution to help the great communities on Tron Blockchain, which was our next milestone to create a staking pool functionality to Baoziswap which the team has successfully been able to implement.","metadata":{"loc":{"lines":{"from":2149,"to":2158}}}}],["639",{"pageContent":"Furthermore, one of the major aim of developing this and adding this to Baoziswap is to help SafeMoney team as well as the community of newly and established tokens on Tron Blockchain to be able to remain more stable and strong even during the bearish market, because instead of the community loosing investors and members dumping their tokens and collapsing the market and the community, the community can go ahead and stake their tokens on Baoziswap and earn rewards instead of dumping the whole market and distabilising the just developing community.\n\nAll that is required of any community or token on Tron Blockchain is to contact our team and we will develop a staking pool for them on Baoziswap and their community and investors will be able to stake their tokens on Baoziswap and earn rewards on their staked tokens and they will have the opportunity to be listed on our exchange as well.\n\nOur Achievements So Far","metadata":{"loc":{"lines":{"from":2160,"to":2164}}}}],["640",{"pageContent":"Our Achievements So Far\n\nAfter our launch, the team added the staking pool for SafeMoney v 2.0 and within 24hrs over 21trillion of SafeMoney v 2.0 was locked in the Baoziswap staking pool for SafeMoney v 2.0 and investors are earning up to 31% APR and as we publish this over 50 trillion is now locked in SafeMoney v 2.0 Staking pool on Baoziswap.\n\nFuthermore, another achievement and great milestone we have been able to achieve is over 800 transactions has already been made on the SafeMoney v 2.0 staking contract address within the time of launch and our time of submission, which is really great for us.\n\nTotal SafeMoney v 2.0 Staked 4\n\nIn conclusion, one of our main lesson learnt during our development process is the community plays a large role in the success and failure of any cryptocurrency or tokens and always making sure the community is participating and involved is very important in development process.","metadata":{"loc":{"lines":{"from":2164,"to":2172}}}}],["641",{"pageContent":"During our development processes one of the prominent way we used while developing this project is getting the public opinion on the project and that helped us a lot.\n\nConcerning Challenges, we faced some during the development process, but the team was able to patiently debug the bugs and make sure we sort them out during the testing stage before the it is live for community use. We are still working on making Baoziswap more and more better we are on our starting stage and we are building a good and solid foundation for Baoziswap.\n\nProject Details:\nBaoziswap’s Live Staking Video 3\n\nProject Milestones: Finally, there are more milestones and goals ahead of us for Baoziswap, some of them include:\n\nBaoziswap going Cross Chain\n\nAPI Integration for more Public Use\n\nIntegration of Liquidity Pool\n\nIntegration of Payment Gateway and a lot more coming for Baoziswap in the future.\n\nBaoziswap is easy to use and the staking is easy to use as well you can check us out\n\nBaoziswap’s Website 51","metadata":{"loc":{"lines":{"from":2174,"to":2193}}}}],["642",{"pageContent":"Integration of Payment Gateway and a lot more coming for Baoziswap in the future.\n\nBaoziswap is easy to use and the staking is easy to use as well you can check us out\n\nBaoziswap’s Website 51\n\nMeDo by Vad - Decentralized freelance platform\nTRON Hackathon\nHackathon Season 2\nweb3\nJun 2022\nAug '22\n\nvad\n\n2\nJun '22\nProject Name: MeDo\n\nProject Track: Web3\n\nTeam Name: Vad\n\nTeam Member(s): I’m a solo hacker\n\nDevPost URL: Vadym Kutsenko's (vadkutsen) software portfolio | Devpost 16\n\nProject Goal: Create a safe freelancing platform guaranteeing payments by smart contracts, providing security and an integrated payment system that can decrease delays and minimize fees\n\nProject Info: Contract - solidity, Frontend - React\n\nProject Repo/Website: https://medo-tron-i5zty3n.spheron.app/ 10","metadata":{"loc":{"lines":{"from":2193,"to":2224}}}}],["643",{"pageContent":"Project Info: Contract - solidity, Frontend - React\n\nProject Repo/Website: https://medo-tron-i5zty3n.spheron.app/ 10\n\nProject Details: The platform allows users to add paid tasks. Two types of tasks are currently supported: FCFS - the first user who applied will be set as an assignee, Author Selected - the task author can select an executor from the candidates list e.g. by their ratings. Other users can apply and get paid by executing the tasks. The task author can rate the executor.\n\nProject Milestones:\n\nPrototyping stage - completed.\nSmart contract - completed.\nFrontend - completed.\nNew features such as milestones, the ability for executors to rate authors, in-app notifications, change requests, reward negotiation - TBD.\nDevelop to the production-ready state and deploy to the Tron mainnet - TBD.\n\nTokenomeme – The first multichain meme aggregator\nTRON Hackathon\nHackathon Season 2\nweb3\nJul 2022\nAug '22\n\nalexis_tokenomeme\n\n4\nJul '22\nProject Name: Tokenomeme\n\nProject Track: Web3","metadata":{"loc":{"lines":{"from":2224,"to":2251}}}}],["644",{"pageContent":"Tokenomeme – The first multichain meme aggregator\nTRON Hackathon\nHackathon Season 2\nweb3\nJul 2022\nAug '22\n\nalexis_tokenomeme\n\n4\nJul '22\nProject Name: Tokenomeme\n\nProject Track: Web3\n\nTeam Name: Tokenomeme\n\nTeam Members: 5\n\n4 co-founders:\n\nalexis_tokenomeme 3\n\ndenisa_tokenomeme 3\n\naugustin_tokenomeme 1\n\nalex_tokenomeme 1\n\n1 Hackathon team member: Tsuful\n\nDevPost URL: Tokenomeme | Devpost 8\n\nProject Goal: Our dream is to reward every person on earth for spreading & collecting funny memes. We are the first multichain meme aggregator that redesigns meme culture for communities.\n\n1\n\nProject Info:\n\nTokenomeme – Pitch Deck.pdf\n\nProject Repo/Website:\n\nGithub: GitHub - Tokenomeme/token: Our code for the token 1\n\nWebsite: http://tokenomeme.wtf/ 4\n\nProject Details:\n\nelon musk\nelon musk\nOur vocation: to rule the world with memes.\n\nTokenomeme is a Web3 meme network with SocialFi, GameFi & MemeFi elements.","metadata":{"loc":{"lines":{"from":2251,"to":2304}}}}],["645",{"pageContent":"Website: http://tokenomeme.wtf/ 4\n\nProject Details:\n\nelon musk\nelon musk\nOur vocation: to rule the world with memes.\n\nTokenomeme is a Web3 meme network with SocialFi, GameFi & MemeFi elements.\n\nIn our ecosystem, users and communities can make handsome earnings by creating, sharing or collecting funny memes that will spread everywhere.\n\nTo drive crypto mass adoption through memes, we are using multiple Web3 solutions in a simple way to make it accessible for anyone : decentralized meme social network & aggregator, Meme NFT Marketplace, Multichain DAO, Laugh-to-earn, hybrid smart contract, meme monetization…\n\nBefore joining our community, there are a few things you should know: Tokenomeme – Ain’t Nobody Got Time for That 1","metadata":{"loc":{"lines":{"from":2304,"to":2318}}}}],["646",{"pageContent":"Before joining our community, there are a few things you should know: Tokenomeme – Ain’t Nobody Got Time for That 1\n\n\nCapture d’écran (8)\nCapture d’écran (8)\nIn the beginning was the Woof. Chinkies created the world in six days.\nOn the seventh day, he ate his master. His last refuge: memes and crypto.\nAfter watching the official video of the Doge a hundred times, he built his rocket to join his idol.\n\nOn his way, he met some memes creators, who were all ignored. So he created Tokenomeme to help them live from their passion. His goal was clear: to make memes the first moon art.\n\nThanks to his multichain meme aggregator, he could pay the artists and bring his collection of tokenized memes with him to the moon.\nHe could end the war between Doges & Shiba killers!\nTo help him, he would gather the largest existing meme community.\nUnder these conditions, the way to the moon promised to be co(s)mic.\n\nProject Milestones:\n\nToday: A lot of memes: https://twitter.com/_Tokenomeme 6","metadata":{"loc":{"lines":{"from":2318,"to":2336}}}}],["647",{"pageContent":"Project Milestones:\n\nToday: A lot of memes: https://twitter.com/_Tokenomeme 6\n\n15 July: Multichain DAO\n\n20 July: Meme contest\n\n22 July: Chinkies NFT collection design\n\n24 July: MVP meme aggregator\n\n25 July: Meme token v1","metadata":{"loc":{"lines":{"from":2336,"to":2348}}}}],["648",{"pageContent":"Hackathon / HackaTRON Season 3 Winner Announcement\n\nThis season of the HackaTRON has been fun the competition was stiff! There were 1,100+ participants who formed 272 teams that submitted projects in one of six tracks: Web3, DeFi, NFT, GameFi, Ecosystem and Tron Academy.\n\ns3-winners-announced\ns3-winners-announced\nOnce again, we would like to thank all who have participated in this hackathon, whether you are a developer, designer, voter, or one of our forum members. We thank you for making HackaTRON S3 a success :heavy_heart_exclamation:\n\nWe would also like to thank our judges from across the industry and among universities who took the time out of their busy schedules to go over 80+ down-selected submissions.\n\nSeason 3 has been a success with more community topic engagement on this forum, more participants from the Ethereum ecosystem and amazing project submissions from University students.","metadata":{"loc":{"lines":{"from":1,"to":11}}}}],["649",{"pageContent":"Season 3 has been a success with more community topic engagement on this forum, more participants from the Ethereum ecosystem and amazing project submissions from University students.\n\nWe have also tried our best to make the community voting as fair as possible by removing ineligible projects and fraudulent votes. Our moderation and hackathon forensic team would like to give those members that help report suspicious projects and votes a big thumbs up :+1: for the great teamwork! A lot of community members on the forum also appreciated the effort that we have put in so we will make sure to carry on with the positive impact we had on HackaTRON season 4. We already have a few revisions in the pipeline as some active members have been suggesting some significant improvements on our hackathon community topics thread 10 that we will be considering! :wink:","metadata":{"loc":{"lines":{"from":11,"to":13}}}}],["650",{"pageContent":"We encourage everyone to please leave feedback about your experience with TRON Grand Hackathon 2022 Season 3, whether it be good or bad. We will read every single community response and take it into account to further improve for season 4. Thank you Tronics!\n\nAnd now, the moment that you have been waiting for… :drum:…\n\nLet’s start with our judges-selected winners. :tada:\nThese projects have been judged by multiple criteria such as their originality & creativity, technicality & design, business model & feasibility, usability, practicality and their contribution to the crypto ecosystem.\n\nDevpost and TRON DAO won’t be releasing any judging or scoring details as the judges scored projects in confidence. Please note that the judges scored each eligible project using the equally weighted criteria mentioned above and the results are according to the sole and absolute discretion of the judges. Projects that scored the highest per category by the judges are selected as the winners.","metadata":{"loc":{"lines":{"from":15,"to":22}}}}],["651",{"pageContent":"Without further ado, the hackathon winners for each category are:\n\nSeason 3 Web3 Category Winners:\n1st Prize (60K): OpenATM \n2nd Prize (50K): Journey by Tron Magicians \n3rd Prize (40K): Hextopus \n4th Prize (30K): JustPush by Team Push \n5th Prize (20K): Falt by Renaissance Labs \n\nSeason 3 DeFi Category Winners:\n1st Prize (60K): Meson-To by Meson Team \n2nd Prize (50K): Bunny Notes by StrawberryChocolateFudge \n3rd Prize (40K): Inheritokens by Team Tokinhers \n4th Prize (30K): Elk-Finance by Team Elk \n5th Prize (20K): goStables by goStables Team \n\nSeason 3 NFT Category Winners:\n1st Prize (60K): Lazara \n2nd Prize (50K): The TREE Token by The TREE Foundation \n3rd Prize (40K): Artbeat by 4thfloor \n4th Prize (30K): Fractron\n5th Prize (20K): Metastore by Void \n\nSeason 3 GameFi Category Winners:\n1st Prize (60K): Galaxy Throne \n2nd Prize (50K): TuruVerse by TuruGlobal \n3rd Prize (40K): Trxmini.games \n4th Prize (30K): Zombieland by Team Zombie\n5th Prize (20K): Mushroom by 0xCatbox","metadata":{"loc":{"lines":{"from":24,"to":52}}}}],["652",{"pageContent":"Season 3 Ecosystem Technical Category Winners:\n1st Prize (15K): WaveData \n2nd Prize (12.5K): Tronql\n3rd Prize (10K): Paylo\n4th Prize (7.5K): GETO.Finance\n5th Prize (5K): Interpool by Irruption Lab\n\nSeason 3 Ecosystem Non-Technical Category Winners:\n1st Prize (15K): B4B.World \n2nd Prize (12.5K): Road Incident Predictor\n3rd Prize (10K): MetaVote Poll by Raph Strategy\n4th Prize (7.5K): Xeat by BatamPride\n5th Prize (5K): Nature Foretold\n\nSeason 3 TRON Academy Technical Category Winners:\n1st Prize (15K): Pneumatic\n2nd Prize (10K): Keystream\n3rd Prize (9K): DeForms\n4th Prize (8K): GroupBy\n5th Prize (7K): Dazzle\n1st Runner Up (5K): Groot Club\n2nd Runner Up (5K): Level\n3rd Runner Up (5K): ECO","metadata":{"loc":{"lines":{"from":54,"to":76}}}}],["653",{"pageContent":"Season 3 TRON Academy Non-Technical Category Winners:\n1st Prize (2K): LSP (Tron: Legacy)\n2nd Prize (1K): SuperSets\n3rd Prize (500): Arcus\n1st Runner Up (250): DeTrove\n2nd Runner Up (250): Axies\n3rd Runner Up (250): BWS\n4th Runner Up (250): Autonoma\n5th Runner Up (250): Imperia\n6th Runner Up (250): Compute Allocation\n\nOpenATM : A Do-It-Yourself ATM on Tron!\nTRON Hackathon\nHackathon Season 3\nweb3\nNov 2022\nDec 2022\n\nOpenATM\n\n1\nNov '22\nProject Name: OpenATM\nProject Track: Web3\nTeam Name: OpenATM\nTeam Member(s): 1\nDevPost URL: https://devpost.com/software/openatm 15\nProject Website: GitHub - Open-ATM/Open-ATM 33\n\nOpen ATM is a free and open source Do-It-Yourself ATM on Tron allowing anyone to exchange their old fiat coins for shiny new TRX. The goal is for anyone to be able to build one just like that at home.\n\n\nDemo Video\nOpen ATM\nOpen ATM\nWhat you need\nA coin acceptor with a USB wafer, usually available for $20 on Amazon 4","metadata":{"loc":{"lines":{"from":78,"to":114}}}}],["654",{"pageContent":"Demo Video\nOpen ATM\nOpen ATM\nWhat you need\nA coin acceptor with a USB wafer, usually available for $20 on Amazon 4\n\nA windows or linux tactile tablet with a built-in camera (for scanning QR codes)\n\nA box to attach the tablet and coin acceptor to. It will also store the physical coins until you fetch them. Any box big enough will do but if you want it to look a little more professional like mine, you can 3D print a custom box. You will find here the STL file of the box I created on SketchUp to perfectly fit my tablet and Coin Acceptor. I then used Shapeways, a 3D printing service, to print it for me.\n\nHere is the model:\n\n\nAnd the printed result:\n\nhttps://openatm.io/print.png(image larger than 4 MB)\nHere are all the pieces:\n\nhttps://openatm.io/whatyouneed.png(image larger than 4 MB)\nHere is the final ATM:\n\n\nSetup the code\nOn the tablet, copy and run the code that reads the input from the coin acceptor:\n\n\ngit clone https://github.com/Open-ATM/Open-ATM.git\n\ncd Open-ATM/api","metadata":{"loc":{"lines":{"from":114,"to":142}}}}],["655",{"pageContent":"Setup the code\nOn the tablet, copy and run the code that reads the input from the coin acceptor:\n\n\ngit clone https://github.com/Open-ATM/Open-ATM.git\n\ncd Open-ATM/api\n\nsudo apt-get install build-essential libudev-dev\n\nyarn install\n\nyarn start\n\nThen run the frontend :\n\n\ncd Open-ATM/frontend\n\nyarn install\n\nyarn run\n\nThen open localhost:3000 to start the ATM. It’s now ready for use!\n\nUser experience\nFirst, insert some coins into the ATM. The screen will display your balance in fiat along with its value in TRX at the current exchange rate. The ATM connects to the CoinMarketCap API to get the rates in real-time.\n\nOn the next screen, the ATM asks where to send your TRX. You can choose your own wallet or one of the compatible charities’ wallets, e.g. Red Cross or Unicef. This allows for easy and quick donations!","metadata":{"loc":{"lines":{"from":142,"to":170}}}}],["656",{"pageContent":"If you choose your wallet, the next screen activates the table’s camera to read the QR code representing your public address. You will need a Tron wallet on your smartphone such as TronLink or Trust Wallet. Open the wallet then display your public address and scan your QR code.\n\nThe next screen is a confirmation of your amount and address. Clicking confirm triggers the transaction on Tron. A few seconds later, you should see your TRX in your wallet!\n\n\nConclusion\nThis ATM obviously isn’t very secure and could easily be broken into, so only place it at your home or at work to impress your friends and colleagues.\n\nFinally, the code is free and open source so don’t hesitate to contribute to it or let me know what could be improved!\n\nJourney by TRON Magicians - A TRON-native on-chain quests platform\nTRON Hackathon\nHackathon Season 3\nweb3\nOct 2022\nDec 2022\n\nsofia\n\n10\nOct '22\nProject Name: Journey\n\nProject Track: Web3 (Contributing to the transition of Web 2.0 to Web 3.0)","metadata":{"loc":{"lines":{"from":172,"to":195}}}}],["657",{"pageContent":"sofia\n\n10\nOct '22\nProject Name: Journey\n\nProject Track: Web3 (Contributing to the transition of Web 2.0 to Web 3.0)\n\nTeam: TRON Magicians (3 membeers)\n\niamminci (frontend & solidity)\nSofia Perez (PM & design)\n0xdeadlee (backend)\nDevPost URL:\n\nDevpost\n\nJourney 15\nTRON-native quests platform built to onboard the next billion users into crypto through the TRON blockchain.\n\nProject Goal: Journey is a platform designed to incentivize users to experience on-chain protocols, dapps, and NFTs on the TRON blockchain and help onboard the next billion users to Web3.\n\nProject Info:\n\n\n\nFull Demo Video 8 (including business model, tech stack, and more)\nFull Presentation Slides 7\nSample NFT Reward Contract: TEaRdU1GNh1vAHLG4QxxZqQAoNqBEMTgE9 7\nProject Website:\n\nhttps://tryjourney.dev 41\nProject Test Instructions:","metadata":{"loc":{"lines":{"from":195,"to":227}}}}],["658",{"pageContent":"https://tryjourney.dev 41\nProject Test Instructions:\n\nConnect your wallet via TronLink\nTry an individual quest (e.g. Sunswap quest)\nComplete and verify each on-chain task for the given quest\nClaim the reward associated with the quest (on Shasta Testnet)\nView your badges on “My Profile”\nView the community leaderboard\nIf you feel ambitious, try out the Sun Specialist Journey\nProject Details:\nView full product pitch with feature screenshots in our Presentation Slides 7.\n\nJourney is an on-chain quests platform built for the TRON blockchain where users can engage in on-chain tasks called “quests” and be rewarded for doing so in token rewards, NFT completion badges, and experience points on the platform.","metadata":{"loc":{"lines":{"from":227,"to":240}}}}],["659",{"pageContent":"MacBook Air - 7\nMacBook Air - 7\nOur business model is that we partner with protocols in the TRON ecosystem who will fund and launch quests on our platform and help incentivize user engagement on their protocols (where we take a small fee for offering the service). By doing so not only do projects benefit from increase in engagement on their protocols, but this gamified learn-to-earn platform will help user seamlessly onboard into web3 - increasing the overall user base of the TRON ecosystem.\n\nWe believe Journey will help: (1) onboard new users into web3, (2) increase user engagement during current market conditions from existing users, (3) help educate anyone about the TRON ecosystem through hands-on on-chain experiences.\n\nFeatures:","metadata":{"loc":{"lines":{"from":242,"to":248}}}}],["660",{"pageContent":"Features:\n\nQuests: On-chain tasks that help users learn about protocols on TRON\nJourneys: multi-quest bundles that educate users on a protocol holistically\nProfiles: to showcase a user’s on-chain achievements in a single view\nCommunity Leaderboard: ranks users by their XP as status incentive\nDisclaimer:\nThe projects showcased in our demo video and slides (e.g. SunSwap, JustLend, etc.) have no affiliation with this hackathon project. They are simply shown to help share our vision for the Journey platform as a proof-of-concept. Although we would be more than happy to follow-up with any of the projects when we launch on Mainnet:)\n\nProject Milestones:\n\n10/10 - 10/24: Team Formation, Ideation and Product Roadmapping\n\n10/24 - 10/27: Wireframing, Designs, Technical Diligence\n\n10/27 - 11/4: Dev Work (Frontend completion by 11/1, Backend and contracts by 11/4)\n\n11/4 - 11/7: Deck, Demo Script, Recording + Integration Testing","metadata":{"loc":{"lines":{"from":248,"to":265}}}}],["661",{"pageContent":"10/27 - 11/4: Dev Work (Frontend completion by 11/1, Backend and contracts by 11/4)\n\n11/4 - 11/7: Deck, Demo Script, Recording + Integration Testing\n\n11/7 - 11/14: Finalize demo video and submission + Product Polish / Bug Fixes\n\n11/14 - 11/18: Create new landing page (it’s live! on https://tryjourney.dev 41)\n11/18 - 11/21: Update NFT badges to AI-generated art using Stable Diffusion (this is live too!)\n11/21 - Present: Implement a KYC user verification system via BrightID or WorldCoin to prevent sybil resistance on quests that offer limited token rewards from partners\n\nTBD - Find a launch partner protocol from the TRON ecosystem to help beta test the service on TRON mainnet\n\nTBD - Add more gamification and social features to increase engagement and stickiness in the platform\n\nTBD - Build a partner onboarding service to streamline the quest launch flow\n\nBetter responsive UI support, testing and monitoring of service","metadata":{"loc":{"lines":{"from":265,"to":281}}}}],["662",{"pageContent":"TBD - Build a partner onboarding service to streamline the quest launch flow\n\nBetter responsive UI support, testing and monitoring of service\n\nHextopus - Sharefi on-chain marketing platform\nTRON Hackathon\nHackathon Season 3\nweb3\nNov 2022\nDec 2022\n\nshawn\n\n8\nNov '22\nheroimage\nheroimage\nProject Name: HEXTOPUS\n\nProject Track: Web3\n\nTeam Name: HEXTOPUS\n\nTeam Member(s): 4 members @shawn @Celine @DianaLeee @Cole\n\nDevPost URL: https://devpost.com/software/hextopus 9\n\nProject Goal: A new paradigm in crypto marketing\n\nProject Info:\nLite_Paper_Hextopus.pdf (4.6 MB)\n\nProject Website: https://hextopus.app/ 30\n\nProject Test Instructions:\n\nConnect wallet\n\nRefresh page (It will be update in next UI/UX upgrade)\n\nClick top right of the webpage TRX faucet button\n\nClick tokens faucet button next to the TRX faucet button\n\nGo campaign & participate\n\nContract Address:","metadata":{"loc":{"lines":{"from":281,"to":327}}}}],["663",{"pageContent":"Click top right of the webpage TRX faucet button\n\nClick tokens faucet button next to the TRX faucet button\n\nGo campaign & participate\n\nContract Address:\n\nTEST (It will be HXTO in mainnet): TQUZpG78uNN9B712G9MUitKPrcQ5hSEJL1\nesTEST (It will be eHXTO in mainnet): TWBBpJdxTLrWjgBqs51cbwoiVzGzJtTCSM\nJM (mock token in nile testnet): TWXiVqeYnAS3wzZ6u4rhxhZUzhdPxAv8NC\nUSDD (mock token in nile testnet): TVHF8cZXXmKSk6CMaaL8Za2bCcwVSk79zW\nJM-USDD LP (mock token in nile testnet): TMa8h4kpr46JNJE5DEkcYBjWDq9xSjdjH8\nJustMoneyCampaign (mock campaign in nile testnet): TMArLwfzdCb4xbXXqPKdfHcKDrJAgepadU\nCapReader: TCn3bvrcLtgHougqw2Ha8ahoUxgoHStpSJ\nCampaignReader: TKbD8SYaKyCvFMEvo6TUsis2piM7Kq9nQb\nVester: TS3uFzZFW7nHZ12JozacG2RLHPbt6tKDkG\nStaker: TJhLHdtNU9urZtsu3KGkfCQJeurgjZh6G5\nCampaignManager: TVJb6oQG6RjASrzE3VZT1pH1aMNd3bezC5\n\nProject Details:","metadata":{"loc":{"lines":{"from":327,"to":347}}}}],["664",{"pageContent":"Project Details:\n\nIn the traditional market, there are various marketing agencies and methodologies for efficient use of a limited marketing budget. However, unlike the traditional market, the web3 market operates based on a wallet, making it difficult to apply the traditional marketing-efficiency analysis. In addition, in order for the existing marketing agencies to implement DApp/DAO’s CPA(Cost-Per-Action) marketing, additional understanding and development ability of smart contracts are required. For these reasons, marketing means in web3 are limited to influencer marketing or community marketing.\n\nHextopus aims to solve this problem by developing an on-chain referral marketing platform. Hextopus will help DApps grow and bootstrap, and eventually will bring a new paradigm of crypto marketing.\n\nCampaign","metadata":{"loc":{"lines":{"from":347,"to":353}}}}],["665",{"pageContent":"Campaign\n\nCustomization: Campaign creators can set all smart contract-based actions as target action conditions and allow rewards to be distributed only when target actions are performed by users - CPA marketing. In addition, campaign creators can create an event-type campaign aimed at a specific holder group by setting only qualification condition without a target action.\n\nReferral Marketing: Hextopus campaign is basically based on referral marketing. With Hextopus, DApp/DAO can maximize marketing reach through viral effects.\n\nAbuse Prevention Mechanism: Hextopus minimizes the number of cherry pickers through its own optimal participation deposit scheme.","metadata":{"loc":{"lines":{"from":353,"to":359}}}}],["666",{"pageContent":"Abuse Prevention Mechanism: Hextopus minimizes the number of cherry pickers through its own optimal participation deposit scheme.\n\nMinimum Participation: When creating a campaign, if DApp/DAO enter the amount of rewards to charge in the reward pool and the minimum number of participating wallets, Hextopus campaign contract automatically sets the reward schema to ensure the minimum participation. This makes it easier for DApp/DAO to quantify the correlation between marketing cost and efficiency.\n\nWithdrawal: DApp/DAO can withdraw its marketing budget from the reward pool after a certain period of time.\n\nChain2\nChain2\nConsecutive Referral Chain","metadata":{"loc":{"lines":{"from":359,"to":367}}}}],["667",{"pageContent":"Withdrawal: DApp/DAO can withdraw its marketing budget from the reward pool after a certain period of time.\n\nChain2\nChain2\nConsecutive Referral Chain\n\nHextopus is a protocol that allows users to earn rewards through both ‘participation’ and ‘share’. When users participate in a campaign, they can receive participation rewards and their unique referral links are generated. Once generated, these links can be shared among their community and if their referrals also participate in the campaign, the user is rewarded again for the successful referral.\n\nParticipants are eligible for ‘1st level referral rewards’ arising from direct participation for each of their referees, and ‘2nd level referral rewards’ for their referees’ successful referrals.","metadata":{"loc":{"lines":{"from":367,"to":375}}}}],["668",{"pageContent":"Participants are eligible for ‘1st level referral rewards’ arising from direct participation for each of their referees, and ‘2nd level referral rewards’ for their referees’ successful referrals.\n\nChain\nChain\nFor example, a campaign with a participation reward scheme [50 (DApp’s reward token), 10 (HXTO)], a direct referral reward scheme [25 (reward token), 5 (esHXTO)], and an indirect referral reward scheme [10 (reward token), 1 (esHXTO)] will result in the reward structure described below.\nAnalyzing Participant A’s total rewards,","metadata":{"loc":{"lines":{"from":375,"to":380}}}}],["669",{"pageContent":"Participant A receives 50 reward tokens and 10 HXTO for his/her direct participation.\nThrough Participant A’s link, he/she has also shared the campaign to Participants B, C, and D, who all have participated in the campaign. Then Participant A is eligible for an additional 25 reward tokens and 5 esHXTO arising from direct participation for each of his referees.\nIf Participants E, F, G participate indirectly through either Participant B, C, or D’s referral link, then Participant A will be eligible for another 10 reward tokens and 1 esHXTO for each.\nThus the total rewards received by Participant A is 155 reward tokens, 10 HXTO, and 18 esHXTO.\nNote that this consecutive scheme is currently restricted to only three layers, so any participation by users further down in the tree will not be considered when calculating Participant A’s rewards.\nCalculating from Participant B’s viewpoint,","metadata":{"loc":{"lines":{"from":382,"to":387}}}}],["670",{"pageContent":"50 reward tokens and 10 HXTO** for his/her direct participation.\nThrough Participant A’s link, he/she has also shared the campaign to Participants E and F, who all have participated in the campaign. Then Participant B is eligible for an additional 25 reward tokens and 5 esHXTO arising from direct participation for each of his referees.\nIf Participant H participates through either Participant F’s referral link, then Participant B will be eligible for another 10 reward tokens and 1 esHXTO.\nThus the total rewards received by Participant B is 110 reward tokens, 10 HXTO, and 11 esHXTO.\nOn-Chain Data\n\nMarketing data such as Conversion Rate and Cost per Action will be provided on the dashboard. Whenever the details of the campaign change, marketing data will be automatically archived and comparative analyzed to help the optimal marketing execution for each campaign.\nTokenomics","metadata":{"loc":{"lines":{"from":389,"to":396}}}}],["671",{"pageContent":"Value Capture Mechanisms:\n(1) Participation deposit\n(2) Increase base referral reward caps by holding more HXTO tokens\n(3) DApp’s reward pool withdrawal fee\n(4) A certain amount of HXTO essential for composing a reward pool\nProject Milestones:\n\nDesigning the UI/UX ( :white_check_mark:)\nWriting Lite Paper ( :white_check_mark:)\nDeveloping Frontend ( :white_check_mark:)\nBuilding Backend smart contracts ( :white_check_mark:)\nDeveloping Campaign creator admin page ( :negative_squared_cross_mark:)\nProject Roadmap:\n\nHextopus Lock (2023 Q1)\nHextopus Lock makes the ecosystem safer by ensuring the reliability and safety of DApps. It making DApp’s community trust-building process clear and easy. DApps will be given a certification mark and benefit from the campaign creation process.\n\nPremium Pass NFT (2023 Q1)\nPremium Pass NFT offers exclusive opportunities for multiple Hextopus events such as campaigns or airdrops only for Premium Pass NFT holders.","metadata":{"loc":{"lines":{"from":398,"to":416}}}}],["672",{"pageContent":"Premium Pass NFT (2023 Q1)\nPremium Pass NFT offers exclusive opportunities for multiple Hextopus events such as campaigns or airdrops only for Premium Pass NFT holders.\n\nBoost NFT (2023 Q2)\nBoost NFT is used for boosting referral rewards for a certain period of time. It accelerates campaign participation and increases the value of HXTO.\n\nHextopus Community Platform (2023 Q2)\nTo further accelerate Hextopus’s growth, Hextopus will launch its own community platform to write and share articles about crypto. The more high-quality content is shared, the more rewards the user will receive.\n\nJustPush - Push notifications for the TRON Ecosystem\nTRON Hackathon\nHackathon Season 3\nweb3\nSep 2022\nDec '22\n\nnovax\n\n8\nSep '22\nProject Name: JustPush\n\nProject Track: Web3\n\nTeam Name: TeamPush\nTeam Member(s): @novax\n\nDevPost URL:\n\nDevpost\n\nJustPush - Push notifications for the TRON Ecosystem 13\nJustPush is a communication protocol that enables notifications for dapps wallets and services.","metadata":{"loc":{"lines":{"from":416,"to":448}}}}],["673",{"pageContent":"DevPost URL:\n\nDevpost\n\nJustPush - Push notifications for the TRON Ecosystem 13\nJustPush is a communication protocol that enables notifications for dapps wallets and services.\n\nProject Goal: Bring push Notifications for the Tron Ecosystem\n\nProject Info:\n\nJustPush\nDocs Discord Chat License\nJustPush brings notification capabilities to the TRON ecosystem.\n\nJustPush - Push notifications for the tron ecosystem\nJustPush - Push notifications for the tron ecosystem\nThe protocol consists of several components.\n\nAll these components were implemented in the hackathon timeframe after Sep20, 2022\n\nSmart contracts\n\n[github.com/justpush-protocol/contracts 6]\n\nJustPush node\n\n[github.com/justpush-protocol/node 4]\n\nJustPush SDK\n\n[github.com/justpush-protocol/sdk 1]\n\nDapp\n\n[github.com/justpush-protocol/frontend 4]\n\nTelegram Bot\n\n[github.com/justpush-protocol/telegram-bot 8]\n\nDiscord Bot\n\n[github.com/justpush-protocol/discord-bot]","metadata":{"loc":{"lines":{"from":448,"to":491}}}}],["674",{"pageContent":"Dapp\n\n[github.com/justpush-protocol/frontend 4]\n\nTelegram Bot\n\n[github.com/justpush-protocol/telegram-bot 8]\n\nDiscord Bot\n\n[github.com/justpush-protocol/discord-bot]\n\nJustPush makes the building of notification-enabled blockchain applications easy. It provides a set of tools such as Smart contracts SDKs, APIS, and a Dapp that allow developers to build notification-enabled applications in a matter of minutes.\n\nThese notifications are tied to a wallet address.\n\nJustPush is built in a composability-first way. This means the method the end users receive notifications can be easily changed.\n\nThese can be mobile push notifications, email, SMS, telegram, discord, etc. We have built a telegram bot and discord bot that can be used to receive notifications. But the list of supported methods can be easily extended.\n\nProject Website:\nhttps://justpush.app 22 (Dapp)\nhttps://docs.justpush.app 9 (Documentation)\n\nProject Test Instructions:\n\nSeveral things can be tested depending on the role you play.","metadata":{"loc":{"lines":{"from":491,"to":517}}}}],["675",{"pageContent":"Project Website:\nhttps://justpush.app 22 (Dapp)\nhttps://docs.justpush.app 9 (Documentation)\n\nProject Test Instructions:\n\nSeveral things can be tested depending on the role you play.\n\nCommunity Users\nGo to our website: https://justpush.app 22\nSubscribe to one of the Groups\nSetup Telegram/Discord bots to receive notifications as explained here\nYou can even create a group with one account, subscribe it with another account and see if you can send and receive notifications\nDevelopers / Ecosytem Projects\nTry integrating your DAPP/Protocol to JustPush protocol so your users can get notifications :slight_smile:\n\nAll the steps are explained in the Project Details section here.\n\nIf you come across any issues, happy to help.\n\nProject Details:\nThe process of integrating JustPush into a Dapp or service is as follows. The following guide also introduces concepts and design decisions behind JustPush.\n\nStep 01: Create a Group\nWhat are groups?\n\nhttps://docs.justpush.app/concepts/groups","metadata":{"loc":{"lines":{"from":517,"to":543}}}}],["676",{"pageContent":"Step 01: Create a Group\nWhat are groups?\n\nhttps://docs.justpush.app/concepts/groups\n\nA Group is anyone who activates themselves as a service on the protocol to send notifications to its users.\n\nAny service that wants to send notifications to their users can create a Group.Typically dApps in the Tron ecosystem will create a Group to send notifications to their users.\n\nHow to create a Group?\n\nhttps://docs.justpush.app/developer-guides/create-group\n\nThere are several ways to create a group. The easiest way is to use the JustPush Dapp.\n\nStep 02: Ask users to subscribe to your group\nWhy do they need to subscribe?\n\nImagine if anyone could send notifications to anyone. This would be a huge spam problem.\n\nJustPush solves this problem by requiring users to subscribe to a group before they can receive notifications from that group.\n\nHow to ask users to subscribe?\n\nhttps://docs.justpush.app/developer-guides/subscribe-to-groups","metadata":{"loc":{"lines":{"from":543,"to":567}}}}],["677",{"pageContent":"How to ask users to subscribe?\n\nhttps://docs.justpush.app/developer-guides/subscribe-to-groups\n\nUsers can subscribe to a group using the JustPush Dapp. But you can also ask them to subscribe to your group using your own UI by using the JustPush SDK.\n\nYou can also make your users subscribe to your group on -chain by calling JustPush smart contracts directly.\n\nStep 03: Send notifications\nhttps://docs.justpush.app/developer-guides/sending-notifications\n\nWhat are the types of notifications?\n\nThere are two types of notifications. Broadcast and Direct. Broadcast notifications are sent to all users who have subscribed to a group. Direct notifications are sent to a specific user.\n\nHow to send notifications?\n\nGroup owners can send notifications to their users using the JustPush Dapp. This can be also done by using the JustPush SDK or by calling JustPush smart contracts directly.","metadata":{"loc":{"lines":{"from":567,"to":584}}}}],["678",{"pageContent":"Group owners can send notifications to their users using the JustPush Dapp. This can be also done by using the JustPush SDK or by calling JustPush smart contracts directly.\n\nStep 04: Recieve notifications\nSubscribed users can receive notifications in a variety of ways. With the SDK, you can show notifications in your own UI, mobile app, service, etc.\n\nFor the scope of this hackathon, we have built a telegram bot and a discord bot that can be used to receive notifications. But the list of supported methods can be easily extended.\n\nContract address:\nMainnet: TMptrmkFrmvc3zHV7c62kHAFka44Ae5ob1\n\nProject Milestones:\n\nSmart Contracts: Done\nSDK: Done\nFrontend: Done\nTelegram/Discord Bots: Done\nDocumentations : Done\nPlease note that the Groups listed in the DApp are for demonstration purposes only. You will not be getting notifications from the listed projects yet. But we are planning to bring the ecosystem projects towards the platform once the hackathon is over.","metadata":{"loc":{"lines":{"from":584,"to":601}}}}],["679",{"pageContent":"On the other hand, if you are representative of any of the listed projects (Sunswap, ApeNFT etc). Please reach out. We can give you ownership and guide you - so you can send notifications to your target audience easily.\n\nFALT: Physical Art On-Chain\nTRON Hackathon\nHackathon Season 3\nweb3\nNov 2022\nDec '22\n\novon\n\n1\nNov '22\nProject Name : Falt\n\nProject Track : Web3\n\nTeam Name : Renaissance Labs\n\nTeam Member(s) :\n2 Members\nboxfox\novon\n\nDevPost URL :\n\nDevpost\n\nFalt 12\nFalt introduces on-chain governance for fractional ownership of a physical asset, starting with contemporary artworks.\n\nProject Goal :\nWe tokenize physical assets on-chain and make them accessible to retail investors.","metadata":{"loc":{"lines":{"from":603,"to":635}}}}],["680",{"pageContent":"Project Goal :\nWe tokenize physical assets on-chain and make them accessible to retail investors.\n\nOne of the most interesting use-cases come from setting the tokenized physical asset as a collateral on lending protocols. We can transparently rate the collateral on the market terms and build more liquidity to give a loan against the asset. For example, if I have a Banksy’s Girl With Balloon (estimated value of $100,000) and tokenized / fractionalized it with Renaissance Labs, I have a liquidity source against my asset that wasn’t available or took too long to receive in real life. Bringing assets with real utilities is the next crucial step for crypto, and it started with stable coins to us.\n\nFalt tokenizes physical assets on-chain and make them accessible to retail investors.","metadata":{"loc":{"lines":{"from":635,"to":640}}}}],["681",{"pageContent":"Falt tokenizes physical assets on-chain and make them accessible to retail investors.\n\nOne of the most interesting use-cases come from setting the tokenized physical asset as a collateral on lending protocols. We can transparently rate the collateral on the market terms and build more liquidity to give a loan against the asset. For example, if I have a Banksy’s Girl With Balloon (estimated value of $100,000) and tokenized / fractionalized it with Renaissance Labs, I have a liquidity source against my asset that wasn’t available or took too long to receive in real life. Bringing assets with real utilities is the next crucial step for crypto, and it started with stable coins to us.\n\n[What your project is trying to accomplish]\nProject Info :\nDeFi is mostly stable coins, swaps, lending and derivatives, limited by the number of the building blocks. Real-world asset on-chain increase the number of DeFi lego blocks to grow the market size and the users with higher stability and growth.","metadata":{"loc":{"lines":{"from":640,"to":646}}}}],["682",{"pageContent":"The global financial value mostly derives from real world assets. For example, the global real estate market has $360 trillion (https://www.savills.com/impacts/market-trends/the-total-value-of-global-real-estate.html 2), and gold has $11 trillion market capitalization (https://companiesmarketcap.com/gold/marketcap/ 1). Think about unlocking the values tied with the real world assets on-chain with DeFi incentives. Let’s take USDC for example. The yields from USDC outperformed Aave and Compound in the last year. (https://blockworks.co/what-are-real-world-assets-defis-newest-yield/). Another example would be Synthetix - a dApp that offers on-chain exposure to fiat currency, commodities and stocks through synthetic cryptocurrencies, locking up to $3 billion worth of assets in the protocol at its peak.\n\nTaking this notion further, we believe that tokenizing world-class physical assets can be beneficial for a multitude of reasons.\n\nFor the artists:","metadata":{"loc":{"lines":{"from":648,"to":652}}}}],["683",{"pageContent":"Lowering the barrier of entry for their artwork whilst expanding their consumer base. Rather than one individual owning a valuable asset, multiple people can have partial ownership of the asset for the portion they own whilst maintaining the integrity of the physical asset and the transaction fees introduce a new income stream for the artist. i.e. people would rather own a piece of the Mona Lisa over another one of Da Vinci’s artwork.\nArt in its purest form is subjective and difficult to be made proprietary. The global art market was estimated to be worth around US$405 billion in 2021 and rapidly growing, and with the advance in technology, gives rise for more. intellectual property infringement. (https://aaaipright.com/the-impact-of-intellectual-property-on-the-art-market-in-hong-kong/ 1). However, with the use of blockchain technology, fALT tokens can act as underlying assets - much like financial derivatives - and can also verify the authenticity and ownership of the assets.","metadata":{"loc":{"lines":{"from":654,"to":655}}}}],["684",{"pageContent":"fALT can also be gamified through token ownership. Artists can impose certain benefits and perks for holding a minimum threshold of <1 fALT, further increasing the value of their collection.\nFor the consumers:","metadata":{"loc":{"lines":{"from":656,"to":657}}}}],["685",{"pageContent":"Like financial derivatives, fALT will bring a wave of new investors to trade in this new asset class. We have already seen the huge success of $GMX and $SNX on Arbitrum and there’s still plenty room to grow given the size of the current derivatives market. Indices, ETFs and vaults are just a few examples of the benefits of fALTs.\nHolding <1 fALT can also give consumers access to utilities that are gated from the public, much like how NFT passes/POAPs/tickets are used today. This design is fluid and dynamic and stems from the original collection instead of launching multiple collections.\nProject Website : https://falt.app/ 20\n\nProject Test Instructions :\n\nPress “Launch App” on the top-right\nClick on “Eunjin Kim’s Location of God - Crowded (2020)”\nConnect wallet\nSwap “KGCC” with TRX\nProject Details :\nRenaissance Labs Pitch Low Quality.pdf (2.7 MB)","metadata":{"loc":{"lines":{"from":659,"to":670}}}}],["686",{"pageContent":"Press “Launch App” on the top-right\nClick on “Eunjin Kim’s Location of God - Crowded (2020)”\nConnect wallet\nSwap “KGCC” with TRX\nProject Details :\nRenaissance Labs Pitch Low Quality.pdf (2.7 MB)\n\nProject Milestones :\nThe following milestones are to distribute ALT in a launch and flywheel the fALT distribution with on-chain governance to select the desired artworks by the community. The following are the tech specs -","metadata":{"loc":{"lines":{"from":670,"to":678}}}}],["687",{"pageContent":"ALTToken: ALT Token\nfALTToken\nwfALTTokenMilestone 1: $ALT and $fALT Launch\nfALTSale: Used for the first sales of fALT\nALTDrop: ALT Token air-dropped in accordance to fALT purchase amount\nBuyback: Buying back the ALT token at specified price with respective cliff. More details are outlined in the tokenomics.\nVote: On-chain governance on artworks yet to be sourced. If the vote is successful, the voters will receive 10% discount on the offerings.\nALT Airdrop: $ALT will be airdropped to holders and fALT purchasers. The ALT drop amount will increase in respect to the amount of fALTs purchased.\nFaucet: Sale of $ALT tokens with price increase cliffs at the number of tokens sold.","metadata":{"loc":{"lines":{"from":680,"to":688}}}}],["688",{"pageContent":"Future Milestones:\nLending Protocol\nThis milestone is where our real plans begin to unveil. The lending facility allows for permission-less lending and debt origination with fALTs and other ERC-20s as collateral assets. The primary goal is to allow anyone to create a market between a pair of ERC-20 tokens. Any token with an oracle data feed can be used as collateral.","metadata":{"loc":{"lines":{"from":690,"to":692}}}}],["689",{"pageContent":"Lender: Lenders provide asset tokens in exchange for fTokens.\nBorrower: Borrowers provide fALT or other collateral tokens in exchange to receive Asset Tokens. Borrowing incurs an interest rate which is to be paid to the lenders upon the redemption of fALTs.\nOracle: Oracle to calculate the market price for the fALT and asset tokens.\nRate Calculator: The contracts give an interest rate based on the amount of available capital to borrow. With less borrowers, the rate will be higher and vice versa.\nArtwork Pricing Algorithm: We will build a proprietary pricing algorithm for artworks. The algorithms are used to allow the lenders to know which\nLoan-To-Value: The borrower will have a Loan-To-Vale (LTV) to represent the ratio between the loan and the collateral deposited. The LTV will decide the health range of the borrower’s position.","metadata":{"loc":{"lines":{"from":694,"to":699}}}}],["690",{"pageContent":"Loan-To-Value: The borrower will have a Loan-To-Vale (LTV) to represent the ratio between the loan and the collateral deposited. The LTV will decide the health range of the borrower’s position.\nLiquidator: When the borrower’s LTV is beyond the maximum LTV, liquidators can repay the debt for the borrower and receive the collateral with liquidation fees.\nArtist Index (fALTI)","metadata":{"loc":{"lines":{"from":699,"to":701}}}}],["691",{"pageContent":"This milestone’s objective is to create liquidity for the illiquid artworks by creating indices. fALTI is the liquidity aggregator for the illiquid artworks. It’s pegged to the basket of fALTs to track inflation and price variations of the assets held.\n\nThe creators of an artist index has a creator fee in perpetuity to incentivize third-parties to create new indices and receive trading fees by providing liquidity on a DEX. The indices aim to be on-chain value account of the basket of assets held.","metadata":{"loc":{"lines":{"from":703,"to":705}}}}],["692",{"pageContent":"Artist-based Index: We will create an index token comprised of basket of the artists’ pieces. The creator of the index token will have to burn ALT to create the index and will be receive the origination fee in perpetuity until the community decides otherwise. The liquidity providers are able to accrue the trading fees.\nWhitelisting for Index: Only whitelisted assets will be able to added on to an index for the fALT. This is to ensure only the relevant assets are held into the index.\nAsset addition into index: fALTs whitelisted in the index token can be added to the index at anytime. The index grows in value of the fALT added into the index and mints new tokens to the user adding fALT. This allows the fALT owner to obtain instant liquidity through indices and index investors to have a hedging agent when investing into a more liquid basket, while also investing into an illiquid artwork alone.","metadata":{"loc":{"lines":{"from":707,"to":709}}}}],["693",{"pageContent":"Meson-To : Empower web3 app to accept inter-chain stablecoin transfer\nTRON Hackathon\nHackathon Season 3\ndefi\nSep 2022\nDec '22\n\neXterkTi","metadata":{"loc":{"lines":{"from":712,"to":719}}}}],["694",{"pageContent":"eXterkTi\n\n3\nSep '22\nProject Name: Meson-To\nProject Track: DeFi\nTeam Name: Meson Team\nTeam Member(s): 20+ across the globe\nDevPost URL: Meson-To : Inter-chain stablecoin transfer protocol for web3 | Devpost 13\nProject Goal: Empowers web3 apps to instantly accept USDT/USDC from 16 chains and push user exposure to the next level with Meson-To SDK. Meson-To is the easiest way to go multi-chain with 0 fees and 1 min finality.\nProject Website: https://meson.to 38\nTry our demo now : https://demo.meson.to 6\nGithub Repo : GitHub - MesonFi/meson-to 4\nProject Test Instructions: We have built a mainnet demo for every-one to try out! The demo connects Meson-To with a simple smart contract on Polygon which transfers all incoming funds to the sender address on Polygon. So treat it as a cross-chain tool to Polygon when you play around! Try out today at https://demo.meson.to 6\nProject Details:","metadata":{"loc":{"lines":{"from":719,"to":733}}}}],["695",{"pageContent":"Inspiration\nWhile Ethereum still dominates the blockchains, we see the inevitable tide of multi-chain ecosystem coming along its way, where Tron is currently leading this tide. However, the problem still exists as the users and good projects are often mismatched, where users have assets on chain A when great projects are live only on chain B. The current system has not been optimized for this and we thus came up with Meson-To, aiming to empower web3 app capability to interact with users and assets across different chains.\n\nWhat it does\nMeson-To is an SDK enabling web3 app to interact with stablecoins from other chains through its minutes-fast and almost-zero fee swap network, which currently supports Ethereum, Tron, BNB Chain, Polygon, Arbitrum, Optimism, Avalanche, Fantom, Conflux eSpace, Evmos, Harmony, Aurora, Moonriver, Moonbeam, zkSync, and EOS.","metadata":{"loc":{"lines":{"from":735,"to":739}}}}],["696",{"pageContent":"All Meson-To swap transactions are highly secured and trackable with contract-level integration to the smart contract and the project has been repeatedly audited by Trail of Bits and SSLabs at the Georgia Institute of Technology\n\nHow we built it\nThe Meson-To SDK is built on the award-winning Meson Protocol (https://meson.fi 7), providing secure, fast, and economical stablecoins swaps to web3 apps and users.\n\nThe SDK is an open-source project, while the underlying Meson protocol, provides the fastest (1-2 minutes), cheapest (down-to-0 fee), and easy-to-use stablecoins swap platform available in the market.\n\nTry out Meson-To now!\nMeson-To has been launched on mainnets and is ready to integrate to web3 app.\n\nFeel free to learn more about Meson-To at https://www.meson.to 4 . Or try out our demo at https://demo.meson.to 3","metadata":{"loc":{"lines":{"from":741,"to":751}}}}],["697",{"pageContent":"Feel free to learn more about Meson-To at https://www.meson.to 4 . Or try out our demo at https://demo.meson.to 3\n\nThe Team behind Meson-To\nOur founders are Y-Combinator alumni (W18) and repeatedly entrepreneurs who had immersive blockchain experience since 2019. We truly believe in the potential of blockchains and want to make it ever easier to use by solving the basic issue; breaking the isolation of stable assets on different chains. We combine web2 product craftsmanship with web3 technology to build Meson-To, aiming to fuel the booming multi-chain ecosystem, making it viable for everyone.\n\nProject Milestones: We have launched Meson-To on mainnets and is ready to integrate with our seed project. DM us if your projects want to extend your user base to anyone with stablecoins on other chains and push user experience to the next level. DM us to discuss!\n\nBunny Notes - A Zero-Knowledge Proof based Gift Card and Cash Note Protocol\nTRON Hackathon\nHackathon Season 3\ndefi\nOct 2022\nDec '22","metadata":{"loc":{"lines":{"from":751,"to":763}}}}],["698",{"pageContent":"Bunny Notes - A Zero-Knowledge Proof based Gift Card and Cash Note Protocol\nTRON Hackathon\nHackathon Season 3\ndefi\nOct 2022\nDec '22\n\nbarfolomew\n\n6\nOct '22\nProject Name: Bunny Notes\n\nProject Track: DeFi\n\nTeam Name: StrawberryChocolateFudge ( The name of the github user, the project is developed by a sole developer) ,\n\nGithub : GitHub - StrawberryChocolateFudge/Bunny-Notes: A Zero knowledge Proof Based Gift Card and Cash Note Implementation 13\n\nTeam Member(s): barfolomew\n\nDevPost URL:\nDevpost link 12\n\nWeb App Link: Bunnynotes.finance 29\n\nProject Goal:\n\nThe goal is to create an accessible and secure way to Gift or Spend USDT and USDD in-person or online and to spend crypto instantly with the same security as Single Use Virtual Credit Cards and with the same ease as Pay Pass credit card payments.\n\nCreate printable Gift Cards to gift crypto in person to anyone.","metadata":{"loc":{"lines":{"from":763,"to":793}}}}],["699",{"pageContent":"Create printable Gift Cards to gift crypto in person to anyone.\n\nJust scan a QR code to pay and only one of the parties has to have internet connection during the payments. The Notes can be printed and stored offline and can be spent like cash and you can pay with just the fraction of the denomination and receive back change.\n\nMake in-person crypto payments so easy even your grandma could use it!\n\nProject Info:\nbunnyNotes\nbunnyNotes\nAs seen above, the application uses Zero-Knowledge Proofs to prove on-chain the ownership of crypto notes that have the value deposited into smart contracts.\n\nAlice generates a note using cryptography and deposits the value. These notes can be used to withdraw the value later, as a form of a gift card( full withdraw) or a cash payment where alice can receive change and pay with just a fraction of the note denomination.\n\nProject Website: bunnynotes.finance (Available now)\n\nProject Test Instructions:","metadata":{"loc":{"lines":{"from":793,"to":808}}}}],["700",{"pageContent":"Project Website: bunnynotes.finance (Available now)\n\nProject Test Instructions:\n\ngo to the website bunnynotes.finance.\nYou need metamask to try out the application\nYou can see the help page for information about how the app works\nSwitch to the correct testnet and mint some testnet tokens for yourself.\nNow you are ready to try the app and create gift cards or cash notes.\nClick purchase gift card or purchase cash note\nDownload the note, approve spend and deposit the ERC20 to give the note Value\nYou can verify the downloaded Notes\nGive the gift card to somebody!\nCash out the gift cards or create payment links to spend the cash notes!\nEnjoy the instant gas free payments using the cash notes!\nProject Details:\n\nThe project is developed using Circom, Hardhat, Solidity and React,Web3.js.\n\nThe project uses Circom circuits for zero-knowledge proofs and Solidity for payments and to interact with ERC-20 tokens.","metadata":{"loc":{"lines":{"from":808,"to":827}}}}],["701",{"pageContent":"The project is developed using Circom, Hardhat, Solidity and React,Web3.js.\n\nThe project uses Circom circuits for zero-knowledge proofs and Solidity for payments and to interact with ERC-20 tokens.\n\nThe generated notes are rendered as PDF files and downloaded to the user’s pc.\nThe value must be deposited into the smart contract for the note to be valid and the notes are invalidated after the value has been withdrawn. They are single use only.\n\nThe plan is to support USDT and USDD notes initially, with the denomination 10 USD, 100 USD and more coming later.\n\nThe notes can be printed and later spent without internet connection. because while making payments only one of the parties (Alice or Bob) needs to have internet.\n\nThis allows us to create instant payments for point of sale systems where the seller transmits the transaction to the network while the buyer can just pay by scanning a QR code and be sure the seller don’t have access to her full balance.","metadata":{"loc":{"lines":{"from":827,"to":838}}}}],["702",{"pageContent":"Paying with a note is as secure as Single-Use Virtual Credit Cards where we can set the maximum limit to allow less trust between parties. Alice can be sure Bob cannot steal more than the denomination and pay securely (on the go) without exposing her full balance.\n\nMaking payments this way adds an extra layer of security over paying manually or via smart contract calls where an attacker could approve high spend allowances to steal funds.\n\nUsing the payment request feature, Bob can create a payment link to send to Alice and when Alice makes the payments the accounts are instantly credited, or Bob could show the payment request in person on his phone and scan the QR code of Alice’s note for instant payments. Alice don’t have to have internet connection to make the payment.\n\nThe withdraw fee is 1% but there are no additional costs.","metadata":{"loc":{"lines":{"from":840,"to":846}}}}],["703",{"pageContent":"The withdraw fee is 1% but there are no additional costs.\n\nBecause of the security provided by zero-knowledge proofs, it is possible to create fully gas-less payments for both parties later. The zero-knowledge proof contains all the details of the transaction so a relaying third party cannot maliciously alter it. This way we can create crypto payments in the future without the direct use of crypto wallets.\n\nDisclaimer: While the project might work similarly to Tornado Cash with the use of notes, it does not provide any anonymizing or mixing features. All transfers of funds are traceable.\n\nProject Milestones:\n\n Zero-Knowledge Proof Circuit development\n Smart Contract Development\n Front-End with React\n Testnet deployment\n Front-End deployment\n Relaying server development (Gasless txs)\n Smart Contract Code Review (After the Hackathon)\n Mainnet Deployment\n\nContract Address:\nThe smart contracts are on BTTC testnet, I will list the links with the addresses with a link to the contract code","metadata":{"loc":{"lines":{"from":846,"to":864}}}}],["704",{"pageContent":"Contract Address:\nThe smart contracts are on BTTC testnet, I will list the links with the addresses with a link to the contract code\n\nZkSnark Verifier contract: (Auto generated from circom circuit!)\nVerifier Contract on testnet.bttcscan.com 3\nVerifier Contract Source Code 2\n\nBunny Notes Contracts:\nBunny Notes Contract on testnet.bttcscan.com\nBunnyNotes.sol (Parent Contract)\nERC20Notes.sol\n\nERC20MOCK contract (USDTM), used for testing:\nLink to testnet.bttcscan.com\nERC20 Mock Source\n\nInheritokens by Team Tokinhers - Let your nominee get what they deserve\nTRON Hackathon\nHackathon Season 3\ndefi\nNov 2022\nDec '22\n\nBhumi\n\n4\nNov '22\nProject Name: Inheritokens\n\nProject Track: DeFi\n\nTeam Name: Tokinhers\n\nTeam Member(s): Team of 2 @Bhumi @Jaydip\n\nDevPost URL: Inheritokens | Devpost 22\n\nProject Goal: Inheritokens lets you appoint a nominee and securely passes on your crypto assets in the event of your death.","metadata":{"loc":{"lines":{"from":864,"to":901}}}}],["705",{"pageContent":"DevPost URL: Inheritokens | Devpost 22\n\nProject Goal: Inheritokens lets you appoint a nominee and securely passes on your crypto assets in the event of your death.\n\nProject Info:\ninheritokens_landing_page\ninheritokens_landing_page\ninheritokens_signup_page\ninheritokens_signup_page\ninheritokens_profile_page_03\ninheritokens_profile_page_03\nProject Website: https://inheritokens.vercel.app/ 27\nDemo Video URL : Inheritokens - YouTube 9\nProject flow : Miro | Online Whiteboard for Visual Collaboration 5\n\nContract address : 0xaEF8eb4EDCB0177A5ef6a5e3f46E581a5908eef4 (mumbai testnet)\n0xB987640A52415b64E2d19109E8f9d7a3492d5F54 (BTTC)\n\nProject Test Instructions:","metadata":{"loc":{"lines":{"from":901,"to":919}}}}],["706",{"pageContent":"On the landing page, you can see the Get Started button and the Wallet Connect button.\nconnect your wallet by clicking on the “connect wallet” button.\nIf your wallet address is not registered, you will be redirected to the “Sign Up” page if you click the “Get Started” button; otherwise, you will be redirected to the “Profile” page.\nOn the profile page, you can see the collectibles, tokens, and nominee buttons.\nYou can see the list of nominees you’ve added by clicking on the “Nominee” button, and you can add a nominee by clicking on the “Add Nominee” button.\nOn collectibles, you have a button that says “Choose nominee.” By clicking on that button, you can choose the nominee for that asset. After choosing a nominee, it will show “nominated” and a “change nominee” button for that asset. You can also change your nominee for that asset.\nProject Details: Inheritokens provides a way to ensure the tokens, NFTs, and digital assets of a user don’t go redundant within the wallet.","metadata":{"loc":{"lines":{"from":921,"to":927}}}}],["707",{"pageContent":"So, if any wallet sees an absence of activity such as buying, selling, receiving, sending, or swapping in 6 months, the wallet owner shall be contacted through an official email.\n\nIn an event where the owner responds within a 1-month time frame from the date of communication, we consider the wallet to be “alive” although inactive.\n\nWhereas, in an event where the wallet owner hasn’t responded, an email to the nominee is sent out to claim the assets of the ghost user. The nominees must visit the website to claim the assets.\n\nAs of now, the functionality is specific to MetaMask wallets in the Polygon blockchain. We aim to develop a multi-chain system for the easy transfer of assets from one wallet to another, or from one blockchain to another without difficulties.\n\nProject Milestones:\n\n25-10-2022 : Backen Api, Contract, Raw designs, Miro board\n\n5-11-2022 : chron job, UI, Api integration\n\n8-11-2022 : Responsive, smart contract integration\n\nFuture Goals:","metadata":{"loc":{"lines":{"from":929,"to":945}}}}],["708",{"pageContent":"Enhance the platform’s functionality for smart wallet backup and recovery. When private keys are lost, the upcoming version will also be employed to guard against the loss of cryptographic assets.\nWe will also collaborate with non-profit organizations. The user can donate some of their assets. If no claims are made by the nominee, the unclaimed assets can be donated. Our platform will not suggest any charities. The TRON community can play an active role in suggesting such organizations.\nWe will make the platform compatible with multiple blockchains so that it will increase its accessibility for a wide range of users.\nIn version 2, we will include a feature that allows you to add a number of nominees in priority order. So after the user’s demise, if the first nominee, which has the highest priority, does not respond, we will move forward with the second nominee and in like manner.","metadata":{"loc":{"lines":{"from":947,"to":950}}}}],["709",{"pageContent":"Moreover, we will provide functionality where users can divide their tokens among multiple nominees. For example, you want to give 60% of your BTT token to Alice and 40% of your token to B. That will be done in our next version.","metadata":{"loc":{"lines":{"from":951,"to":951}}}}],["710",{"pageContent":"Elk Finance Launch on BTTC Mainnet by Team Elk- Connecting BTTC to 20 Blockchains\nTRON Hackathon\nHackathon Season 3\ndefi\nNov 2022\nDec '22\n\nLtSnakePlissken\n\n10\nNov '22\nProject Name: Elk Finance\n\nProject Track: DeFi\n\nTeam Name: Team Elk\n\nTeam Member(s): 6 Team Members- Pyro, LtSnakePlissken, FoxFortyTwo, Baal, Michelangelo, FiatsJudas\n\nDevPost URL: https://devpost.com/software/elk-finance 18\n\nProject Goal: For our submission, we will be launching our ElkNet and ElkDEX on BTTC to connect the BTTC mainnet to 20 other blockchains.\n\nProject Info: Follow the link below to see our video pitchdeck for the Hackathon!\n\nElk Finance Tron Hackathon Season 3 Video Pitch Deck\nElk Finance Tron Hackathon Season 3 Video Pitch Deck\nAlternatively, we have a traditional pitch deck available here:\nTron Hackathon Pitch Deck.pdf (3.5 MB)\n\nContract Addresses: See here for an up to date list of Smart Contracts deployed on BTTC- BitTorrent Chain - Elk.Finance Docs 2","metadata":{"loc":{"lines":{"from":953,"to":983}}}}],["711",{"pageContent":"Contract Addresses: See here for an up to date list of Smart Contracts deployed on BTTC- BitTorrent Chain - Elk.Finance Docs 2\n\nContracts deployed as of November 14, 2022-\nElk | Address 0xeeeeeb57642040be42185f49c52f7e9b38f8eeee | BTTCScan - ELK Token\nElkRouter | Address 0x7520d45bcc30be211c6b28f6291522555eda4d6c | BTTCScan 1 - ElkDex Router\nElkFactory | Address 0xc06348aee3f3e92ee452816e0d3f25c919f6fb04 | BTTCScan - ElkDex Factory\nReservoir | Address 0x42424242B0c0d8A19dCD0dF362815E242586354A | BTTCScan - ElkNet Reservoir\nSingleStakingRewards | Address 0x57a1ce7686f3b2ab61f5191c76361f985b57e0fa | BTTCScan - ELK Single Stake Contract\nBTTC Account (Invalid Address) BTT-ELK farm\n\nProject Website:\nhttps://app.elk.finance 12 - Our dApp\nhttps://elk.finance 11 - Our website\nhttps://docs.elk.finance 3 - Our documentation\n\nProject Test Instructions:\n\nStep by step instructions are available in our docs for the usage of ElkNet:\n\n\ndocs.elk.finance","metadata":{"loc":{"lines":{"from":983,"to":1003}}}}],["712",{"pageContent":"Project Test Instructions:\n\nStep by step instructions are available in our docs for the usage of ElkNet:\n\n\ndocs.elk.finance\n\nUsing ElkNet to Bridge Cross-Chain\nElkNet cross-chain bridge allows transfers of ELK 1:1 between every chain Elk supports.\n\nA video is also available to guide you:\n\nTron Hackathon Walkthrough\nTron Hackathon Walkthrough\nFarming with ElkDEX:\n\n\ndocs.elk.finance\n\nHow to Farm with Elk 3\nNow you don't have to own a ranch to farm Elk!\n\nProject Details:\n\nElk Finance is building a peer-to-peer network for cross-chain value transfers and blockchain interoperability. ElkNet, the powerful cross-chain engine at the heart of the network, allows for secure and efficient transfers of value and information, reducing friction and asset fragmentation between blockchains. Community projects and developers will be able to build dynamic multi-chain applications that leverage ElkNet with features such as proxy tokens and cross-chain messaging.","metadata":{"loc":{"lines":{"from":1003,"to":1027}}}}],["713",{"pageContent":"Elk Finance combines several innovative features:\n\nCross-chain utility token for value transfer ($ELK)\n\nSafe and secure transfers compared to traditional bridges\n\nCross-chain value transfer via ElkNet in seconds between all the blockchains Elk supports\n\nBridging-as-a-Service (BaaS) to provide infrastructure for developers to leverage the ElkNet for custom bridging solutions\n\nCross-chain swaps between all connected blockchains\n\nImpermanent Loss Protection (ILP) for our liquidity providers\n\nNon-Fungible Tokens (Moose NFTs) with unique abilities and features\n\nPlans for a cross-chain stablecoin for value transfer and loans ($CHFT), a decentralized ElkNet with the help of nodes, Farming-as-a-Service\n\nand more…\n\nWhat are the Use Cases?","metadata":{"loc":{"lines":{"from":1029,"to":1049}}}}],["714",{"pageContent":"Plans for a cross-chain stablecoin for value transfer and loans ($CHFT), a decentralized ElkNet with the help of nodes, Farming-as-a-Service\n\nand more…\n\nWhat are the Use Cases?\n\nAt the core, our goal is to provide our users with a simple and cheap way to transfer value across chains. However, Elk’s mission goes far beyond just enabling users to swap assets across chains. With Elk, users will not have to think about which chain they are on. Some of the functions we will support include: calling smart contracts across chains, allowing smart contracts on different chains to interact, using liquidity on one chain to get a stablecoin loan on another chain, allowing cross- or multi-chain synthetic assets (proxy tokens), a Bridging-as-a-Service (BaaS) SDK for custom bridging solutions, and facilitating cross-chain arbitrage.\n\nIs This Yet Another Bridge?","metadata":{"loc":{"lines":{"from":1049,"to":1057}}}}],["715",{"pageContent":"Is This Yet Another Bridge?\n\nNo. While bridges are a step in the right direction, we believe they just do not do nearly enough to enable cross-chain functionality. Below are some of the problems with bridges that Elk aims to solve:\n\nSafety and security\n\nHigh cost\n\nSpeed\n\nLargely centralized\n\nHard to manage\n\nOne-off (you need to deploy a new bridge between every pair of chains)\n\nOnly support bridging assets that exist on both chains\n\nExtra costly conversions if the two assets to swap do not exist on both chains\n\nOur approach is much more efficient and inexpensive than a standard bridge. It is a “multi-bridge on steroids” that is safer, cheaper, faster, and more adaptable than the competition.\n\nProject Milestones: Before judging and voting takes place, Elk Finance will:\n\nLaunch ElkNet on the BitTorrent Chain Mainnet (BTTC) allowing all users from 20 chains to bridge to/from BTTC","metadata":{"loc":{"lines":{"from":1057,"to":1081}}}}],["716",{"pageContent":"Project Milestones: Before judging and voting takes place, Elk Finance will:\n\nLaunch ElkNet on the BitTorrent Chain Mainnet (BTTC) allowing all users from 20 chains to bridge to/from BTTC\n\nLaunch the ElkDEX on BTTC enabling swapping, LP provision, ELK farming with Impermanent Loss Protection (as long as subgraphs are operational), and the single-staking of ELK\n\nCollaborate with new and existing BTTC projects on whitelisting, farms, and marketing if requested\n\ngoStables - Decentralized Stablecoins for the Caribbean\nTRON Hackathon\nHackathon Season 3\ndefi\nOct 2022\nAug 3\n\nwescosmic\n\n17\nOct '22\nforum-banner\nforum-banner\nProject Name: goStables Protocol\nProject Track: DeFi\nTeam Name: goStables Team\nTeam Member(s): 2 - @wescosmic @Mypt\nDevPost URL: https://devpost.com/software/gostables 17\n\nProject Goal: To enable new business models and opportunities for many on Tron through the creation of decentralized, collateral backed stablecoins for countries within the Caribbean.","metadata":{"loc":{"lines":{"from":1081,"to":1108}}}}],["717",{"pageContent":"Project Goal: To enable new business models and opportunities for many on Tron through the creation of decentralized, collateral backed stablecoins for countries within the Caribbean.\n\nProject Info: PDF Overview:\ngoStables Overview.pdf (2.2 MB)\nThe goStables Protocol enables anyone to mint, trade and earn from gStables which are a collection of USDD backed, Caribbean stablecoins pegged to their real world exchange rates using price oracles.\n\nThere are many in the Caribbean region experiencing difficulties to access foreign currencies due to foreign banking de-risking policies and other FX issues. However, using gStables pegged to the real world, allows anyone holding that gStable to redeem that USDD anytime at the market rate. The existence of such locally pegged stablecoins can also facilitate greater blockchain user onboarding, by bridging the gap between digital currencies and national/cultural familiarity and context.","metadata":{"loc":{"lines":{"from":1108,"to":1114}}}}],["718",{"pageContent":"While CBDCs may expand further within the region in the near future, there is still a need Now, for decentralized stablecoins as they can provide many, with options for economic growth and inclusion along with a greater propensity to fuel an innovation and adoption wave on publicly accessible blockchains. Tron Blockchain, known for its speed and very cost effective transactions is already home to many US dollar pegged stablecoins. The introduction of USDD enabled a means for us to ideate/develop solutions like goStables Protocol on top of this over-collateralized stable asset (USDD).\n\nProject Website: https://gostables.org 18 | https://app.gostables.org 5\n\nProject Test Instructions:\n\n\ndocs.gostables.org\n\nIntroduction\ngoStables - Getting Started Guide\ngoStables - Getting Started Guide\n\nContract Address:\n\n\ndocs.gostables.org\n\nContract Addresses 2\n\nGitHub","metadata":{"loc":{"lines":{"from":1116,"to":1136}}}}],["719",{"pageContent":"docs.gostables.org\n\nIntroduction\ngoStables - Getting Started Guide\ngoStables - Getting Started Guide\n\nContract Address:\n\n\ndocs.gostables.org\n\nContract Addresses 2\n\nGitHub\n\nGitHub - gostables/smart-contracts: Started as a Tron Season 3 Hackathon... 3\nStarted as a Tron Season 3 Hackathon submission. Contribute to gostables/smart-contracts development by creating an account on GitHub.\n\nProject Details:\n\nThe protocol has 3 core features for users:\n\nSwap - Users can swap USDD to mint a variety of gStables - gXCD, gTTD, gBBD, gJMD with more options in the future. Swap them back at anytime to USDD at real world market rates. The latter action burns the gStable.\n\nVaults - Users can stake USDD in vaults to support their favourite gStable to proportionally earn 40% of protocol fees. Deposits are frozen for 72 hours and can be unstaked anytime after.\n\nWallet - Users can view their gStable and Vault balances as well as claim gStable Vault rewards every week.","metadata":{"loc":{"lines":{"from":1136,"to":1162}}}}],["720",{"pageContent":"Wallet - Users can view their gStable and Vault balances as well as claim gStable Vault rewards every week.\n\nThe protocol has 2 core means of generating revenue and strengthening its USDD collateral reserve over time:\n\nProtocol Fees: There is a fee of 0.3% in USDD per swap. 40% of this is distributed in gStables to Vault users every week.\n\nJustLend: USDD received via Swap and Vaults are supplied via their respective smart contracts, to JustLend’s USDD Market. 70% yields generated are provisioned to the goStables swap to increase collateral beyond 100% to cover more USDD redemptions during possible exchange rate fluctuations due to real world market forces.\n\nAdditional strategies will be employed in the future.\n\nProject Milestones:\nThe following will be completed for the hackathon:","metadata":{"loc":{"lines":{"from":1162,"to":1173}}}}],["721",{"pageContent":"Additional strategies will be employed in the future.\n\nProject Milestones:\nThe following will be completed for the hackathon:\n\nLanding page + Dapp UI/UX design - Completed\nSmart Contract development - Completed\nOnchain price data for 11 gStables - Completed\nDapp frontend integration + Testing - Completed\nFully functional MVP on Nile Testnet - Completed\nDocs with Getting Started Guide - Completed\nVideo Guide - Completed\nPost-hackathon:\n\nMainnet Launch (gTTD, gXCD, gBBD, gJMD…) - Q1 2023\nIntegrating gStables with existing projects - Q1 2023\nDashboard UI - View gStable info on one page - Q1 2023\nBuilding and promoting new products/use cases for gStables - Q2 2023\nProtocol governance - Q2 2023\nPlease comment if you have any questions or suggestions for us! Thanks and Cheers!\n\n31\n\nLazara - Generate NFTs with AI models\nTRON Hackathon\nHackathon Season 3\nnft\nOct 2022\nDec 2022\n\nalleh\n\n4\nOct '22\nProject Name: Lazara - Generate NFTs with AI models\n\nProject Track: NFT\n\nTeam Name: Lazara","metadata":{"loc":{"lines":{"from":1173,"to":1211}}}}],["722",{"pageContent":"alleh\n\n4\nOct '22\nProject Name: Lazara - Generate NFTs with AI models\n\nProject Track: NFT\n\nTeam Name: Lazara\n\nTeam Member(s): 1, @alleh\n\nDevPost URL: Lazara - AI generated NFTs | Devpost 73\n\nYoutube Video: Lazara - AI Generated NFTs - YouTube 30\n\nProject Goal: AI generated NFTs and AI generated NFT collections\n\nProject Website: https://lazara.io 93\n\nProject Info/Details:\n\nThere are two parts, the first is about generating an image and minting it into an EXISTING collection. The second is creating a collection, where users can later generate image and mint NFTs into the NEWLY CREATED collection. We are going to explain the first part here, because it is 100% finished.\n\nIt works like this:\n\nYou choose a collection, we have 4 test collections for the hackathon. They are","metadata":{"loc":{"lines":{"from":1211,"to":1237}}}}],["723",{"pageContent":"The Random Collection (no restrictions on what prompts are allowed)\nThe Space Collection 1 (only allows space related promps)\nThe Dog Collection 3 (only allows dog related prompts)\nThe Walter White (only allows promps that included Walter White)","metadata":{"loc":{"lines":{"from":1239,"to":1242}}}}],["724",{"pageContent":"The Space Collection 1 (only allows space related promps)\nThe Dog Collection 3 (only allows dog related prompts)\nThe Walter White (only allows promps that included Walter White)\nIf you choose “The Random Collection”, you can write whatever you want in the prompt. For example, you can write something like “mad yoda eating a sandwich”. This will trigger a request to our backend, where we run the model Stable Diffusion. Stable Diffusion will generate 1 or 4 images for you (depending on what you choose), and send them back to your browser. You can now choose to mint the Mad Yoda. When minting, the chosen Mad Yoda image will get uploaded to ipfs and then get minted on the chosen chain (Tron mainnet or Shasta testnet). When the minting is done, you can view the NFT at https://apenft.io 50. In fact, I did all of this, and here is the Mad Yoda I generated and minted: The Random Collection #11 - The Random Collection | APENFT 29","metadata":{"loc":{"lines":{"from":1242,"to":1245}}}}],["725",{"pageContent":"If you choose any of the other collections, then your prompt need to involve a word that is related to the connection. The words are shown on the page where you generate the images! You can test it for yourself here LAZARA 54.\n\nProject Test Instructions:\nStep 1: Go to LAZARA 54\nStep 2: Choose collection\nStep 3: Write a prompt and let the AI model generate images for you\nStep 4: Mint the generated image\nStep 5: View the newly created NFT on https://apenft.io 50!\n\nProject Milestones:\nWe want to support more models than we do currently! There are some open source models that we haven’t integrated yet, but we are also eagerly waiting for Google to launch access to Imagen, and OpenAI to launch API access for DALL-E 2. We also want to finish the “Create a Collection” part of the website. It’s also possible that we look into “image to image” generation, where users will be able to upload an image to the model, and the model will adjust it in some specified way and then return it.","metadata":{"loc":{"lines":{"from":1247,"to":1257}}}}],["726",{"pageContent":"We would love seeing you mint some NFTs at https://lazara.io 93 and post the results here! You can find inspiration at LAZARA 15 or at this awesome website https://krea.ai 51\n\nContract Address:\nMainnet:\n\nTRONSCAN | TRON BlockChain Explorer | 波场区块链浏览器 21\nTRONSCAN | TRON BlockChain Explorer | 波场区块链浏览器 17\nTRONSCAN | TRON BlockChain Explorer | 波场区块链浏览器 6\nTRONSCAN | TRON BlockChain Explorer | 波场区块链浏览器 5\nShasta testnet:\n\nTRONSCAN | TRON BlockChain Explorer | 波场区块链浏览器 11\nTRONSCAN | TRON BlockChain Explorer | 波场区块链浏览器 8\nTRONSCAN | TRON BlockChain Explorer | 波场区块链浏览器 7\nTRONSCAN | TRON BlockChain Explorer | 波场区块链浏览器 7\n\n\nThe TREE Token - World’s greenest stablecoin backed by physical forest (carbon offset credit NFT)\nTRON Hackathon\nHackathon Season 3\nnft\nNov 2022\nMar 29\n\nAJTREE","metadata":{"loc":{"lines":{"from":1259,"to":1283}}}}],["727",{"pageContent":"The TREE Token - World’s greenest stablecoin backed by physical forest (carbon offset credit NFT)\nTRON Hackathon\nHackathon Season 3\nnft\nNov 2022\nMar 29\n\nAJTREE\n\n6\nNov '22\nProject Name: The TREE Token\nProject Track: NFT\nTeam Name: The TREE Foundation\nTeam Member(s): 3 - AJTREE, JOHANNATREE\nDevPost URL: https://devpost.com/software/tree-foundation 21\nProject Goal: TREE offers a new alternative for people and businesses to offset carbon emissions. Instead of buying offset credits, we help you generate them.\nProject Info: [Will post more as we go]\nProject Website: www.teamtree.xyz\nProject Test Instructions: The smart contract for mint/burn (buy/sell) is live on mainnet but disabled at the moment.\nProject Details:\n\nVideo Intro to TREE: https://youtu.be/3bW5Q7Ya33k 14\n\nWhat is TREE and why do we exist?\n\nAn increasing number of individuals and companies are pledging to help stop climate change by decreasing emissions and offsetting what they cannot eliminate.","metadata":{"loc":{"lines":{"from":1283,"to":1309}}}}],["728",{"pageContent":"What is TREE and why do we exist?\n\nAn increasing number of individuals and companies are pledging to help stop climate change by decreasing emissions and offsetting what they cannot eliminate.\n\nThe demand on the voluntary carbon offset market is growing rapidly and is fueled by net-zero pledges. As a result, the annual market for offset credits is expected to grow 50X in the coming 10 years and novel solutions to meet demand are needed. However, the traditional “donation model” does not scale, and insight into how the money is used and its actual impact is limited.","metadata":{"loc":{"lines":{"from":1309,"to":1313}}}}],["729",{"pageContent":"Trees are the most efficient carbon sequesters but due to the high demand of timber and urban growth we still cut more forest than we plant. Investing in forest is considered one of the easiest and most tangible ways to offset carbon emissions but acquiring and managing a forest is costly, a cumbersome process and a long-term commitment. Forest funds are a good alternative and have been around for decades but investing in them is clunky. The notable disadvantages include high minimum investment requirements, annual fees, various ownership related regulations and their illiquid nature.\n\nThis is why TREE was founded. A new way of offsetting carbon emissions through forest investment, made accessible to all. TREE is an asset backed digital token where every coin is backed by","metadata":{"loc":{"lines":{"from":1315,"to":1317}}}}],["730",{"pageContent":"This is why TREE was founded. A new way of offsetting carbon emissions through forest investment, made accessible to all. TREE is an asset backed digital token where every coin is backed by\n\n1 m2 of forest, owned and managed by the TREE Foundation. It is a stable and green investment through which individuals and companies alike can positively impact their carbon footprint and be part of a new movement to combat climate change and preserve biodiversity. Buying TREE coins enables the TREE Foundation to acquire high quality forest land for carbon sequestering and conservation and through staking of the TREE coins the TREE coin holders can generate legitimate carbon offset credits - in the form of NFTs - which they can retire, gift or sell.\n\nThrough utilizing blockchain technology TREE simplifies buying, owning and selling forest. The token model and its inclusive access creates huge economies of scale.\n\nWhat does TREE look like under the hood?","metadata":{"loc":{"lines":{"from":1317,"to":1323}}}}],["731",{"pageContent":"What does TREE look like under the hood?\n\nTREE token is a stablecoin, with a fixed price of $0.50/token and minted on demand to ensure scalability. Every coin is backed by 1m2 of carbon sequestering forest, owned and managed by the token issuer, the TREE Foundation. The TREE Foundation is in the process of producing the world’s first continuous asset audit based on the ISRS 4400 (tokens vs forest holdings) with one of the big four auditors. We believe this added transparency will allow us to reach a wider audience of token holders and especially business clients who are looking for a scalable and cost-effective way to offset their emissions.\n\nTechnically TREE is very simple. We use smart contracts for minting, buying & selling tokens. The same goes for staking coins and minting NFTs as offset credits mature.\n\nA blackhole wallet is used for retiring the credits so there is always 100% transparency into what is minted, retired, traded, and sold.","metadata":{"loc":{"lines":{"from":1323,"to":1329}}}}],["732",{"pageContent":"A blackhole wallet is used for retiring the credits so there is always 100% transparency into what is minted, retired, traded, and sold.\n\nAt launch we will only support crypto payments for acquiring tokens but very soon we will start accepting fiat payments (debit / wire). A TREE holder doesn’t have to be a seasoned crypto veteran or even have their own wallet. We allow users to create a wallet connected to their phone number, so familiarity with web3 is not required in order to join TREE.\n\nTREE’s Business Model & Value Proposition\n\nThe demand for carbon offset is growing rapidly. Currently the market of offset services faces criticism of uncertainty as to their effectiveness. Planting a tree in Africa sounds great but what if it gets chopped down and is used as fuel (like 70% of trees in Africa)? The carbon your tree sequestered gets released back into the atmosphere and your impact on fighting climate change is annihilated.","metadata":{"loc":{"lines":{"from":1329,"to":1335}}}}],["733",{"pageContent":"TREE offers a novel, cost effective and transparent alternative. Instead of buying offset you can be generating it. This is how it works:\n\n1. Buy TREE tokens. The TREE tokens are a highly liquid and stable asset. They are backed by forest (land) which is a much more stable asset than e.g. gold, and the price is fixed. One TREE token is always backed by 1m2 of land and we provide regular audits for an extra layer of transparency.\n\n2. Stake TREE tokens. By staking your tokens you generate carbon offset credits. Credits are minted as NFTs and are typically valid for 3 years from mint. The TREE Foundation owns and controls all its forest and hence can guarantee the carbon sequestered is permanently removed. The public ledger guarantees the validity of all credits.","metadata":{"loc":{"lines":{"from":1337,"to":1341}}}}],["734",{"pageContent":"3. Retire, gift, or sell carbon credit NFTs. Many holders want to offset their carbon footprint so they can retire their offset credit NFTs after they have been minted. If the holders generate more than they need, they can gift them (e.g. to employees or family members) or hold on to them. The value of the offset credit NFTs is expected to grow with demand. A third alternative is selling the NFTs to non-holders or undercompensating holders.TREE is constantly innovating new use cases for its tokens and NFTs to match developing market demands e.g. as carbon offsetting may become mandatory.\n\nTREE will build its own marketplace, the TREE Platform, but is looking into listing the utility NFTs on already popular marketplaces.\n\nThe TREE Foundation makes its revenue from transactions of the tokens (1% per transaction), sales of unallocated offset credits (generated by non-staked tokens) and through a sales commission (20%) on offset credit NFTs sold through the TREE Platform.","metadata":{"loc":{"lines":{"from":1343,"to":1347}}}}],["735",{"pageContent":"Is TREE user friendly?\n\nThe objective behind TREE is to offer something that is in high demand globally and anyone and everyone is the target group - a stable; liquid and; green investment. Therefore the user experience is being designed so that no previous blockchain/crypto experience is required and to attract also crypto skeptics.\n\nTo become a TREE holder you don’t have to know what blockchain is. Our intuitive user interface will allow people to buy with their debit card like they were shopping online. The “new to crypto” users only need to give us their phone number and all communication can be done via SMS. For the “crypto veterans” acquiring TREE is like using a standard swap.\n\nPracticality & Use Case","metadata":{"loc":{"lines":{"from":1349,"to":1355}}}}],["736",{"pageContent":"Practicality & Use Case\n\nTREE was founded to give environmentally conscious people a new way to take action in the fight against climate change. The demand for carbon offsetting is rapidly growing and TREE tackles many of the problems current players battle with (e.g. cost, impact and transparency). For companies carbon offsetting is today, in accounting terms, a cost.TREE turns it into an asset. An asset that yields offset credits.\n\nImagine if exchanging some US dollars to Euro would pay for your electric bill. That’s exactly what TREE does for your carbon offset costs. You can easily exchange it back when needed, and all this without taking a currency exchange risk.","metadata":{"loc":{"lines":{"from":1355,"to":1359}}}}],["737",{"pageContent":"Tron being the blockchain of choice for TREE will create some great long term benefits for its community. This type of project is highly interesting from a media perspective so it will definitely increase Tron’s visibility. TREE choosing to build its platform on Tron is a testimony of its developer friendliness. TREE is a great case study for demonstrating how blockchain technology can be utilized to simplify complex transactional work (like automatically minting offset NFTs to token stakers) and increasing transparency and trust in a fund-like corporate constellation.\n\nWe obviously also want to become the defacto offset partner for all crypto projects to help eliminate the (sometimes unfair) emission stigma the industry carries.\n\nHow does TREE contribute to the larger Crypto Ecosystem?\n\nOn top of our main mission - helping people offset their carbon emissions in a smarter way - we want to be educators and a low barrier entry point into the crypto and blockchain world.","metadata":{"loc":{"lines":{"from":1361,"to":1367}}}}],["738",{"pageContent":"On top of our main mission - helping people offset their carbon emissions in a smarter way - we want to be educators and a low barrier entry point into the crypto and blockchain world.\n\nWe feel like blockchain projects often are over mystifying themselves by using industry specific lingo and hence making many things harder to understand than what they in reality are. We designed TREE from a perspective where our users do not even have to know they own cryptocurrency and transact through smart contracts and that their carbon offset credits are actually transactable NFTs that can instantly be verified as genuine and sold on various marketplaces around the world thanks to it being a non-fungible token on a blockchain.\n\nProject Milestones:","metadata":{"loc":{"lines":{"from":1367,"to":1371}}}}],["739",{"pageContent":"Project Milestones:\n\nStaking contract to earn offset NFTs\nNFT minting contract\nNFT visual design\nProof of Reserves - An ISRS 4400 (or equivalent) voluntary audit for validating that foundations forest ownership matches tokens in circulation.\nLaunch swap UI on website\nGo live and start trading\nHere’s an image to simplify how TREE works:\n\n\nArtBeat by Team 4thFloor - A new way for a better artwork ecosystem\nTRON Hackathon\nHackathon Season 3\nnft\nNov 2022\nDec '22\n\nyouvandra\n\n7\nNov '22\nProject Name:\nArtBeat\n\nProject Track:\nNFT\n\nTeam Name:\n4thFloor\n\nTeam Member(s):\n5 - @jonn @Adinil @albarelfauzan @FadjarDuwi @youvandra(me)\n\nDevPost URL:\n\nDevpost\n\nArtBeat 7\nA new way for a better artwork ecosystem\n\nProject Goal:\nIt is hoped that with Artbeat, it can Provide a place for talented artists to sell their masterpieces to people around the world, promote museums and exhibitions to reach more people, and reduce the level of fraud with the existence of NFT as the Certificate of Authenticity.","metadata":{"loc":{"lines":{"from":1371,"to":1413}}}}],["740",{"pageContent":"Project Info:\nArtBeat (2)_compressed.pdf (4.1 MB)\n\nProject Website:\nhttps://artbeat.tech 15\n\nProject Test Instructions:\n\nSet your network on metamask with BTTC testnet\n\nNetwork name : BitTorrent Chain Donau\nRPC : https://pre-rpc.bt.io/\nChain ID : 1029\nSymbol : BTT\nBlock Explorer : https://testscan.bt.io\n\nFor admin test :\nList NFT (COA) - (actually this step is only for ArtBeat staff)\n\nSign in to admin account\nemail : admin@admin.com\npassword : admin\n\nConnect to metamask wallet with BitTorrent Chain Donau\n\nClick the profile icon then select “List an NFT”\nJepretan Layar 2022-11-14 pukul 04.43.12\nJepretan Layar 2022-11-14 pukul 04.43.12\nThen fill in all the fields, as well as the NFT (COA)\nJepretan Layar 2022-11-14 pukul 04.40.16\nJepretan Layar 2022-11-14 pukul 04.40.16\nmake sure there is a balance in the wallet for gas and listing fees\n\nIf the listing is successful, the NFT(COA) will appear on the explore page\n\nFor users ( collectors ) :","metadata":{"loc":{"lines":{"from":1415,"to":1450}}}}],["741",{"pageContent":"If the listing is successful, the NFT(COA) will appear on the explore page\n\nFor users ( collectors ) :\n\nConnect to your metamask wallet by clicking connect button at the right side of the navbar (Chain : BitTorrent Chain Donau - Testnet)\n\nWe have some section like artist, event, and museum that you can check\nJepretan Layar 2022-11-14 pukul 05.05.40\nJepretan Layar 2022-11-14 pukul 05.05.40\nIf you want to buy artwork, you can go to explore section\n\nAfter that you can select the desired artwork.\nJepretan Layar 2022-11-14 pukul 04.41.43\nJepretan Layar 2022-11-14 pukul 04.41.43\nClick Details\nJepretan Layar 2022-11-14 pukul 04.42.16\nJepretan Layar 2022-11-14 pukul 04.42.16\nThen click buy now and make a payment using BitTorrent testnet\nJepretan Layar 2022-11-14 pukul 04.42.43\nJepretan Layar 2022-11-14 pukul 04.42.43\nAfter payment is complete, you already have the NFT (COA) and you are automatically entitled to the physical artwork registered with the COA.","metadata":{"loc":{"lines":{"from":1450,"to":1470}}}}],["742",{"pageContent":"You can check your NFT in your profile, click profile icon, and check profile\nJepretan Layar 2022-11-14 pukul 04.43.12\nJepretan Layar 2022-11-14 pukul 04.43.12\nYou can see the NFT that you have purchased in “my collection”\nJepretan Layar 2022-11-14 pukul 04.43.52\nJepretan Layar 2022-11-14 pukul 04.43.52\nProject Details:\nArtbeat is a curated art marketplace that aims to connect people who appreciate arts and artists who are working with physical or digital mediums. On our platform, artists can sell various types of art ranging from paintings, Photographs, Sculptures, and many more.\nTo prevent fraudulent purchases of artwork, we have used a blockchain network to verify all artworks on our platform. Each artwork on our platform will get a certificate of authenticity registered as an NFT.","metadata":{"loc":{"lines":{"from":1472,"to":1480}}}}],["743",{"pageContent":"In order to maintain safety in shipping, we have worked closely with experienced art handlers to ensure all artwork purchased can be shipped safely worldwide. In addition, we also work closely with art curators to ensure the authenticity of the work before making the NFT certificate of authenticity.","metadata":{"loc":{"lines":{"from":1481,"to":1481}}}}],["744",{"pageContent":"Our demo video:\n\nArtBeat  TRON Grand Hackathon - Season 3\nArtBeat TRON Grand Hackathon - Season 3\nProject Milestones:\nAfter we have launched the Minimum Viable Product (MVP), we will work with several exhibition organizers, artists, or museums to be able to hold artwork sales exclusively on our platform.\nNext, we will also add an Augmented Reality feature to display a 3d model of the artwork owned by the user\nFurthermore, there will be an Art Advisor role that can provide suggestions of suitable artwork for novice collectors to own according to their personality.\n\nWebsite Features :\n\nDelivery options\nEasy artwork search filter\nArtwork ownership history\nArt exhibition event ticket management\nPublication and promotion of works\nAggregation of artwork information from various sources\nContract Address:\nOur Smart Contract (BTTC Testnet) : BTTCSCAN | BitTorrent (BTT) Blockchain Explorer\n\nFractron - democratizing access to expensive nfts\nTRON Hackathon\nHackathon Season 3\nnft\nOct 2022\nDec '22","metadata":{"loc":{"lines":{"from":1483,"to":1508}}}}],["745",{"pageContent":"Fractron - democratizing access to expensive nfts\nTRON Hackathon\nHackathon Season 3\nnft\nOct 2022\nDec '22\n\nilovefractions\n\n2\nOct '22\nProject Name: Fractron - democratizing access to expensive nfts\nProject Track: NFT\nTeam Name: Fractron\nTeam Member(s): 2 (ilovefractions, larzenxyz)\nDevPost URL: Fractron - Fractional NFTs | Devpost 77\nVideo URL: fractron - fractionalized NFTs (Tron hackathon) - YouTube 64\nProject Goal: Fractionalization of NFTs on Tron. The main goal with fractron is to make it easier to participate in the NFT ecosystem for people with not so much money. With fractron, you can own fractions of a Bored Ape even if you only have a couple dollars to your name.\nProject Info:\n\nProject Website: https://fractron.xyz 78\nProject Github: GitHub - 0xradulov/fractron 54\nProject Test Instructions:","metadata":{"loc":{"lines":{"from":1508,"to":1530}}}}],["746",{"pageContent":"Project Website: https://fractron.xyz 78\nProject Github: GitHub - 0xradulov/fractron 54\nProject Test Instructions:\n\nBuy 1 or more NFTs on for example https://apenft.io 53.\nGo to https://fractron.xyz 78 and connect your wallet (we are deployed on shasta and mainnet BUT keep in mind the contracts are new and not audited so do NOT use this with expensive NFTs on mainnet).\nGo to fractionalize 13 and pick the NFTs you want to fractionalize, and then fractionalize.\nYou can now go to whatever DEX on tron you want, for example https://sunswap.io 11 and add liquidity for your fractions, and then anyone can trade them!\nProject Details:\nIn simple terms, you take one or more NFTs and divide them into fractions. More detailed, it goes like this:","metadata":{"loc":{"lines":{"from":1530,"to":1539}}}}],["747",{"pageContent":"Alice buys a bored ape, but she later wants to sell parts of it.\nAlice goes to Fractron, and “splits” her Bored Ape (TRC721 token) into a “vault”. When she does this, she is creating a TRC20 token that represent the bored ape. When creating the vault, she chooses the name, symbol and supply. As you might understand, the TRC20 supply is the number of fractions.\nNow this TRC20 representation of the bored ape is tradeable like a normal TRC20 token. This means that Alice can add liquidity for it on e.g sunswap, and now everyone can buy and sell the bored ape fractions!\nIf she ever wants the whole bored ape again, she just needs to buy all the fractions, go to Fractron and “join” the vault!\n\nYou are not limited to fractionalize a single NFT from a single collection, you can put multiple NFTs from multiple collections into your vault. Because of that, another thing you can do is:","metadata":{"loc":{"lines":{"from":1541,"to":1546}}}}],["748",{"pageContent":"You are not limited to fractionalize a single NFT from a single collection, you can put multiple NFTs from multiple collections into your vault. Because of that, another thing you can do is:\n\nCreate something we like to call “NFT Index Funds”. Imagine that you are the fund manager, and you buy for example 5 bored apes, 5 crypto punks and 10 tronninjas. You can then fractionalize all of these NFTs, and sell the fractions to people that want exposure to your fund!\n\nProject Milestones / What’s next:\n\nMake it possible to fractionalize TRC1155 tokens.\nMake it possible to fractionalize INTO a TRC1155 token, instead of into a ERC20 token. This will make it possible for the vault to have an image representation.\nWork on the user interface.\nGas-optimize the contracts.\nContract Address:\nMainnet: TRONSCAN | TRON BlockChain Explorer | 波场区块链浏览器 25\nShasta Testnet: TRONSCAN | TRON BlockChain Explorer | 波场区块链浏览器 31","metadata":{"loc":{"lines":{"from":1546,"to":1558}}}}],["749",{"pageContent":"Metastore - Cross-game NFTs for the metaverse\nTRON Hackathon\nHackathon Season 3\nnft\nOct 2022\nApr 19\n\nMetastore\n\n4\nOct '22\nProject Name: Metastore\nProject Track: NFT\nTeam Name: Void\nTeam Member(s): 2 - @santhaug @NaveenDeSanta\nDevPost URL: Devpost link 11\n\nTRC-20 Contract: TQiM9BYAxucUPEavoQVQr6AytkUw2NHPrR\nTRC-721 Contract: TFVherb9P9chNxmgwAKvyzy7FJfD3kpizb\n\nProject Goal: To accelerate mass and wide-scale adoption of blockchain and NFTs through cross-game NFT assets that have intrinsic value. To revolutionize the way people think about NFTs.\n\nProject Info: Metastore Litepaper\n\nProject Website: meta-store.in 34\n\nProject Test Instructions: Docs - Get Started\nSample Model to test: Sample Model 1\nDemo Game: Wanderer 1","metadata":{"loc":{"lines":{"from":1561,"to":1589}}}}],["750",{"pageContent":"Project Info: Metastore Litepaper\n\nProject Website: meta-store.in 34\n\nProject Test Instructions: Docs - Get Started\nSample Model to test: Sample Model 1\nDemo Game: Wanderer 1\n\n\nProject Details: Metastore is a marketplace for in-game items like Characters, Skins, and Weapons. The users can use their owned NFTs with our upcoming partner games. Creators can earn for creating NFT assets that can be used in-game. Developers can integrate NFT items as in-game assets. Listed are the four categories of NFTs in Metastore, and more are soon to come!\n\nAvatars - Typical jpeg or 3D image which can be used as a profile picture or for displays in games and other apps.\n\nCharacters - A complete humanoid character with a default skin which the player can use as in-game character.\n\nSkins - A part or a complete costume which can be added to the user’s character.\n\nWeapons - All sorts of weapons like guns, grenades, magic wands, etc. to be used in-game.","metadata":{"loc":{"lines":{"from":1589,"to":1606}}}}],["751",{"pageContent":"Skins - A part or a complete costume which can be added to the user’s character.\n\nWeapons - All sorts of weapons like guns, grenades, magic wands, etc. to be used in-game.\n\n\nProject Milestones: Roadmap - Since we are low on time for this hackathon, we are planning to complete only avatar and character NFT support during this period and then later launch to Mainnet with support for skins and weapons NFT. Check out our roadmap below.\n\nMetastore Roadmap\nMetastore Roadmap\n 34\n\n\n\n\nGalaxy Throne, a decentralised SciFi Strategy Game\nTRON Hackathon\nHackathon Season 3\ngamefi\nNov 2022\nDec '22\n\nLukret","metadata":{"loc":{"lines":{"from":1606,"to":1627}}}}],["752",{"pageContent":"Metastore Roadmap\nMetastore Roadmap\n 34\n\n\n\n\nGalaxy Throne, a decentralised SciFi Strategy Game\nTRON Hackathon\nHackathon Season 3\ngamefi\nNov 2022\nDec '22\n\nLukret\n\n5\nNov '22\nProject Name: Galaxy Throne\nProject Track: GameFi\nTeam Member(s):\nMassimiliano ( Frontend & Smart Contract Dev)\nMarco ( Smart Contract Dev)\nEnder ( Backend & Smart Contract Dev)\nDevPost URL: Devpost Link 14\nProject Goal: Decentralized Gameplay with real ownership & player driven story\nProject Info: Project Demo Video 12\nProject Website: galaxythrone-dapp.vercel.app 37\nProject Test Instructions: Instructions & Guide are on the website\nProject Details:\n\nGalaxyThrone\nGalaxyThrone\nUpdate: Round 1 Release Announced! 1\nWelcome to Galaxy Throne,\na fully on-chain SciFi strategy game inspired from games like tribal wars.\n\nIn these games there was always a strong sense of ownership of the assets owned in the game.","metadata":{"loc":{"lines":{"from":1627,"to":1664}}}}],["753",{"pageContent":"In these games there was always a strong sense of ownership of the assets owned in the game.\n\nBut ownership never actually existed, only temporary allowances and tightly controlled structures that forbade you to do as you wished.\n\nWe wanted to create a SciFi Strategy Building Game where your owned planets & ships are actually yours, not just existing on a centralized backend and dictated by one company.\n\nSo every Asset in our game has been created using ERC721 for planets and ships and ERC1155 for buildings/research/technologies, while the resources of the game itself are ERC20 tokens.\n\nThe main focus is building a sandbox that gives people ample freedom to play the game in as many ways as they wish to. The decentralized aspect ensures that the community has the final say into the game’s features, with a democratic governance DAO as the backbone of the future development path.","metadata":{"loc":{"lines":{"from":1664,"to":1672}}}}],["754",{"pageContent":"New Players begin with minting their home-planet , starting out with invulnerability from other players for a period of time.\n\nDuring this period they have the chance to build their manufacturing buildings, craft their defense buildings & create their spaceships. These preparations will be vital to defend their planet in the future, or trying out their luck in the galaxy and conquering other planets\n\nThe resources buildings such as the Ethereus Miner give the user a boost to the resource miningthat are claimable every 24 hours. These Resources(Ethereus, Crystal & Metal) are the base-material of which every building & ship is being manufactured with.\n\nThe claim & resource-mining-system will be entirely on-chain. In order to avoid gas-fees & frequent transactions we will use automated chain-bots triggering those transactions instead of the player, for a gasless & seamless user experience.","metadata":{"loc":{"lines":{"from":1674,"to":1680}}}}],["755",{"pageContent":"Planets can be conquered by defeating all of the enemies spaceships & defense buildings, giving you the planet NFT & defeating their fleet ( Ships are not indestructible!)\n\nUninhabited Planets can be terraformed via the Terraformer Capital Ship, so expansion wont be strictly aggressive in nature.\n\nSpaceships[ERC721 NFTs] will come in several categories and types, and all ships will fulfill their own specialized roles in combat.\n\nShips will be customizable with Modules that affect their stats & abilities, along with an experience stat that rises over the course of battles. All those modules & stats will be tracked on-chain\n\nAll the Artwork depicted is completely original using the Stable-Diffusion AI\n\nThe next steps of our project are:","metadata":{"loc":{"lines":{"from":1682,"to":1692}}}}],["756",{"pageContent":"All the Artwork depicted is completely original using the Stable-Diffusion AI\n\nThe next steps of our project are:\n\nAdd User Interface for Ship-Customization\nExpand Attack-Types & Building Types\nAdd research and technologies to develop,to craft even more types of buildings & ships\nAdd PVE events (bosses, galactic pirates, etc…)\nAdd quests\nAdd more boni/malus between ship types\nAdd races, possibly using even some of the existing NFTs collection (ex. Mutant apes) and make their buildings and fleet graphic according the NFT collection style\nMake the fights interactive ( clash of clans style)\nMake the game 3d\nadd CrewMembers to Ships\nBuild a Card Game based on the game NFTs\nThanks for reading!\n\nUpdate:\n\nWe are really excited about winning the first price in GameFi! After a bit of celebration time we will expand on our future plan & roadmap in a new Thread.\n\n\nTuruVerse (Gamified MetaVerse) by TuruGlobal\nTRON Hackathon\nHackathon Season 3\ngamefi\nSep 2022\nMar 14\n\nTuruGlobal","metadata":{"loc":{"lines":{"from":1692,"to":1721}}}}],["757",{"pageContent":"TuruVerse (Gamified MetaVerse) by TuruGlobal\nTRON Hackathon\nHackathon Season 3\ngamefi\nSep 2022\nMar 14\n\nTuruGlobal\n\n8\nSep '22\nProject Name: TuruVerse\nProject Track: Gamifi\nTeam Name: TuruGlobal\nTeam Member(s): 10+\nDevPost URL: https://devpost.com/software/turuverse 29\nProject Goal: We want to create a second home in the MetaVerse to Play, Shop, stroll around and meet other people\nProject Info:\nTV small\nTV small\nPromo Video:\n\nTuruverse - Hackathon - 2023 Promo\nTuruverse - Hackathon - 2023 Promo\nProject Website: www.turuverse.com 46 (waiting to be published)\nProject Test Instructions: to be added\nProject Details: TuruVerse will consist of several sections…\n\nFor a video impression of the main Island, check this YouTube video:","metadata":{"loc":{"lines":{"from":1721,"to":1749}}}}],["758",{"pageContent":"For a video impression of the main Island, check this YouTube video:\n\nEnter the TuruVerse\nEnter the TuruVerse\nShops\nGalleries\nOffices\nResidential\nGaming\nSocial\nCinema\nShops\nIn the shops you can see items on display in the shop front, you can walk around and explore and after wondering through the shop, you can actually go to the pull and enter the actual webshop, order your real life stuff and return to the TuruVerse.\n\nimage\nimage\nGaleries\nThere will be several galleries in the TuruVerse where content creators can show off their collections or their main art. We have a partnership with Fuzzy Ocean under preparation giving projects listed there a unique chance to have their art shown in the TuruVerse as well.\nimage\nimage\nOffice\nCompanies can open an office in the TuruVerse to have a presence or to organize actual meetings with people as an alternative for Zoom or Microsoft teams.","metadata":{"loc":{"lines":{"from":1749,"to":1770}}}}],["759",{"pageContent":"image\nimage\nResidential\nThe community can buy properties in the TuruVerse giving them special benefits and access. Owning an apartment will give you access to the special TuruVerse Sky Bar which is currently under construction…\n\nimage\nimage\nGaming\nTuruVerse will have several gaming possibilities like\n\nTreasure hunt\nArcade\nParcours\nPeer to peer gaming\nimage\nimage\nAll games are free to play and some of them give a chance to earn.\n\nSocial\nWe have several lounges and bars, some for general access, some for limited access for either inhabitants or for people owning specific NFT’s. Any NFT project can have their own lounge in TuruVerse specifically for holders of their NFT…","metadata":{"loc":{"lines":{"from":1772,"to":1791}}}}],["760",{"pageContent":"image\nimage\nCinema\nYou can buy your monthly ticket for the cinema at our partners of Fuzzy Ocean.\nCinema ticket\nCinema ticket\nWith that ticket, you will have access to our TuruVerse movie cinema, like our Tron Theatre:\nTuruCinema2\nTuruCinema2\nThen going into the cinema, you can watch the movie, which is being showed at that moment…\nTuruCinema3\nTuruCinema3\nProperty ownership in the TuruVerse\nYou can become an enterpreneur in the TuruVerse.\nOver time we will add more and more commercial properties. You will be able to buy the ownership of these properties and with being an owner, you will get your share of the revenue generated by that property.\n\nThe properties for sale at start will be mainly shops and cinema’s and every property will be represented by an Title Deed.","metadata":{"loc":{"lines":{"from":1793,"to":1809}}}}],["761",{"pageContent":"The properties for sale at start will be mainly shops and cinema’s and every property will be represented by an Title Deed.\n\nimage\nimage\nDoing business in TuruVerse\nThe goal is to grow TuruVerse and use our community to do so. We will be generating revenue by renting out shops, renting advertisement space, organising events and others… If you want to become an enterpreneur in TuruVerse there are different levels to do so.\nEntry level\nRepresent TuruVerse and find companies to rent space, organise events or rent shops and receive a commission on the revenue generated.\nNext level\nBuy advertisement spots, shops, cinema’s or other revenue generators and rent them out receiving the revenue generated minus the TuruVerse tax to maintain our EcoSystem…\n\nThe Future is here\nTuruVerse_Alpha\nTuruVerse_Alpha\nProject Milestones:","metadata":{"loc":{"lines":{"from":1809,"to":1823}}}}],["762",{"pageContent":"The Future is here\nTuruVerse_Alpha\nTuruVerse_Alpha\nProject Milestones:\n\nHave limited Alpha platform ready for use and trial in November\nSet up cooperation partnerships (Fuzzy Ocean and ThanX are under discussion)\nLimited Beta trial in December with movie theatre integration\nQ1 Open Beta with fully functional obstacle game, Arcade, Theatre, Shopping Street, Tron Quarter, Fuzzy Section\nQ2 Go live\nPartnerships\nFuzzy Ocean will be using TuruVerse as an offering for its launchpad customers to offer them a Gallery Space in the TuruVerse, advertisement space, promotion events and access to the Fuzzy Ocean webshop in TuruVerse.\nThanX will open an office in TuruVerse and will be offering a TuruVerse webshop option to its partners for a partner commission.\n\nVideo for potential investors\nWhy to invest in TuruVerse: TuruVerse - Why Invest - YouTube 8\n\n\nTrxmini.games - a wagering/staking multiplayer minigames platform\nTRON Hackathon\nHackathon Season 3\ngamefi\nOct 2022\nMar 10\n\nnickmura","metadata":{"loc":{"lines":{"from":1823,"to":1848}}}}],["763",{"pageContent":"Trxmini.games - a wagering/staking multiplayer minigames platform\nTRON Hackathon\nHackathon Season 3\ngamefi\nOct 2022\nMar 10\n\nnickmura\n\n32\nOct '22\nbanner\nbanner\ntrxmini.games - wagered arcade/eSports games on TRON\n\nProject Name: trxmini.games\nProject Track: GameFi\nTeam Name: trxmini.games\nTeam Member(s): @nickmura\nDevPost URL: https://devpost.com/software/trxmini-games-a-staked-wagering-gamefi-platform 12\nContract Address:\nPrimary Escrow contract - TMGBGionnPs1TFRHxNrZRiGneZaDi6zkBh 3\nSecondary Escrow contract - TQyY41mqbHVWWHWt5Zq1pPL5rYd7HgM2kE 1\n\nDevelopment Board: https://trxmini.notion.site 6","metadata":{"loc":{"lines":{"from":1848,"to":1872}}}}],["764",{"pageContent":"Development Board: https://trxmini.notion.site 6\n\nProject Website: http://trxmini.games 40\nPlay now at trxmini.games\nPlay now at trxmini.games\nProject Goal: Create an unique, interoperable GameFi wagering/staking protocol, that allows users to create events and wagered games with our catalog of arcade games for users, and soon-to-be eSports games. Players can place bets against each other in chess, 8ball, etc, aswell as create a vision for deploying our network to be interoperable with conventional esports, competitive, and sandbox games. Ensure our protocol is one of a kind and stands out.\n\nA challenge GameFi faces is introducing, and attracting new users outside of Web3 communities to the various platforms accessible today. Without direct initiative in platforms accepting the value of GameFi, whether they be providing solutions or creating a new game that they enjoy, GameFi won’t grow to the full potential it can.","metadata":{"loc":{"lines":{"from":1872,"to":1879}}}}],["765",{"pageContent":"trxmini.games’ goal is to provide a solution to both of those issues - a conventional wagering/staking platform for users to play against their friends/opponents on, and be a conventional choice for gamers - regardless of their relationship with Web3 applications.","metadata":{"loc":{"lines":{"from":1881,"to":1881}}}}],["766",{"pageContent":"Project Details: trxmini.games is a new GameFi platform built on TRON and (soon BTTC) in beta providing and developing various minigames to play against your friends and users online. Players can stake and wager against each other in our turn based and upcoming real time arcade games. TRON has a notable catalog, and ecosystem of various GameFi applications, so we believe TRON would be a perfect place to create and scale an engaging community, and ecosystem for our platform. Our ultimate goal is to scale our protocol on existing games, introducing new users, players, and entire communities into TRON. Our target audience will be new players and users, outside of Web3 circles, while still accommodating users from our existing TRON ecosystem.\n\nProject Info: (A presentation for why trxmini.games will greatly contribute to GameFi and TRON)\n\ntrxmini games Presentation\ntrxmini games Presentation\nProject Test Instructions: (A demonstration video can be found here how to use the protocol!)","metadata":{"loc":{"lines":{"from":1883,"to":1889}}}}],["767",{"pageContent":"trxmini.games Demonstration\ntrxmini.games Demonstration\nSign in to the site with TronLink\nCreate a TRX domain username (via prompted or clicking ur address by the connect button)\nClick your username, or click Create or join a game at the very top with a selected stake or no stake (select your game) (You can get Shasta testnet funds on our Telegram here! 4)\nIf stake, sign a transaction to lock your stake in\nIf win or draw, retrieve stake!\nOur inspiration/motivation:","metadata":{"loc":{"lines":{"from":1891,"to":1898}}}}],["768",{"pageContent":"If stake, sign a transaction to lock your stake in\nIf win or draw, retrieve stake!\nOur inspiration/motivation:\nI’ve been a chess player for quite some time now, and on several occasions I have wanted to stake and wager against my friends in chess. After looking for a while, I found there aren’t really any platforms that provide a service, to allow you to wager against your friends in chess. That left me scratching my head; In my opinion, this functionality is essential for competitive events and tournaments! After further research, I found there’s not many services for players, entities, and companies to coordinate, share, and create their own esports events!","metadata":{"loc":{"lines":{"from":1898,"to":1901}}}}],["769",{"pageContent":"Wow! For many players like myself, it’s difficult to create their own e-sporting events without adequate large-scale intermediaries, funding, trust, and many other inconvenient ordeals; I have many peers who desire to break into the esports and competitive scenes for various games; but find it very difficult to find an entity that actually supports and fulfills their expectations, providing them the opportunities they need! Some players may want to have a wagered experience but have it casual; whether it be chess, 8 ball, golf, etc. Some other players want to have truly immersive, competitive experience, and our goal is to bridge both of these demands to TRON and it’s ecosystem.","metadata":{"loc":{"lines":{"from":1903,"to":1903}}}}],["770",{"pageContent":"GameFi is a unique and interesting paradigm that has huge potential, but I believe there’s still a significant obstacle to overcome: Attracting and onboarding new users from outside the Web3 sphere. Without direct initiative to provide value to outside communities for GameFi, whether they be providing solutions or creating a new game that they enjoy, GameFi won’t grow to the full potential it can!\n\nMy goal with trxmini.games to scale such a platform that will face and SOLVE all of these important challenges mentioned above that we as an ecosystem face - provide an interoperable GameFi protocol, that allows players to wager their games they love against their friends (or opponents!) on their favorite games, and provide an essential service to potential users and players outside of Web3, introducing and bringing new communities into TRON, creating a much more vibrant, and expansive ecosystem!","metadata":{"loc":{"lines":{"from":1905,"to":1907}}}}],["771",{"pageContent":"What it does:\nUsers will be able to play our catalog of different games with staking/wagering available. - Currently, I have finished chess and now am working on implementing our own version on TRON, of Skribbl.io, and 8 ball, which will be available in multiplayer, after the judging period.\n\nLet’s say Bob wants to create a staked or wagered game of Chess. They will choose the selected amount of TRX they wish to stake, and then sign a transaction to send their funds to our escrow contract via Tronlink.\n\nNow, Bob has told Alice about his game and she has decided to join, they will also sign a transaction with the same amount and join their game.\n\nAfter 20 minutes, Alice has won the game by Checkmate! Alice can withdraw the entire wagered amount of the game, and has a win on their address account. She can now play another game if she likes.","metadata":{"loc":{"lines":{"from":1909,"to":1916}}}}],["772",{"pageContent":"After 20 minutes, Alice has won the game by Checkmate! Alice can withdraw the entire wagered amount of the game, and has a win on their address account. She can now play another game if she likes.\n\nHow we built it:\nI’ve created the MVP with a chess implementation that I’ve created here 1. I then implemented our protocol into the game! Our GitHub link for trxmini.games can be found here: GitHub - nickmura/trxmini.games: A staking/wagering mini games platform. Play chess or 8ball with your friends on TRON. Play now! 1\n\nWe use Redis, to store game state persistently, and the client fetches the key if the player is ever to disconnect/reconnect from the socket.\n\nI also created a postgres relational database for personalization of users - so users can get domain usernames (e.g nickmura.trx, bobby.trx). Users in the near future will have additional features and economic systems in place - such as a leveling system, badges and more!","metadata":{"loc":{"lines":{"from":1916,"to":1923}}}}],["773",{"pageContent":"After creating a basic draft of the game, I decided to work on the Solidity contract infrastructure deployed on TRON currently.\n\nPrimary Escrow contract - TMGBGionnPs1TFRHxNrZRiGneZaDi6zkBh 3\nSecondary Escrow contract - TQyY41mqbHVWWHWt5Zq1pPL5rYd7HgM2kE 1\n\nI then implemented our game and protocol into our main site, at http://trxmini.games 40,\nand have been working on creating new features since!\n\nI have a link to a presentation in video format of what trxmini.games provides! (Not the demonstration, it will be linked further)\n\nCurrently, 8 ball is available, and soon, Drawades, which will be based off a open source rendition of scribbl.io. will be avaiaI will have to implement the game in Svelte and our GameFi protocol. After we implement a significant catalog for minigames, we will start implementing our crypto protocol in eSports games and start reaching out to pros and influencers.","metadata":{"loc":{"lines":{"from":1925,"to":1935}}}}],["774",{"pageContent":"Play 8 ball now!\nPlay 8 ball now!\nOur project code for can be found on github. A organizational github will be created soon. GitHub - nickmura/trxmini.games: A staking/wagering mini games platform. Play chess or 8ball with your friends on TRON. Play now! 1\n\nChallenges we ran into\nSecuring design - I implemented and created a Figma design I was authorized to use with Svelte and Tailwind. It took longer than expected to get working, but it looks pretty good now! http://trxmini.games 1\n\nImplementing smart contracts - Creating an escrow service contract specific to our games took some research. I have been a Solidity Developer for a year and went through various challenges with implementing solutions to the mechanisms that needed to be created. A significant percentage of the winnings will go towards auditing contracts and coming up with cryptographically secure business logic.","metadata":{"loc":{"lines":{"from":1937,"to":1944}}}}],["775",{"pageContent":"Securing database logic - personalization was a bit of a problem and I think in the near future I will focus my efforts implementing and optimizing the user end experience for optimization.\n\nImplementing other games into the protocol - Unfortunately, there was some difficulty trouble implementing the other games into the protocol before the judging period effectively, and personally, aswell as professionally I deeply apologize. My priority is providing a quality, worthwhile experience for all our players, and I believe long term our project will be considered an outlier of success and quality in GameFi, when we offer our full catalog, and when we deploy the protocol on existing games. I will continue to showcase updates of my progress scaling these apps, aswell as new features as the judging and voting period continues here.","metadata":{"loc":{"lines":{"from":1946,"to":1948}}}}],["776",{"pageContent":"Getting the support and guidance from the community - Getting people as many people to be aware, and possibly use our platform will always be a priority. Expanding our project to as many eyes as possible is the key to our success.\n\nProject Milestones:\nOur goals & milestones are to in order… (and more)\n\nCreate and develop a couple or few games to be implemented within our protocol (Chess, or Drawades, or 8Ball) ✓\n\nCreate a networking protocol standard for the games to be multiplayer on-site ✓\n\nCreate an audited escrow payment smart contract on TRON testnet, for users stakes / wagers for initiating games aswell as providing payouts of wagers. We are also intending to create a smart contract for random airdrops in the future. ✓\n\nEmphasize our vision to the judges and community of TRON ✓\n\nCreate a GREAT looking front-end and deploy site. ✓\n\nDevelop a username implementation for personalization (domain based usernames (e.g) nicky.trx, bobby.trx) for accounts/addresses. ✓","metadata":{"loc":{"lines":{"from":1950,"to":1965}}}}],["777",{"pageContent":"Create a GREAT looking front-end and deploy site. ✓\n\nDevelop a username implementation for personalization (domain based usernames (e.g) nicky.trx, bobby.trx) for accounts/addresses. ✓\n\nProvide and demonstrate the intrinsic value and significance of our protocol to the TRON community and ecosystem. ✓\n\nProvide a short term & long term roadmap for the progress and evolution of trxmini.games ✓\n\nReceive significant support and encouragement from the TRONdao community of our project ✓\n\nCreate an easier to use user interface ✓\n\nDevelop new features through the judging period after submission period✓\n\nCreate new content during the judging period ✓\n\nCreate a leveling economic system ✓\n\nDevelop a new game to showcase as soon as possible ✓\n\nDuring the judging period, grow our social media and community presence via Twitter, Telegram, etc (Over 900 followers on our Twitter currently!) ✓","metadata":{"loc":{"lines":{"from":1965,"to":1985}}}}],["778",{"pageContent":"During the judging period, grow our social media and community presence via Twitter, Telegram, etc (Over 900 followers on our Twitter currently!) ✓\n\nCollect and assimilate feedback into our project and ensure governance and user experience of players are the priority. ✓\n\nYou can find our Development Board (citing current milestones, and current development progress being worked on as you read this here, at trxmini.notion.site! 6. The project management, and development progress of trxmini.games will always be transparent!\nPost hackathon goals:\nIn the coming weeks of the judging period, I will mainly be focusing my efforts on social media and community presence. I believe people participating in the project, and giving back feedback, whether it’s positive or negative, feedback is very important to the development and evolution of this project short or long term.","metadata":{"loc":{"lines":{"from":1985,"to":1991}}}}],["779",{"pageContent":"Once we win this hackathon, I will deploy the features I have created throughout the judging period, inquire about an audit, and deploy on mainnet! Security integrity and transparency of this project are essential, for the community acknowledging trxmini.games for what it is worth.\n\nA governance system will be deployed to allow for the community to determine what the focus of our efforts should be in early Q1, in addition to the browser games mentioned. The governance system will have an various game economics in place - so users, teams and entities, can receive badges, levels, and exclusive cosmetics and benefits!\n\nLong term development plans include the development and deployment of a desktop client and mobile client, which we hope will increase exposure and ease of access to the protocol for existing games, which will exponentially increase the number of new users and players coming into our platform!","metadata":{"loc":{"lines":{"from":1993,"to":1997}}}}],["780",{"pageContent":"From a desktop/mobile client, we will be able to gain and attract a much larger mass of players and daily users - providing greater exposure and value, for both for trxmini.games and TRON, allowing us to sponsor and coordinate eSports events funded via a community owned treasury. This is a difficult feat to accomplish, but we believe that, given enough initiative, time, and community participation, we can make this vision a reality. We’re excited about the potential value such a protocol could provide to the TRON ecosystem! We also plan to create contests, tournaments and events during this entire journey consistently, accommodating all of our players cs as we are expecting to create a diverse demographic and target audience to bring to TRON.\n\nI am extremely confident that this project will go the whole 9 yards, and I hope TRON, and the TRONDao community can be a key participant in contributing to the vision our platform is going to make a reality.","metadata":{"loc":{"lines":{"from":1999,"to":2001}}}}],["781",{"pageContent":"A list of more specific goals can be found below:\n\nDeploy on mainnet ✓\n\nAlways more engagement with the community, creating a better and more welcoming user experience in all areas. ✓\n\nOptimize and release new features that we’ve developed. ✓\n\nProvide exclusive badges for beta participants during the judging period ✓\n\nParticipate and contribute to the sTRONgerTogetherChallenge, or Web3StrongerTogether initiative ✓\n\nDevelop a crypto system in our contract and infrastructure, that ensures valid digital signatures for transactions can only be issued by the server, providing full confidence that a players funds are safe when they wish to play or wager a game!\n\nDeploy on main-net for both TRX AND BTTC, and provide support for several other tokens and currencies.\n\nExpand the team ✓","metadata":{"loc":{"lines":{"from":2003,"to":2019}}}}],["782",{"pageContent":"Deploy on main-net for both TRX AND BTTC, and provide support for several other tokens and currencies.\n\nExpand the team ✓\n\nProvide a leveling system and badge system for players, aswell as stats, etc various game economics / features to make the experience more exciting, aswell as further personalization features for users profiles ✓\n\nIncrease and develop more games on our catalog, specifically creating real-time, multiplayer, stakable games for players in WebAssembly or JavaScript ✓\n\nRelease and deploy governance token. Release exclusive airdrop and features for contributors and participants of the beta.","metadata":{"loc":{"lines":{"from":2019,"to":2027}}}}],["783",{"pageContent":"Release and deploy governance token. Release exclusive airdrop and features for contributors and participants of the beta.\n\nImplement interoperability and support of our protocol between existing casual, sandbox, and competitive games (e.g Counter Strike, Rocket League, Garry’s Mod, Fortnite, Minecraft etc). This is the most important goal in our roadmap! This will expand the amount of new users within the TRON network and our platform to exponential new heights, giving it even more of a high value proposition. Deploying on multiple existing games will give us value and a community unlike any other GameFi project out there.\n\nCollaborate, and coordinate tournaments and contests for our users via community owned and governed treasury. ✓\n\nProvide exclusive features and rewards for our participants and community members ✓\n\nLots more to announce!","metadata":{"loc":{"lines":{"from":2027,"to":2035}}}}],["784",{"pageContent":"Provide exclusive features and rewards for our participants and community members ✓\n\nLots more to announce!\n\nYou can find our Development Board (citing current & future milestones, and current development progress,) being worked on as you read this here, at trxmini.notion.site! 6 Full writeups and plans for each of these milestones is provided there. The project management, and development progress of trxmini.games will always be transparent!\nFellow TRON community and judges, thank you so much for reading and supporting our project. It means a lot! Please comment if you have any questions or feedback of what could be done or what you think about our vision… Please help us create the vision we think is possible, with your support, we believe we can scale our project to heights unprecedented! <3\n\nZombieland By Team Zombie - Survival Web3 Game With DeFi-NFT\nTRON Hackathon\nHackathon Season 3\ngamefi\nOct 2022\nDec '22\n\ngamerhack\n\n6\nOct '22\nProject Name: Zombieland - Survival Game","metadata":{"loc":{"lines":{"from":2035,"to":2053}}}}],["785",{"pageContent":"Zombieland By Team Zombie - Survival Web3 Game With DeFi-NFT\nTRON Hackathon\nHackathon Season 3\ngamefi\nOct 2022\nDec '22\n\ngamerhack\n\n6\nOct '22\nProject Name: Zombieland - Survival Game\n\nProject Track: GameFi\n\nTeam Name: Team Zombie\n\nTeam Member(s): @gamerhack, @winner\n\nDevPost URL: https://devpost.com/software/zombieland-survival-game 12\n\nProject Goal: Zombieland - Survival Game is classic web3 game with DeFi, NFT and many more in game upgrades and different weapons to survive in zombieland.\n\nProject Info:\nZombieland - Survival Game stands as the combination of the words “game” and “finance”. In doing so, GameFi brings together Bittorrent blockchain technology, including NFTs, cryptocurrencies and decentralization, and advanced gaming mechanics where players can generate income from simply playing and enjoying their gaming experience.","metadata":{"loc":{"lines":{"from":2053,"to":2077}}}}],["786",{"pageContent":"Zombieland - Survival Game powers where players are financially rewarded for the time and effort they put into playing. This model is better known as Play-And-Earn. Economic incentives might include tokens, upgrades and much more. Typically, players are rewarded for completing game-related tasks like progressing through different levels.\n\nProject Website:\nZombie Land - Click Here To Play 34\nzombievalist\n\nProject Test Instructions:\n\nMetamask wallet with Bittorrent testnet\nMake sure you have anought BBTC testnet coins in account\nLogin from Desktop or Laptop\nReady to play\nProject Details:\nZombieland - Survival Game is classic web3 game with DeFi, NFT and many more in game upgrades and different weapons to survive in zombieland.\n\nZombie Land - BTTC Testnet\nZombie Land - BTTC Testnet\nContract Address:","metadata":{"loc":{"lines":{"from":2079,"to":2096}}}}],["787",{"pageContent":"Zombie Land - BTTC Testnet\nZombie Land - BTTC Testnet\nContract Address:\n\n0xA767C19343dAFE72fe83cE3BCfD0a8D47D173591\nZombieToken (ZT) Token Tracker | BTTC 1\n0x51b75B42deea2907749234d746e56D4AfA4C01BA\nContract Address 0x51b75B42deea2907749234d746e56D4AfA4C01BA | BTTC 1\nFeatures :\n\nFull of fun zombie surviaval game\nGet rewarded ERC-20 game token and utilize in game or keep it with you\nIn-game shop to buy coins or exchange with rewarded tokens\nMultiple guns to unlock as NFT\nMultiple power upgrades to survive in zombieland\nProject Milestones:\nDuring this hackathon we are expecting to complete milestones as mentioned below\n\nCreating core game mechanism with Zombie AI\n\nCreating possible good environment of Zombieland\n\nPlayer mechanism with different weapons and upgrade system\n\nIntegrating game with Bittorrent testnet to authenticate and implement DeFi, NFT\n\nReward system with ERC-20 token in game\n\nIn-game purchase to speedup upgrade of weapons and weapon powers","metadata":{"loc":{"lines":{"from":2096,"to":2124}}}}],["788",{"pageContent":"Integrating game with Bittorrent testnet to authenticate and implement DeFi, NFT\n\nReward system with ERC-20 token in game\n\nIn-game purchase to speedup upgrade of weapons and weapon powers\n\nDifferent smart contracts to use in this game\n\nPost hackathon milestones\n\nCreating multiplayer mechanism to survive with other online players\nImplement voice chat\nLaunch on other platforms\nDeploy on mainnet\nScreenshot_1zom1\nScreenshot_1zom1\n\nScreenshot_29zb\nScreenshot_29zb\n\nScreenshot_29z7\nScreenshot_29z7\n\n\nMushroom - A Nurturing Simulation Game with TRON\nTRON Hackathon\nHackathon Season 3\ngamefi\nNov 2022\nDec '22\n\nKCJ\n\n6\nNov '22\nProject Name: Mushroom\n\nProject Track: GameFi\n\nTeam Name: 0xCatBox\n\nTeam Member(s): 2 out of 5 people are on the forum(@KCJ @jrbr7282)\n\nDevPost URL: Mushroom | Devpost 9\n\nRepo URL: GitHub - 0xCatBox/TRON-Grand-Hackathon-Season-3 at Mushroom_main 15\n\nContract Address:\ntoken contract : TXDdk1evoKi9uEDd2guneFo4BVRpFqR3Aw\n\n\nTRON","metadata":{"loc":{"lines":{"from":2124,"to":2175}}}}],["789",{"pageContent":"DevPost URL: Mushroom | Devpost 9\n\nRepo URL: GitHub - 0xCatBox/TRON-Grand-Hackathon-Season-3 at Mushroom_main 15\n\nContract Address:\ntoken contract : TXDdk1evoKi9uEDd2guneFo4BVRpFqR3Aw\n\n\nTRON\n\nTRONSCAN | TRON BlockChain Explorer 4\nTRONSCAN is the first blockchain browser in the tron community. It supports multiple login methods and provides a complete browsing and search experience. Experience the tron-ecology in the TRONSCAN blockchain...\n\nstake contract : TM8vfeqkozyD6pBQgr1gv1TNnC3WephCXG\n\n\nTRON\n\nTRONSCAN | TRON BlockChain Explorer 1\nTRONSCAN is the first blockchain browser in the tron community. It supports multiple login methods and provides a complete browsing and search experience. Experience the tron-ecology in the TRONSCAN blockchain...\n\nProject Goal: Our goal is to provide scalable nurturing simulation game content in web3 based on some of the game methods of ‘Tamagotchi’ that we are familiar with.\n\nProject Website: Welcome to Mushroom Project - Mushroom Project 18","metadata":{"loc":{"lines":{"from":2175,"to":2198}}}}],["790",{"pageContent":"Project Website: Welcome to Mushroom Project - Mushroom Project 18\n\nProject Info:\nmush01\nmush01\n\nmush02\nmush02\n\nmush03\nmush03\nProject Test Instructions: GitHub - 0xCatBox/TRON-Grand-Hackathon-Season-3 at Mushroom_main 15","metadata":{"loc":{"lines":{"from":2198,"to":2209}}}}],["791",{"pageContent":"Project Details: We want to provide adaptable and scalable nurturing simulation game in the web3 ecosystem by borrowing some of the system of the ‘Tamagotchi’ game, a game that most of us may be familiar with.\nUntil recently, X2E games such as ‘Axie Infinity’ and ‘Stepn’ were strong in the web3 ecosystem. These two projects are great projects that have changed the way some people live and at one time brought great value to others. However, at X2E, when Earn didn’t live up to player expectations, a lot of people left the game. Although the game still has a huge user base, it is less than before.","metadata":{"loc":{"lines":{"from":2211,"to":2212}}}}],["792",{"pageContent":"In this situation, we watched a lot of games come and go, regardless of web2 or web3, and some of them we played. Especially for web3 games, the game rarely lasted. We started paying attention to the sustainable model of games in web3, and the recent web3 game market demands ‘game content that people can truly enjoy and have fun’. We have participated in various investment and incubation programs amid the demands of these game contents, and have had many opportunities to learn about what is currently required in web3 games.\nThat’s how we got interested in the TRON ecosystem. We want to contribute to the popularization of the TRON ecosystem and blockchain by solving the problems arising from the various problems of the current X2E and web3 projects through the web3 game with a sound game model in the TRON ecosystem.","metadata":{"loc":{"lines":{"from":2213,"to":2214}}}}],["793",{"pageContent":"Currently, our main content is ‘mushrooms’. However, this is not definitive, and the basic concept is ‘let’s put in the effort and grow something’. We plan to keep our basic concept. We are currently working on various ideas for mushrooms, plants, animals, etc. The details may be modified depending on the decision. For example, in plants, we provide photosynthesis and water, and in animals, we provide water and food. We would be very grateful if you could share your valuable comments with us.\n스크린샷 2022-11-15 오전 8.00.06\n스크린샷 2022-11-15 오전 8.00.06","metadata":{"loc":{"lines":{"from":2215,"to":2217}}}}],["794",{"pageContent":"스크린샷 2022-11-15 오전 7.59.52\n스크린샷 2022-11-15 오전 7.59.52\n\n스크린샷 2022-11-15 오전 7.59.23\n스크린샷 2022-11-15 오전 7.59.23\n\n스크린샷 2022-11-15 오전 7.59.33\n스크린샷 2022-11-15 오전 7.59.33\nProject Milestones:\n\nCreate our own Tron-friendly wallet\nMushroom Book NFT\nSeason 1 Adult Mushroom Card NFT Image Voting\nUpdate mushroom species\nGame of steal and defense against thieves and farms\nContinuous mushroom grade probability adjustment to balance\nUpdates:\nNovember 12, 2022\n\nCorrected errors in Gitbook.\nAdded monthly report category to Gitbook.\nNovember 15, 2022(KST)\n\nAdded a few working demo images.\nFixed Github repository link.\nAdded contract address and link.\nAdded test instruction link.\nThank you all for your hard work!\n\nWaveData: Your data is the cure! Make clinical trials more transparent, fun and easy, so everybody can join with the goal to create together inclusive AI!\nTRON Hackathon\nHackathon Season 3\necosystem\nNov 2022\nDec '22\n\nbahauddin","metadata":{"loc":{"lines":{"from":2219,"to":2255}}}}],["795",{"pageContent":"bahauddin\n\n6\nNov '22\nProject Name: WaveData\nProject Track: Ecosystem\nTeam Name: WaveData\nTeam Member(s): 6\nDevPost URL: WaveData | Devpost 6\nProject Goal: Your data is the cure! Decentralized marketplace for clinical trials with the power of TRON\nProject Info: WaveData.pptx - Google Slides 2\nVideo WaveData on Vimeo 7\nProject Website: https://wave-data-tron.vercel.app/ 12\n\nProject Test Instructions: GitHub - zakirhossen5/WaveData: WaveData Tron 3\n\nSchermafbeelding 2022-11-14 om 18.32.56\nSchermafbeelding 2022-11-14 om 18.32.56\nInspiration","metadata":{"loc":{"lines":{"from":2255,"to":2273}}}}],["796",{"pageContent":"Schermafbeelding 2022-11-14 om 17.09.02\nSchermafbeelding 2022-11-14 om 17.09.02\n1253×703 1.05 MB\nSchermafbeelding 2022-11-14 om 17.09.19\nSchermafbeelding 2022-11-14 om 17.09.19\nSchermafbeelding 2022-11-14 om 17.08.49\nSchermafbeelding 2022-11-14 om 17.08.49","metadata":{"loc":{"lines":{"from":2275,"to":2281}}}}],["797",{"pageContent":"In our society we see that artificial intelligence (AI) is everywhere and is already making important decisions in our daily life. When it comes to healthcare, we see that it has deadly effects for women and BAME. A big problem is that we need inclusive data to create inclusive AI modules, however medical researchers have a hard time finding people and convincing them to share their health data. People are however very eager to help when they realize their data can make a difference. This works even better with diseases they have a connection to through a family member or a friend. The global clinical trials market size was estimated at USD 44.3 billion in 2020 and is expected to expand at a compound annual growth rate (CAGR) of 5.7% from 2021 to 2028. As an inclusive team with 6 women and half BAME, we want to change this with WaveData - Your data is the cure! WaveData offers a secure way to share your data from wallet to wallet, so you can control yourself and help find a cure!","metadata":{"loc":{"lines":{"from":2282,"to":2282}}}}],["798",{"pageContent":"Schermafbeelding 2022-11-14 om 18.27.56\nSchermafbeelding 2022-11-14 om 18.27.56\nWhat it does","metadata":{"loc":{"lines":{"from":2284,"to":2286}}}}],["799",{"pageContent":"WaveData is based on two things: (1) Decentralized marketplace where organizations (universities/hospitals/pharma) can create a clinical trial and also get data from the people that join the clinical trial (2) App that people will use during the clinical trial, get recommendations in which trials they can participate and get credits/vouchers. WaveData connects people who want to help with medical researchers who need data. The biggest difference with existing platforms is that we approach the problem from the side of the people who want to help cure a disease. When someone you love has cancer or Alzheimers you feel helpless, and you want to do something about it. WaveData is built on the TRON wallet to provide a safe and secure way to share your data. We can see that pharmaceutical companies would be interested in the same data. It’s up to you if you give them permission to look at your data. You can earn TRX by sharing your data in that way. You can keep that benefits for yourself or","metadata":{"loc":{"lines":{"from":2287,"to":2287}}}}],["800",{"pageContent":"would be interested in the same data. It’s up to you if you give them permission to look at your data. You can earn TRX by sharing your data in that way. You can keep that benefits for yourself or donate it to help cure the disease of your choice. To give people recommendations in which trials they can participate we use the open standard FHIR (Fast Healthcare Interoperability Resources). Based on the medical records WaveData analyzes in which trials the person can join and can add value. With the WaveData marketplace the organizer can create their trials and surveys and set the questions, rewards etc. With the WaveData app, people can download a user-friendly app to survey and join trials. WaveData helps each user and organizer to keep touch every day. On WaveData the organizer can check how many people have contributed and what their answers are. WaveData provides chart analysis options for the organizer to keep updated with better understanding.","metadata":{"loc":{"lines":{"from":2287,"to":2287}}}}],["801",{"pageContent":"Schermafbeelding 2022-11-14 om 17.18.16\nSchermafbeelding 2022-11-14 om 17.18.16\nSchermafbeelding 2022-11-14 om 18.28.12\nSchermafbeelding 2022-11-14 om 18.28.12\nSchermafbeelding 2022-11-14 om 18.27.33\nSchermafbeelding 2022-11-14 om 18.27.33\nCrucial stakeholder motivation","metadata":{"loc":{"lines":{"from":2289,"to":2295}}}}],["802",{"pageContent":"Medical research facilities - we help them connecting to people who are willing to share their data\nPatients’ interests’ associations - give them an opportunity to combat the disease through the sharing of data.\nPharmaceutical Companies - an opportunity to have access to data if allowed by the people\nEverybody - a way to help combat diseases that can be trusted because your personal data are secure\nGovernment - Aiding healthcare research through robust security for personal data\nHow we built it","metadata":{"loc":{"lines":{"from":2297,"to":2302}}}}],["803",{"pageContent":"Everybody - a way to help combat diseases that can be trusted because your personal data are secure\nGovernment - Aiding healthcare research through robust security for personal data\nHow we built it\nWe developed and deployed the smart contract in TRON Nile Network from TronIDE. Then we used Tron JS SDK to retrieve smart contract in website using the deployed smart contract address. In WaveData we have used TronLink Wallet. So, using TronLink we are calling smart contract from Tron Nile Network by address. Then we are using smart contract methods from the platform. To give people in the mobile app recommendations in which trials they can participate in, Wave Data is using the open standard FHIR (Fast Healthcare Interoperability Resources) and send this to the TRON network. Based on the medical records WaveData analyzes in which trials the person can join and can add value.","metadata":{"loc":{"lines":{"from":2302,"to":2305}}}}],["804",{"pageContent":"Accomplishments that we’re proud of\nWe are very proud that we build a product that will create value for clinical trials and one of the biggest challenge at this moment, racism in AI and healthcare. The project is pretty big and we are beginning programmers, which was sometimes a challenges. With our positive behaviour we worked together and made not one, but two working applications. Also a big achievement is that during the hackathon period we won a validation lab from YES!Delft, one of the biggest accelerators in Europe, during the Dutch government hackathon!\n\nProject Milestones:\nDuring the TRON hackathon we finished our YESDelft! accelerator in The Hague. We are working with the Dutch government and many healthcare organizations to bring the product to market: Digicampus on LinkedIn: Eind oktober hebben vier crews het tweede GovTech Validatielab succesvol","metadata":{"loc":{"lines":{"from":2307,"to":2311}}}}],["805",{"pageContent":"WaveData will create new value for clinical trials by making clinical trials more transparent, fun and easy, so everybody can join with the goal to create inclusive AI!\n\nDuring the TRON hadkathon we used our great international network to talk with researchers from different universities, hospitals, institutions and pharma companies to understand the problems that they experience. They all mentioned the huge problem of creating good clinical trials, because it takes months to scout people and there’s also a huge chance that people will drop out. The process is too difficult, takes time and people don’t know where to find clinical trials.","metadata":{"loc":{"lines":{"from":2313,"to":2315}}}}],["806",{"pageContent":"To understand the reason why people are not joining clinical trials we did some focus groups and talked with random people on the street. Conclusion is that people really want to help, because almost everyone knows someone with a disease. The problem is the transparency of the processes, the value by joining a clinical trial and besides that, they often get nothing for it directly.","metadata":{"loc":{"lines":{"from":2317,"to":2317}}}}],["807",{"pageContent":"In 2022 there were more than ​​400.000 clinical trials and with a market size of 44.3 billion USD in 2020 it’s one of the biggest markets. With our team we already validate with some experts how WaveData can be a success and in March 2022 we won a validation from YES!Delft. Besides that we have a big network in the healthcare field, which means that we can start a pilot with WaveData in the coming months. Also the gamification part in combination with getting credits will motivate people to join WaveData. The power is to do it together and that will be the USP from WaveDate, because we want to make clinical trials accessible for everyone and make it fun!","metadata":{"loc":{"lines":{"from":2319,"to":2319}}}}],["808",{"pageContent":"For investment strategy we see that FemTech will grow extremely fast in the coming years, with a value of over 60 billion dollars by 2027. Also there are many accelerators and funds that focus on women in IT who can help us by raising funding. Besides that, there are some great grant programs in Europe that we can use for building and testing.\n\nWhat we learned\nCreating an MVP based on user input. We validated WaveData during The GovTech Validation Lab from YES!Delft. This accelerator is focusing on new products that can create a big impact in our society.","metadata":{"loc":{"lines":{"from":2321,"to":2324}}}}],["809",{"pageContent":"What’s next for WaveData","metadata":{"loc":{"lines":{"from":2326,"to":2326}}}}],["810",{"pageContent":"Steve Thijssen is one of the Co-Founder from Wavy Health Inc. which is building a medical device app for mental health, specially for cardiovascular disease patients. During our clinical trials I saw on opportunity to make clinical trials better and more transparent. It’s very difficult to scout people and the process takes years. I started the WaveData platform in March 2022. In the last months of this years we created an MVP, integrated TRON smart contract and we validated WaveData during The GovTech Validation Lab from YES!Delft. Next to that we are working close with the Dutch Blockchain Coalition which is the highest organisation in the Netherlands for blockchain (https://dutchblockchaincoalition.org/en). This accelerator is from the Dutch government where they help startups that creates products that have a big impact in our society. Our team have a big network an in the coming months we are going to fund raise and testing our product with healthcare organisations.","metadata":{"loc":{"lines":{"from":2327,"to":2327}}}}],["811",{"pageContent":"Paylock by DevJdeed.eth - Paypal/Interac-transfer for crypto\nTRON Hackathon\nHackathon Season 3\necosystem\nOct 2022\nDec '22","metadata":{"loc":{"lines":{"from":2328,"to":2333}}}}],["812",{"pageContent":"Dev_Jdeed\n\n19\nOct '22\npaylock Paylock\n\nmy-visual_60295539\nmy-visual_60295539\nProject Name: Paylock\nProject Track: Ecosystem\nTeam Name: new_developers\nTeam Member(s): 1. Dev_Jdeed\nDevPost URL: https://devpost.com/software/paylock 1\n\nProject Goal: Everyone knows blockchain UX(User Experience) could be improved. My brother had accidentally sent a month’s salary of USDC to the wrong exchange address, he wished it was easier getting back his funds. He mentioned if there was a Paypal/Interact-like interface where he could withdraw his funds.\n\nProject Info: Paylock allows users to connect to their Ethereum wallet, send and receive native & ERC20 tokens that can be withdrawn only by the issuer wallet and redeemed only by receiver address via a code that could be sent via text-message/email.\n\nPaylock aims to grow into enabling cross-chain transfers via cross-chain services such as chainlink oracles ultimately supporting TRON (TRC-20) token transfers.","metadata":{"loc":{"lines":{"from":2335,"to":2353}}}}],["813",{"pageContent":"Paylock aims to grow into enabling cross-chain transfers via cross-chain services such as chainlink oracles ultimately supporting TRON (TRC-20) token transfers.\n\nProject Website: (https://paylock.vercel.app/ 8)\n\nDev-Preview\nDev-Preview\nSend Payments\nSend Payments\nIssued payments\nIssued payments\nRedeemable Payments\nRedeemable Payments\nProject Test Instructions:\nTo run this project locally, clone the github repo and add the required environment variables listed in the ENV_README file.\n\nProject Details:\nPaylock will charge 0.5% per transaction (capped at 50USD) to allow users to create (Withdrawable) ERC20 payments and ability to withdraw/redeem payments without paying gas.\n\n:white_check_mark: Verified Contract Addresses:\n\nPolygon (Mumbai) Network\nMinimalForwarder\nPaylockAddress\nEthereum (Goerli) Netwrok\nMinimalForwarder\nPaylockAddress\nCheckout the code GitHub - IbrahimSam96/paylock: Interac transfer for crypto 4\nWatch Demo:","metadata":{"loc":{"lines":{"from":2353,"to":2380}}}}],["814",{"pageContent":"Season 3 2022TRON GRANDHACKATHON - Paylock\nSeason 3 2022TRON GRANDHACKATHON - Paylock\nProject Milestones:\n:tada: :tada: :tada: :tada: :tada: :tada: :tada: :tada: V1 IS IN PRODUCTION :partying_face: :partying_face: :partying_face: :partying_face: :partying_face: :partying_face:\n\nUpcoming Updates:\n\nUI\n\nIssued & Redeemable Payments table upgrade (add timestamps, sorting, filtering)\nAdd tooltips DONE\nFunctionality\n\nMulti-Payments\nEnd-to-end gasless interactions\nAdd Contacts (Addresses Book) and Avatars\n*** Cross-Chain Transfers to support BTTC & Tron (TRC20 transfers ) network**\nVerify Paylock Contract code on PolygonScan and EtherScan DONE\nAdd Contract Natspecs DONE\n18\n\n\nPaylock by DevJdeed.eth - Paypal/Interac-transfer for crypto\nTRON Hackathon\nHackathon Season 3\necosystem\nOct 2022\nDec '22\n\nDev_Jdeed\n\n19\nOct '22\npaylock Paylock","metadata":{"loc":{"lines":{"from":2382,"to":2415}}}}],["815",{"pageContent":"Paylock by DevJdeed.eth - Paypal/Interac-transfer for crypto\nTRON Hackathon\nHackathon Season 3\necosystem\nOct 2022\nDec '22\n\nDev_Jdeed\n\n19\nOct '22\npaylock Paylock\n\nmy-visual_60295539\nmy-visual_60295539\nProject Name: Paylock\nProject Track: Ecosystem\nTeam Name: new_developers\nTeam Member(s): 1. Dev_Jdeed\nDevPost URL: https://devpost.com/software/paylock 1\n\nProject Goal: Everyone knows blockchain UX(User Experience) could be improved. My brother had accidentally sent a month’s salary of USDC to the wrong exchange address, he wished it was easier getting back his funds. He mentioned if there was a Paypal/Interact-like interface where he could withdraw his funds.\n\nProject Info: Paylock allows users to connect to their Ethereum wallet, send and receive native & ERC20 tokens that can be withdrawn only by the issuer wallet and redeemed only by receiver address via a code that could be sent via text-message/email.","metadata":{"loc":{"lines":{"from":2415,"to":2438}}}}],["816",{"pageContent":"Paylock aims to grow into enabling cross-chain transfers via cross-chain services such as chainlink oracles ultimately supporting TRON (TRC-20) token transfers.\n\nProject Website: (https://paylock.vercel.app/ 8)\n\nDev-Preview\nDev-Preview\nSend Payments\nSend Payments\nIssued payments\nIssued payments\nRedeemable Payments\nRedeemable Payments\nProject Test Instructions:\nTo run this project locally, clone the github repo and add the required environment variables listed in the ENV_README file.\n\nProject Details:\nPaylock will charge 0.5% per transaction (capped at 50USD) to allow users to create (Withdrawable) ERC20 payments and ability to withdraw/redeem payments without paying gas.\n\n:white_check_mark: Verified Contract Addresses:\n\nPolygon (Mumbai) Network\nMinimalForwarder\nPaylockAddress\nEthereum (Goerli) Netwrok\nMinimalForwarder\nPaylockAddress\nCheckout the code GitHub - IbrahimSam96/paylock: Interac transfer for crypto 4\nWatch Demo:","metadata":{"loc":{"lines":{"from":2440,"to":2467}}}}],["817",{"pageContent":"Season 3 2022TRON GRANDHACKATHON - Paylock\nSeason 3 2022TRON GRANDHACKATHON - Paylock\nProject Milestones:\n:tada: :tada: :tada: :tada: :tada: :tada: :tada: :tada: V1 IS IN PRODUCTION :partying_face: :partying_face: :partying_face: :partying_face: :partying_face: :partying_face:\n\nUpcoming Updates:\n\nUI\n\nIssued & Redeemable Payments table upgrade (add timestamps, sorting, filtering)\nAdd tooltips DONE\nFunctionality\n\nMulti-Payments\nEnd-to-end gasless interactions\nAdd Contacts (Addresses Book) and Avatars\n*** Cross-Chain Transfers to support BTTC & Tron (TRC20 transfers ) network**\nVerify Paylock Contract code on PolygonScan and EtherScan DONE\nAdd Contract Natspecs DONE\n\nGETO.finance by GETO Finance - Decentralised Exchange, Yield farming, Staking, Multimedia NFT Marketplace, Staking and Studio on EthereumPOW (ETHW)\nTRON Hackathon\nHackathon Season 3\necosystem\nNov 2022\nDec '22","metadata":{"loc":{"lines":{"from":2545,"to":2570}}}}],["818",{"pageContent":"ivelin207\nNov '22\nProject Name: GETO.finance\nProject Track: Ecosystem\nTeam Name: GETO Finance\nTeam Member(s): 4, @collinwa, @ivelin207, @getofinance, @barbara48\nDevPost URL: Devpost 4\nProject Goal: Decentralised Exchange, Yield farming, Staking, Multimedia NFT Marketplace, Staking and Studio on EthereumPOW (ETHW).\nProject Info: https://www.geto.finance 6\nProject Website: https://www.geto.finance 6\nProject Test Instructions: Stake your Uniwswap LP tokens to claim your very own GETO token!\nProject Details: GETO finance - YouTube 2\nProject Milestones: GETO.finance - Decentralised Finance | Multimedia NFT | Governance on EthereumPoW (ETHW)\n\n\n\nInterPool - The only Sport Prediction Game where everyone wins! - FIFA World Cup 2022\nTRON Hackathon\nHackathon Season 3\necosystem\nOct 2022\nDec '22\n\nClaw\n\n18\nOct '22\nProject Name: InterPool\nProject Track: Ecosystem\nTeam Name: Irruption Lab (Twitter 6 / Linkedin 3)\nTeam Member(s): @Claw @Perrin\nDevPost URL: https://devpost.com/software/interpool 15","metadata":{"loc":{"lines":{"from":2572,"to":2603}}}}],["819",{"pageContent":"18\nOct '22\nProject Name: InterPool\nProject Track: Ecosystem\nTeam Name: Irruption Lab (Twitter 6 / Linkedin 3)\nTeam Member(s): @Claw @Perrin\nDevPost URL: https://devpost.com/software/interpool 15\n\nProject Goal: A Sport Prediction Game with no loosers, where the winners share the interests generated by the deposits of all the participants.\n\nThe problem our project addresses:\n\nGamblers waste so much money (that they sometimes don’t have) on gambling games.\n\nDifficulties to onboard new comers in the Blockchain ecosystem that is too complex, and not really sexy for most humans.\n\nHow we’ve addressed the problem:\n\nBy sharing the interests generated by the deposits of all the participants, no one looses money, but it is still possible to gamble and have fun. There is a real social impact with the InterPool project.","metadata":{"loc":{"lines":{"from":2603,"to":2621}}}}],["820",{"pageContent":"Sport prediction games, especially with the World Cup around the corner, are incredibly popular. We believe this popular topic can onboard plenty of newcomers that might be interested to dig more about the blockchain. NFT brought plenty of new comers, Sport Predictions games with no losers might also participates to it.\n\nProject Contracts:\n\nGithub with all the lastest contracts:\ninterpool/core/contracts at main · pgrandne/interpool · GitHub 1\n\nAll contracts URLs on Etherscan:\n\nIpPool: IpPool | Address 0x80A9c7C5F5BFD765A2dC3773dFF00d02Db8B34aE | Etherscan 1\nInterpoolContract: InterpoolContract | Address 0xEA32f5cc7318Ed376FEda4BEB10DD8192Bda3611 | Etherscan 1\nIpErc20Ticket: IpErc20Ticket | Address 0xD81e4a61FD6Bf066539dF6EA48bfaeAe847DCdA1 | Etherscan\nIpEnetScore : IpEnetScore | Address 0x49672edd419e4795307ccc906cab0e8fc5d147f9 | Etherscan 1\nProject Info:\nPresentation InterPool.pdf (1.0 MB)\nFull Documentation: GitBook 1\n\nProject Website: InterPool 15\n\nProject Test Instructions:","metadata":{"loc":{"lines":{"from":2623,"to":2642}}}}],["821",{"pageContent":"Project Website: InterPool 15\n\nProject Test Instructions:\n\nUPDATE (November 29th): a 2nd contest for the next phase of the competition is being set-up for testing purpose (as the first one is already on-going and prediction submissions already closed). For this 2nd contest your predictions must be saved prior the first game of the contest: December 3rd 2022\n\nA specific section “How to Play” appears on the InterPool app.\n\nHere are the details:\n\nInterPool is live on Goerli (Ethereum Testnet). Professional third parties will audit the InterPool code prior full deployment on the mainnet.\nThe first prediction game is live for the FIFA WORLD CUP - Group phase. Starting date: November 20th 2022.","metadata":{"loc":{"lines":{"from":2642,"to":2653}}}}],["822",{"pageContent":"To join the prediction game you are required to get at least 1 ticket during the prediction period (a countdown is shown on the InterPool app).\nMore tickets you get, higher will be your winnings.\nIn order to get tickets, you need to deposit a multiple of the unitary price (50 USDC). You can faucet USDC directly on the InterPool app.\nAll the participant deposits will be locked during the game period in order to generate interests.\nThose interests represent the overall prize pool that the game participants will share.\n\nOnce you got your ticket(s) you become eligible to enter the prediction game.\nThis is the key moment where you need to show your prediction skills!\nYou don’t necessarily need to be 100% correct on your predictions, you just need to be better than the others to get higher rewards!","metadata":{"loc":{"lines":{"from":2655,"to":2663}}}}],["823",{"pageContent":"Note 1: your predictions must be saved during the submission period (there is a countdown on the InterPool app). As the first prediction game is live for the FIFA WORLD CUP - Group phase, your prediction must be saved prior the starting date: November 20th 2022.\n‍\nNote 2: As long as the prediction period is not over, you can submit new predictions. The last submission you have done will be the only one considered, and the previous ones will therefore be overridden.\n\nAt the end of the contest, the prize pool is shared based on the final rankings of all the participants.\nThe details of the prize pool distribution is explained in here 3.\n‍\nYou can get your deposit back right after the end of the contest, or go on for another round, your ticket(s) make you eligible for all the future games! Fill in your predictions for the next contest and win more prizes!\nProject Details:\nGitBook - About InterPool\nGitBook - About InterPool\n GitBook - FAQ\nGitBook - FAQ","metadata":{"loc":{"lines":{"from":2665,"to":2677}}}}],["824",{"pageContent":"GitBook - Getting Started\nGitBook - Getting Started\n Interpool 1050x700\nInterPool - The only Sport Prediction Game where everyone wins! - FIFA World Cup 2022\nInterPool - The only Sport Prediction Game where everyone wins! - FIFA World Cup 2022\n:point_right: A step-by-step tutorial on How to submit your prediction! :point_left:\n\nInterPool - How to submit your Predictions?\nInterPool - How to submit your Predictions?\n:point_right: Predictions follow up & Smart Contract interaction :point_left:\n\nInterPool - Predictions follow up & Smart Contract interaction\nInterPool - Predictions follow up & Smart Contract interaction\nProject Milestones:","metadata":{"loc":{"lines":{"from":2679,"to":2692}}}}],["825",{"pageContent":"InterPool is live on Goerli (Ehtereum Testnet)\nAll the following major key contracts are fully operational:\nInterPool ERC20 Token management\nPool contract (Interests generation on Aave - Liquidity Provider)\nParticipants predictions saving, Scores, Rankings and Prize distribution\nChainlink external oracle integration (in order to get the data from the FIFA World cup 2022, and later on all the next game that we will integrate on the InterPool app)\nFor the Hackathon we have integrated the FIFA World cup as our first prediction game. We will add new and regular prediction games (weekly most probably) for the next update of InterPool.\nConducting an audit prior going live on the mainnet has been added to the road map.\nDevelopping the DAO has been added to the roadmap\nDeploying on other networks has been added to the roadmap.\nProject conversion to TRON:","metadata":{"loc":{"lines":{"from":2694,"to":2704}}}}],["826",{"pageContent":"Developping the DAO has been added to the roadmap\nDeploying on other networks has been added to the roadmap.\nProject conversion to TRON:\nWe are currently competing in the Ecosystem Track, with a strong belief that deploying on various networks will benefit to all the users, as there will be more fund deposited on the protocol.\nA key advantage on deploying on TRON next, is that the interests rate on USDD is higher than other stablecoins anywhere else (currently 7,11% on JustLend). InterPool prizepool will therefore be higher, it will get more attention, and ultimately more participants.","metadata":{"loc":{"lines":{"from":2704,"to":2708}}}}],["827",{"pageContent":"Update 1: Oracle update.\nWe are currently using Chainlink, as a data provider, and it will have to be updated to Winklink\nUpdate 2: Interest generation.\nWe are currently using Aave as liquidity provider, and we will update it to JustLend\nSince this hackathon is an ongoing funding program, projects that have great potential and \ngood community engagement are likely to win and receive additional funding after the initial hackathon. \nTherefore, participants should update their project posts to be as detailed as possible and\nanswer any community questions during the hackathon period.\n\nB4B.WORLD: Web3 influencer ads platform with reputation-based rewards\nTRON Hackathon\nHackathon Season 3\necosystem\nOct 2022\nDec '22\n\nAAPecherkin\n\n14\nOct '22\nProject Name: B4B.WORLD (Twitter 1)\nProject Track: Ecosystem\nTeam Name: B4B WORLD\nTeam Member(s): 3 - @AAPecherkin @AnnaChukhnina @Gregory\nDevPost URL: B4B.WORLD | Devpost 6\nDemo Video: B4B WORLD - TRON Hackathon - YouTube 2","metadata":{"loc":{"lines":{"from":2710,"to":2735}}}}],["828",{"pageContent":"Project Goal: Make it easier, faster, and safer to collaborate advertisers with active Web3 influencers on our platform, thanks to motivational on-chain Reputation and based on it monthly Rewards.\n\nB4B allows Web3 Companies:\n\nuse the influencer Ad channel in any country without the risk of losing the budget\nsave time searching for active and advertising-ready influencers\nbook on dates and pay for the Ad campaigns fast.\nInfluencers can:\n\nreceive Ad orders on the free dates\ntrust in direct payments via smart contract\ngrow their activity-based Rating and portfolio\nearn additional Rewards monthly based on Rating.","metadata":{"loc":{"lines":{"from":2737,"to":2749}}}}],["829",{"pageContent":"receive Ad orders on the free dates\ntrust in direct payments via smart contract\ngrow their activity-based Rating and portfolio\nearn additional Rewards monthly based on Rating.\n\n\nB4B.world has a dual-token reputation system to motivate influencers’ activity and long-term work. The first token — B4B Rating — is a non-transferable reputation meter. The second token — B4B Coin — is a transferable monthly reward for influencer activity. B4B Coins reward is proportional to the B4B Rating increase this month.\nB4B Protocol generates a fixed amount of B4B Coins monthly and fills the B4B Reward Pool with liquidity from ads fees on the platform. As a result, any holder can burn his B4B Coins and get stablecoins from the liquidity pool anytime. The exchange rate equals the ratio of B4B Reward Pool to the B4B Coin circulation and is constant within a month.\n\n\nSmart-Contracts on BTTC Testnet:","metadata":{"loc":{"lines":{"from":2749,"to":2759}}}}],["830",{"pageContent":"Smart-Contracts on BTTC Testnet:\n\nMain B4B Protocol contract: TransparentUpgradeableProxy | Address 0xF92985bF44B77f34Ac170965BCc29694197B814b | BTTC 2\n\nInfluencer NFT Identity TransparentUpgradeableProxy | Address 0x2dc0E455d803e3f57c3F87aB256698BAAA1eA04a | BTTC 3\n\nB4B Coins / USDC Reward Pool contract- TransparentUpgradeableProxy | Address 0x2dc0E455d803e3f57c3F87aB256698BAAA1eA04a | BTTC 3\n\nProject Website:\n\n\nb4b.world\n\nBloggers4Brands 15\nhttps://testnet-bttc-influencer.b4b.app 3 - Personal Account for the influencers on BTTC Testnet\n\nhttps://testnet-bttc-brand.b4b.app 4 - Personal Account for advertisers on BTTC Testnet\n\nProject Test Instructions:\n\nTry to be an influencer with B4B.WORLD Testnet on BTTC:\n\n\nMedium – 13 Nov 22\n\nTry to be an influencer with B4B.WORLD 2\n[TRON Hackathon edition]\n\nReading time: 3 min read\nhttps://testnet-bttc-influencer.b4b.app 3 - Personal Account for the influencers","metadata":{"loc":{"lines":{"from":2759,"to":2788}}}}],["831",{"pageContent":"Medium – 13 Nov 22\n\nTry to be an influencer with B4B.WORLD 2\n[TRON Hackathon edition]\n\nReading time: 3 min read\nhttps://testnet-bttc-influencer.b4b.app 3 - Personal Account for the influencers\n\nRegister on the platform via MetaMask/Wallet Connect\nMake a profile of your channel on Telegram/Twitter and verify it by OAuth to get NFT channel ID\nAccept ads orders from advertisers ASAP, make ads in time and the best quality to grow the Rating\nReceive payments for ads in the stablecoin from smart-contract\nEarn B4B Coins monthly based on your Rating and exchange for stablecoin or hold them\nhttps://testnet-bttc-brand.b4b.app 4 - Personal Account for companies\n\nRegister on the platform via MetaMask/Wallet Connect\nSearch Web3 influencers with filters by parameters, learn their statistic and history\nBook suitable influencers and reserve stablecoin payments via Smart-Contract\nCheck the status of planned ads and make reviews for influencers to grow their Rating and Rewards\nProject Details:","metadata":{"loc":{"lines":{"from":2788,"to":2807}}}}],["832",{"pageContent":"Influencers create their accounts and verified their Twitter channel. They receive NFT ID on their verified channel. They share the link on their booking page for advertisers with full portfolios.\nСнимок экрана 2022-11-12 в 18.27.29\nСнимок экрана 2022-11-12 в 18.27.29\nAdvertisers buy subscriptions to get a database of influencers and filters or book the influencers on direct links from influencers for free.\nTRON B4B Deck\nTRON B4B Deck\nAdvertiser prepares ad content (post and image), book the date, and pay in USDC via smart contract.\nСнимок экрана 2022-11-11 в 15.59.47\nСнимок экрана 2022-11-11 в 15.59.47\nСнимок экрана 2022-11-11 в 16.05.48\nСнимок экрана 2022-11-11 в 16.05.48\nInfluencers accept the Ad campaign ASAP to achieve a higher B4B Rating. On the planned Ad date he has scheduled to publish the Ad content on the Twitter channel and share the link with advertisers to receive payment in USDC and grow B4B Rating.\nTRON B4B Deck\nTRON B4B Deck\nСнимок экрана 2022-11-12 в 18.36.07","metadata":{"loc":{"lines":{"from":2809,"to":2823}}}}],["833",{"pageContent":"TRON B4B Deck\nTRON B4B Deck\nСнимок экрана 2022-11-12 в 18.36.07\nСнимок экрана 2022-11-12 в 18.36.07\nBrand accepts the Ad due to 24 hours and unlocks the payment for the influencer or makes a dispute with B4B.\nTRON B4B Deck (1)\nTRON B4B Deck (1)\nInfluencers receive USDC payments for Ads, grow their B4B Rating on the platform, and earn B4B Coins monthly, based on their Rating.\nСнимок экрана 2022-11-13 в 23.07.19\nСнимок экрана 2022-11-13 в 23.07.19\nProject Milestones:","metadata":{"loc":{"lines":{"from":2823,"to":2833}}}}],["834",{"pageContent":"10-2022 - Testnet Release on the Aurora blockchain (1600+ active users)\n11-2022 - Testnet Release on the BTTC blockchain\n12-2022 - Mainnet Release and pre-registred users on the platform\nContact Details:\nEmail: b4b@b4b.world\nTelegram: @AAPecherkin\nTwitter: @b4b_world\n\nRoad Incident Predictor\nTRON Hackathon\nHackathon Season 3\necosystem\nNov 2022\nNov '22\n\nmanusheel\nNov '22\nRoad Incident Predictor by Aspiring Developers - Utilizing ASDI OpenAQ dataset, Tron DAO and EVM for developing Incident response and planner tools for road incident management and reducing traffic congestion. Crowdsourcing traffic visibility data.\n\nProject Name: [ Road Incident Predictor]\nProject Track: [Ecosystem]\nTeam Name: [ Aspiring Developers]\nTeam Member(s): [2 (manusheel, deepti)]\n\nDevPost URL: [ Road Incident Predictor | Devpost 3]","metadata":{"loc":{"lines":{"from":2835,"to":2859}}}}],["835",{"pageContent":"Project Name: [ Road Incident Predictor]\nProject Track: [Ecosystem]\nTeam Name: [ Aspiring Developers]\nTeam Member(s): [2 (manusheel, deepti)]\n\nDevPost URL: [ Road Incident Predictor | Devpost 3]\n\nProject Goal: [ Technical solution for citizens, police officers and drivers to report and manage incidents, detect and prevent accidents on web and mobile. Effective design, engineering and delivery of Ethereum and Tron DAO blockchain technology aided solution for vehicles and citizens to make roads safer and better for everyone using predictive analytics and automation.]\nProject Info: [\npitch deck.pdf (4.4 MB)\n]\nProject Website: [ Aspiring Road Safety 2]\nProject Test Instructions: [Please find the video at Ether Monitor - Google Drive (screencapturewithoutsound.mov file and roadincidentmanagement.mp4)\n\nWe are also using it for decentralized social sharing and road counselling at incident spot (please visit Zoraroadcounselingatincidents.mov)","metadata":{"loc":{"lines":{"from":2859,"to":2873}}}}],["836",{"pageContent":"We are also using it for decentralized social sharing and road counselling at incident spot (please visit Zoraroadcounselingatincidents.mov)\n\nDemo of alarm viewer and event marketplace at Ether Monitor - Google Drive (please visit zoraroadincidentsalarmcomponentsandmarketplace.mov)\n\nPlease find the testing instructions at\n\n\ngithub.com\nEtherMonitor/roadincidentmanagement/docs at main · seetadev/EtherMonitor 1\nmain/roadincidentmanagement/docs\n\nMonitoring tools for road incident management and reducing traffic congestion. Crowdsourcing information sharing for better and safer roads. - EtherMonitor/roadincidentmanagement/docs at main · see...","metadata":{"loc":{"lines":{"from":2873,"to":2884}}}}],["837",{"pageContent":"]\nProject Details: [ We have developed a road incident management system using Javascript, HTML5, NFT.Storage, Polygon, SAP’s UI5 on the front end, Tron DAO, using open source video streaming system and crowdsourcing marketplace using Zora’s auction house template for enabling sharing of government assets like toll prepaid card, car details information for interstate travel, driving license management and quarterly pollution check and control powered by Ethercalc (SocialCalc), Zora, Polygon, NFT.Storage, Tron DAO, ethpass, Litprotocol for security and neume for data retrieval and live peer for online video streaming at the road incident spot for better coordination and immediate action.\n\nHow it works:","metadata":{"loc":{"lines":{"from":2886,"to":2889}}}}],["838",{"pageContent":"Camera Management: Add/edit/delete cameras with integration with Livepeer, NFT.Storage for snapshots of road incident, ethpass for toll ticketing, neume for data retrieval.\nObject Detection using Livepeer and Pytorch/Tensorflow deep learning library using CNN neural networks.\nVideo analytics configuration using NFT.Storage, Litprotocol for security and neume for data retrieval.\nLive streaming with Object Detection Video Analytics using Livepeer for streaming, Litprotocol for security and NFT.Storage for snapshots.\nAlarm storage using Ethereum. Save/delete alarm metadata and image to/from IPFS using NFT.Storage. Store the hash returned from IPFS to Ethereum test network using NFT.Storage, Litprotocol for security and neume for data retrieval… Provide links to alarms and blockchain transaction details.","metadata":{"loc":{"lines":{"from":2891,"to":2895}}}}],["839",{"pageContent":"Alarm Viewer: Add alarms with a single touch. Open the Alarm Settings menu from the home page. Add an alarm, set the wallpaper or choose an alarm tone. You can also delete an existing alarm. We are using Zora’s Auction House template for NFT marketplace of alarm clock wallpapers and background ringtones purchase and auction. We are also extending and adapting Turtle Music using NFT Experiments for music curators for alarm clock.\nWe are using DAOtooling for coordination with a social focus around community collaboration for road incidents and alarms using Tron DAO. Please visit EtherMonitor/zoracommunitymarketplace/tron-contracts at main · seetadev/EtherMonitor · GitHub","metadata":{"loc":{"lines":{"from":2896,"to":2897}}}}],["840",{"pageContent":"We are utilizing ZoraModuleManager, and ZoraProtocolFeeSettings in our our dapp and deploying it on Polygon after registering the Zora market module. We are developing a crowdsourcing marketplace using Zora’s auction house template for enabling sharing of government assets like toll prepaid card, car details information for interstate travel, driving license management and quarterly pollution check and control. We are using the zora starter kit to access ZORA API, Creator Toolkit, and Marketplace Hyperstructure. Zora’s Auction House template is being utilized for NFT marketplace of alarm clock wallpapers and background ringtones purchase and auction. We are also extending and adapting Turtle Music using NFT Experiments for music curators for alarm clock. We are using DAOtooling for coordination with a social focus around community collaboration for road incidents and alarms.]","metadata":{"loc":{"lines":{"from":2899,"to":2899}}}}],["841",{"pageContent":"Project Milestones: [ We are using DAOtooling for coordination with a social focus around community collaboration for road incidents and alarms using Tron DAO. Please visit EtherMonitor/zoracommunitymarketplace/tron-contracts at main · seetadev/EtherMonitor · GitHub","metadata":{"loc":{"lines":{"from":2901,"to":2901}}}}],["842",{"pageContent":"Development of a Monetization Model: We have written an ideathon white paper (SEETA Fi. pdf) which can be found at the link submitted on the project page: hackathon - Google Drive\nWe have completed design planning and feature design architecture using DeAuto NEV (https://www.deauto.io/ 1): please visit design collaboration section at hackathon - Google Drive\nUpdates on utilizing Fluence p2p infrastructure in our project: We are working towards decentralizing key components, bottlenecks in our existing IPFS solution. We are learning to create decentralized peer-to-peer protocols to replace centralized off-chain solutions by swapping centralized service providers for Fluence p2p infrastructure.\nEarly stage detection of incidents using a decentralized drone management solution (please find the demo video at hackathon - Google Drive). ]\n\n\nRaph Strategy - Your Modern Voting Platform\nTRON Hackathon\nHackathon Season 3\necosystem\nNov 2022\nDec '22\n\nGokhanCeylan","metadata":{"loc":{"lines":{"from":2903,"to":2916}}}}],["843",{"pageContent":"Raph Strategy - Your Modern Voting Platform\nTRON Hackathon\nHackathon Season 3\necosystem\nNov 2022\nDec '22\n\nGokhanCeylan\n\n19\nNov '22\nProject Name: MetaVotePoll\nProject Track: Ecosystem\nTeam Name: Raph Strategy\nTeam Member(s): 1 (GokhanCeylan)\nDevPost URL: MetaVotePoll | Devpost 9\nProject Goal: We are building an online poll platform by using the blockchain system in the Web3 category.\nProject Info: We are building a web3 system using web2 level Reddit, Quora style famous survey-discussion sites and voting in tv competitions instead of sending SMS or any digital votes.\ninfopack coming\nMetaVotePoll.pdf (1.7 MB)\nVideo: MetaVotePoll - YouTube 2\n\nProject Website: https://metavotepoll.com/ 22\n\nProject Details: You can reach out our demo video here 5.\n\nHi, we have a question for you. What do you think these people have in common?","metadata":{"loc":{"lines":{"from":2916,"to":2942}}}}],["844",{"pageContent":"Project Website: https://metavotepoll.com/ 22\n\nProject Details: You can reach out our demo video here 5.\n\nHi, we have a question for you. What do you think these people have in common?\n\nA group of friends having a game discussion\nA football lover eagerly waiting for the World Cup\nAn amateur singer who wants to go to his concert to watch his idol\nA popcorn lover waiting for season 4 of his favorite show\nThey become a fan, and they are ready to defend it. We see that under social media posts, TV shows, and forum sites, people tend to support what they are fans of. However, it is unclear where and how comments or votes are kept, and people may find this unsafe. In addition, the fact that voting systems are not built with a more robust infrastructure reduces people’s trust and, thus, participation.","metadata":{"loc":{"lines":{"from":2942,"to":2952}}}}],["845",{"pageContent":"As MetaVote, we started our journey right here. We have created a blockchain-based forum-voting platform for sports fans, anime lovers, bookworms, those who want to discuss politics, defend their fans, comment, and others. After logging in, users select the categories they are interested in from the main screen. Then they can enter the polls that create the discussion topics they want within the categories. They can vote for the concepts they support in the poll and participate in the discussion from the comment section below.","metadata":{"loc":{"lines":{"from":2954,"to":2954}}}}],["846",{"pageContent":"Project Test Instructions: After logging into the site, you click on a category you like. Then you enter the surveys opened there. For example, suppose you entered the top rated of that week and saw Argentina and Portugal in the World Cup final on December 18. In that case, you will be able to vote on the team you think will win, or you will try to predict the Eurovision finalist country in another poll. Sometimes there will be fun polls, and you can vote without spending a coin. Sometimes you will try your luck in ambitious surveys.\n\nImportant Updates:\nAs we participated in Hackathon Season 2, we had to update our project massively. The significant changes we have made and continue to make are listed below.","metadata":{"loc":{"lines":{"from":2956,"to":2959}}}}],["847",{"pageContent":"Smart contracs in the voting system were created.\nWith the KYC feature, it was determined to give only one vote per person.\nIt was planned to create an revenue model by making commission charged per survey.\nConsidering that people may create violations of rights or offensive surveys, system surveys will first be evaluated by our team and the artificial intelligence we are developing.\nAlso, polls of worldwide events like World Cup finalists, Eurovision winners, Elections and so on will be generated by our system.\nweb3-1\nweb3-1\nweb3-sc\nweb3-sc\nProject Milestones: We are currently working on growing our team and developing artificial intelligence to ensure that the uploaded surveys are offensive and non-repetitive. We are also developing 2 more smart contracts on KYC to safeguard the security of the voting system and the transmission of survey earnings.","metadata":{"loc":{"lines":{"from":2961,"to":2970}}}}],["848",{"pageContent":"Contract Address: 0x0fca532bcF25adCc6E21408de234359763A29e44\n(MetaVotePoll | Address 0x0fca532bcF25adCc6E21408de234359763A29e44 | Etherscan 3)\n\nProposal for converting to TRON/BTTC :\nWe aim to develop the script of the Ethereum software we developed over Remix ide in accordance with Tron-ide, and users will connect it to the Tron ​​wallet instead of any other digital wallet. In this process, voting on our site will now be made using Tron ​​tokens, and the winners’ prizes will be sent as Tron.\n\n\n\nXeat by Team BatamPride - Get concert, travel, and park tickets easily and quickly, save your tickets as an NFT collection\nTRON Hackathon\nHackathon Season 3\necosystem\nNov 2022\nNov '22\n\nyouvandra\n\n1\nNov '22\nProject Name:\nXeat\n\nProject Track:\nEcosystem\n\nTeam Name:\nBatamPride\n\nTeam Member(s):\n2 - @youvandra (me), @Adinil\n\nDevPost URL:\n\nDevpost\n\nXeat 5\nGet concert, travel, and park tickets easily and quickly, save your tickets as an NFT collection.","metadata":{"loc":{"lines":{"from":2972,"to":3008}}}}],["849",{"pageContent":"Team Name:\nBatamPride\n\nTeam Member(s):\n2 - @youvandra (me), @Adinil\n\nDevPost URL:\n\nDevpost\n\nXeat 5\nGet concert, travel, and park tickets easily and quickly, save your tickets as an NFT collection.\n\nProject Goal:\nIt is hoped that with Xeat, it can improve the entertainment industry after it was previously stopped due to the covid-19 outbreak by providing a sense of security and comfort to buyers and organizers in holding an event with a blockchain system. In addition, we also focus on providing a better experience for visitors to get closer to their idols with exclusive merchandise and meet-and-greet features. By implementing a blockchain system, we also hope to reduce cases of fraud and the secondary market that raises the selling price too high.\n\nProject Info:\nXeat pitchdeck.pdf (4.2 MB)\n\nProject Website:\nhttps://xeat-blond.vercel.app/ 6\n\nProject Test Instructions:","metadata":{"loc":{"lines":{"from":3008,"to":3030}}}}],["850",{"pageContent":"You can search for tickets of what event you want to visit\nChoose the type of ticket you want (Regular or VIP class)\nEnter the details of the ticket that you want to purchase\nYou can connect to your wallet by clicking “Connect wallet” button\nClick “Mint” button to pay the bills\nYour ticket is already stored in a crypto wallet\nYou can check the tickets that have been purchased on opensea\nProject Details:","metadata":{"loc":{"lines":{"from":3032,"to":3039}}}}],["851",{"pageContent":"Xeat was created as a web application-based product on software that utilizes blockchain technology to purchase NFT-based event tickets so that it can provide security and ease of purchasing tickets online. With Xeat, all event tickets purchased by users will be in the form of NFT, so that the authenticity of the ticket is proven to be valid because all data contained in the blockchain can be seen by the owner and historical data on the ownership of the NFT. Aside from being an identity marker, the event organizer can also customize the shape of the NFT that will be sold so that it can become a unique souvenir for visitors to commemorate the event. To prevent corruption in event ticket sales, we also present a feature for sharing sales results with event stakeholders by the percentage determined by the organizers. In addition, by using blockchain technology we can ensure that there will be no additional ticket sales for an event. The number of tickets in circulation is in accordance","metadata":{"loc":{"lines":{"from":3040,"to":3040}}}}],["852",{"pageContent":"by the organizers. In addition, by using blockchain technology we can ensure that there will be no additional ticket sales for an event. The number of tickets in circulation is in accordance with the predetermined visitor capacity to prevent over capacity by event visitors.","metadata":{"loc":{"lines":{"from":3040,"to":3040}}}}],["853",{"pageContent":"Project Milestones: After we have launched the Minimum Viable Product (MVP), we will work with several musicians to make event that sales exclusively on our platform.\nNext, we will sell other types of tickets such as for transportation (airfare, or other vehicles) and also lodging","metadata":{"loc":{"lines":{"from":3041,"to":3042}}}}],["854",{"pageContent":"Contract Address:\nEthereum Goerli Testnet\n\n\nEthereum (ETH) Blockchain Explorer\n\nDropERC1155 | Address 0x31463b4A94f796A6Df424fb72F1eA97d44E68439 | Etherscan 2\nThe Contract Address 0x31463b4A94f796A6Df424fb72F1eA97d44E68439 page allows users to view the source code, transactions, balances, and analytics for the contract address. Users can also interact and make transactions to the contract directly on...\n\nProposal for converting to TRON/BTTC :\nIn the early stages of website development, we created a smart contract on the ethereum network that was created in the Remix IDE. Remix IDE is an open source web and desktop application. It fosters a fast development cycle and has a rich set of plugins with intuitive GUIs. Remix is ​​used for the entire journey of contract development with Solidity language as well as a playground for learning and teaching Ethereum. *you can see the smart contract that we have built above.","metadata":{"loc":{"lines":{"from":3044,"to":3054}}}}],["855",{"pageContent":"Next, we will propose to convert the smart contract into the Tron Network system using the TRC Standards. Tron-IDE is an online editor that helps developers develop smart contracts. It has the characteristics of modularity and provides editing, compiling, and deploying smart contracts in the form of plugins.\n\nAfter successfully converting the smart contract to the Tron system. We will develop the back-end, front-end, and database preparation. In the backend which will contain the service logic of the website work, we built it with the help of the Laravel framework and the PostgreSQL database. In the front-end that will be the live viewable interface that we built with the NextJS Typescript framework.","metadata":{"loc":{"lines":{"from":3056,"to":3058}}}}],["856",{"pageContent":"After we have developed all of these parts, we will try to connect our website with the smart contract that has been created by compiling the Tron smart contract so that we will get the Application Binary Interface (ABI) and smart contract address to be able to connect the existing smart contract with the back-end. end and front-end that we have developed.\n\nNature ForeTold - NFT platform supporting endangered species\nTRON Hackathon\nHackathon Season 3\necosystem\nOct 2022\nDec '22\n\nElisSenaVatansever\n\n9\nOct '22\nProject Name: NatureForeTold\nProject Track: Ecosystem\nTeam Member(s): 1\nDevPost URL: Nature ForeTold | Devpost 11\nProject Goal: We aim to provide regular donations to endangered species with an NFT art platform\nProject Info: We’ve all seen the following statement at least once in our lives: “Endangered Species”\nNature ForeTold.pdf (3.0 MB)\nVideo: Nature ForeTold - YouTube 9","metadata":{"loc":{"lines":{"from":3060,"to":3080}}}}],["857",{"pageContent":"According to the IUCN, currently, more than 41,000 species have been assessed to be under threat of extinction.\n\nDonations are collected on this subject from various places around the world. So, how can we approach this issue with the developing technology?\n\nNature ForeTold is a platform where young people, designers and professionals can come together and produce NFT, where they can both donate and generate income. We designed our platform to be user-friendly and minimalist.\n\nTogether with TRON, we are here to announce the name of our project and reach more people.\n\nProject Website: https://natureforetold.com/ 45\n\nProject Test Instructions: You connect your metamask wallet to the site from the connect wallet section at the top right with your member account. Then you share the NFT you created by choosing the donation amount. Our platform offers your NFT for sale through OpenSea as supporting endangered species.","metadata":{"loc":{"lines":{"from":3082,"to":3092}}}}],["858",{"pageContent":"Project Details: The user who logs into our site can access detailed information and learn how our system works. The user will then be able to transact on our site by connecting the crypto wallet in the upper right corner. The user states how much he wants to sell a specie from the endangered animal list he created, how much of it will be donated, and how many of this NFT design he wants to sell. As Nature ForeTold, we are making this sale by connecting our platform to OpenSea. Along with the transparent payments made, the user is instantly notified of how much donations go where.","metadata":{"loc":{"lines":{"from":3094,"to":3094}}}}],["859",{"pageContent":"Project Milestones: What makes our project different is not to bring a quality structure or a new name to the market, but to make a social responsibility project open to users with the evolving technology. We are trying to reach the leading NFT Artists in the World this month. In this way, we aim to accelerate our advertising speed. We are also in touch with professional NFT designers and blockchain developers. Moreover, we will try to grow our team and cooperate with prominent organizations such as WWF and WHO.\n\nContract Address : 0x4fc6eDcec04925042a576ec42B0594Ebc3ab501e\n(NatureForeToldIncrementer | Address 0x4fc6eDcec04925042a576ec42B0594Ebc3ab501e | Etherscan 2)","metadata":{"loc":{"lines":{"from":3096,"to":3099}}}}],["860",{"pageContent":"Contract Address : 0x4fc6eDcec04925042a576ec42B0594Ebc3ab501e\n(NatureForeToldIncrementer | Address 0x4fc6eDcec04925042a576ec42B0594Ebc3ab501e | Etherscan 2)\n\nDetails about NFT Upload and Smart Contract:\nYou can find detailed information about the smart contract in the terms & conditions section of our platform.\n1\n1\nnft-1\nnft-1\nThe fact that the NFTs are original and do not contain any nationality, religion, political opinion, or similar derogatory elements will be controlled by our professional software and team, so after the platform is operational, the NFTs installed will fall into the system after a while.\n\nSince we act as a bridge between OpenSea and the User, the need for smart contracts was limited. On the other hand, you can increase the number of NFTs you have created to donate in Smart Contract by using your NFT key.\n\nOur updates on our platform continue.","metadata":{"loc":{"lines":{"from":3099,"to":3112}}}}],["861",{"pageContent":"Our updates on our platform continue.\n\nProposal for converting to TRON/BTTC:\nWe have said that we plan to act as a bridge between the OpenSea platform and the user; the sales made on OpenSea are carried out through ETH. However, since we support TRON, we plan to do not the part that users donate but the amount they provide as income through TRON coins. We also plan to transfer the NFT number increase contact we developed on Remix to Tron-ide.","metadata":{"loc":{"lines":{"from":3112,"to":3115}}}}],["862",{"pageContent":"Hackathon / HackaTRON Season 4 Winner Announcement\n\nWe’ve had an amazing time during this season 4 of the TRON Grand Hackathon! We want to express our gratitude to all the participants, including project teams, developers, voters, active forum members, and everyone who voiced their opinions. We truly appreciate your support and enthusiasm. :pray:\n\nA special thanks goes to our esteemed judges, who took the time out of their busy schedules to review our HackaTRON S4 projects. It was no small feat, and we value their dedication and expertise. :judge:","metadata":{"loc":{"lines":{"from":1,"to":5}}}}],["863",{"pageContent":"During this hackathon, we made great efforts to ensure fair community voting. Building on the lessons learned from the previous seasons, we wanted to emphasize our stance against vote buying and uphold the principles of fairness and honesty. We diligently battled against thousands of bots and eliminated duplicate or spam votes. We are grateful to all those who actively reported and flagged inappropriate content, as your contribution was invaluable. :clap:\n\nIn HackaTRON S4, we witnessed a significant increase in participation and engagement within the community on our forum. A lot of meaningful questions were asked by the community and a lot of convincing answers are given by the project teams. We are thrilled by the growth and positive response. :+1:","metadata":{"loc":{"lines":{"from":7,"to":9}}}}],["864",{"pageContent":"We are also thrilled and delighted to see many returning builders joining our all-new Builder track for this hackathon! It’s truly exciting to witness their enthusiasm and dedication as they enhance their existing projects. The competition in the Builder track is intense, with a plethora of exceptional builders pushing the boundaries of innovation. We wholeheartedly appreciate your participation, and we’re taking note of your feedback. Rest assured, we’re already brainstorming ways to make the Builder track even more rewarding next season, with the possibility of adding additional prizes. :trophy:","metadata":{"loc":{"lines":{"from":11,"to":11}}}}],["865",{"pageContent":"To all the winners, please noted that HackTRON S4 is milestone-based 18 as it has received an overwhelmingly positive response from the community. If you are a judges-selected qualifier, it’s crucial that you take your project live on the mainnet by June 1 for the community to use in order to receive the full prize payment. The community is eagerly awaiting the opportunity to explore and experience your incredible creations firsthand! :heart_eyes:","metadata":{"loc":{"lines":{"from":13,"to":13}}}}],["866",{"pageContent":"For those who didn’t win, don’t lose heart just yet. We have fantastic opportunities lined up for you too! We still have three Determination Prizes of 5,000 USDD each and two Project Engagement Prizes of 3,000 USDD each waiting to be awarded. These prizes will be given to projects that continue to make progress and build by June 1. So, don’t stop now—keep the momentum going and let your dedication shine! Make sure to keep your project post updated and let the community know how to test out your projects on the mainnet once it is ready! :triangular_flag_on_post:\n\nWe strongly encourage everyone to share their feedback on their experience here, whether it’s positive or negative. We value each and every response from the community, and we will carefully consider them to make further improvements for Season 5. :speech_balloon:\n\nIt’s the community that makes TRON DAO great. We extend our heartfelt thanks to all of you. :sparkling_heart:","metadata":{"loc":{"lines":{"from":15,"to":19}}}}],["867",{"pageContent":"It’s the community that makes TRON DAO great. We extend our heartfelt thanks to all of you. :sparkling_heart:\n\nAnd now without further ado let’s go over our judge-selected qualifiers. Our judges carefully looked at each project for originality, creativity, technicality, design, business model, feasibility, usability, practicality & use case, and contribution to the crypto ecosystem.\n\nThose below made it through unscathed and have been judged accordingly and qualify. Remember projects must push fully to main-net to receive the entire prize.\n\nJudge-Selected Qualifiers. :tada:\n\nHackathon Season 4 Web3 Category Winners:\n1st Prize (20k) TrustSight by The Tronacles\n2nd Prize (15K) Daren Market by Daren Market\n3rd Prize (10K) TronSave  by TRONSAVE\n4th Prize (8k) ProvyLens  by LensCrafters\n5th Prize (6k) Yinbox  by Jeffrey Lewis","metadata":{"loc":{"lines":{"from":19,"to":32}}}}],["868",{"pageContent":"Hackathon Season 4 DeFi Category Winners:\n1st Prize (20K) Ergon  by USTX\n2nd Prize (15k) Cloak  by Cloak\n3rd Prize (10K) MyFend by Fend Group\n4th Prize (8k) Sorrel Banq  by Paracosm Labs\n5th Prize (6k) Swirl Ads by Team Sudo\n\nHackathon Season 4 GameFi Category Winners:\n1st Prize (20K) Duelers  by Tronjoy\n2nd Prize (15k) RevoluTRON  by Irruption Lab\n3rd Prize (10K) theRevolt  by Spirit-Tower\n4th Prize (8k) Cukies: Rush & Run by Cukies World\n5th Prize (6k) METASENS by METASENS\n\nHackathon Season 4 NFT Category Winners:\n1st Prize (20K) Bobbybot.Trade 1by Nick Mura\n2nd Prize (15k) Evoie by Evoie\n3rd Prize (10K) Samhita DAO by HeritageSpeak\n4th Prize (8k) SealKey by TRONNuggetz\n5th Prize (6k) Wine Vault by Wine Vault\n\nHackathon Season 4 Builder Category Winners:\n1st Prize (20K) Farming-as-a-Service 2by Elk Finance\n2nd Prize (15k) Galaxy Throne 1by Galaxy Throne\n3rd Prize (10K) JustMoney Spot by JustMoney\n4th Prize (8k) TronNRG by TronNinjas\n5th Prize (6k) TronQL by TronQL","metadata":{"loc":{"lines":{"from":34,"to":60}}}}],["869",{"pageContent":"Hackathon Season 4 Eco-friendly Category Winners:\n1st Prize (20K) EcoMarket 2by EcoMarket\n2nd Prize (15k) MusiCoinCity by ElfWeb\n3rd Prize (10K) CarboEx by CarboEx\n4th Prize (8k) ForGreen by ForGreen\n5th Prize (6k) BlockForest by BlockForest\n\n\nTrustsight by The Tronacles - Enabling decentralized trust on the TRON blockchain\nTRON Hackathon\nHackathon Season 4\nweb3\nApr 15\nMay 16\n\nweb3buildor\n\n2\nApr 15\nProject Name: TrustSight\n\nProject Track: Web3\n\nTeam Name: The Tronacles\n\nTeam Member(s): 2\n\nDorahacks Project Link: TrustSight | Buidls | DoraHacks 15\n\nProject Goal: To create a crowdsourced reputation platform for on-chain actors using the EigenTrust algorithm, enabling users to navigate the TRON ecosystem securely and confidently.\n\nProject Website: https://trustsight.org 52\n\nProject Test Instructions:","metadata":{"loc":{"lines":{"from":62,"to":95}}}}],["870",{"pageContent":"Project Website: https://trustsight.org 52\n\nProject Test Instructions:\n\nSearch for any actor on TRON by address (account or contract)\nRead reviews other accounts have left\nWrite your own review of an account or contract\nExplore top-rated accounts and contracts on TRON\nProject Details:\n\nTrustSight is a web3 reputation platform that leverages the EigenTrust algorithm to crowdsource on-chain trust. It provides features such as reading and writing reviews, flagging malicious actors, evaluating project legitimacy, and discovering top-rated projects. The platform is designed to be user-friendly and beginner-oriented, making it easy for users of all experience levels to navigate the blockchain space securely.","metadata":{"loc":{"lines":{"from":95,"to":105}}}}],["871",{"pageContent":"Problem Statement:\nIn the rapidly evolving world of web3, identifying legitimate actors and avoiding malicious ones on-chain can be a daunting task, particularly for beginners. New users may struggle to find reputable DeFi, NFT, or DAO projects, and it can be challenging to determine if a contract is legitimate or a scam. While experienced users may rely on metrics like TVL or seek advice from experts, these methods aren’t always accessible for newcomers, leaving them vulnerable to scams, rug pulls, and phishing schemes.\n\nTwo key questions arise:\n\nHow can the community collectively assess the legitimacy of accounts and contracts?\nHow can we create a seamless user experience to showcase this “legitimacy,” especially for beginners?\nIntroducing TrustSight:\nTo address these challenges, we have developed TrustSight, a platform designed to crowdsource reputation for on-chain actors by leveraging the power of the EigenTrust algorithm.\n\nTrustSight operates as follows:","metadata":{"loc":{"lines":{"from":107,"to":117}}}}],["872",{"pageContent":"TrustSight operates as follows:\n\nCrowdsourcing trust scores on-chain from users about other accounts through the TrustScoreRegistry contract.\nUtilizing a simple, non-distributed EigenTrust algorithm to compute global trust scores for all actors within the network.\nShowcasing these scores in a user-friendly, beginner-oriented interface.\nKey Features:","metadata":{"loc":{"lines":{"from":117,"to":122}}}}],["873",{"pageContent":"Read reviews for on-chain addresses: TrustSight enables users to access and read reviews about other on-chain addresses, providing valuable insights into their reputation.\nWrite reviews for on-chain addresses: Users can contribute to the platform by writing reviews for other on-chain addresses, fostering a collaborative approach to trust-building.\nCheck addresses for maliciously flagged actors: TrustSight allows users to verify if an address has been flagged as potentially malicious, helping to avoid scams and safeguard investments.\nAssess project legitimacy: TrustSight enables users to evaluate projects based on their trust scores, ensuring a safer and more informed decision-making process.\nDiscover top-rated projects: Users can explore the highest-rated addresses on TrustSight to find reputable projects, simplifying the search for trustworthy opportunities.","metadata":{"loc":{"lines":{"from":124,"to":128}}}}],["874",{"pageContent":"Discover top-rated projects: Users can explore the highest-rated addresses on TrustSight to find reputable projects, simplifying the search for trustworthy opportunities.\nEigenTrust re-computation cron job: TrustSight employs a cron job to regularly update trust scores, ensuring that users have access to the most up-to-date information.\nIn summary, TrustSight is a groundbreaking web3 reputation platform that leverages the EigenTrust algorithm to crowdsource on-chain trust, making it easier for users of all experience levels to navigate the blockchain space securely. With features such as reading and writing reviews, flagging malicious actors, evaluating project legitimacy, and discovering top-rated projects, TrustSight provides a seamless and user-friendly experience for building trust and credibility in the world of web3.","metadata":{"loc":{"lines":{"from":128,"to":130}}}}],["875",{"pageContent":"Technical Details: How EigenTrust Works\nThe EigenTrust algorithm 4 is an innovative method to establish trust and reputation within networks, and it is a valuable tool for overcoming the challenge of identifying legitimate actors and avoiding malicious ones in the blockchain space. One of the primary issues with web3 is the difficulty of discerning trustworthiness among anonymous actors who lack accountability. TrustSight leverages the EigenTrust algorithm to crowdsource reputation for on-chain actors, creating a more secure and reliable environment for users.","metadata":{"loc":{"lines":{"from":132,"to":133}}}}],["876",{"pageContent":"The EigenTrust algorithm operates on a principle similar to Google’s PageRank system 1. It is based on the idea that trust can be derived from one’s network of peers and extended to the peers of those peers, eventually covering the entire network. By aggregating trust scores from every peer and constantly iterating the computation for each individual, the values stabilize into unique global trust scores for every individual in the network.\n\nIn real life, trust is often established through personal interactions and relationships. For example, if Alice trusts Bob because of their positive interactions, and Alice vouches for her friend Carol, Alice’s trust in Carol will likely be strong. Similarly, the EigenTrust algorithm uses this concept to determine trust scores within a network.","metadata":{"loc":{"lines":{"from":135,"to":137}}}}],["877",{"pageContent":"TrustSight utilizes the TrustScoreRegistry (link), a smart contract designed for managing and storing user reviews on the TRON blockchain. This contract enables users to submit reviews about other users (reviewees) and associate them with a unique key. The reviews are publicly accessible using the TRON addresses of the reviewer and the reviewee, as well as the key, which helps establish a foundation for trust.\n\nTrustSight’s implementation of the EigenTrust algorithm helps build trust on-chain by crowdsourcing reputation scores for actors within the network. By using a robust, non-distributed EigenTrust algorithm, TrustSight can efficiently calculate trust scores that can be used to gauge the trustworthiness of various actors in the blockchain ecosystem. This approach enhances security and fosters a more reliable and trustworthy environment for users.\n\nBusiness Model & Value Proposition\n\n(A) Monetization & Platform Maintenance Strategy:","metadata":{"loc":{"lines":{"from":139,"to":145}}}}],["878",{"pageContent":"Premium subscription for businesses: TrustSight offers a premium subscription plan that provides businesses with a verified checkmark, signaling their credibility and trustworthiness to users. This plan also grants businesses access to additional features and benefits tailored to their needs.\nTargeted advertisements: TrustSight can generate revenue through targeted advertising based on users’ queries and preferences, ensuring that ads are relevant and appealing to the user base.\nFeatured DApps and explore page: TrustSight showcases featured DApps and provides an explore page, allowing developers to promote their applications and gain exposure to potential users.\nDonations from public good platforms: TrustSight can receive financial support from public good platforms, recognizing the platform’s contributions to enhancing trust and security within the blockchain space.","metadata":{"loc":{"lines":{"from":147,"to":150}}}}],["879",{"pageContent":"API for wallets: TrustSight can create an API that allows wallet providers to block scam contracts automatically, protecting users and enhancing the value of the wallet service.\nEducational content: TrustSight can generate income by offering educational content on the platform, helping users better understand blockchain technology, smart contracts, and the importance of trust in the web3 space.\nCrowdsourcing contributors: TrustSight enlists the help of community members to remove fraudulent or spam reviews, ensuring the integrity and accuracy of the platform’s trust scores. Active contributors may be rewarded for their efforts, creating an incentive to maintain the platform’s quality.\n(B) Value Proposition:\nTrustSight’s primary value proposition lies in its ability to identify scam accounts and rug pulls quickly and efficiently, providing users with a reliable source of information to navigate the web3 landscape securely.","metadata":{"loc":{"lines":{"from":151,"to":155}}}}],["880",{"pageContent":"Identifying scams and rug pulls: TrustSight’s EigenTrust algorithm helps users identify potential scams and rug pulls, enabling them to avoid malicious actors and safeguard their investments.\nApp store for DApps and contracts: TrustSight functions as an app store for decentralized applications (DApps) and smart contracts, giving users a single, trustworthy platform to discover and interact with web3 projects.\nGo-to place for web3 newcomers: TrustSight serves as a starting point for users new to web3, offering guidance, educational resources, and a user-friendly interface to help them navigate the complex world of blockchain technology.\nEnhanced security for businesses and users: TrustSight’s verified checkmarks for businesses and API integration for wallet providers enhance security for both businesses and users, fostering a more trustworthy ecosystem.","metadata":{"loc":{"lines":{"from":157,"to":160}}}}],["881",{"pageContent":"In conclusion, TrustSight’s business model and value proposition focus on enhancing trust and security within the web3 space. Through a combination of monetization strategies, TrustSight aims to provide businesses and users with a reliable platform to identify scams, discover legitimate projects, and navigate the web3 landscape securely. By leveraging the EigenTrust algorithm and offering a range of valuable services, TrustSight aims to become the go-to platform for businesses and individuals looking to explore and interact with the rapidly evolving world of blockchain technology.","metadata":{"loc":{"lines":{"from":161,"to":161}}}}],["882",{"pageContent":"Smart Contract links:\n\nTRON Mainnet: TASoUmvErzXd4AxrEEHJXLFGb8tyr5Ubx6 2\n\nNile Testnet: TTbxStTcs7Zf7yC3tfzAPx9cbpvtyC477f 1\n\nProject Milestones:\n\n4/15 - 6/1: Beta Testing on Nile\n6/1: Mainnet Beta Launched!\nUpdate on 6/1:\nWe have officially launched our beta application on TRON Mainnet! ! :tada:\n\nIn addition to deploying our smart contracts on Mainnet, we also added new social engagement features such as likes, comments, and follows. Try out our application and use this feedback form 2 so we can gather important feedback for product improvement. Looking forward to your engagement!\n\nTrustSight Feedback form: https://forms.gle/4QMoHbvbLUieCpQF7 2\n\nDaren Market - The world’s first on chain market for Web3 community and business\nTRON Hackathon\nHackathon Season 4\nweb3\nApr 13\nMay 30\n\nMaria_DarenMarket\n\n8\nApr 13\nProject Name: Daren Market - The world’s first on chain market for Web3 community and business\nProject Track: Web3, DeFi\nTeam Name: Daren Market\nTeam Member(s): 3\nHanggi","metadata":{"loc":{"lines":{"from":163,"to":195}}}}],["883",{"pageContent":"Maria_DarenMarket\n\n8\nApr 13\nProject Name: Daren Market - The world’s first on chain market for Web3 community and business\nProject Track: Web3, DeFi\nTeam Name: Daren Market\nTeam Member(s): 3\nHanggi\n\nChief Executive Officer, Technical Director\nM.S. in Computer Science, Seoul National University\nSerial entrepreneur, co-founder developed several mobile social products and received IDG Series A funding\nProvided strategy and technical support for several famous project parties on Binance, Huobi, OKX etc.\nMaria\n\nHead of Business and Strategy\nM.S in Computer Science, Seoul National University, Angel Investor\nSeoul National University Super Merit Scholarship recipient\nExtensive experience in the field of blockchain quantitative trading\nSHHAN","metadata":{"loc":{"lines":{"from":195,"to":215}}}}],["884",{"pageContent":"Creative Director\nFounder of Mimic Shhans\nCreated Mimic Shhans Classic, Mimic Shhans Official, Rudolph Squad independently\nThe creator of The Shhan Universe\nDorahacks Project Link: Daren Market | Buidls | DoraHacks 10\nProject Goal: Let people use crypto in their lives with BitTorrent Chain\nProject Info: link3.to/daren_market 7\nProject Website: Daren Market 25\nProject Test Instructions:","metadata":{"loc":{"lines":{"from":217,"to":225}}}}],["885",{"pageContent":"Go to Daren Market staging site: https://app-staging.daren.market 17\nClick the “Connect” button in the upper right.(We assume that you have installed wallet software such as Metamask)\nMake sure to change your network to BitTorrent Chain Donau by clicking the network menu on header bar.\nJoin Daren Market Discord to get some test USDT (it’s a custom ERC20 token): https://discord.com/channels/940380731270631456/1096000679878856754 2\nClick your address in the upper right to open personal menu, and click “My Store” to open a store.\n(Optional) Click “Edit dProfile” to edit your store name, store description and avatar.\n(If you are still on “My Store” page) Click “Service Management” and click “Add service”. You can set up service name, service description, service covers, and service package. After that click “SUBMIT” to create a service.\nSellers are not allowed to buy their own services here, so you may need another browser(with different Metamask address) to simulate a buyer.","metadata":{"loc":{"lines":{"from":227,"to":234}}}}],["886",{"pageContent":"Sellers are not allowed to buy their own services here, so you may need another browser(with different Metamask address) to simulate a buyer.\n[Seller]: (As a seller you only need some BTT for gas) Copy the service link to buyer browser.\n[Buyer]: (As a buyer, you need BTT for gas and test USDT) Open the service link and click “Place order”.\n[Buyer]: Click your address in the upper right to open personal menu, and click “My Purchase” to check the new order.\n[Buyer]: Click “Approve” on the order and pay for the order by clicking “Pay” button.\n[Seller]: Click your address in the upper right to open personal menu, and click “My Sale” to check the new order.\n[Seller]: Click “Submit” button to submit your order.\n[Buyer]: Click “Check” button to check your order.\n[Seller]: Click “Withdraw” button to withdraw your order and check the balance of test USDT change.\nYour can also check the order on BTTCSCAN site by clicking “Check here” in order detail page.","metadata":{"loc":{"lines":{"from":234,"to":243}}}}],["887",{"pageContent":"[Seller]: Click “Withdraw” button to withdraw your order and check the balance of test USDT change.\nYour can also check the order on BTTCSCAN site by clicking “Check here” in order detail page.\nProject Details: [Details of your project. Feel free to add any photo or video reference] 5\nSmart Contract links: TransparentUpgradeableProxy | Address 0xB06649e2D93d33a43E98f5318190bd5DFE0532eD | BTTC 4\nProject Milestones: Daren Market will be deployed on BitTorrent Chain Mainnet on May.","metadata":{"loc":{"lines":{"from":243,"to":247}}}}],["888",{"pageContent":"Demo Video\nWeb3 Shopify Daren Market | Easy shopping with crypto\nWeb3 Shopify Daren Market | Easy shopping with crypto\nIntroduction\nDaren Market is the world’s first on chain market for Web3 community and business, empowering WEB3 organizations to realize a series of business closure loops such as business realizations, brand building, community activation, and collaborative attraction, etc.There are thousands of freelancers, entrepreneurs and Web3.0 customers active on Daren worldwide.\n\nDaren rejects the monopoly profit model of traditional Web2 companies, and will be based on blockchain’s transparency, fair incentives and decentralized governance mechanisms to benefit consumers, service providers, invitees and sharers.\n\nProject Features\n:notebook: Web2-friendly decentralized order system\n\n:scroll: Collaboration and governance of DAO\n\n:boom: Support for multiple public chains\n\n:scientist: Trade to earn\n\n:computer: Invite to earn\n\n:technologist: Share to earn","metadata":{"loc":{"lines":{"from":249,"to":268}}}}],["889",{"pageContent":":scroll: Collaboration and governance of DAO\n\n:boom: Support for multiple public chains\n\n:scientist: Trade to earn\n\n:computer: Invite to earn\n\n:technologist: Share to earn\n\n:popcorn: Friendly tutorials\n\nHow Daren Market can benefit you?\nCommunity Empowerment\n\nNFT holder’s discount: Set up community exclusive NFT/tokens for members to enjoy discounts, group purchases and other benefits\nBenefits Distribution: The community can distribute benefits to members through NFT spending vouchers\nBrand co-building: The community gains by participating in the co-construction of the brand\nimage\nimage\n\nimage\nimage\nStore Campaigns\nimage\nimage\n\nimage\nimage\n\nimage\nimage\nBusiness Acceleration","metadata":{"loc":{"lines":{"from":268,"to":300}}}}],["890",{"pageContent":"image\nimage\nStore Campaigns\nimage\nimage\n\nimage\nimage\n\nimage\nimage\nBusiness Acceleration\n\nCommunity Portraits: The project can use Daren to understand the characteristics of each community and find the potential partners\nCommunity Connections: Project parties can cooperate with communities by setting up NFT partner discount, profit-sharing plans, etc.\nBrand building: companies/groups/communities can build brand through Daren by casting NFT, connecting the Web3 community to jointly pry the market and enhance brand influence\nimage\nimage\nUser Co-Building\n\nTrading Mining: Incentivize user transactions through tokens, creating a positive cycle\nProfit sharing plan: Incentivize users to actively share services and solve the pain point of attracting traffic in the early stage of opening a store\nInvitation reward: Social referrals through token incentives\nimage\nimage\nDecentralized mechanism","metadata":{"loc":{"lines":{"from":300,"to":325}}}}],["891",{"pageContent":"Decentralized orders: the transaction process is on the chain to ensure the openness, transparency and security of transactions and to solve the trust problem of stable coin payments\nArbitration mechanism: Gradually explore and implement the construction and governance of DAO by means of arbitration\nDAO mechanism: become a DAO member through deep participation in the construction of the platform, collaborative governance and enjoy the dividends\nDecentralized Order Process\nimage\nimage\n\nimage\nimage\n\nimage\nimage\n\nimage\nimage\n\nimage\nimage\nDecentralized Arbitration\nimage\nimage\n\nimage\nimage\nFree?\nYes, everything that currently exists on Daren Market is free, hope you enjoy your Web3 business journey on Daren Market\n\nTronsave - Ultimate solution for enhancing user experience on TRON network\nTRON Hackathon\nHackathon Season 4\nweb3\nApr 14\nAug 24\n\nduongdlh\n\n4\nApr 14\nTRONSAVE","metadata":{"loc":{"lines":{"from":327,"to":365}}}}],["892",{"pageContent":"Tronsave - Ultimate solution for enhancing user experience on TRON network\nTRON Hackathon\nHackathon Season 4\nweb3\nApr 14\nAug 24\n\nduongdlh\n\n4\nApr 14\nTRONSAVE\n\nProject Name: TRONSAVE\nProject Track: Web3\nTeam Name: TRONSAVE\nTeam Member(s): 5\nDorahacks Project Link: TRONSAVE | Buidls | DoraHacks 12\nProject Goal: TRONSAVE brings a web2-like experience to users on Web 3\nProject Info: Overview - TronSave 12\nProject Website: https://tronsave.io/ 36\nProject Test Instructions: TRONSAVE - Demo.mp4 - Google Drive 9\nSmart Contract links:\n\nContract 1 6\nContract 2 6\nProject Milestones:\n\nJoning TRON hackathon ss 4\nMainnet\nOffer free trial for Dapp on TRON in 6 months\nIntegrate with top 15 biggest Dapp on TRON\nDescription\nTRONSAVE benefits the TRON NETWORK ecosystem by enhancing the user experience by bringing a Web2-like experience to them. TRONSAVE makes paying transaction fees in Web3 much easier than ever. There are 2 options TRONSAVE offers","metadata":{"loc":{"lines":{"from":365,"to":398}}}}],["893",{"pageContent":"Option 1: User pays transaction fee by WTRX with a discount rate\n\nIn this option, TRONSAVE will charge users WTRX for their transaction (with a discount rate ~ 90% compare to TRX users have to pay when paying transaction fees by themself). Then TRONSAVE will pay users’ transactions by Energy, which comes from staking TRX.\n\nThis option allows people who hold TRX for long-term can stake it on TRONSAVE and share benefits from earning WTRX of users with the protocol.\n\nThis option optimizes profits and costs for both TRX provider and users\n\nOption 2: Dapp pays transaction fees for their users\n\nIn this option, TRONSAVE will integrate with other Dapp, allowing them to pay for their users’ transaction fees. Imagine users can experience your Dapp without confirming to pay for every transaction, what a web2-experience.\n\nFor example, a free mint NFT collection wants to pay transaction fees for their users’ minting action. In this situation, user can mint their NFT without any fees.","metadata":{"loc":{"lines":{"from":400,"to":412}}}}],["894",{"pageContent":"For example, a free mint NFT collection wants to pay transaction fees for their users’ minting action. In this situation, user can mint their NFT without any fees.\n\nMAINNET UPDATE\n\nWe’re honor to announce that TRONSAVE is OFFICIALLY LIVE on TRON NETWORK mainet. We’re now welcome all of the DApp on TRON to integrate TRONSAVE to your app and enhance the user experience to a new level\n\nRegarding to the staking feature for TRONSAVE user to stake their TRX to gains share revenue from TRONSAVE, we’re working this on phase 2 now and the testnet version of this feature will be launch on the beginning of June\n\nMAINNET INFOMATION\n\nContracts:\n\n1. Forwarder contract:\n\nTSbK9BH4j124LuGzRbnJ6JyehV6qiypG6L\n\n2. Relay Hub contract:\n\nTNMdt2ZJhhbFPhuAc41VHLrWJdimtEkQ2R\nDocs and Integration guideline\n\n\ndocs.tronsave.io\n\nOverview 12\nHere we go!\n\nIf you have any concerns related to TRONSAVE, kindly send directly below this post or send me an email via dolehaiduong16@gmail.com","metadata":{"loc":{"lines":{"from":412,"to":439}}}}],["895",{"pageContent":"docs.tronsave.io\n\nOverview 12\nHere we go!\n\nIf you have any concerns related to TRONSAVE, kindly send directly below this post or send me an email via dolehaiduong16@gmail.com\n\n\nProvyLens - Your lens into supply chain\nTRON Hackathon\nHackathon Season 4\nweb3\nApr 6\nJun 2\n\nLuxar\n\n8\nApr 6\nProject Name: Provylens\n\nProject Track: Web3\n\nTeam Name: LensCrafters\n\nTeam Member(s): @Luxar, @psyduck, @jenny-shah\n\nDorahacks Project Link 18\n\nProject Goal: Our vision is to revolutionise the supply chain industry through blockchain technology for secure end-to-end tracking and management. We aim to ensure authenticity and safety of products with decentralised and tamper-proof systems.","metadata":{"loc":{"lines":{"from":439,"to":468}}}}],["896",{"pageContent":"Project Info: Provylens is a blockchain-based project that aims to bring transparency and efficiency to the supply chain management industry by providing real-time tracking and leveraging the latest blockchain and zero-knowledge proof technologies. The project addresses the severe consequences of fraud, counterfeiting, and illicit activities in the supply chain, providing a revolutionary solution for the industry. The end game is a fully functional system that revolutionises traditional supply chain management and increases efficiency, transparency, and trust in the supply chain.\n\nPitchdeck:\nProvylens.pdf (3.3 MB)\n\nDemo video: ProvyLens - Demo video - YouTube 8\n\nInspiration","metadata":{"loc":{"lines":{"from":470,"to":477}}}}],["897",{"pageContent":"Pitchdeck:\nProvylens.pdf (3.3 MB)\n\nDemo video: ProvyLens - Demo video - YouTube 8\n\nInspiration\n\nWe have realised the most obvious use case of blockchain technology is in the supply chain industry. And while there are some tools available that are created specifically for enterprises, there is a lack of a tool that leverages blockchain technology for supply chain management of small and medium sized companies.\n\nWe wanted to build something that makes blockchain accessible to such companies without having to bear huge costs.\n\nProject Website: https://provylens-virid.vercel.app/ 17\n\nss1\nss1\nss2\nss2\nss3\nss3\nss4\nss4\nSmart Contract Links:\nDeployed on BitTorrent Mainnet","metadata":{"loc":{"lines":{"from":477,"to":499}}}}],["898",{"pageContent":"Project Website: https://provylens-virid.vercel.app/ 17\n\nss1\nss1\nss2\nss2\nss3\nss3\nss4\nss4\nSmart Contract Links:\nDeployed on BitTorrent Mainnet\n\nuserDetails: 0xA69CBda23D5796B7d5dF7f4c1b29b2Ca246E0600 1\nsupplierProduct: 0xA850ff77145a989FF7Bf0a097B76e07E326D5b41\nsupplierManufacturer: 0xeA511E67f6783b850769b26D8Fd28314e0C045B9\nmanufacturerProduct: 0x644F96E081415B00B67d0C2EB57a4503d35D7CD9\nmanufacturerDistributor: 0x23cf38C621668DE47b491806C154e122Ff903874\nProject Description: This project aims to develop a blockchain-based supply chain logistics system that will enable end-to-end tracking of products, enhance transparency, and ensure secure data sharing between supply chain stakeholders. The system will be designed to provide real-time visibility into the movement of goods from production to delivery, improve efficiency, and increase trust and accountability throughout the supply chain.","metadata":{"loc":{"lines":{"from":499,"to":517}}}}],["899",{"pageContent":"The project team will work on designing and developing a decentralised, tamper-proof, and immutable system that ensures the integrity of data and facilitates seamless communication between all parties involved in the supply chain.\n\nEach product will be assigned a unique identifier that can be traced back to its origin, allowing users to verify its authenticity and ensure that it has not been tampered with or counterfeited. The platform will also incorporate smart contracts to automate supply chain operations, reduce costs, and increase efficiency, while maintaining transparency and accountability throughout the process. By providing consumers with a reliable and transparent supply chain, ProvyLens aims to improve trust and confidence in the products they purchase, while also reducing waste, fraud, and environmental impact.\n\nProject Test Instructions:\n\nStep-1: Create an account:","metadata":{"loc":{"lines":{"from":519,"to":525}}}}],["900",{"pageContent":"Project Test Instructions:\n\nStep-1: Create an account:\n\nTo create an account, the user/entity needs to connect their Metamask Wallet to the system.\nAfter connecting the wallet, select a role as either a Manufacturer, Supplier or Distributor.\nOnce the user/entity selects the role, they need to provide their Business Name, Physical Address and Business Logo.\nStep-2: Supplier Dashboard:","metadata":{"loc":{"lines":{"from":525,"to":532}}}}],["901",{"pageContent":"To add a product to the system, the supplier needs to input the product name, description, price, necessary quantity, and expiry date.\nThe supplier can view the product details in the ‘view product’ component.\nIf the supplier wants to delete any product, they will need to enter the product ID into the system to do so.\nIn the chain component, suppliers can transfer products by selecting the desired item, specifying the requesting manufacturer’s name, indicating the unit quantity, and initiating the transfer process.\nYou can view all transfer history in the ‘History’ panel.\nIn the Approve Transfer panel, a supplier can approve any transfer requests initiated by a manufacturer.\nStep-3: Manufacturer Dashboard:","metadata":{"loc":{"lines":{"from":534,"to":540}}}}],["902",{"pageContent":"The manufacturer must provide product details like the supplier’s address and ID, as well as the product’s name, description, price, required quantity, and expiry date to add a product to the system.\nUsers can view all products in the ‘product details’ component.\nIf the manufacturer decides to delete any product, they must input the product ID to successfully remove it from the system.\nWithin the Chain component, the manufacturer can transfer products by selecting the desired item, inputting the requesting distributor’s name, specifying the necessary quantity, and initiating the transfer process.\nUsers can view all transfer history in the ‘History’ panel.\nIn the Request Stock panel, a manufacturer can request stock by inputting the supplier’s address, product ID, and the required quantity of the product.\nStep-4: Distributor Dashboard:","metadata":{"loc":{"lines":{"from":542,"to":548}}}}],["903",{"pageContent":"To successfully add their product to the system, the distributor entity must provide product details such as product’s name, description, price, necessary quantity, and expiry date.\nUsers can access and review all product details in the View Product component.\nTo remove a product from the system, the distributor must input the product ID to initiate the deletion process.\nIn the Chain component, the distributor can request products by selecting the desired item and specifying the necessary quantity.\nA distributor can request stock by inputting the manufacturer’s address, product ID, and the required quantity of the product in the Request Stock panel.\nStep-5: Product Verification:\n\nThe entity must input the product ID to verify the product.\nThe system will display the current tracking status of the product and provide a description of each associated entity when the user enters the product ID.\nProject Milestones:","metadata":{"loc":{"lines":{"from":550,"to":559}}}}],["904",{"pageContent":"Design the Structure of the supply chain: 15/03/2023\nDesign the flow of the supply chain: 18/03/2023\nMaking the Front end: 25/03/2023\nMaking Smart Contracts: 30/03/2023\nTesting the smart contract: 04/04/2023\nIntegrate frontend with backend: 13/04/2023\nFuture Goals:","metadata":{"loc":{"lines":{"from":561,"to":567}}}}],["905",{"pageContent":"The project aims to expand the platform’s capabilities to cover more supply chain stages, allowing for greater end-to-end tracking and management of goods. This will involve leveraging the latest blockchain technologies to provide enhanced visibility and security throughout the supply chain, from raw material procurement to final delivery.\nProvylens will focus on enhancing the user interface and experience to create a more seamless and intuitive platform. This will involve improving the platform’s design and usability, streamlining the onboarding process for new users, and providing more personalised and targeted features to meet the specific needs of each user.","metadata":{"loc":{"lines":{"from":569,"to":570}}}}],["906",{"pageContent":"Creation of a comprehensive solution that caters to the needs of various industries and stakeholders. This will involve collaborating with key players in different industries to identify their unique challenges and requirements and developing tailored solutions to meet their needs. Provylens will also work to build a strong ecosystem of partners and collaborators to support the growth and adoption of its platform across different industries and regions.\nChallenges we ran into:","metadata":{"loc":{"lines":{"from":571,"to":572}}}}],["907",{"pageContent":"A big hurdle we faced was trying to include all the legs of the supply chain in the Minimum Viable Product (MVP) and this was a herculean task at first because it involved gathering data from all the different parties involved in the supply chain.\n\nEach of these parties had their own unique data systems and processes, which made it difficult to gather and consolidate all the relevant information.\n\nAnother challenge was creating a visual representation of the product journey that was easy to understand and informative. We had to take into account all the different stages of the supply chain, including manufacturing, transportation, storage, and retail.\n\nWe also had to consider the different types of data that would be relevant at each stage and ensure that the visual representation of the product journey was accurate and up-to-date.\n\nAccomplishments that we’re proud of","metadata":{"loc":{"lines":{"from":574,"to":582}}}}],["908",{"pageContent":"Accomplishments that we’re proud of\n\nOne aspect that we’re really proud of is the QR code feature that allows end consumers to track the source of raw materials, view expiry dates, and verify the authenticity of products.\n\nWith the help of this QR code feature, consumers can quickly and easily scan the code using their mobiles to access vital information about the product. This kind of transparency is not only important for ensuring the safety of the product, but it also helps to build trust between consumers and manufacturers.\n\nIn addition to the QR code feature, we have also developed a visual representation of the product journey in the form of a graph. We have successfully integrated data visualisation techniques that enable producers and stakeholders to gain valuable insights into supply chain operations.\n\nThis graph allows consumers to easily see how a product has progressed through various stages, such as manufacturing, transportation, and storage.\n\nWhat we learned","metadata":{"loc":{"lines":{"from":582,"to":592}}}}],["909",{"pageContent":"This graph allows consumers to easily see how a product has progressed through various stages, such as manufacturing, transportation, and storage.\n\nWhat we learned\n\nWe gained valuable insights into supply chain management while working on this project.\nOne of the things we learned is that the supply chain is very complicated and involves many different people like suppliers, manufacturers, distributors, and retailers. Each of these groups has their own problems and needs. In addition, we discovered that managing the supply chain is a delicate balancing act, where even small disruptions can cause significant downstream effects.\n\nBut most importantly, we explored the integration of blockchain technology into supply chain management. Blockchain technology can be used to keep track of transactions in a secure and transparent way - also making the logistics more efficient.\n\nSlide2\nSlide2\nSlide4\nSlide4\nSlide5\nSlide5\nOur Team","metadata":{"loc":{"lines":{"from":592,"to":607}}}}],["910",{"pageContent":"Slide2\nSlide2\nSlide4\nSlide4\nSlide5\nSlide5\nOur Team\n\nLuxar : A Blockchain Developer who is very passionate about web3 and technology. His goal is to solve the problem of supply chain management through blockchain technology.\n\nPsyduck: A Backend and Blockchain developer who possesses a keen interest in problem-solving and exhibits exceptional analytical and logical reasoning skills. He derives great pleasure from experimenting with various algorithms to enhance the efficiency of his code.\n\nJenny-shah: A Frontend Developer who loves crafting visually pleasing and aesthetic websites. She understands the importance of user experience but also loves incorporating personal touch and the home factor into front end development.\n\nYinbox - Fully integrated messenger with end-to-end encryption\nTRON Hackathon\nHackathon Season 4\nweb3\nApr 6\nMay 20\n\njnlewis\n\n7\nApr 6\nProject Name: Yinbox\n\nProject Track: Web3\n\nTeam Name: Jeffrey Lewis\n\nTeam Member(s): jnlewis","metadata":{"loc":{"lines":{"from":607,"to":638}}}}],["911",{"pageContent":"jnlewis\n\n7\nApr 6\nProject Name: Yinbox\n\nProject Track: Web3\n\nTeam Name: Jeffrey Lewis\n\nTeam Member(s): jnlewis\n\nDorahacks Project Link: Yinbox | Buidls | DoraHacks 5\n\nProject Goal: We want to give people the ability to make connections with anyone on the blockchain, only by knowing their wallet addresses.\n\nProject Website: https://www.yinbox.chat/ 20 (Please note: This alpha version of the application is for testing and development purposes only. The final version may differ significantly in terms of features, appearance, and functionality.)\n\nGithub: GitHub - jnlewis/yinbox-contracts 4\n\nDemo Video: Yinbox Demo 2023 - YouTube 3\n\nSmart Contract links: TRONSCAN | TRON BlockChain Explorer | 波场区块链浏览器 1\n\nProject Info\n\nYinbox: Blockchain Integrated Messenger\nInspiration\nThere is a disconnect between people on the blockchain","metadata":{"loc":{"lines":{"from":638,"to":666}}}}],["912",{"pageContent":"Smart Contract links: TRONSCAN | TRON BlockChain Explorer | 波场区块链浏览器 1\n\nProject Info\n\nYinbox: Blockchain Integrated Messenger\nInspiration\nThere is a disconnect between people on the blockchain\n\nThere is no easy way to reach someone you’ve come across on a blockchain network unless you know them personally or are already connected on a platform like Discord. Whether it’s coming across a wallet address or the owner of an NFT you found on a marketplace that you’d like to talk to.\n\nThat’s where Yinbox comes in. We wanted to bridge that gap, and give people the ability to make connections with anyone on the blockchain.\n\nAbout the Project\nMessage any wallet address on the blockchain.","metadata":{"loc":{"lines":{"from":666,"to":679}}}}],["913",{"pageContent":"About the Project\nMessage any wallet address on the blockchain.\n\n\nYinbox is the first fully integrated messenger app with end-to-end encryption on TRON, NEAR Protocol and Ethereum. Strike a conversation with anyone on with only their wallet address, link NFTs on the network, send tokens directly in conversations, and engage in a rich and intuitive messaging experience. Just connect your wallet and you’re good to go, no signups required.\n\nFeatures\n\nEnd-to-End Encryption\n\nYour messages are secured so only you and the person you’re communicating with can read them. No one else in between can see your conversation, not even us at Yinbox.\nReal Time Messaging\n\nMessages are sent and received in real time with no delays.\nDirect Message & Private Groups\n\nSend direct messages to a wallet address, or create chat groups and invite multiple wallet addresses into a conversation.\nPublic Channels (Coming Soon)\n\nCreate public channels that anyone on the internet can join.\nAdd-Ons","metadata":{"loc":{"lines":{"from":679,"to":699}}}}],["914",{"pageContent":"Create public channels that anyone on the internet can join.\nAdd-Ons\n\nUnlocks exciting features and blockchain integrations like linking any NFTs and sending tokens directly in conversations.\nBusiness Model\n\nWhile we strive to keep the majority of features free so anyone can experience and use Yinbox, we impose a small fee for additional usage in order to sustain the project’s development.\n\nAfter exhausting free quotas, a small fee is imposed for each private group and public channels created. Direct messages are unlimitedly free.\n\nAdd-Ons: In future development, we also want to open up our add-ons capabilities to enable other developers to build their own add-ons and monetize them. We are studying the model of this and are leaning towards commission based fees.\n\nTechnical Details\nArchitecture Overview","metadata":{"loc":{"lines":{"from":699,"to":712}}}}],["915",{"pageContent":"Technical Details\nArchitecture Overview\n\nWe wanted to build a practical application with strong consideration for speed, security and convenience. After rounds of design reviews, we decided to go with a hybrid approach of leveraging both on-chain and off-chain services.","metadata":{"loc":{"lines":{"from":712,"to":715}}}}],["916",{"pageContent":"Web Application & APIs\nThe frontend Web Application is developed in React using the NextJS framework. The authentication and core APIs are developed in NodeJS. We have plans to convert the core API to GraphQL to facilitate third-party integrations. These applications are hosted on Vercel.\nReal-Time Messaging\nAbly 1 service is used for maintaining an active connection to enable real-time message transmission in conversations.\nBlockchain Smart Contract\nTRON: The Yinbox TRON Smart Contract is written in Solidity and is responsible for managing conversations creation, quotas and fee collections See Smart Contract for details.\nOffchain Database\nThe offchain database is used to store the encrypted messages and various operations of the application. The database is hosted on MongoDB Atlas.\nProcess Flow","metadata":{"loc":{"lines":{"from":717,"to":725}}}}],["917",{"pageContent":"Connect Wallet\nUsers first connect to the chain they want using a wallet provider like TronLink, NearWallet or MetaMask. After connecting, user then signs a message to Yinbox Authentication API, which verifies the authenticity and returns a generated JWT token for access to Yinbox Core API calls.\nEnd-To-End Encryption\nWhen starting a conversation, a session key is generated. This session key is unique for each conversation and is shared only with the participants of the conversation. This key is used to encrypt and decrypt messages on the user’s browser.\nConversation Activation\nAll conversations are created on the blockchain. The Yinbox Smart Contract manages the activation, fee collection and quota balances for each type of conversations: Direct Message, Private Groups and Public Channels.\nMessage Transmission","metadata":{"loc":{"lines":{"from":727,"to":733}}}}],["918",{"pageContent":"Message Transmission\nAll messages are encrypted on users browser using the conversation session key before they are sent across the network. They remain encrypted even on Yinbox and is only decrypted on the recipient browser.\nSmart Contract\nFunction\tAccess\tDescription\nsetOwner\tOwner Write\tCreates a listing of an NFT token making it available for receiving offers.\nsetFee\tOwner Write\tCancels a listing. Caller must be the creator of this listing.\nsetQuota\tOwner Write\tMakes an offer for a listing, providing an NFT token as the offer item.\ngetOwner\tPublic Read\tCancels an offer. Caller must be the creator of this offer.\ngetConversations\tPublic Read\tGets all open listings.\ngetFee\tPublic Read\tGets a single listing.\ngetQuota\tPublic Read\tGets all open offers.\ncreateConversation\tPublic Write\tAccept an offer and executes the exchange transaction.\nContract Interface","metadata":{"loc":{"lines":{"from":733,"to":745}}}}],["919",{"pageContent":"getOwner() public view returns (address) \nsetOwner(address newOwner) public ownerOnly \nsetFee(string memory conversationType, uint256 fee) public ownerOnly \nsetQuota(string memory conversationType, uint256 quota) public ownerOnly \ncreateConversation(string memory conversationType, string memory conversationId) public payable\ngetConversations(address creator) public view returns (Conversation[] memory) \ngetFee(string memory conversationType) public view returns (uint256) \ngetQuota(string memory conversationType) public view returns (uint256) \nContract Hash\nNile Testnet: TP7NRizVSFAo5qkmoGF6EKGfP981qz4PGa\n\n\nTRON\n\nTRONSCAN | TRON BlockChain Explorer 1\nTRONSCAN is the first blockchain browser in the tron community. It supports multiple login methods and provides a complete browsing and search experience. Experience the tron-ecology in the TRONSCAN blockchain...\n\nProject Roadmap\nQ4 2022","metadata":{"loc":{"lines":{"from":747,"to":765}}}}],["920",{"pageContent":"Project Roadmap\nQ4 2022\n\nProject Inception, Planning and Prototyping\nParticipate in NEAR Meta Build Hackathon\nLaunch proof-of-concept build on NEAR Testnet\nQ1 2023\n\nParticipate in TRON Grand Hackathon S4\nRamp up on project development\nLaunch pre-beta build on TRON Nile Testnet\nQ2 2023\n\nBeta launch on TRON mainnet\nBeta launch on NEAR mainnet\nProduction readiness development\nQ3 2023\n\nStable release of TRON and NEAR\nIntegration with Ethereum chain\nQ4 2023\n\nBeta launch on Ethereum mainnet\nEnable developer-created add-ons\nTRON Hackathon Season 4\nDevelopment highlights since Feb 2023\nView Github commits snapshot (26Feb - 10Apr) 1\n\nProduct Uplift and Integration\n\nRevamp UX for minimalistic with dark theme\nTRON integration & Smart Contract development\nChange/Pivot in business model\nUplift landing page and introduce pricing section\nTechnical Improvements","metadata":{"loc":{"lines":{"from":765,"to":799}}}}],["921",{"pageContent":"Revamp UX for minimalistic with dark theme\nTRON integration & Smart Contract development\nChange/Pivot in business model\nUplift landing page and introduce pricing section\nTechnical Improvements\n\nRestructure application to support multichain\nMigrate to Sockets connections for Real-Time Messaging\nImplement auto-scrolling on chats for better UX\nBug fixes and stability improvements\nFeature Development\n\nAdd-On: Send Tokens on TRON\nAdd-On: Link NFT on TRON\nDevelop different conversation types: Direct Message, Groups\nAllow renaming conversations\nAllow viewing conversation participants\n\nErgon by USTX Team - Save, Earn, Participate!\nTRON Hackathon\nHackathon Season 4\ndefi\nApr 2\n9h\n\nSirluke\n\n17\nApr 2\nErgon","metadata":{"loc":{"lines":{"from":799,"to":828}}}}],["922",{"pageContent":"Ergon by USTX Team - Save, Earn, Participate!\nTRON Hackathon\nHackathon Season 4\ndefi\nApr 2\n9h\n\nSirluke\n\n17\nApr 2\nErgon\n\nProject Name: Ergon\nProject Track: DeFi\nTeam Name: USTX Team\nTeam Member(s): 3, Sirluke, Benna, Aska\nDorahacks Project Link: Ergon by USTX TEAM | Buidls | DoraHacks 4\nProject Goal: Simplify user access to Tron Stake 2.0. Save on transaction fees by renting energy. Earn by staking TRX. Participate by supporting a community driven Super Representative. Increase utility of USTX ecosystem.\nProject Info: Ergon Pitch Deck 5, Presentation Video 2\nProject Website: https://ergon.ustx.io/ 42\nProject Test Instructions: Go to ergon.ustx.io 2\n\nRENT ENERGY\n\nimage\nimage\nCheck the base price. Depending on duration and USTX balance you may get a discount.\n\nSelect the amount of energy to rent (min 250,000) and duration (1-7 days).\nClick “Borrow”, a popup will ask for confirmation showing the exact price for the rent.","metadata":{"loc":{"lines":{"from":828,"to":858}}}}],["923",{"pageContent":"Select the amount of energy to rent (min 250,000) and duration (1-7 days).\nClick “Borrow”, a popup will ask for confirmation showing the exact price for the rent.\n\nimage\nimage\nCheck the data and click on “Borrow energy” to confirm. Sign the transaction on the wallet (e.g. Tronlink). The energy will arrive instantly.\n\nFor orders up to 500,000 the fees are paid by the contract.\n\nAt the end of the renting period the energy will be automatically released and the residual deposit will be refunded to the user.\n\nEARN ON TRX DEPOSITS\n\nimage\nimage\ndeposit TRX by selecting the desired amount, click the “Deposit” button and confirm on the pop-up. The funds will be locked for 15 days. Upon depositing TRX the user will receive the same amount in ERG, considering the current exchange rate (shown at the top of the page). The user ERG balance and corresponding TRX value is shown in the withdraw section of the page.","metadata":{"loc":{"lines":{"from":858,"to":873}}}}],["924",{"pageContent":"to withdraw TRX, the user must first request to unlock the funds, selecting the amount of ERG to exchange for TRX (partial unlocking is allowed) and clicking the “Request” button. To claim the amount, the user must wait for the TRX to be available. The “Withdraw” button to be active after 15 days.\n\nif the user has USTX held in locked staking, he can enjoy a share of the jackpot. The jackpot rewards, that account to 25% of the energy sales, are claimable every week. Please remind that the jackpot rewards are not cumulative and must be claimed every week.\n\nSYSTEM INFO\n\nimage\n\nOn the Info tab the users can find more info about the system state, such as the total ERG supply, TRX deposits and the current utilization rate.\n\nProject Details:","metadata":{"loc":{"lines":{"from":875,"to":885}}}}],["925",{"pageContent":"SYSTEM INFO\n\nimage\n\nOn the Info tab the users can find more info about the system state, such as the total ERG supply, TRX deposits and the current utilization rate.\n\nProject Details:\n\nIntro\nThe Ergon projects appeals to users needing energy to lower the cost of transactions (smart contract users, developers) and to TRX holders seeking to maximize the return on their investment. Ergon is a community developed project, so expect cooperation and support to other projects that share our view of what the crypto industry should be. USTX users will have benefits, like lower energy prices and higher staking returns.\n\nSave\nThe application has a simple interface to enable renting energy and save on transaction fees.","metadata":{"loc":{"lines":{"from":885,"to":897}}}}],["926",{"pageContent":"Save\nThe application has a simple interface to enable renting energy and save on transaction fees.\n\nFlexible duration: 1-7 days\nBase price for 1 day, discount for longer periods\nZero energy required to rent for small amounts (contract pays fees)\nUp to 10% discount for USTX stake holders\nDynamic pricing\nAutomatic release at expiration\nSecurity deposit of 1 day of energy cost and automatic refund of the recovered energy (up to 100%)\nEarn\nThe application has a simple interface to stake TRX and earn. The ERG token will be traded in exchange for TRX and allow extended book-keeping and additional DeFi uses.","metadata":{"loc":{"lines":{"from":897,"to":908}}}}],["927",{"pageContent":"Deposit TRX and get ERG in return at current exchange rate\nERG/TRX exchange rate will always increase, incorporating all system rewards\nHolding ERG means real-time rewards accounting and auto-compounding. There’s no need to claim rewards and re-stake. Just relax and enjoy increasing wallet value.\n75% base share on energy profits\nup to 25% additional return for USTX stake holders, resulting in 100% share on energy sales\nTRX are locked for a period that depends on network parameters (14 days currently). Partial unlocking is allowed. Early unstake will be possible through other means (e.g. TRX/ERG liquidity pools on JustMoney and other DEXs).\nParticipate\nAll TRX staked in the contract will generate voting power. All votes will be cast to community driven Super Representatives. The USTX Team will support TuruGlobal SR from the beginning. ERG holders will be able to propose new SRs and on-chain voting will decide.","metadata":{"loc":{"lines":{"from":910,"to":917}}}}],["928",{"pageContent":"Risks\nAs always, we want informed users, so here’s our risk assessment for Ergon:","metadata":{"loc":{"lines":{"from":919,"to":920}}}}],["929",{"pageContent":"smart contract risk: we carefully designed and tested the contracts on Nile and mainnet, but human error can never be excluded 100%;\nTRX price risk: ERG token price is linked to TRX. So even if ERG exchange rate will always increase with respect to TRX, the deposit value in other currencies (e.g. USD, EUR) might decrease, following TRX price;\nThis is not financial advice, DYOR.\nTron blockchain integration","metadata":{"loc":{"lines":{"from":922,"to":925}}}}],["930",{"pageContent":"This is not financial advice, DYOR.\nTron blockchain integration\nErgon makes full use of the new Stake 2.0 methods, having created a fully decentralized energy marketplace and TRX earning platform. All operation are done through direct smart contract interaction by the user. When renting energy, the resources are delegated by the contract when receiving the TRX for the payment. No off-chain operations are needed. To keep the energy fees low, some housekeeping operations are kept off-chain and passed as parameters validated by authorized signatures. The same approach is used to manage the liquid staking of TRX in exchange for ERG. Everything is driven by the smart contract, reducing as much as possible the need for user interaction after staking starts. Once the TRX have been deposited, all rewards are automatically compounded in the ERG token value, so that users don’t need to act at all. Interaction with the dApp is needed only for the bonus rewards, reserved for USTX holders.","metadata":{"loc":{"lines":{"from":925,"to":927}}}}],["931",{"pageContent":"Key points","metadata":{"loc":{"lines":{"from":929,"to":929}}}}],["932",{"pageContent":"Innovations: Ergon is the first liquid staking option on Tron to use a dynamic exchange rate between TRX and the liquid token (ERG in our case). This greatly simplifies the life of the energy provider, since it completely eliminates the need to claim rewards and compound them. Just HOLD! Ergon is the first energy renting service to feature dynamic pricing, based on energy utilization rate. Ergon is the only liquid staking app that gives up to 100% returns from energy sales to users;\nTech details: Ergon is fully decentralized, all resource delegation operations, TRX staking and voting are done on-chain inside smart contracts. The goal of the dApp is to remove all unnecessary complexity from the user.","metadata":{"loc":{"lines":{"from":931,"to":932}}}}],["933",{"pageContent":"Business Model: Users will benefit from energy renting, allowing saving on transaction costs. TRX providers will get a minimum 75% share of the energy sales. The remaining 25% goes to a jackpot reserved for USTX holders. The unclaimed jackpot and 50% of voting rewards go to the team to manage operating expenses.\nUser Experience: UI has been kept as simple as possible and shares the basic design with all other USTX ecosystem dApps, so that existing users can quickly learn how to use it. To rent energy a few clicks are needed and all information about the cost of the rent are clearly shown to the user.\nUse Case: The increase of Tron chain fees have created more demand for energy renting. The existing marketplaces most of the time have unfilled orders. Ergon plans to expand the market offering a complete solution from casual users to energy hungry developers.","metadata":{"loc":{"lines":{"from":933,"to":935}}}}],["934",{"pageContent":"Contribution to the ecosystem: Ergon aims to help users reduce the cost of transactions, with a positive impact on all other decentralized applications. A simple and hassle free option for TRX suppliers could improve the overall stake rate, increasing the security of the network. Ergon supports community driven SR.\nSmart Contract links:","metadata":{"loc":{"lines":{"from":936,"to":937}}}}],["935",{"pageContent":"Mainnet proxy: TU7ML54RKifiqECSnkaEgfPUJNvWfDoHTK 2\nMainnet logic: TACWNjqHeFKeufPJvtHst36rfaP2eauwLp 1\nMainnet relay: THbysanZ8nbpPabgWXm5HkQpt151RjhvTj\nProject Milestones:\n\nApril 15th, deploy smart contracts on Mainnet and open basic dApp to users (energy renting functionality). DONE!\nApril 30th, deploy fully functional dApp (renting + staking). DONE!\nMay 15th, automatic price tuning and UI improvements DONE!\nMat 30th, ERG/TRX liquidity pool launch on JustMoney DONE\n\nCloak | TronCloak - Secure, private, anonymous transactions , HackaTron Season 4! kangaroo\nTRON Hackathon\nHackathon Season 4\ndefi\nApr 15\n6d\n\nmaaz\n\n28\nApr 15\nProject Name: Cloak -TronCloak :kangaroo:\n\nProject Track: DeFi\n\nTeam Name: Cloak\n\nTwitter : https://twitter.com/TronCloak 10\n\nProject Website: troncloak.com 11\n\nContract : Verified 2\n\nTeam Member(s): @maaz @saadabban76\n\nDorahacks Project Link: Cloak | TronCloak | Buidls | DoraHacks 12\n\nVideo : Video 2","metadata":{"loc":{"lines":{"from":939,"to":976}}}}],["936",{"pageContent":"Project Website: troncloak.com 11\n\nContract : Verified 2\n\nTeam Member(s): @maaz @saadabban76\n\nDorahacks Project Link: Cloak | TronCloak | Buidls | DoraHacks 12\n\nVideo : Video 2\n\nProject Info: Cloak offers confidential, private transactions with a fresh secure address using an intuitive and user-friendly interface.\n\nProject Goal: The goal of the project is to provide a platform on the Tron blockchain that allows for secure and private transfer of funds using unique and anonymous addresses called ‘stealth addresses .’ The use of cryptographic algorithms and one-time-use keys ensures that the financial information of users is kept private and secure. The project aims to provide a valuable tool for anyone who values privacy and security in their financial transactions.","metadata":{"loc":{"lines":{"from":976,"to":988}}}}],["937",{"pageContent":"Project Details: Cloak allows users to receive funds without revealing their identity or actual wallet address .Users would always receive funds through a unique address called a ‘stealth or secret address.’ This address is anonymous and can only be linked to the intended recipient of the transaction, making it virtually impossible for anyone else to know the identity of the recipient or track their transactions. Cloak uses a one-time public key to generate a new address for each transaction, keeping your financial information private and secure. To use Cloak, you need to generate a unique cloak address, share it with the sender, and retrieve your private key to access the funds. Cloak is a valuable tool for anyone who values privacy and security in their financial transactions.\n\ncloakdescription\ncloakdescription\nLets take an example of Charlotte (receiver) and william (sender) to deeply understand whats happening behind the scene here:","metadata":{"loc":{"lines":{"from":990,"to":994}}}}],["938",{"pageContent":"cloakdescription\ncloakdescription\nLets take an example of Charlotte (receiver) and william (sender) to deeply understand whats happening behind the scene here:\n\n.Charlotte generates a 'DontRevealMe(DRM)\" key and a unique “cloak address” using cryptographic algorithms. The cloak address is used as a public key here.\n\n.William looks up the cloak address and generates a one-time-use eph key. The sender combines his key with the cloak address to create a unique and anonymous stealth address, which is used to send assets to the charlotte.\n\n.William then publishes his eph public key on the Tron network, allowing Charlotte to scan it for new keys. Charlotte periodically scans the registry for new keys and uses her DRM key to generate stealth addresses associated with her.","metadata":{"loc":{"lines":{"from":994,"to":1002}}}}],["939",{"pageContent":".If Charlotte matches assets associated with a stealth address generated using a ephpublic key from the registry, she can compute the spending key or private key for that address and claim the assets. The one-time-use keys used to generate the stealth addresses are discarded to ensure privacy and security.\n\nIn summary, Cloak uses cryptographic algorithms and one-time-use keys to create anonymous and secure public addresses for transactions on the blockchain. These addresses can also be associated with domain names through Name Services and can be generated and claimed using ephemeral keys and public key registries.\n\nLets understand in practice.\n\nStep 1 : Generate a unique ‘cloak address’ by clicking the generate button. The 'DontRevealMe 'key generated will serve as your secret key, so be sure to save it in a secure location.\n\n1\n1\nStep 2 : Send the cloak address to the intended sender.","metadata":{"loc":{"lines":{"from":1004,"to":1014}}}}],["940",{"pageContent":"1\n1\nStep 2 : Send the cloak address to the intended sender.\n\nStep 3 : The sender will create an address by pasting the receipent’s cloak address and the amount from and send funds to it using the “send” button.\n\n2\n2\nStep 4 : After the funds have been sent, click on “match” or paste your secret key (optional) to retrieve your private key and access the specific address on which the funds have been sent.\n\n3\n3\nSmart Contract links: GitHub - ScriptKiddii/Cloak: TronCloak offers confidential, private transactions with a virtual secure address using an intuitive and user-friendly interface. 2\n\n.\n.","metadata":{"loc":{"lines":{"from":1014,"to":1029}}}}],["941",{"pageContent":"Project Milestones:","metadata":{"loc":{"lines":{"from":1029,"to":1029}}}}],["942",{"pageContent":"At Cloak, we are always looking to improve our platform and provide our users with the best possible experience. Moving forward, we plan to focus on enhancing the functionality of our app we will be also integrating NFT capabilities and streamlining the user interface to make it more user-friendly and accessible to a wider audience. Our team is dedicated to staying at the forefront of blockchain technology and continuing to innovate in order to provide our users with the most secure and private financial transactions possible . also we have plans to implement cross-chain support in the near future, allowing our users to seamlessly transfer funds between different blockchains. This will enable our users to take advantage of the unique features and benefits offered by different blockchains, while still enjoying the security and privacy of the Cloak platform. We believe that cross-chain support is the future of blockchain technology and are excited to be at the forefront of this","metadata":{"loc":{"lines":{"from":1766,"to":1766}}}}],["943",{"pageContent":"while still enjoying the security and privacy of the Cloak platform. We believe that cross-chain support is the future of blockchain technology and are excited to be at the forefront of this development…","metadata":{"loc":{"lines":{"from":1766,"to":1766}}}}],["944",{"pageContent":".\n.\n\nIf you don’t understand the working here is very easy and simple explaining for you :smiling_face_with_three_hearts::\n\nHere it is ; Stealth address is that type of address that is created with receiver’s public key and sender’s private key but only receiver can control the address.\n\nSo in crypto when you want to receive transaction you send your wallet address to sender to receive transaction right?\nBut that create a problem everyone in the world can see that u receive such transaction from that address .While here instead of sending your actual wallet address to the sender you would send the \"cloak address \" the cloak address would be generated from your random private key called “DontRevealMe” key .","metadata":{"loc":{"lines":{"from":1768,"to":1776}}}}],["945",{"pageContent":"Everytime you would generate a cloak address it would be different from other ,( imagine cloak address as your public address)\nNow you would send your cloak address to sender to receive transaction .sender would generate an “stealth address” by combining your cloak address (public key) with his ephemeral private key ( you can suppose ephemeral private key as random numbers that would be generated on demand) while he would also publish his ephemeral public key generated from his ephemeral private key on registry .\n\nThe receiver would then scan the registry combine all ephemeral public key with his \"DontRevealme(DRM) \" key to compute the private key of that specific “stealth address” .He would then generate the private key then he can control that specific address funds.","metadata":{"loc":{"lines":{"from":1778,"to":1781}}}}],["946",{"pageContent":"It seems so complicated here right yes it is :smiling_face_with_tear:! But you don’t have to worry at all we created it extremely user friendly you don’t have to worry about doing all this stuff like combining and scanning you would just use ‘send’ and ‘receive’ button to send and receive crypto.\nIf you still don’t understand plz watch our demo video . Thankyou :grinning:\n\n.\n.\n\nThanks for Reading\n\nThe app is now live on mainnet. Feel free to ask questions and submit feedback\n\n\nMyFend by Fend Group - Empowering Businesses, One Financial Connection at a Time\nTRON Hackathon\nHackathon Season 4\ndefi\nApr 12\nMay 30\n\nmyFend\n\n3\nApr 12\nProject Name: MyFend\nProject Track: DeFi\nTeam Name: Fend Group\nTeam Member(s): [@myFend @CaptainFoxtrot ]\nDorahacks Project Link: myFend | Buidls | DoraHacks 11\nProject Goal: Using the power of blockchain to provide a faster and more efficient invoice financing solution that is accessible to a wider range of businesses.","metadata":{"loc":{"lines":{"from":1783,"to":1810}}}}],["947",{"pageContent":"Project Info:\nmyFend aims to provide a decentralized finance (DeFi) platform for invoice financing. Invoice financing is a type of short-term borrowing where businesses can sell their unpaid invoices to a third party at a discount to receive immediate cash flow. By leveraging blockchain technology and smart contracts, we will be able to provide a faster and more efficient invoice financing solution that is accessible to a wider range of businesses.\n\nProblem\n\nTraditional invoice financing can be a useful financing solution for businesses that need immediate cash flow. However, there are several potential problems associated with this type of financing:","metadata":{"loc":{"lines":{"from":1812,"to":1817}}}}],["948",{"pageContent":"Long processing times: Traditional invoice financing can take weeks or even months to process, which can be too slow for businesses that need immediate cash flow.\nHigh fees: Traditional invoice financing companies often charge high fees for their services, which can eat into a business’s profits.\nLimited access: Traditional invoice financing may not be available to all businesses, as they may require a certain level of the creditworthiness or a minimum amount of invoices.\nLack of transparency: The traditional invoice financing process can be opaque, with businesses not always knowing who is financing their invoices or what fees are being charged.\nRisk of recourse: With traditional invoice financing, there is a risk of recourse, which means that if the debtor does not pay the invoice, the business that sold the invoice may be liable to buy it back at full value, potentially leading to financial loss.","metadata":{"loc":{"lines":{"from":1819,"to":1823}}}}],["949",{"pageContent":"Overall, these problems can make traditional invoice financing an expensive, time-consuming, and potentially risky financing option for businesses.\nSolution","metadata":{"loc":{"lines":{"from":1824,"to":1825}}}}],["950",{"pageContent":"The use of DeFi technology can help solve many of the problems associated with traditional invoice financing. Here are some ways that DeFi can improve the invoice financing process:","metadata":{"loc":{"lines":{"from":1827,"to":1827}}}}],["951",{"pageContent":"Faster processing times: DeFi technology can enable faster processing times by automating many of the steps involved in invoice financing, including verification, payment, and record-keeping.\nLower fees: DeFi platforms can offer lower fees than traditional invoice financing companies because they operate on a decentralized network that does not require intermediaries.\nIncreased access: DeFi platforms can be more accessible to businesses of all sizes because they do not require a minimum level of the creditworthiness or a certain number of invoices.\nIncreased transparency: DeFi platforms can provide more transparency in the invoice financing process, enabling businesses to see who is financing their invoices and what fees are being charged.\nReduced risk of recourse: DeFi platforms can reduce the risk of recourse by providing smart contracts that automatically enforce payment terms and reduce the likelihood of disputes.","metadata":{"loc":{"lines":{"from":1829,"to":1833}}}}],["952",{"pageContent":"Reduced risk of recourse: DeFi platforms can reduce the risk of recourse by providing smart contracts that automatically enforce payment terms and reduce the likelihood of disputes.\nOverall, the use of DeFi technology in invoice financing can provide a faster, more efficient, and more accessible financing solution for businesses. It can also reduce the risk of financial loss and provide greater transparency in the financing process, making it a more attractive option for businesses in need of immediate cash flow.\nProject Website: [MyFend 19 Buidl 11]","metadata":{"loc":{"lines":{"from":1833,"to":1835}}}}],["953",{"pageContent":"Project Test Instructions: (Loom | Free Screen & Video Recording Software | Loom 3)\n\nProject Details:\nSmart Contract links: [(TRONSCAN | TRON BlockChain Explorer | 波场区块链浏览器 1)\n\nProject Milestones:\nRoadmap\n\nPlatform Ideation\n\nMarket Research\n\nCompetitor Research\n\nFigma Design\n\nPlatform MVP Development\n\nLaunch on Tron Testnet\n\nLaunch on Tron Mainnet\n\nMJD Group Beta testing\n\nOpen Platform for small-size invoices\n\nSorrel Banq - Essential Banking for Anyone. Anywhere\nTRON Hackathon\nHackathon Season 4\ndefi\nMar 2\nAug 4\n\nwescosmic\n\n18\nMar 2\nProject Name: Sorrel Banq\nProject Track: DeFi\nTeam Name: Paracosm Labs (Sorrel Team collaborating with goStables Team)\nTeam Member(s): 3 ( @wescosmic + @Mypt + 1 AI Assistant)\n\nDorahacks Project Link: Sorrel Banq | Buidls | DoraHacks 10","metadata":{"loc":{"lines":{"from":1837,"to":1879}}}}],["954",{"pageContent":"Dorahacks Project Link: Sorrel Banq | Buidls | DoraHacks 10\n\nProject Goal:\nOur goal is to provide financial services to the unbanked and underbanked starting in the Caribbean region and those who are often affected by foreign banking de-risking policies and other FX issues. This goal is encapsulated in our vision to create memorable, easy to use products, services and experiences.\n\nProject Info: Sorrel Banq Deck - PDF 5 | Sorrel Banq Deck - Google Slides 2\n\nimage\nimage\nProject Website: https://sorrelbanq.org 19 | https://app.sorrelbanq.org/ 12\n\nProject Test Instructions:\nFirstly, get some testnet USDD and gStables on Nile at https://nile.gostables.org 2\n\nThen have a look at Sorrel’s Getting Startecd Guide from Jes, your AIA Concierge -\n\nSorrel Banq - Getting Started\nSorrel Banq - Getting Started\nProject Details:","metadata":{"loc":{"lines":{"from":1879,"to":1897}}}}],["955",{"pageContent":"Then have a look at Sorrel’s Getting Startecd Guide from Jes, your AIA Concierge -\n\nSorrel Banq - Getting Started\nSorrel Banq - Getting Started\nProject Details:\n\nWe believe that everyone should have access to financial services, regardless of their location or socioeconomic status. As the world becomes increasingly digitized, access to financial services has become a fundamental human right. However, many individuals and small businesses in developing countries are still excluded from the traditional banking system due to lack of infrastructure, resources and international banking restrictions.","metadata":{"loc":{"lines":{"from":1897,"to":1903}}}}],["956",{"pageContent":"Sorrel Banq is a decentralized bank for stablecoins with the goStables protocol 3 (5th place winner Defi track Hackathon Season 3). It allows users to create digital wallet accounts that can be used to access a variety of financial services, including interest yielding vaults, peer-to-peer (P2P) transactions with additional addons to be included in the future. Sorrel enables support for humans and AI.\n\nFor this hackathon, we have built the foundations to support several essential features:\n\nAnyone can create a Sorrel Account:\nView your stablecoins in a unified view. Transferring stablecoins to non members automatically creates a New Sorrel Account for them. This includes gStables and other popular stablecoins such as USDD, USDT etc.\n\nEnergy Free Transfers of gStables/stablecoins between Sorrel Members, while shared resources are available.\n\nEnergy Free Conversions between gStables, while shared resources are available.","metadata":{"loc":{"lines":{"from":1905,"to":1914}}}}],["957",{"pageContent":"Energy Free Transfers of gStables/stablecoins between Sorrel Members, while shared resources are available.\n\nEnergy Free Conversions between gStables, while shared resources are available.\n\nEarn gStables via Vaults: Support Sorrel by adding TRX into vaults to facilitate energy free transactions for Sorrel members.\n\nProof of concept AIA Team of 7 personalities that serve within specific roles at Sorrel. See below posts for sample content produced\n\nProof of concept Sorrel NFC Wallet Card. See below posts for design sample of real life card\n\nSmart Contract links:\n\n\nGitHub\n\nGitHub - Paracosm-Labs/sorrel-contracts: Started as a TronDAO Hackathon Season... 6\nStarted as a TronDAO Hackathon Season 4 Submission - GitHub - Paracosm-Labs/sorrel-contracts: Started as a TronDAO Hackathon Season 4 Submission","metadata":{"loc":{"lines":{"from":1914,"to":1930}}}}],["958",{"pageContent":"BankDepository\nTRONSCAN | TRON BlockChain Explorer | 波场区块链浏览器\nTransferComptroller\nTRONSCAN | TRON BlockChain Explorer | 波场区块链浏览器\nConvertComptroller\nTRONSCAN | TRON BlockChain Explorer | 波场区块链浏览器\nProject Milestones:\n\nMVP for Hackathon:-\n\n:white_check_mark: Phase 1: Research and planning MVP toolkit\n\n:white_check_mark: Phase 2: Sorrel MVP architecture with goStables Protocol integration\n\n:white_check_mark: Phase 3: PoC Sorrel NFC Wallet Card Design Alpha Preview\n\n:white_check_mark: Phase 4: PoC Sorrel AIA team introduction with Jes, AIA Concierge Alpha Preview\n\n:white_check_mark: Phase 5: Sorrel Banq Landing Page\n\n:white_check_mark: Phase 6: Dapp back-end and front-end integration\n– :white_check_mark: Dapp UI\n– :white_check_mark: Sorrel Banq Depository\n– :white_check_mark: Energy Free Transactions for Transfers between Sorrel members\n– :white_check_mark: Energy Free Conversions/Exchange between gStables\n– :white_check_mark: Sorrel’s TRX Vault","metadata":{"loc":{"lines":{"from":1932,"to":1957}}}}],["959",{"pageContent":":white_check_mark: Phase 7: Testing of Sorrel Functionality\n\n:white_check_mark: Phase 8: Functional Sorrel MVP for anyone to play with on Tron Nile Testnet\n\n:white_check_mark: Phase 9 How to use Sorrel - Video Guide feat. Jes\n\nSwirl Ads. - The decentralised ad platform that puts privacy first, rewards publishers, and offers easy npm package integration. Say goodbye to invasive ads and hello to a better web experience\nTRON Hackathon\nHackathon Season 4\ndefi\nApr 4\nMay 31\n\nShabari\n\n12\nApr 4\nProject Name: SWIRL\n\nProject Track: Defi Track\n\nTeam Member(s): @Shabari @shinchain\n\nTeam Name: Team Sudo\n\nDorahacks Project Link: SWIRL Ads. | Buidls | DoraHacks 14\n\nProject Info:\nSWIRL (2).pdf (2.8 MB)\n\nProject Details:\n\nThe goal of SWIRL is to create a decentralized platform that serves as a marketplace for both advertisers and publishers. Our main objective is to build a platform that does not require the sharing of users’ data for displaying ads.","metadata":{"loc":{"lines":{"from":1959,"to":1991}}}}],["960",{"pageContent":"The platform aims to decentralize the advertising industry, creating a more equitable and transparent ecosystem where advertisers and publishers can interact without the need for intermediaries. By doing so, we want to foster a more direct relationship between content creators and advertisers, making it easier for advertisers to find the right audience for their products and services and for publishers to monetize their content without compromising users’ privacy.\n\nTo achieve this, SWIRL will leverage blockchain technology to create a decentralized marketplace that allows publishers to choose the ads to be shown on their platform. Advertisers will bid on ad placements using BTTC or other cryptocurrencies, and publishers will receive a share of the revenue generated by these ads in the form of BTTC based on the total number of clicks.","metadata":{"loc":{"lines":{"from":1993,"to":1995}}}}],["961",{"pageContent":"Unlike traditional advertising platforms, SWIRL will not require users to share their personal data or browsing history with advertisers. Instead, SWIRL will use algorithms and data analytics to analyze users’ behaviours and preferences based on their interactions with the platform. This approach allows for more accurate targeting while preserving users’ privacy.\n\nIn summary, SWIRL aims to revolutionize the advertising industry by creating a decentralized platform that does not require the sharing of users’ data for displaying ads, while allowing advertisers and publishers to interact more directly and transparently, using BTTC or other cryptocurrencies as the currency for transactions. Publishers will have the freedom to choose which ads to display on their platform, and they will be rewarded based on the total number of clicks generated by those ads. Users will have complete control over their data privacy, and their data will not be shared with advertisers.\n\nProject Goal:","metadata":{"loc":{"lines":{"from":1997,"to":2001}}}}],["962",{"pageContent":"Project Goal:\n\nDevelop and launch a beta version of the SWIRL platform, with basic features such as ad serving, revenue-sharing, and payment processing.\n\nEstablish partnerships with leading publishers and advertisers to ensure a steady flow of ad inventory and demand for the SWIRL platform.\n\nImplement a reward system for publishers based on the total number of clicks generated by their ads, to incentivize them to display relevant and engaging ads.\n\nConduct a comprehensive security audit of the SWIRL platform, to identify and address potential vulnerabilities and ensure the platform’s integrity and confidentiality.\n\nDevelop a user-friendly and intuitive interface for the SWIRL platform, with features such as ad targeting and reporting, to enable advertisers and publishers to manage their campaigns and monitor their performance.","metadata":{"loc":{"lines":{"from":2001,"to":2011}}}}],["963",{"pageContent":"Test and optimize the platform’s performance and scalability, by conducting load testing and benchmarking, and by fine-tuning the platform’s infrastructure and codebase.\n\nParticipate in blockchain and advertising events, to showcase the SWIRL platform, network with potential partners and investors, and stay up-to-date with the latest trends and developments in the industry.\n\nProject Website: https://swirl-ad.vercel.app/ 26\n\n\nProject Test Instructions:","metadata":{"loc":{"lines":{"from":2013,"to":2020}}}}],["964",{"pageContent":"Project Website: https://swirl-ad.vercel.app/ 26\n\n\nProject Test Instructions:\n\nRegister as an Advertiser or Publisher: After connecting with Metamask, you will be directed to the Swirl onboarding page where you can register as an advertiser or publisher. If you are an advertiser, select the “Advertiser” option and fill out the required information. If you are a publisher, select the “Publisher” option and fill out the required information.\nAdvertiser Dashboard: Once you have registered as an advertiser, you will be directed to your advertiser dashboard. Here, you can deposit funds into your Swirl account by clicking on the “Deposit” button. Once you have funds in your account, you can begin creating campaigns.","metadata":{"loc":{"lines":{"from":2020,"to":2026}}}}],["965",{"pageContent":"Create Campaign: To create a campaign, click on the “Create Campaign” button on your advertiser dashboard. You will be directed to a page where you can fill out the required fields. These fields include the campaign name, target audience, ad format, ad budget, and campaign duration.\n\nTrack Campaign: After creating your campaign, you can track its progress by clicking on the “Campaigns” tab on your advertiser dashboard. Here, you can see metrics such as impressions, clicks, and conversions.\n\nimage\nimage\nGenerate Token: As a publisher, you will need to generate a token for integration with Swirl. The token generation process is simple and easy to follow. The token will be based on your interests, and it will be used to track your revenue.\n\nInstall Swirl SDK Package: After generating your token, you will need to install the Swirl SDK package on your website. This will allow you to import the campaign list from Swirl and start earning revenue from ads.","metadata":{"loc":{"lines":{"from":2028,"to":2036}}}}],["966",{"pageContent":"Add API Token: To complete the integration process, you will need to create an instance for the token and add your API token to the code. This can be done by copying the API token from your dashboard and pasting it into the code.\n\nWithdraw Funds: As a publisher, you can withdraw your funds based on clicks after reaching the threshold limit. This threshold limit can be set by you, and it ensures that you are paid fairly for your efforts.\n\nSmart Contract links: Contract Address 0x32158bdCEC4F45687365a6cC9F291635Daf8b32B | BTTC 4\n\nSmart Contract Mainnet links:\n\n\nBitTorrent Chain Blockchain Explorer\n\nContract Address 0xbAfFe333fb9D5d5bb51875C7910240c705ADB3c0 | BTTCScan 3\nThe Contract Address 0xbAfFe333fb9D5d5bb51875C7910240c705ADB3c0 page allows users to view the source code, transactions, balances, and analytics for the contract address. Users can also interact and make transactions to the contract directly on...\n\nProject Milestones:\n\nMilestone 1:","metadata":{"loc":{"lines":{"from":2038,"to":2054}}}}],["967",{"pageContent":"Project Milestones:\n\nMilestone 1:\n\nCreating the landing page and integrating using Rainbow Kit.\nCreating a smart contract and deploying it in BTTC.\nDesigning onboard page, Advertisers Module and Publishers module.\nIntegrating the smart contract with every page.\nCreating SDK to integrate with the application.\nMilestone 2:\n\nCreating proper documentation for the application.\nImproving the UI and UX.\nMaking the SDK more functional by adding more features.\n4 Replies\n\n\nDuelers by Tronjoy Team - Platforms Game where you can build your own levels and share profits\nTRON Hackathon\nHackathon Season 4\ngamefi\nMar 29\nMay 16\n\nTronJoy","metadata":{"loc":{"lines":{"from":2054,"to":2078}}}}],["968",{"pageContent":"Duelers by Tronjoy Team - Platforms Game where you can build your own levels and share profits\nTRON Hackathon\nHackathon Season 4\ngamefi\nMar 29\nMay 16\n\nTronJoy\n\n8\nMar 29\nProject Name: Duelers\nProject Track: GameFi\nTeam Name: Tronjoy Team\nTeam Member(s): 5 full-time, 2 part-time\nDorahacks Project Link: Duelers | Buidls | DoraHacks 10\nProject Info: https://duelers.io/WhitepaperDuelers.pdf 3\nProject Website: https://duelers.io 28\nProject Test Instructions: Access our website and click the Download button\nSmart Contract links: Github 7\n\nProject Goal\nWe want to engage with Tron community. Not only so you can play our game, but also providing you a simple way to create your own levels for our game and share part of the profits generated.\n\nDuelers - Hacka Tron (4)\nDuelers - Hacka Tron (4)\nProject Details\nDuelers is a platform-style game developed by the Tronjoy team, where players can test their gaming skills in different scenarios.","metadata":{"loc":{"lines":{"from":2078,"to":2105}}}}],["969",{"pageContent":"Duelers - Hacka Tron (4)\nDuelers - Hacka Tron (4)\nProject Details\nDuelers is a platform-style game developed by the Tronjoy team, where players can test their gaming skills in different scenarios.\n\nThe goal is simple: collect all Tron tokens and finish each level as quickly as possible. Missing a Tron token will result in a penalty of 1 second added to your time.\n\nDuelers jump\nDuelers jump\nThe game offers two modes of play: Duel and Tournament.\n\nIn Duel mode, you can challenge other players to see who can complete one or more levels the fastest.\n\nIn Tournament mode, you can compete with an unlimited number of players and make multiple attempts to achieve your best score.\n\nslowmotion\nslowmotion\nDuelers will include power-ups that players can collect to gain temporary boosts or advantages, such as increased speed, slow-motion, or the ability to jump higher.","metadata":{"loc":{"lines":{"from":2105,"to":2122}}}}],["970",{"pageContent":"slowmotion\nslowmotion\nDuelers will include power-ups that players can collect to gain temporary boosts or advantages, such as increased speed, slow-motion, or the ability to jump higher.\n\nSuperspeed\nSuperspeed\nSocial features will also be integrated into the game, including leaderboards, friend lists, and the ability to share your progress and achievements on social media.\n\nBuilder mode\nBuilder mode will allow anyone to create their own levels using an easy-to-use interface . Duelers will take a commission from each Duel and Tournament played, and a percentage of that commission will be given to the level creator.\n\nbuilders\nbuilders\nFree tournaments\nAs a special treat for the community, we will occasionally offer free-entry tournaments with real prizes, including some big prizes to celebrate the game’s launch. Stay tuned for more details!\n\nProject Milestones\nduelers roadmap\nduelers roadmap","metadata":{"loc":{"lines":{"from":2122,"to":2140}}}}],["971",{"pageContent":"Project Milestones\nduelers roadmap\nduelers roadmap\n\nRevoluTRON - An interactive novel to onboard Web2 users to Web3 (by Irruption Lab)\nTRON Hackathon\nHackathon Season 4\ngamefi\nMar 6\nMay 16\n\nClaw\n\n7\nMar 6\nProject Name: RevoluTRON\nProject Track: GameFi\nTeam Name: Irruption Lab (Twitter 9 / Linkedin 1)\nTeam Member(s): @Claw @Perrin\n\nDorahacks Project Link: RevoluTRON - An interactive novel to onboard Web2 users to Web3 | Buidls | DoraHacks 9\n\nProject Goal: RevoluTRON is an interactive novel to onboard Web2 users to Web3\n\n\nPresentation video: :clapper: RevoluTRON - An interactive novel to onboard Web2 users to Web3 - YouTube 8\n\nProject Website: https://revolutron.vercel.app/ 27\n\nProject Test Instructions: With this adventure game we’re trying to help people get into web3 without scaring them off with all the complicated technical stuff.\n\nWe have created a multi langual app, and for now the adventure is available in English, French and Spanish :fr: :es: :uk:","metadata":{"loc":{"lines":{"from":2140,"to":2171}}}}],["972",{"pageContent":"We have created a multi langual app, and for now the adventure is available in English, French and Spanish :fr: :es: :uk:\n\nSimply follow the adventure, no additional instruction is required. Each chapter has different objectives, as described below, to enter smoothly into Web3 and into our world…\n\nWe have completed the first Chapter, on March 1st, which leads to the installation of the wallet for the new comers. The purpose of this chapter is to introduce the story and make the world we’ve created feel more real and interesting.\n\nWe are currently working on the second Chapter, which is for the users to experiment (on the testnet) the basics of web3, like swaps, using bridges, nft…This chapter (split in several episodes) will be developed from March to April 2023.","metadata":{"loc":{"lines":{"from":2171,"to":2177}}}}],["973",{"pageContent":"The last Chapter (on the mainnet), will be dedicated to showcase existing protocols and integrate them in our story. Users will have to interact with those protocols, as if it was part of the story, to continue the adventure. This chapter will start from May 2023, and has no end date. The number of episodes is not limited (one protocol per episode).\n\nRevoluTRON\nRevoluTRON\nStory\n\nEmbark on an unforgettable journey that begins in the fictitious land of Listenbourg, in October of 2023. A shocking discovery of a vast counterfeit currency network has sent the country into chaos, and in a bold move to save the economy from ruin, the government outlaws cash.\n\nAs you assume the role of Azad, an intrepid journalist from the Lurenberg Post, a whistleblower contacts you with a game-changing tipoff - an unparalleled financial and political scandal is about to be exposed.","metadata":{"loc":{"lines":{"from":2179,"to":2187}}}}],["974",{"pageContent":"Are you up for the challenge? Brace yourself for an adventure that will keep you on the edge of your seat. Don’t hesitate - join Azad and discover what lies ahead!\n\nProject Details:\n\nJoin the Web3 revolution with RevoluTRON !\n\nOur adventure game introduces users to the world of blockchain, wallets, tokens, and more, with mandatory tasks like wallet installation to guide players through the story. Explore real Web3 applications and experience the potential of this transformative technology.\n\nWithin the Web3 world, each ecosystem is still pretty much segmented, and interoperability is not always easy. Different coding langages, different standards, different objectives for each blockchain and also different tools (wallet) to access them sometimes. We don’t aim to decide for the newcomers, which ecosystem they should discover first, we prefer to remain agnostic.","metadata":{"loc":{"lines":{"from":2189,"to":2197}}}}],["975",{"pageContent":"Team Irruption Lab has created in parallel two projects, Revolte and RevoluTRON. The first one, Revolte, starts with the installation of the wallet Metamask, and will explore the compatible protocols of this ecosystem, which is as of now the most used around the world. As for RevoluTRON, it starts with the installation of TronLink wallet, and will explore the associated ecosystem in each subsequent chapters.\nThe adventure itself will remain the same, but the protocols that will be showcased will be specific for each ecosystem.\n\nSmart Contract links: This project is not a highly technical project, it is education oriented.\nOnly few smart contracts are required, most of the time interactions will be with external protocols of the ecosystem that we will showcase in our adventure (chapter 3).\n\nWe still have the following smart contracts built for RevoluTRON (Mainnet):\n\nToken of the Adventure : RevolutronUSD : TP2Vu2YW2mXUbBg56MMjLSTgXJhdNW1sw4\n\n\nTRON","metadata":{"loc":{"lines":{"from":2199,"to":2210}}}}],["976",{"pageContent":"We still have the following smart contracts built for RevoluTRON (Mainnet):\n\nToken of the Adventure : RevolutronUSD : TP2Vu2YW2mXUbBg56MMjLSTgXJhdNW1sw4\n\n\nTRON\n\nTRONSCAN | TRON BlockChain Explorer 1\nTRONSCAN is the first blockchain browser in the tron community. It supports multiple login methods and provides a complete browsing and search experience. Experience the tron-ecology in the TRONSCAN blockchain...\n\nPay bail within the Adventure : RevolutronBail : TWUSBDSyuVrYnQzX2epG3hfbWzUSqWZwzH\n\n\nTRON\n\nTRONSCAN | TRON BlockChain Explorer 1\nTRONSCAN is the first blockchain browser in the tron community. It supports multiple login methods and provides a complete browsing and search experience. Experience the tron-ecology in the TRONSCAN blockchain...\n\nMore smart contracts to come in the next episodes.\n\nProject Milestones:\n\nRevoluTRON Roadmap\nRevoluTRON Roadmap\n\n\n\ntheRevolt - Trading-Card-Game :: GameFi || public beta\nTRON Hackathon\nHackathon Season 4\ngamefi\nApr 12\nMay 8\n\ntherevolt","metadata":{"loc":{"lines":{"from":2210,"to":2244}}}}],["977",{"pageContent":"Project Milestones:\n\nRevoluTRON Roadmap\nRevoluTRON Roadmap\n\n\n\ntheRevolt - Trading-Card-Game :: GameFi || public beta\nTRON Hackathon\nHackathon Season 4\ngamefi\nApr 12\nMay 8\n\ntherevolt\n\n5\nApr 12\nHeader\nHeader\nProject name: theRevolt\nProject title: GameFi\nTeam name: Spirit-Tower\nTeam member(s): 3 …to be updated\n\nDevelopment time: 3,5 years\n\nPlatform: iOS & Android\nForum Username: theRevolt\n\nLanguages**: English, German, French, Japanese, Russian, Spanish and Chinese (which will also be integrated in next updates).**\nDorahacks URL: theRevolt | Dorahacks 9\n\nProject Download Instructions\nOur game is executable for:\nAndroid :: Android Download 8\niOS :: TestFlight Download 7\n\nAndroid Store (Google Play Store):","metadata":{"loc":{"lines":{"from":2244,"to":2282}}}}],["978",{"pageContent":"Project Download Instructions\nOur game is executable for:\nAndroid :: Android Download 8\niOS :: TestFlight Download 7\n\nAndroid Store (Google Play Store):\n\nOpen the Google Play Store app on your Android device.\nTap the search bar at the top and enter the name of the desired app (e.g., “TestFlight”).\nLocate the app in the search results and tap on it.\nTap the “Install” button to download and install the app.\nAlternatively, if you have the direct link to the app, simply click on the link from your Android device, and it will take you directly to the app’s page in the Google Play Store. Then follow steps 3 and 4 to install the app.\n\nTestFlight on Apple devices (iOS):","metadata":{"loc":{"lines":{"from":2282,"to":2295}}}}],["979",{"pageContent":"TestFlight on Apple devices (iOS):\n\nOpen the App Store on your iPhone or iPad.\nSearch for “TestFlight” and download the TestFlight app.\nOnce installed, open the TestFlight app.\nIf you have a direct link to the app’s TestFlight invitation, click on the link from your iOS device. This will automatically open TestFlight and prompt you to install the app.\nFollow the on-screen instructions to download and install the app on your device.\nPlease note that in order to play the game, you will need to create a new wallet within the game. Your existing TRON address will not be accepted. Follow the in-game instructions to set up a new wallet and start playing.\n\nProject Milestones\n\nMILESTONES\nMILESTONES\nContract address\nWe use the blockchain completely different. A SmartContract will follow but only when we will release a special feature! That’s when we will need it.","metadata":{"loc":{"lines":{"from":2295,"to":2309}}}}],["980",{"pageContent":"MILESTONES\nMILESTONES\nContract address\nWe use the blockchain completely different. A SmartContract will follow but only when we will release a special feature! That’s when we will need it.\n\nProject Details: theRevolt is a revolutionary trading card game (TCG) in the world of blockchain technology and GameFi, developed by the dedicated team Spirit-Tower. The game combines innovative blockchain technology and the allure of trading cards in an action-packed and strategic gaming experience that is accessible to both die-hard TCG fans and newcomers to the blockchain world.\n\nINGAME\n\nProject Info","metadata":{"loc":{"lines":{"from":2309,"to":2318}}}}],["981",{"pageContent":"INGAME\n\nProject Info\n\nWith an impressive three years in development and availability on iOS and Android platforms, theRevolt is more than just a game. It combines a compelling comic book-based storyline, strategic combat, NFT card integration, and a vibrant, growing community. Players can compete against friends in thrilling battles or follow the compelling storyline as they expand and gain value from their collection of NFT cards.\n\nWEAPON\nWEAPON\nIn theRevolt, humans, androids, good and evil characters fight each other. Players can choose their individual fighting style by creating a deck that reflects their personality and strategy. With a variety of cards available and the game constantly expanding, no two battles are alike, and players can always discover and refine new strategies.","metadata":{"loc":{"lines":{"from":2318,"to":2326}}}}],["982",{"pageContent":"An integrated marketplace allows players to easily buy, sell or trade NFT cards. In addition, theRevolt promotes community and allows players to directly participate in the game’s success by owning theRevolt Tokens (REV), which offer holders the opportunity to earn from the game’s profits.\n\ntheRevolt has already received high praise for its uniqueness and quality during the closed beta phase and is expected to enter public beta later this year. With constant updates, new features, and a dedicated community, theRevolt is poised to conquer the world of blockchain-based games and redefine the boundaries of what is possible in a trading card game.\n\nhere are our New Trailer 2023:\n\ntheRevolt - Trailer 2023\ntheRevolt - Trailer 2023\n3D NFT integration is one of the most important points in the development of the game.\n\nProject Repo/Website: http://therevolt.io 17","metadata":{"loc":{"lines":{"from":2328,"to":2338}}}}],["983",{"pageContent":"theRevolt - Trailer 2023\ntheRevolt - Trailer 2023\n3D NFT integration is one of the most important points in the development of the game.\n\nProject Repo/Website: http://therevolt.io 17\n\ntheRevolt is a groundbreaking trading card game (TCG) that has integrated the TRON blockchain in an impressive and innovative way. The seamless fusion of blockchain technology and trading card gaming creates a unique gaming experience that is appealing to both blockchain enthusiasts and trading card lovers.","metadata":{"loc":{"lines":{"from":2338,"to":2344}}}}],["984",{"pageContent":"One important aspect that makes the integration of TRON into theRevolt stand out is its ability to take anonymity to a new level. By using the TRON blockchain, players can maintain their identity while ensuring that their digital collectibles and transactions are protected. This approach to anonymity is unique in the blockchain gaming world and demonstrates theRevolt’s commitment to creating a safe and user-friendly environment for its players.\nFirst of all, theRevolt has used the TRON blockchain to manage and trade Non-Fungible Tokens (NFTs), which are represented as cards in the game. However, it is important to note that NFT unlocking in the in-game store will be enabled later. This gradual introduction of NFT functionality allows developers to constantly improve the gameplay experience and ensure that all aspects of the game work smoothly before introducing new features.","metadata":{"loc":{"lines":{"from":2346,"to":2347}}}}],["985",{"pageContent":"In addition, theRevolt has implemented two tokens that are closely tied to the TRON blockchain: theRevolt token (REV) and the TERC token. The REV token serves as an important component of theRevolt economy, offering holders the opportunity to participate in the profits of the game. The TERC token, in turn, is intended for in-game and out-of-game transactions, so players can use it to store in the in-game store, play in VS mode, or participate in tournaments.","metadata":{"loc":{"lines":{"from":2348,"to":2348}}}}],["986",{"pageContent":"Graphic Style\n\nThe TRON blockchain also offers high scalability and fast transaction speeds, which are crucial for a smooth gaming experience in theRevolt. As a result, battles and transactions can be handled quickly and efficiently without players encountering slow load times or delayed transactions.\nAnother benefit of integrating the TRON blockchain into theRevolt is the ability to leverage the existing infrastructure and community already established. By connecting to the TRON blockchain, theRevolt can benefit from the growing popularity and user base of the TRON platform.\n\nOverall, theRevolt has integrated the TRON blockchain in an innovative and exciting way to create a trading card game that appeals to both blockchain enthusiasts and trading card lovers. With the seamless marriage of blockchain technology and addictive gameplay.\n\nSTYLE\nSTYLE\nStoryline","metadata":{"loc":{"lines":{"from":2350,"to":2359}}}}],["987",{"pageContent":"STYLE\nSTYLE\nStoryline\n\nHidden in one of the many exciting stories told in interactive comics are cards that you can pack into your own deck. Engage in battles against friends or boss battles, or participate in various tournaments.\n\nSTORY\nSTORY\nIn theRevolt, humans, androids, good guys and bad guys fight against each other. Your deck symbolizes your character. It’s up to you what kind of fighter you are - the defensive type or the attacker!\n\nSTORY2\nSTORY2\nThe Shop\n\nBuy, sell or trade your NFT cards easily on the marketplace. A fully functional marketplace will be integrated directly into the game at launch. The store is an important part of the game. It allows you to expand your deck and discover great new cards.\n\nSHOP\nSHOP\nMay it be a little more\n\nThe game has two tokens once its own theRevolt Token (REV) and is the most important token in theRevolt universe. It entitles the holder to 50% of the profit in the game and also the (TERC).","metadata":{"loc":{"lines":{"from":2359,"to":2379}}}}],["988",{"pageContent":"The game has two tokens once its own theRevolt Token (REV) and is the most important token in theRevolt universe. It entitles the holder to 50% of the profit in the game and also the (TERC).\n\nTERC is used for in-game and out-of-game transactions. You can use it to buy in the store, play VS Mode or participate in tournaments.\n\n\nCukies: Rush & Run – Onboarding Web2 players to Web3 (by Cukies World team)\nTRON Hackathon\nHackathon Season 4\ngamefi\nMar 30\nMay 15\n\naccesovip123\n\n10\nMar 30\nProject Name: Cukies: Rush & Run\nProject Track: GameFi\nTeam Name: Cukies World team\nTeam Member(s): 20+ teammates working full-time. CHECK TEAM 8\nDorahacks Project Link: Cukies: Rush & Run | Buidls | DoraHacks 5\nProject Info: Rush_Run.pdf (2.6 MB)\nProject Website: https://cukies.world/cukies-rush-n-run 23\nProject Test Instructions: You can download the game for Windows and Android in our website.\n\nIf you don’t have a Cuki NFT, you can use the following credentials:\n\nusername: test0002\npassword: Test0002!","metadata":{"loc":{"lines":{"from":2379,"to":2407}}}}],["989",{"pageContent":"If you don’t have a Cuki NFT, you can use the following credentials:\n\nusername: test0002\npassword: Test0002!\n\n:arrow_forward: Project Goal\nWe are working towards the adoption of web3. In Cukies: Rush & Run game web2 users can start playing, enjoy and earn by borrowing a Cuki.\n\nAt the same time, Cukies holders will be able to lend their Cukies to players, and split the rewards they make.\n\nCukies: Rush&Run - Hackathon (4)\nCukies: Rush&Run - Hackathon (4)\n:desert_island: Project Details\nCukies: Rush & Run is the first mini-game created within the Cukies World ecosystem. It’s a racing strategic game where players’ decision-making skills will play a decisive role.\n\nRR Prepare\nRR Prepare\nEach race scenario has four types of zones: running, swimming, obstacle, and ramp zones. These zones are further divided into five different biomes: grass, quarry, desert, road, and pasture. The game generates scenarios automatically, providing an endless array of race tracks for players to explore.","metadata":{"loc":{"lines":{"from":2407,"to":2424}}}}],["990",{"pageContent":"RR carrera\nRR carrera\nTo add more personalization, players can customize their Cukies’ appearance with various accessories, making them stand out in races.\n\nIn addition, Cukies: Rush & Run features a multiplayer mode, where players can compete with each other in real-time races, adding an exciting social component to the game.\n\nRR Train\nRR Train\nThe goal of the game is to train Cukies to be faster in different zones and equip them with accessories that give them advantages (and disadvantages) in specific zones and biomes. Players’ overall rankings will determine their prizes, motivating them to compete and improve their Cukies’ speed.\n\nTo keep the game fresh and engaging, we plan to add new biomes and zones over time, providing players with new challenges and experiences.\n\nRR clasificacion\nRR clasificacion\nCukies: Rush & Run will generate profits through in-app advertising. These profits will be distributed among players based on their rank.","metadata":{"loc":{"lines":{"from":2426,"to":2440}}}}],["991",{"pageContent":"RR clasificacion\nRR clasificacion\nCukies: Rush & Run will generate profits through in-app advertising. These profits will be distributed among players based on their rank.\n\nIt’s worth noting that Cukies are NFTs already used in Cukies World, and “Cukies: Rush & Run” expands their universe with automatic racing.\n\n:round_pushpin:Project Milestones\nRoadmap Cukies Rush n' Run\nRoadmap Cukies Rush n&#39; Run\n:spiral_notepad: Smart Contracts\nhttps://tronscan.org/#/token721/TVkQDrxQgX7ZQmeeXj2RbPQa93qJrYQYGe 2\n\nThis is the smart contract of Cukies NFTs that are used in the game.\n\nhttps://tronscan.org/#/contract/TWDoJEq4eVd9vUgQ6f5knjqouRBPyGDzSB 1\n\nThis is the Cukies marketplace smart contract.\n\nMETASENS - the Web3 gaming platform for both Web2 and Web3 games\nTRON Hackathon\nHackathon Season 4\ngamefi\nFeb 16\nJun 4\n\nAnitaTseng\n\n7\nFeb 16\nProject Name: METASENS\n\nProject Track: GameFi\n\nTeam Name: METASENS\n\nTeam Member(s): 8+, @AnitaTseng\n\nDorahacks Project Link: METASENS | Buidls | DoraHacks 4","metadata":{"loc":{"lines":{"from":2440,"to":2477}}}}],["992",{"pageContent":"AnitaTseng\n\n7\nFeb 16\nProject Name: METASENS\n\nProject Track: GameFi\n\nTeam Name: METASENS\n\nTeam Member(s): 8+, @AnitaTseng\n\nDorahacks Project Link: METASENS | Buidls | DoraHacks 4\n\nProject Goal: Provide a one-stop solution for both web2 and web3 game developers to enter blockchain technology easily.\n\nProject Info:\nEN-METASENS Platform Deck.pdf (7.0 MB)\n\nProject Website: https://www.metasens.com/ 29\n\nProject Test Instructions: the project is ongoing. can test on METASENS website https://www.metasens.com/ 29\n\nProject Details: METASENS consists of a gaming platform, an NFT marketplace, and there are three blockchain games listed. The tools currently available are METASENS ID, NFT marketplace, Reward and Point System, NFT minting, and Utility Center.","metadata":{"loc":{"lines":{"from":2477,"to":2500}}}}],["993",{"pageContent":"For HackaTRON\nWe want to build the mechanism enables users to select their preferred blockchain network for minting NFTs, including TRON, Binance Smart Chain, and Ethereum. This removes the limitation of being restricted to a specific blockchain network.\n\nimage\nimage\n\nimage\nimage\nHackaTRON links\nbsc ERC1967Proxy ERC1967Proxy | Address 0x5a6F2C9698136a89A90B7473Abf734b74810719B | BscScan\nbttc ERC1967Proxy ERC1967Proxy | Address 0xd5d2dc3e1f06e104a7af6835a040d5e9fe395a2c | BTTCScan 3\n\nDemo\nUsers will be able to use BNB (BSC) and USDT (TRON) to purchase NFT blind boxes. After minting, the NFT blind boxes will be sent to the BTTC network, and users can reveal the NFTs on BTTC.\n\nSteps","metadata":{"loc":{"lines":{"from":2502,"to":2517}}}}],["994",{"pageContent":"Steps\n\nGo to HackaTRON Page | www.gamma.metasens.io/activity/hackatron 7\nMint NFT with BNB\nBridge NFT to BTTC\nUnbox and get NFT\nProject Milestones:\nMay 2023 - Launched Store feature\nApr 2023 - HackaTRON project pushed on mainnet\nMar 2023 - Opened the platform for gaming projects to list on\nJan 2022 - Launched NFT marketplace feature\nJan 2022 - Launched Rewards system\nMar 2022 - Migrated Ethereum to BNB Chain\nMar 2022 - NFT assets loaded in-game\nApr 2022 - First in-game NFT mint event (MetaSnake - Ancient Spirit NFT)\nOct 2022 - Launched Utility Center\nOct 2022 - In-game NFT mint event (PetaRush - Peta NFT)\nDec 2022 - First Polygon game - PARALAND is listed on METASENS\nDec 2022 - Supports the blockchain game PetaRush making multiple NFT IPs can play together in one game\nJan 2023 - NFT background music switch feature launches\nJan 2023 - In-game items available on METASENS to be purchased\nFeb 2023 - Game Point Redeem feature goes live","metadata":{"loc":{"lines":{"from":2517,"to":2538}}}}],["995",{"pageContent":"METASENS NFT Marketplace: where players can trade their NFTs or purchase in-game items, and redeem in the blockchain game\n截圖 2023-02-17 上午11.11.20\n截圖 2023-02-17 上午11.11.20\nMETASENS Utility Center: Where NFT holders can claim their game-related utility\nimage1\nimage1\nWhat’s next for METASENS\nBeing able to support gamefi from different blockchains. Looking for more games listed on METASENS, and support their NFTs and in-game items trading on METASENS Marketplace.\n\nImportant links\nwebsite 29\nTwitter 3\nDiscord\nLinkedIn\nDoraHacks 4\nBenzinga: METASENS’ Utility Feature Creates New Ways for Web3 Projects Collaborations 1\n\nProject contract addresses\n0xD6705C0740E6002cE196B08129b2F0f23F24722E\n0x6029fA232b8486CE696DFOCCa33f4106EcC0b72b\n0x2d2D3aA4334a5f9060C53d95257bC8e3A696F1E0\n0x7BA1B6075304C3F3b6d3117A044dd3a90B1deb97\n0xf3ae8FD5889EB207abCF017a9Efd74d7e7A3994d\n\n\nBobbybot.trade - Trade/sell your Steam items (CS:GO/TF2) on TRON!\nTRON Hackathon\nHackathon Season 4\nnft\nMar 26\nAug 29\n\nnickmura","metadata":{"loc":{"lines":{"from":2540,"to":2572}}}}],["996",{"pageContent":"Bobbybot.trade - Trade/sell your Steam items (CS:GO/TF2) on TRON!\nTRON Hackathon\nHackathon Season 4\nnft\nMar 26\nAug 29\n\nnickmura\n\n7\nMar 26\nProject Name: bobbybot.trade\n\nProject Track: NFT\n\nTeam Name: Nick Mura (N/A)\n\nTeam Member(s): Solo\n\nDorahacks Project Link: bobbybot.trade | Buidls | DoraHacks 32\n\nProject Goal: bobbybot.trade will allow users and players to trade their virtual items (NFTs) on Steam based games such as Team Fortress and Counter Strike for TRX, USDT, and USDD on TRON.\n\nProject Info:\n\n\n\n(More images coming soon)\nProject Details:\n\nFor over a decade, Steam-based games have had a thriving multi-million dollar NFT market for trading virtual items with real-world value. Bobbybot.trade offers a service that enables users to instantly trade these items for TRON cryptocurrencies and tokens (USDT, USDD), introducing users to TRON’s payment system & ecosystem.\n\nPlayers and users can sell their Steam NFTs for TRON using bobbybot.trade instantaneously.","metadata":{"loc":{"lines":{"from":2572,"to":2604}}}}],["997",{"pageContent":"Players and users can sell their Steam NFTs for TRON using bobbybot.trade instantaneously.\n\nProject Website: http://app.bobbybot.trade 25 (LIVE ON MAIN-NET)\n\nProject Test Instructions: bobbybot.trade Demonstration - YouTube 7\n\n1. Connect your Tronlink account\n2. Connect your Steam account to bobbybot\n\n3. Enter how much TRX/USDT/USDD you want to convert to keys.\n\n4. For buying keys, enter how much TRX/USDT/USDD you want to convert to keys.\n\n5. Review the transaction, and then sign the transaction of specified value on Tronlink.\n\n6. Once we validate the transaction on-chain, we can send you a Steam trade offer.\n\n7. For selling keys, enter how many keys you can sell in exchange for TRX/USDT/USDD.\n8. Review the transaction, and bob will send you a trade offer for the specified amount. You need Steam mobile authenticator enabled for >7 days to trade steam items.","metadata":{"loc":{"lines":{"from":2604,"to":2622}}}}],["998",{"pageContent":"9. After we validate the transaction via Steam, you will have key balance added to your account, which you can exchange for TRX, USDT, and USDD immediately.\n\nSmart Contract links:\nON Main-net!\n\nEscrow service for sending TRX:\nTRONSCAN | TRON BlockChain Explorer | 波场区块链浏览器 3\n\nUSDT TRC20 contract (using the transfer() function call to facilitate users buying keys):\nTRONSCAN | TRON BlockChain Explorer | 波场区块链浏览器\n\nUSDD TRC20 contract (using the transfer() function call to facilitate users buying keys):\n\nTRONSCAN | TRON BlockChain Explorer | 波场区块链浏览器\n\nProject Milestones:","metadata":{"loc":{"lines":{"from":2624,"to":2639}}}}],["999",{"pageContent":"USDD TRC20 contract (using the transfer() function call to facilitate users buying keys):\n\nTRONSCAN | TRON BlockChain Explorer | 波场区块链浏览器\n\nProject Milestones:\n\n1. Build buying and selling for TF2 key NFTs for TRON. ✓\n2. Receive liquidity for tokens and keys ✓\n3. Deploy on TF2 swap on main-net ✓\n4. Get users, and monitor trading volume of users on bobbybot (Have database information like volume, volume per user). ✓\n5. Receive liquidity for tokens and keys. ✓\n6. Provide a dividend service to our loyal users, earning them or TRX or keys for using bobbybot based on the trading volume. ✓\n\nLater launches to be looking out in the near future:\n\nBuild buying and selling of CS:GO item NFTs for TRON.\n\nUI and Design redo\n\nLaunch CS:GO swap on main-net.\n\nEvoie: The Social Hub Where Artistry and NFTs Converge\nTRON Hackathon\nHackathon Season 4\nnft\nApr 15\nMay 8\n\nadroitakash\n\n2\nApr 15\nProject Name: Evoie - The Social Hub Where Artistry and NFTs Converge\n\nProject Track: NFT\n\nTeam Name: Evoie","metadata":{"loc":{"lines":{"from":2639,"to":2675}}}}],["1000",{"pageContent":"adroitakash\n\n2\nApr 15\nProject Name: Evoie - The Social Hub Where Artistry and NFTs Converge\n\nProject Track: NFT\n\nTeam Name: Evoie\n\nTeam Member: Akash - @adroitakash (solo)\n\nDorahacks Project Link: https://dorahacks.io/buidl/5297 8\n\nProject Goal: My project is build to seamlessly combines the worlds of social media and non-fungible tokens.\n\nProject Website: www.evoie.in\n\nProject Test Instructions:\n\nProject Details: Introducing Evoie, a groundbreaking social media platform that’s builds to seamlessly combines the worlds of social media and non-fungible tokens.\n\nEvoie offers a creative, interactive space for users to engage with and explore NFT content while enjoying the familiar features of traditional social media platforms.\n\nKey Features:\n\nEvoie allows users to transform their regular posts into NFTs instantly, providing an innovative way for creators to showcase their digital art, photography, or other multimedia content as unique and tradable assets.","metadata":{"loc":{"lines":{"from":2675,"to":2701}}}}],["1001",{"pageContent":"Evoie comes with all the essential social media features, such as adding multimedia content, following your favorite creators, and engaging with NFT posts through comments and reactions.\n\nWhen you find a post you love, you can purchase it as an NFT, transferring the ownership of the NFT along with the post, comments, and likes to you.\n\nEvoie also doubles as an all-in-one NFT marketplace, where users can post a wide range of NFTs, including 3D models and game assets with animation properties. This feature allows game developers to directly utilize these assets in games that support 3D models.\n\nEvoie’s unique Interactive NFT feature allows users to upload HTML files along with JavaScript and CSS, which are rendered as NFTs. This opens up limitless creative possibilities for web developers to transform their work into interactive NFTs.\n\nUpcoming Features:","metadata":{"loc":{"lines":{"from":2703,"to":2711}}}}],["1002",{"pageContent":"Upcoming Features:\n\nInteractive NFT 2.0: Users can customize the properties of NFTs during the purchase process using Evoie’s custom JavaScript methods. This feature enables dynamic input fields to be automatically added to the NFT buy page standing alone from the nft as a part of the form itself, allowing users to modify the behaviour and appearance of the NFT according to their preferences.\n\nAdvanced NFT Marketplace Options: Evovie is set to expand its marketplace capabilities by introducing auction, betting, rent-a-NFT, NFT collections, and special offers features. And also working on an option to support and tip the creator for their post.\n\nThese enhancements are currently under development and will be integrated into the platform by the end of April.\n\nSmart Contract links: TRONSCAN | TRON BlockChain Explorer | 波场区块链浏览器\n\nProject Milestones:\n\nroadmap\nroadmap","metadata":{"loc":{"lines":{"from":2711,"to":2724}}}}],["1003",{"pageContent":"Smart Contract links: TRONSCAN | TRON BlockChain Explorer | 波场区块链浏览器\n\nProject Milestones:\n\nroadmap\nroadmap\n\nSamhita DAO - Empowering communities to preserve their linguistic heritage\nTRON Hackathon\nHackathon Season 4\nnft\nApr 6\nMay 30\n\nAarohi\n\n9\nApr 6\nProject Name: Samhita DAO\n\nProject Track: NFT\n\nTeam Name: HeritageSpeak\n\nTeam Member(s): 5+ @Aarohi\n\nDorahacks Project Link: Samhita DAO | Buidls | DoraHacks 17\n\nProject Goal: Our vision is to empower endangered language communities by providing tools for language preservation and incentivizing participation. The platform ultimately aims to preserve linguistic heritage and cultural traditions while promoting linguistic diversity in the digital age.\n\nProject Info:","metadata":{"loc":{"lines":{"from":2724,"to":2754}}}}],["1004",{"pageContent":"Project Info:\n\nThis is a project that aims to preserve endangered languages by leveraging the power of decentralised technology. It offers a platform for language communities to collaborate, create, and communicate across languages, with tools for crowdsourcing and curating linguistic resources. This project also encourages community members to contribute to these resources and provides a marketplace for language-related goods and services, creating a sustainable ecosystem for language preservation.\n\nInspiration: Helping to preserve endangered languages is important to keep traditions alive.\n\nSamhita DAO was born from a deep sense of urgency to save endangered languages from disappearing into oblivion. We understand that a language is more than just a means of communication but a treasure trove of wisdom, traditions, and identity of a community. Witnessing the challenges faced by communities struggling to preserve their languages was a wake-up call, and we knew we had to take action.","metadata":{"loc":{"lines":{"from":2754,"to":2760}}}}],["1005",{"pageContent":"Project Website: https://samhita-dao-one.vercel.app/ 25\nHere’s a sneak peek!\n\nSamscr3\nSamscr3\nSamscr2\nSamscr2\nSamscr1\nSamscr1\nProject Test Instructions:","metadata":{"loc":{"lines":{"from":2762,"to":2771}}}}],["1006",{"pageContent":"Become a member of SamhitaDAO\nTo become a member, you’ll need to visit the website to create an account\nConnect a wallet e.g Metamask to buy Samhita Tokens\nAs a member, you participate in the community’s ecosysytem by sending proposals\nYou can also vote on proposals as per your voting rights\nContribute as a member of SamhitaDAO\nCreate a languageDAO\nCreate templates of databases e.g lexical, text, audio to be used by other language DAOs\nWhen a template is approved, an NFT will be minted\nYou get royalties when a language DAO uses your templates\nYou can also buy and sell Samhita tokens\nLaunch a languageDAO\nTo launch a languageDAO, you must be a member of Samhita DAO\nSet token configuration with token name and symbol to launch token\nReview information\nLaunch language DAO\nJoin a Language DAO community\nBecome a member of a languageDAO by purchasing their token\nYou can use templates created by SamhitaDAO for language preservation\nBuy and sell tokens of that particular languageDAO","metadata":{"loc":{"lines":{"from":2773,"to":2792}}}}],["1007",{"pageContent":"Become a member of a languageDAO by purchasing their token\nYou can use templates created by SamhitaDAO for language preservation\nBuy and sell tokens of that particular languageDAO\nWhen a particular languageDAO validates a database, it will be stored as an NFT.\nThese database NFTs will be rentable for organisations or AI models and the languageDAO will be paid in the form of royalties.\nSamhitaDAO Infographic (1)\n2880×6480 1.64 MB","metadata":{"loc":{"lines":{"from":2792,"to":2798}}}}],["1008",{"pageContent":"SamhitaDAO Infographic (1)\n2880×6480 1.64 MB\nProject Details: Imagine visiting your aged grandparents and sitting with them, listening to the beautiful stories they tell about their childhood. They chip in bits of a language that you can’t quite understand, but you can feel the depth of their words in your bones and you’re mesmerised by the rhythm, flow and melody of their words. As you listen, you can’t help but feel a sense of nostalgia for a time and place that you’ve never experienced. One of them then explains to you that they are speaking in a language that has been passed down through generations in their community. But now, with younger generations turning away from their linguistic heritage, their language is at risk of being lost forever. As you sit there with them, listening to their stories, you realise that these moments are precious and that languages are a part of a cultural heritage that must be preserved.","metadata":{"loc":{"lines":{"from":2798,"to":2800}}}}],["1009",{"pageContent":"Samhita DAO understands the value of preserving endangered languages, and the project is aimed to ensure that these languages don’t fade away into obscurity. Through the project’s decentralised platform, a safe space is being created where language communities can come together to share their unique perspectives on the world. Several database templates are used to preserve endangered languages.","metadata":{"loc":{"lines":{"from":2802,"to":2802}}}}],["1010",{"pageContent":"These databases include: lexical, text, speech, audio, and video databases. The lexical database template is used to capture and store words, phrases, and other linguistic structures in a standardised format and includes fields for part of speech, definitions, examples, and other relevant information. The text database template is used to capture and store written texts, such as stories, poems, and historical documents. The speech database template is used to capture and store spoken language, including recordings of conversations, speeches, and oral histories to detect dialects and accents. The audio database template is used to capture and store audio recordings, such as songs, chants, and other forms of vocal expression. The video database template is used to capture and store video recordings, such as performances, ceremonies, and other visual expressions of language and culture.","metadata":{"loc":{"lines":{"from":2804,"to":2804}}}}],["1011",{"pageContent":"These templates are designed to capture and organise linguistic resources in a way that is easily accessible and usable by language communities. With these tools for crowdsourcing and curating linguistic resources, Samhita DAO is empowering communities to create dictionaries, grammar guides, and oral histories that capture the essence of their language.\n\nThe platform is more than just a collection of linguistic resources - it’s a digital campfire where elders and youth can come together to pass down stories and traditions. It’s a place where the feeling of nostalgia is tangible, reminding us of the value of cultural heritage and the importance of preserving it for future generations.\n\nSmart Contract links:\n\nTemplateNFT : Contract Address 0x2e3aE78dD6b197b47a20C4d167A56FD180bC730D | BTTC 3\n\nSamhita: Contract Address 0x656CCf107Eac3599A9A22445109e4c327451Ec76 | BTTC 1\n\nSamhitaToken: Contract Address 0xcEF9199e247CA29e1cdb88ffe79A1a02fD3FA6d0 | BTTC 1","metadata":{"loc":{"lines":{"from":2806,"to":2816}}}}],["1012",{"pageContent":"Samhita: Contract Address 0x656CCf107Eac3599A9A22445109e4c327451Ec76 | BTTC 1\n\nSamhitaToken: Contract Address 0xcEF9199e247CA29e1cdb88ffe79A1a02fD3FA6d0 | BTTC 1\n\nLanguageDAOFactory: Contract Address 0x87B3Dd2f2FA919310ea010F514C6cBe69419863a | BTTC\n\nHow we built it\n\nOn the BTTC network, we have deployed four smart contracts. The smart contracts are used to create SamhitaDAO and LanguageDAOs - with these you can become a member of DAOs, send proposals, vote for proposals, buy and sell DAO tokens. We have used ERC20 for creating own tokens and ERC721 for minting templates as NFTs.\n\nOur interactive and seamless front end has been created using React.js\n\nProject Milestones:\n13-03-2023: Language DAO creation and management functionality\n25-03-2023: DAO governance functionality\n10-04-2023: Template creation\n14-04-2023: Testing Samhita DAO and Language DAO functionality\n\nChallenges we ran into:","metadata":{"loc":{"lines":{"from":2816,"to":2834}}}}],["1013",{"pageContent":"Challenges we ran into:\n\nThe project faced several challenges in researching language preservation and figuring out how to use the DAO model to address this problem. One of the main challenges was finding reliable sources of information about language preservation efforts, particularly in the context of marginalised or endangered languages. Many of these efforts are led by small organisations or individual activists, and information about their work can be difficult to find or access.\n\nAnother challenge was determining the most effective approach to language preservation, given the diversity of languages and cultures that the project aims to support. We had to consider factors such as the level of documentation and support that different languages already have, the cultural significance of different languages, and the availability of resources and expertise for language preservation.","metadata":{"loc":{"lines":{"from":2834,"to":2838}}}}],["1014",{"pageContent":"In addition to these challenges, we had to figure out how to incentivize members of the DAO to contribute to language preservation efforts for their community. This involved designing a governance structure that would give members a say in decision-making as well as creating incentives for members to contribute their time, expertise, and resources to language preservation projects.\n\nFuture Goals:\n\nIn the near future, we aim to improve our data structure and make sure our language data storage methods are all standardised.\n\nWe have plans to onboard volunteers who are not necessarily speakers of these languages but share a passion for their conservation. They will travel to remote regions to record audio and videos, scan texts, and assist in the digitization of these endangered languages with a reward system in place to incentivize them.\n\nWe also plan on partnering with other organisations to monetize the language data we store, thus providing more incentives for our DAO members.","metadata":{"loc":{"lines":{"from":2840,"to":2848}}}}],["1015",{"pageContent":"We also plan on partnering with other organisations to monetize the language data we store, thus providing more incentives for our DAO members.\n\nAccomplishments we’re proud of:\n\nOne major accomplishment we’re proud of is how we were able to put our blockchain knowledge to good use for a good cause. The platform is built on blockchain technology that provides an unparalleled level of security and transparency, ensuring that the language resources stored on the platform are safe and tamper-proof. This level of security and transparency is essential for preserving endangered languages as it prevents any malicious actors from manipulating or altering the data.","metadata":{"loc":{"lines":{"from":2848,"to":2852}}}}],["1016",{"pageContent":"The Samhita DAO project has achieved remarkable success in creating a platform that is closely aligned with our goals during the hackathon period. The project aims to create a decentralised autonomous organisation (DAO) that is dedicated to preserving endangered languages. To this end, the team has developed a platform that captures all aspects of language preservation, including documentation, curation, and dissemination of linguistic resources.\n\nOur success in capturing all aspects of language preservation on the platform is a testament to our dedication to the cause and the technical expertise in developing a robust and scalable solution to the problem of linguistic loss.\n\nWhat we learned:","metadata":{"loc":{"lines":{"from":2854,"to":2858}}}}],["1017",{"pageContent":"What we learned:\n\nDuring the development of the Samhita DAO project, we learned a great deal about creating decentralised autonomous organisations (DAOs), how they function, and the role they can play in language preservation. In the context of language preservation, we realised that DAOs could play a critical role in promoting linguistic diversity and protecting endangered languages. By creating a DAO that is dedicated to language preservation, we have created a platform that allows communities to come together to document, curate, and disseminate linguistic resources.","metadata":{"loc":{"lines":{"from":2858,"to":2860}}}}],["1018",{"pageContent":"We also learned that language preservation requires a holistic approach that goes beyond simply collecting and storing linguistic data. The Samhita DAO platform incorporates a range of features such as community-based curation and incentivization mechanisms. The platform also emphasises the importance of engaging with the community and building relationships with key stakeholders such as linguists, educators, and language activists. Overall, the Samhita DAO project highlights the potential for DAOs to drive positive social change and promote the preservation of cultural heritage.\n\nOur Team","metadata":{"loc":{"lines":{"from":2862,"to":2864}}}}],["1019",{"pageContent":"Our Team\n\nAarohi is a talented blockchain developer who believes that language is a vital part of cultural identity. She always wants to ensure that it is protected and passed down to future generations and is always on the lookout for new ways to merge her two passions – technology and language.\nAdithya is a skilled frontend developer. With a keen eye for detail, he ensures that the platform’s user experience is seamless and user-friendly. He believes that a well-designed frontend is key to the success of any application and takes pride in delivering high-quality work that meets the needs of Samhita DAO’s users.\n\n\nSealKey by TRONNuggetz - Bringing exciting secrets on-chain to TRON\nTRON Hackathon\nHackathon Season 4\nnft\nApr 15\nJun 2\n\ntronnugz\n\n1\nApr 15\nProject Name: SealKey\n\nProject Track: NFT\n\nTeam Name: TRONNuggetz\n\nTeam Member(s): 3 (tronnugz, 0xnuggetz, dandandev)\n\nDorahacks Project Link: SealKey | Buidls | DoraHacks 2","metadata":{"loc":{"lines":{"from":2864,"to":2889}}}}],["1020",{"pageContent":"tronnugz\n\n1\nApr 15\nProject Name: SealKey\n\nProject Track: NFT\n\nTeam Name: TRONNuggetz\n\nTeam Member(s): 3 (tronnugz, 0xnuggetz, dandandev)\n\nDorahacks Project Link: SealKey | Buidls | DoraHacks 2\n\nProject Goal: : Facilitate on-chain distribution of digital coupons, gift cards, and tickets through NFTs, securely encrypted and embedded with SealKey technology.\n\nProject Website: https://sealkey.xyz 16\n\nProject Test Instructions:\n\nCreate your first keyToken\nView your keyToken on the app and on-chain\n(Optional) Transfer your keyToken\nUnseal your keyToken to reveal secret\nView unsealed status of token on-chain\nCreate keyToken collection\nProject Details:\nSealKey is a novel blockchain protocol designed to encrypt, embed, and seal secrets into NFTs, facilitating on-chain distribution of digital coupons, gift cards, and tickets.","metadata":{"loc":{"lines":{"from":2889,"to":2916}}}}],["1021",{"pageContent":"By tokenizing secret codes, SealKey unlocks new possibilities for on-chain commerce and helps onboard the next billion users to Web3. The technology is built on the SecretToken smart contract and the Decryption Oracle, ensuring secure storage and access to secrets on-chain.\n\nBringing Rewards and Prizes On-Chain\n\nSealKey introduces a secure way to seal and unseal rewards and prizes within the blockchain ecosystem. With a keyToken, users can view or unseal their rewards only if they are the owner, and a clear indication of an unsealed token is shown on-chain.\n\nOnboarding the Next Billion Users to Web3\n\nIn order to onboard a billion users, we must represent more real-world value on-chain.\n\nDigital Coupons Market Outlook 2031","metadata":{"loc":{"lines":{"from":2918,"to":2928}}}}],["1022",{"pageContent":"Onboarding the Next Billion Users to Web3\n\nIn order to onboard a billion users, we must represent more real-world value on-chain.\n\nDigital Coupons Market Outlook 2031\n\nThe global digital coupons market was valued at over US$ 4.67 Bn in 2020.\nIt is estimated to expand at a CAGR of 18.6% from 2021 to 2031.\nThe global digital coupons market is expected to cross the value of US$ 29.7 Bn by the end of 2031.\nAs the digital coupons market continues to grow, several industries are increasing their spending in this area. Mergers and acquisitions with tech startups are helping eCommerce giants strengthen their retail sector capabilities. However, a lack of awareness about the benefits of digital coupons is affecting market growth. To increase adoption and awareness, digital merchants should invest in digital marketing, SEO ranking, and partnership strategies. The rise of digital coupon campaigns is contributing to market growth.\n\nEvent Tickets Market Overview","metadata":{"loc":{"lines":{"from":2928,"to":2939}}}}],["1023",{"pageContent":"Event Tickets Market Overview\n\nRevenue in the Event Tickets segment is projected to reach US$ 71.49 Bn in 2023.\nRevenue is expected to show an annual growth rate (CAGR 2023-2027) of 3.63%, resulting in a projected market volume of US$ 82.46 Bn by 2027.\nThe market’s largest segment is Sport Events, with a projected market volume of US$ 28.98 Bn in 2023.\nIn global comparison, most revenue will be generated in the United States (US$ 26.6 Bn in 2023).\nThe average revenue per user (ARPU) in the Event Tickets segment is projected to amount to US$ 102.80 in 2023.\nIn the Event Tickets segment, the number of users is expected to reach 764.6 million users by 2027.\nUser penetration in the Event Tickets segment will be at 9.1% in 2023.\nUnlocking Commerce On-Chain with Tokenized Secret Codes","metadata":{"loc":{"lines":{"from":2939,"to":2948}}}}],["1024",{"pageContent":"By tokenizing secret codes, SealKey unlocks new possibilities for on-chain commerce. Gift cards, coupons, tickets, and more can be sealed with SealKey for Web3 distribution, opening up new opportunities for merchants to create Web3 native consumer channels.\n\nSealKey empowers marketers to get creative with a new wave of smart distribution. Bringing codes on-chain enables unique campaigns such as conditional unlocking and multiplayer game prizes.\n\nUnderlying Technology: SecretToken and SealKey Oracle\n\nSealKey is built on a solid foundation using advanced cryptographic techniques and blockchain technology. The core of the project is the SecretToken smart contract, which is responsible for securely storing secrets within NFTs and managing their sealed status.","metadata":{"loc":{"lines":{"from":2950,"to":2956}}}}],["1025",{"pageContent":"The SecretToken contract is written in Solidity and inherits from the TRC721Metadata and Ownable contracts. It maintains mappings for secrets and their sealed status associated with tokenIds. The contract emits events when new tokens are minted with secrets and when tokens are unsealed.\n\nKey functions of the SecretToken contract include:","metadata":{"loc":{"lines":{"from":2958,"to":2960}}}}],["1026",{"pageContent":"_mintWithSecret(): An internal function that mints a new token, associates a secret with the tokenId, sets the token’s sealed status, and assigns a tokenURI.\nmintWithSecret(): A public function that calls _mintWithSecret() to mint a new token with a secret and tokenURI.\nbatchMintWithSecret(): A public function that batch mints tokens with associated secrets and tokenURIs.\ngetSecret(): A public view function that retrieves the secret message associated with a tokenId.\nunsealToken(): A public function that unseals a tokenId, which can only be called by the contract owner.\ngetSealedStatus(): A public view function that retrieves the sealed status of a tokenId.","metadata":{"loc":{"lines":{"from":2962,"to":2967}}}}],["1027",{"pageContent":"unsealToken(): A public function that unseals a tokenId, which can only be called by the contract owner.\ngetSealedStatus(): A public view function that retrieves the sealed status of a tokenId.\nIn addition to the SecretToken smart contract, the Decryption Oracle is implemented using Express.js to handle user interactions, such as creating and unsealing secrets. The Oracle generates a new secret key, encrypts the user’s message using the secret key, and stores the secret key in a secure database. The encrypted message is then returned to the user. It also verifies the user’s signature and address, unseals the token, retrieves the secret key and on-chain encrypted message and decrypts the message using the secret key. The decrypted message is then returned to the user.","metadata":{"loc":{"lines":{"from":2967,"to":2969}}}}],["1028",{"pageContent":"The combination of the SecretToken smart contract and Decryption Oracle ensures that secrets are securely stored on-chain and can only be accessed by authorized users. This technology is crucial for enabling the secure distribution of coupons, gift cards, and tickets within the Web3 ecosystem, providing a seamless user experience and unlocking new opportunities for merchants and marketers.\n\nSmart Contract links: SecretToken Contract Sample 2\n\nProject Milestones:\nFeb 1 - Mar 1: Team Formation\nMar 1 - Mar 10: Product Ideation\nMar 10 - Mar 17: Eng Scoping\nMar 17 - Apr 7: Development\nApr 7 - Apr 15: Testing & Demo\nApr 15 - Jun 1: Live Testing on Shasta\nJun 1: Mainnet Beta Testing\n\n11\nWine Vault - blockchain powered fine wines fund (CORK)\nTRON Hackathon\nHackathon Season 4\nnft\nApr 15\nMay 14\n\nAJTREE\n\n11\nApr 15\nProject Name: Wine Vault - CORK\n\nProject Track: NFT\n\nTeam Name: Wine Vault\n\nTeam Member(s): 3\n\nDorahacks Project Link: Dorahacks Project Page 15","metadata":{"loc":{"lines":{"from":2971,"to":3004}}}}],["1029",{"pageContent":"AJTREE\n\n11\nApr 15\nProject Name: Wine Vault - CORK\n\nProject Track: NFT\n\nTeam Name: Wine Vault\n\nTeam Member(s): 3\n\nDorahacks Project Link: Dorahacks Project Page 15\n\nProject Goal: Wine Vault is a blockchain-powered platform that simplifies fine wine investing through tokenization\n\nThink index investing (like S&P500) but for fine wines. You buy the token, Wine Vault takes care of the rest.\nProject Info:\n\nWine Vault is a company that aims to simplify fine wine investing through a blockchain-powered, ETF-like wine fund. By utilizing blockchain technology, the company aims to lower transaction costs, improve accessibility, and increase market liquidity. Their goal is to make fine wines a top asset class for investors worldwide.","metadata":{"loc":{"lines":{"from":3004,"to":3023}}}}],["1030",{"pageContent":"Wine Vault offers a unique digital stablecoin called CORK, which is fully collateralized by a diverse portfolio of fine wines. The value of each CORK token is tied to the market value of the collateralized wines, and as the value of the wines increases, so does the value of the CORK tokens.\n\nWine Vault offers its members the unique option to exchange their CORK tokens for NFTs representing specific wines in our cellar, allowing for targeted investments. By acquiring the NFT, you secure the wine at the current price while it remains stored safely with Wine Vault. You have the flexibility to sell your NFT at any time or choose to have the actual bottle delivered to your home. NFTs provide a convenient way to invest in particular wines, catering to your personal preferences and interests, while still benefiting from Wine Vault’s storage and expertise.","metadata":{"loc":{"lines":{"from":3025,"to":3027}}}}],["1031",{"pageContent":"By investing in Wine Vault, investors can diversify their portfolio, benefit from expert knowledge in the fine wine market, and access rare or allocated wines that may not be available to individual collectors. Furthermore, the platform offers greater liquidity and convenience compared to building and managing a private wine collection.\n\nThe CORK tokens are tradable on multiple exchanges and can be bought directly from Wine Vault. The company also partners with LIV-EX to provide real-time data on market pricing for their wine portfolio.\n\n\nKey Features:\n\nInnovative Blockchain-powered Wine Fund: Wine Vault leverages the power of blockchain technology to create an ETF-like wine fund called CORK, a digital stablecoin fully collateralized by a diverse portfolio of premium wines. Experience the best of both worlds with the potential for impressive returns and the stability of a digital asset.","metadata":{"loc":{"lines":{"from":3029,"to":3036}}}}],["1032",{"pageContent":"Members can exchange CORK tokens for NFTs representing specific wines, enabling targeted investments, flexible selling options, or bottle delivery, while still enjoying Wine Vault’s storage and expertise.\n\nExpertly Curated Wine Portfolio: Wine Vault’s knowledgeable team carefully selects and manages a diverse range of high-quality wines from prestigious producers and regions worldwide. Benefit from expert insights and enjoy exposure to rare, allocated, or exclusive wines typically reserved for trade clients.\n\nIncreased Accessibility and Liquidity: By tokenizing fine wine investing with CORK, Wine Vault democratizes the market, making it accessible to wine enthusiasts and investors alike. Enjoy unparalleled liquidity in an otherwise substantial but stagnant market, thanks to Wine Vault’s innovative approach and presence on multiple exchanges.","metadata":{"loc":{"lines":{"from":3038,"to":3042}}}}],["1033",{"pageContent":"Real-time Data and Transparency: Wine Vault partners with industry leader LIV-EX to provide real-time market pricing data for its wine portfolio. Embrace the transparency of the blockchain as all token transactions and mints are publicly auditable.\n\nConvenience and Security: Invest in Wine Vault with ease and confidence as their platform takes care of sourcing, purchasing, storage, and management of the fine wines. The wines are stored and insured by CORK’s partnering trade houses, ensuring your investment is always safe and secure.\n\nWine Vault Comparison\nWine Vault Comparison\nWhy invest in fine wines?","metadata":{"loc":{"lines":{"from":3044,"to":3050}}}}],["1034",{"pageContent":"Wine Vault Comparison\nWine Vault Comparison\nWhy invest in fine wines?\n\nFine wine investing offers a unique and rewarding opportunity for investors seeking to diversify their portfolio with a historically stable and high-performing asset class. With fine wines demonstrating an average annual return of 18% since 2004, investors can capitalize on this lucrative market while also benefiting from its tangible and luxurious nature. The increasing global demand for fine wines, coupled with climate change impacting production, creates a compelling case for investing in exceptional vintages now. Wine Vault harnesses blockchain technology to make fine wine investing easy, accessible, and transparent, ensuring you can fully embrace the potential of this promising asset class.","metadata":{"loc":{"lines":{"from":3050,"to":3054}}}}],["1035",{"pageContent":"Wine yield\nWine yield\nIf you would have started to invest in the Liv-ex 1000 (the S&P 500 of wines) in January 2004 and made a $100 investment every month, today you would have $98 000. Would you have chosen to invest that same money in an index fund following the S&P 500, you’d have $34 000.\n\nProject Website: Wine Vault Website (OLD) 11 - Wine Vault Website (NEW) 4\n\nProject Test Instructions:\n\nProject Details: Telegram Channel 3 & Twitter 6\n\nSmart Contract links: TRONSCAN | TRON BlockChain Explorer | 波场区块链浏览器\n\nProject Milestones:\n\nInitial mint of CORK tokens (DONE)\nLaunch CORK token (DONE)\nNew website (DONE - www.joinwinevault.com 4)\nDesign the NFTs (DONE)\nProduce fist cellar contents report (DONE)\nFirst reserve audit, wine cellar holdings (DONE)\nSocial media channels for community building (DONE)\ndates for completion of milestones can be found in the discussion below\nWine Vault FAQ:","metadata":{"loc":{"lines":{"from":3056,"to":3078}}}}],["1036",{"pageContent":"1. What is Wine Vault, and how does it work? Wine Vault is a blockchain-powered fine wine investment company that simplifies investing in fine wine through its digital token, CORK. It functions like an ETF for fine wines and aims to make fine wine investing accessible to a broader range of investors. Wine Vault utilizes blockchain technology to lower transaction costs, improve accessibility, and increase market liquidity.\n\n2. What is CORK, and how is it related to Wine Vault? CORK is a digital token fully collateralized by a diverse portfolio of fine wines, stored with reputable fine wine brokers worldwide. As the market value of the collateralized wines increases, so does the value of the CORK tokens. Investing in CORK allows investors to easily invest in fine wines without the complexities of traditional wine investments.","metadata":{"loc":{"lines":{"from":3080,"to":3082}}}}],["1037",{"pageContent":"3. How do I start investing with Wine Vault? To invest in Wine Vault, you will be able to buy CORK tokens directly from Wine Vault or through selected decentralized exchanges. Hold onto your tokens, and as the value of the collateralized wines increases, your investment grows.\n\n4. How does Wine Vault ensure the security and safety of my investment? Wine Vault stores and insures the wine collection through its partnering trade houses, ensuring that your investment remains secure. The blockchain technology also allows for transparent and auditable transactions, providing a high level of trust and security for investors.","metadata":{"loc":{"lines":{"from":3084,"to":3086}}}}],["1038",{"pageContent":"5. What are the advantages of investing in Wine Vault over a private wine collection? Investing in Wine Vault provides diversification, expertise, access to rare wines, convenience, and liquidity compared to maintaining a private wine collection. With Wine Vault, you can benefit from the knowledge of experienced professionals and easily buy and sell your investments on secondary markets.\n\n6. How does Wine Vault ensure transparency for token holders? Wine Vault is committed to transparency and has partnered with LIV-EX, a fine wine market data provider, for real-time market pricing information on the wines in the portfolio. The blockchain technology enables public auditing of all token transactions and mints, ensuring full transparency for token holders.","metadata":{"loc":{"lines":{"from":3088,"to":3090}}}}],["1039",{"pageContent":"7. How does Wine Vault address liquidity in the fine wine market? Wine Vault addresses the liquidity issue by keeping 15% of its total assets in exchange liquidity pools, ensuring that the market for CORK tokens is always open. Tokenizing fine wine investments also expands access to a wider range of wine enthusiasts, bringing unparalleled liquidity to the fine wine market.\n\n8. What are the potential returns on my Wine Vault investment? The potential returns on your Wine Vault investment are tied to the appreciation of the fine wines collateralizing the CORK tokens. As the value of the wine portfolio increases, so does the value of your CORK tokens. According to the Liv-ex 1000 index, fine wine investments have historically offered an average annual return of about 18% since 2004.","metadata":{"loc":{"lines":{"from":3092,"to":3094}}}}],["1040",{"pageContent":"9. How does climate change affect the fine wine investment market? Climate change may have significant effects on wine production in renowned wine regions. As some regions struggle to survive, the demand and prices for exceptional vintages are likely to increase, making it an opportune time to build a wine portfolio.\n\nFarming-as-a-Service by the Elk Finance Team - Allowing everyone to harness the most advanced farming contracts in DeFi\nTRON Hackathon\nHackathon Season 4\nbuilder\nMar 19\nJun 2\n\nLtSnakePlissken\n\n3\nMar 19\nProject Name: Farming-as-a-Service\n\nProject Track: Builder\n\nTeam Name: Elk Finance\n\nTeam Member(s): 5 Team Members- Baal, Pyro, FoxFortyTwo, LtSnakePlissken, FiatsJudas\n\nDorahacks Project Link: Elk Finance | Buidls | DoraHacks 15","metadata":{"loc":{"lines":{"from":3096,"to":3117}}}}],["1041",{"pageContent":"Project Track: Builder\n\nTeam Name: Elk Finance\n\nTeam Member(s): 5 Team Members- Baal, Pyro, FoxFortyTwo, LtSnakePlissken, FiatsJudas\n\nDorahacks Project Link: Elk Finance | Buidls | DoraHacks 15\n\nProject Goal: The Elk team is hard at work on Farming-as-a-Service (FaaS) smart contracts. This feature will initially be deployed on the BitTorrent chain, allowing users and developers alike to create custom LP farms with no coding experience necessary. The contracts compute on-chain impermanent-loss protection, the ability to reward up to 15 tokens per farm, and an easy-to-use UI to deploy them.\n\nProject Info:","metadata":{"loc":{"lines":{"from":3117,"to":3127}}}}],["1042",{"pageContent":"Project Info:\n\nFarming-as-a-Service allows projects to launch their own farms on the ElkDex using a UI, no code required! These contracts are the most advanced farming contracts in DeFi and allow rewarding of up to 15 tokens simultaneously. Farm creators can take advantage of Elk’s on-chain Impermanent Loss Protection for any given farm on BTTC and implement any token as coverage. Elk uses on-chain data with our custom oracle contract, with the necessary security measures, to make sure all farms are protected. The fee to create a farm is quite small, only 1000 ELK (subject to change based on ELK’s value). Projects deemed legitimate can be listed on our “Farms” page under the whitelisted section, others can be displayed and are not tagged as whitelisted until they are reviewed.\n\nProject Website:\nhttps://app.elk.finance/ 23 - Our dApp\nhttps://elk.finance/ 7 - Our website\nhttps://docs.elk.finance/ 3 - Our documentation","metadata":{"loc":{"lines":{"from":3127,"to":3134}}}}],["1043",{"pageContent":"Project Website:\nhttps://app.elk.finance/ 23 - Our dApp\nhttps://elk.finance/ 7 - Our website\nhttps://docs.elk.finance/ 3 - Our documentation\n\nProject Test Instructions: Please follow the comprehensive guide in our documentation here 5. The guide will be updated with new links and instructions to test new features as FaaS development continues.\n\nProject Details:\n\nElk Finance has developed a peer-to-peer network for cross-chain value transfers and blockchain interoperability in decentralized finance (DeFi). ElkNet, the powerful engine at the heart of the network, allows for secure and efficient cross-chain transactions, reducing friction and asset fragmentation between blockchains. Community projects and developers are also able to build dynamic multi-chain applications that leverage ElkNet features such as proxy tokens, cross-chain messaging, and cross-chain farming. Any chain, any time, anywhere.","metadata":{"loc":{"lines":{"from":3134,"to":3143}}}}],["1044",{"pageContent":"Elk Finance provides not only multi-chain infrastructure through the capabilities of ElkNet to any connected blockchain, but it also includes a decentralized exchange (ElkDEX), currently operational on all 20 active EVM chains that are connected. ElkNet allows data to be transmitted between any connected blockchain, allowing it to send and receive data (e.g., ERC-20 tokens, NFTs, messages, smart contract commands) to/from other blockchains.","metadata":{"loc":{"lines":{"from":3145,"to":3145}}}}],["1045",{"pageContent":"Elk Finance addresses many on and off-chain concerns. ElkNet solves a variety of concerns in a multi-chain environment. Safety concerns with regards to bridging infrastructure are in the forefront, as traditionally, bridges represent a large portion of DeFi capital lost due to hacks or exploits. ElkNet is a safe method of moving value across blockchains. ElkNet minimizes common bridging risks (double spends, etc.) The system introduces optimistic delays and periodic verification of transfer messages to detect inconsistencies in the blockchain (e.g., reorganization) or suspicious activities, preventing further processing of such transfers.","metadata":{"loc":{"lines":{"from":3147,"to":3147}}}}],["1046",{"pageContent":"Added benefits, such as removing blockchains from their “silo” and allowing them to effectively communicate with other chains are also front-of-mind. Projects using our ElkNet SDK, for Bridging-as-a-Service (BaaS) will be able to become multi-chain, while keeping their liquidity on a single blockchain. This also has the positive effect of decreasing fragmentation of liquidity. ElkNet will also be open-source and as trustless as possible, where users stake ELK and operate validator nodes to ensure finality of transactions on origin blockchains. Projects will have the option to create custom native bridges, and other systems, so that users can interact with their products on multiple chains as they see fit. Our Farming-as-a-Service product allows any project to create custom farms on our DEX, and even award coverage for impermanent loss that occurs using our Impermanent Loss Protection (ILP) that operates directly on-chain.","metadata":{"loc":{"lines":{"from":3149,"to":3149}}}}],["1047",{"pageContent":"Smart Contract links: Please see the most up to date links for the testnet and mainnet contracts here 5 in our documentation.\n\nProject Milestones:\n\nMilestone 1- Alpha version of FaaS contracts- February 1st, 2023\nMilestone 2- Complete Beta version of FaaS contracts- April 1st, 2023\nMilestone 3- Launch FaaS contracts on BTTC testnet for user testing- April 15th, 2023\nMilestone 4- Launch contracts on BTTC Mainnet along with dApp UI- Prior to May 1st, 2023\n\nGalaxy Throne - A decentralised SciFi Strategy Game V2\nTRON Hackathon\nHackathon Season 4\nbuilder\nFeb 19\nMay 10\n\nLukret\n\n5\nFeb 19\nProject Name: Galaxy Throne\nProject Video: V2 Galaxy Throne Trailer 13\nProject Track: [Builder]\nTeam Member(s):\nMassimiliano ( Frontend & Smart Contract Dev)\nMarco ( Smart Contract Dev)\nEnder ( Backend & Smart Contract Dev)\nCallum ( UX Designer)\n\nDorahacks Project Link: DorahacksBUIDL 9","metadata":{"loc":{"lines":{"from":3151,"to":3180}}}}],["1048",{"pageContent":"Dorahacks Project Link: DorahacksBUIDL 9\n\nProject Goal & Project Info:\nWe are glad to be back in season 4! We started out in the Season 3 Hackathon 1 and have been working hard on our Project to deliver the best web3 gaming experience possible!\n\nFor Season 4, we are going all out for the v2 patch of Galaxy Throne.\n\nComplete UI & UX Overhaul\nFactions\nAsteroid Belts\nDeep Space Mining\nExpanded Combat System\nTrade Hubs for Resources\n\nFeel free to check out our Gitbook 4 for more Infos!\n\nProject Website: Our Website 30\n\nProject Test Instructions: Pre-Alpha TestRound 13\n\nProject Details: Whitepaper 4\nSmart Contract links: Latest deployed Contracts on BTTC can be found here: Repo 1","metadata":{"loc":{"lines":{"from":3180,"to":3201}}}}],["1049",{"pageContent":"Project Website: Our Website 30\n\nProject Test Instructions: Pre-Alpha TestRound 13\n\nProject Details: Whitepaper 4\nSmart Contract links: Latest deployed Contracts on BTTC can be found here: Repo 1\n\nDiamond deployed: 0x36f277E7765f94b16B779a8B9f5Ca772D987f0F6\nMetal deployed: 0xF3c36D3E410bc94eAB6105Ef5282A996517a49EF\nCrystal deployed: 0xe4986675AB0761b4934Ef4BbFDFefbcA8911F1Ae\nAntimatter deployed: 0xA588fBC77C7b3744b055E8ebe3B2DeEE5Bb94EeD\nAether deployed: 0x78Ae902da5609cFe11203e817c1928519743B565\nPlanets deployed: 0x1fbA22c5fa1334D9E16f19A28008E73b216dD889\nBuildings deployed: 0x07A37B8E1368368A3bC77cE97cDCe33a0010FD0c\nShips deployed: 0x34541a01170a5e106D25aCB307132A1A58283B45\n\nProject Milestones:\n\nComplete UI Overhaul Implementation :white_check_mark:\nNew Star-Map :white_check_mark:\nNew Trade-Hub System for Resources :white_check_mark:\nNew UI Implementation for Ship Customization :white_check_mark:\nBalance Patches Combat :white_check_mark:\nAlliance System :white_check_mark:","metadata":{"loc":{"lines":{"from":3201,"to":3224}}}}],["1050",{"pageContent":"Alpha Round Signup 1.\nFollow us on Twitter 2 & Discord if you want to stay in the loop.\n\nWe will be updating this page as we progress, thanks for your time!\n\n1 Reply\n\nJustMoney Spot - Trading Platform\nTRON Hackathon\nHackathon Season 4\nbuilder\nApr 12\n25d\n\nJustMoney\n\n4\nApr 12\nimage\nimage\nProject Name: JustMoney Spot\n\nProject Track: Builder\n\nTeam Name: JustMoney\n\nTeam Member(s): 8 members\n\nDorahacks Project Link: Dorahacks BUIDL 18\n\nProject Url: https://just.money/spot 36\n\nDemo Video: Demo Video 13\n\nProject goal:\nMake decentralized spot trading/limit orders accessible on Tron with an home made solution that enhances user’s experience on our DEX and brings our DeFi ecosystem to the next level.\n\nProject info:\nproject-info.pdf (4.1 MB)","metadata":{"loc":{"lines":{"from":3226,"to":3264}}}}],["1051",{"pageContent":"Project info:\nproject-info.pdf (4.1 MB)\n\nAs most of you already know, we participated in HackaTron Season One, where we presented our cross-chain swap solution and our bridge, which enables users to move their assets quickly and at a low cost. These products propelled JustMoney to first place in the DeFi category and brought attention to our project.\n\nSince then, we’ve consistently improved our swap by adding features over time. Here are just a few highlights:","metadata":{"loc":{"lines":{"from":3264,"to":3269}}}}],["1052",{"pageContent":"Since then, we’ve consistently improved our swap by adding features over time. Here are just a few highlights:\n\nMulti-DEX routing: To reduce price impact, we’ve integrated some pairs from Sunswap into our platform. JustMoney Swap will always offer the most cost-effective route.\nDiscounted Swaps feature: As energy costs on Tron have recently increased and not everyone can afford to stake enough $TRX for multiple free daily transactions, JustMoney has implemented the “discounted swap” feature. A swap costs only 19 TRX regardless of whether it’s a single or double route and irrespective of whether it uses only JustMoney’s pools or Sunswap pools as well. The feature is automatically activated if you have less than 50k energy in your wallet. If you have more than 50k energy, you can still enable the discounted swap in the settings panel.","metadata":{"loc":{"lines":{"from":3269,"to":3272}}}}],["1053",{"pageContent":"As you can see, JustMoney is not focused on temporary hypes but rather on addressing the problems and needs of Tron Network users. We continually ask ourselves what is missing from the Tron network DeFi ecosystem, what issues users may face, and how we can solve them. These questions guide the development of our ecosystem.\n\nJustMoney’s team is proud to present JustMoney Spot:\n\nimage\nimage\n“An environment that enables spot trading and is designed to provide users with the best experience.”\n\nAs always, the JustMoney team is committed to delivering not just a basic product, but something polished that meets all our quality criteria. Speed, simplicity, practicality, and ease of use are all priorities. Our developers and designers are working diligently to offer you a comprehensive and enjoyable experience rather than just a simple product.\n\n“Everything you need at your fingertips.”","metadata":{"loc":{"lines":{"from":3274,"to":3284}}}}],["1054",{"pageContent":"“Everything you need at your fingertips.”\n\nThe term \"environment” was not chosen randomly. We aim to provide more than just a limit orders interface; we want to create a space that equips you with the necessary tools and information to make informed decisions and take control of your actions.\n\n“Built for users”","metadata":{"loc":{"lines":{"from":3284,"to":3288}}}}],["1055",{"pageContent":"“Built for users”\n\nExperience a CEX-like interface, familiar to many users.\nPlace limit orders for swaps to be executed at your target price.\nAdd any indicators to a chart and save your layout for future use.\nMark your most-used pairs as favorites for easy access.\nFollow recent news from projects you trade.\nImplement stop-losses for your trades (coming soon).\nimage\nimage\nSpot trading/limit orders: The primary goal of this brand-new product is to offer Tronics the ability to buy or sell a predetermined quantity of tokens while specifying the maximum price to be paid or the minimum price to be received. This allows our users to adapt their strategies to the market and seize opportunities without having to constantly monitor their screens.\n\nTrading view charting and tools: To provide users with the best trading environment, we have integrated Trading View directly into the DEX’s page. All charts, tools, and indicators will be available for JustMoney’s listed tokens.","metadata":{"loc":{"lines":{"from":3288,"to":3300}}}}],["1056",{"pageContent":"Favorite pairs: A dedicated window for your favorite pairs allows you to switch between them with a single click (available only on computers).\n\nListed projects’ Twitter feed: Stay informed while trading! After analyzing a token chart and feeling ready to place an order, take a quick look at the project’s Twitter feed to see if there is any news that might influence the token’s price action.\n\nTrading history: Keep up to date with the latest transactions effortlessly. A list will be available directly on the same page, and clicking on one of these transactions will take you straight to the Tronscan block explorer.\n\nTRX Wrapper: Please note that only TRC20 tokens are supported, so you’ll need to use WTRX instead of TRX. If you lack WTRX, a pop-up wrapper will appear.","metadata":{"loc":{"lines":{"from":3302,"to":3308}}}}],["1057",{"pageContent":"TRX Wrapper: Please note that only TRC20 tokens are supported, so you’ll need to use WTRX instead of TRX. If you lack WTRX, a pop-up wrapper will appear.\n\nInnovation:\nBesides allowing traders to stay up to date with the latest news regarding the tokens they are about to buy or sell in real time, we have implemented additional innovations that we believe will become standard on exchange platforms:\n\nPick from chart button: After identifying support and resistance areas, select the price of your buy or sell orders by simply clicking on the “Pick from chart” button and then clicking on the chart. Of course, you can also set the buy or sell price manually by entering it directly in the “Price” field.\n\nimage\nimage\nOrders on chart: Once your order is recorded, a line will appear on the chart at the order price, green for buy orders and red for sell orders.","metadata":{"loc":{"lines":{"from":3308,"to":3317}}}}],["1058",{"pageContent":"image\nimage\nOrders on chart: Once your order is recorded, a line will appear on the chart at the order price, green for buy orders and red for sell orders.\n\nimage\nimage\nClick & drag modifications: If market conditions change and you wish to modify your order, don’t worry. Simply click on the order line on the standard chart and drag it upward or downward. Order modifications are free!\n\nimage\nimage\nSocket Connections: On the spot platform, we utilize socket connections in place of HTTP polling. This approach enables our socket cluster to deliver real-time updates on pricing and order status changes directly to clients, providing a more efficient and seamless user experience.\n\nimage\nimage\nWhat challenge did you run into?\nAs you may know, GeckoTerminal is currently not available on Tron. Our team believes that Tron integration would be a valuable addition for GeckoTerminal, and we will keep the community updated on any news regarding this matter.","metadata":{"loc":{"lines":{"from":3317,"to":3332}}}}],["1059",{"pageContent":"GT isn’t an isolated case. Most third-party solutions primarily focus on building on EVM chains. This results in difficulty for Tron-based projects to access proper ready-to-use charting and limit order solutions. Everything needs to be built from scratch. This is why we have directed our development efforts in this direction. These challenges are what motivate us and have brought us to HackaTron Season 4. We hope we have tackled them successfully, and it is now up to the judges and the community to evaluate our work.\n\nRoadmap/project website\nThe JustMoney team is excited to announce that our limit order solution has already been launched on the Tron mainnet! You can access it directly at just.money/spot 36\n\nMilestone for 2023 Q2:","metadata":{"loc":{"lines":{"from":3334,"to":3339}}}}],["1060",{"pageContent":"Milestone for 2023 Q2:\n\nVisual representation of order book (depth) :white_check_mark:\nDifferent order types e.g. stoploss :white_check_mark:\nBSC and POLYGON supported :white_check_mark:\nSmart contracts\nTSaijwRDjWn7ex3EaMdysCxzR3bbJCFnYj\nTWGP482WMMuppD6AJLe1zY3aZJifeq9Cbx\nTE93BB6atgkUrTg281vsucAUgyLMtC5fcy\nInstructions\nimage\nimage\nBuy/sell order:\n\nSelect the pair you want to trade\n\nSelect buy or sell\n\nSet up a price directly in the “Price” field or using the “Pick from chart” button\n\nInput the amount of tokens you want to spend or you want to receive\n\nClick on “place order” button\n\nSign the approval and the transaction\n\nCancel order:\n\nClick “cancel” button and sign the transaction\n\nModify order:\n\nClick on the order’s line directly on the chart and drag it upward/downward (no extra cost from our platform for order modifications).\n\n\nTronNRG by TronNinjas, Power in numbers\nTRON Hackathon\nHackathon Season 4\nbuilder\nApr 11\n15d\n\nTronNinjas\n\n6\nApr 11\nProject Name: TronNRG","metadata":{"loc":{"lines":{"from":3339,"to":3385}}}}],["1061",{"pageContent":"TronNRG by TronNinjas, Power in numbers\nTRON Hackathon\nHackathon Season 4\nbuilder\nApr 11\n15d\n\nTronNinjas\n\n6\nApr 11\nProject Name: TronNRG\n\nProject Track: Builder\n\nTeam Name: TronNinjas\n\nTeam Member(s): @Stian @TronNinjas @TMMS\n\nDorahacks Project Link: TronNRG | Buidls | DoraHacks 9\n\nProject Goal: To create a sustainable community system that supports reinvestment in the Tron ecosystem\n\nProject Info: [What is NRG? - NRG 3]\n(What is NRG? - NRG 3)\n\nProject Website: https://tronnrg.com 13\n\nProject Test Instructions: https://support.tronnrg.com/how-to-guides/rent-tron-energy\n\nSmart Contract links: TEeLFcbSc2LFSFrTZnWRCacZzo3ZtBybh2 3\n\nProject Milestones: All milestones have been completed and the system is fully operational on the Tron main network\n\nDemo video The new features on TronNRG 2.0 - YouTube 4\n\nJoin our Telegram to get involved with the community to find out more [Telegram: Contact @TronNRG 1](https://TronNRG Telegram)\n\nProject Details:","metadata":{"loc":{"lines":{"from":3385,"to":3423}}}}],["1062",{"pageContent":"Join our Telegram to get involved with the community to find out more [Telegram: Contact @TronNRG 1](https://TronNRG Telegram)\n\nProject Details:\n\nTronNRG energy marketplace is designed for Tron enthusiasts by Tron enthusiasts, ensuring that the needs of the community are always our top priority.\n\nWhat sets TronNRG apart is our unique revenue-sharing model, each transaction is distributed among energy providers within the pool. This means that every day, our users can earn a portion of the platform’s revenue simply by providing energy to the pool.\n\nOur user-friendly platform is perfect for anyone looking to make the most of their idle TRX tokens, as it offers the opportunity to earn passive income or rent energy to save on transaction fees.\n\nAbout:\n\nTronNRG, is an innovative, autonomous, and the first decentralized energy rental system built on the Tron blockchain.\n\nOur platform enables users to both provide and rent energy in a secure and transparent way.","metadata":{"loc":{"lines":{"from":3423,"to":3437}}}}],["1063",{"pageContent":"Our platform enables users to both provide and rent energy in a secure and transparent way.\n\nphoto_2022-10-11_12-21-03.jpg\n\nTronNRG is the brainchild of the experienced TronNinjas team, who are passionate about creating solutions for the Tron community. Our platform is designed for Tron enthusiasts by Tron enthusiasts, ensuring that the needs of the community are always our top priority.\n\nOur user-friendly platform is perfect for anyone looking to make the most of their idle TRX tokens, as it offers the opportunity to earn passive income or rent energy to save on transaction fees.","metadata":{"loc":{"lines":{"from":3437,"to":3443}}}}],["1064",{"pageContent":"Our user-friendly platform is perfect for anyone looking to make the most of their idle TRX tokens, as it offers the opportunity to earn passive income or rent energy to save on transaction fees.\n\nTronNRG was a proud participant in the Tron Hackathon Season Three, reflecting our commitment to providing a fair and reliable service for all of our users. With over two years of experience developing decentralized applications (DApps) on the Tron network, the TronNinjas team is dedicated to supporting builders and fostering the growth of the Tron ecosystem. We are back with some significant updates to the system\n\nSignificant updates\n\nSince our previous submission, our team has been diligently working to expand and refine the features of our platform. We are excited to announce several significant updates that are now live on the main network, further enhancing the user experience and functionality of our system.\n\nStake 2.0 Integration","metadata":{"loc":{"lines":{"from":3443,"to":3451}}}}],["1065",{"pageContent":"Stake 2.0 Integration\n\nLive Smart contract on Tron TEeLFcbSc2LFSFrTZnWRCacZzo3ZtBybh2\n\nhttps://tronscan.org/#/contract/TEeLFcbSc2LFSFrTZnWRCacZzo3ZtBybh2/code\n\nWe have completely revamped and rewrote the backend system that powers TronNRG to be fully compatible with Stake 2.0, resulting in a more efficient and sustainable system for our daily Tron users. This improved compatibility enables smoother transactions and a better overall experience for our community members.\n\nRobust Affiliate Marketing System\n\nTronNRG now boasts a comprehensive affiliate marketing system, built upon smart contract events. This user-friendly feature allows anyone to participate and earn rewards simply by sharing their unique referral links online. The intuitive interface makes it easy for users to get started and benefit from this exciting opportunity. Which includes a complete toolbox to give every user what they need to succeed including an OpenAI integration to support users with their marketing efforts.","metadata":{"loc":{"lines":{"from":3451,"to":3461}}}}],["1066",{"pageContent":"TronNRG main dashboard – Track your link clicks, sales and total commission\n\nTrack your unique sales via our sales reporting system\n\nUse Affiliate tools to create unique content for Twitter using our OpenAI integration or use our HTML 5 animated banners for your blog or website.\n\nSelf-service commission system allows you to withdraw your earnings with a click of a button directly to your Tron Wallet.\n\nChange your user setting and modify your unique referral links with ease!\n\nIf you need help with any aspects of our system then you can allow check out our new comprehensive support section\n\nIntroducing Liquid Staking\n\nWe are proud to introduce Liquid Staking for NRG tokens. This innovative feature allows users to effortlessly swap their NRG for TRX using our dedicated swap module. For those who prefer not to wait for the standard 14-day unstaking period, Liquid Staking offers a convenient alternative, enabling seamless conversion of NRG tokens into TRX.","metadata":{"loc":{"lines":{"from":3463,"to":3477}}}}],["1067",{"pageContent":"So as you can see we have been busy working hard to expand our offerings on Tron. We as a team are committed to creating a sustainable and bright dapp ecosystem on Tron blockchain\n\nWe would like to express our gratitude for your support and trust in TronNRG.\n\nBy choosing our platform, you not only benefit from a reliable energy rental service but also contribute to the thriving Tron ecosystem. So, thank you for being part of our community, and we look forward to serving you with the best that TronNRG has to offer.\n\nJoin our Telegram to get involved with the community to find out more [Telegram: Contact @TronNRG 1](https://TronNRG Telegram)\n\nUpdate","metadata":{"loc":{"lines":{"from":3479,"to":3487}}}}],["1068",{"pageContent":"Join our Telegram to get involved with the community to find out more [Telegram: Contact @TronNRG 1](https://TronNRG Telegram)\n\nUpdate\n\nWe are thrilled to announce our collaboration with a leading payment gateway provider, introducing a seamless TRX on-ramp for our valued users! As part of the #TronNRG community, you can now conveniently purchase TRX using your credit or debit cards directly on our website. With support spanning over 170 countries globally, we are confident that this enhancement to our platform will not only strengthen our system but also contribute to the widespread adoption of Tron.\n\nStay in the loop and don’t miss any updates by following our official media channels as we continue to work closely with our partner:\n\nDemo video: NRG TRX ON Ramp demo - YouTube 1\n\nTelegram: Telegram: Contact @TronNRG 1\nTwitter: https://twitter.com/TronNRG\n\n\nTronql - full node api and graphql interface to tron\nTRON Hackathon\nHackathon Season 4\nbuilder\nMar 31\nMay 30\n\nferumflex","metadata":{"loc":{"lines":{"from":3487,"to":3508}}}}],["1069",{"pageContent":"Telegram: Telegram: Contact @TronNRG 1\nTwitter: https://twitter.com/TronNRG\n\n\nTronql - full node api and graphql interface to tron\nTRON Hackathon\nHackathon Season 4\nbuilder\nMar 31\nMay 30\n\nferumflex\n\n4\nMar 31\nProject Name: TronQL\nProject Track: Updated to Builder Track by Hackathon.Admin\nTeam Name: TronQL\nTeam Member(s): 1\nDorahacks Project Link: Tronql | Buidls | DoraHacks 4\nProject Goal: Give developers best api for tron network.\nProject Info:\nSeverals links to study:\nhttps://docs.tronql.com/ 4\nhttps://api.tron.tronql.com/ 6\nSmall demo of the project. Tronql first video about project - YouTube\n\nProject Website: https://tronql.com 15\n\nProject Test Instructions:\nFirst of all you need to get your access token. Because right now it is protected and not public anymore. Good news that getting access token is free and gives you 5m requests per month.","metadata":{"loc":{"lines":{"from":3508,"to":3538}}}}],["1070",{"pageContent":"Register on the site\nVerify your email\nLogin to site\nCreate a project.\nNow you can test it with full node api. Curl will look like\ncurl --location --request POST 'https://mainnet.tron.tronql.com/wallet/getnowblock' --header 'Authorization: <your token>'\nand using graphql. In this case you need to open https://api.tron.tronql.com/ 6 and click on headers tab. Now add Authorization header equal to your access token. Like on image below\n\nProject Details:\nTronQL is a powerful full node API designed specifically for the Tron crypto network. This innovative tool provides developers with a range of features and functionalities that enable them to interact with the Tron blockchain in a fast, efficient, and reliable way.\n\nWhy I should use Tronql?","metadata":{"loc":{"lines":{"from":3540,"to":3551}}}}],["1071",{"pageContent":"Why I should use Tronql?\n\nBecause it is free and awesome. We provide 5,000,000 reqs/month for free. If you need more you can select paid account or contact us.\nWe provide graphql endpoint. That can speed up you development and your query time.\nYou can pay in crypto for advanced plans.\nTronQL is a full node API that supports the Tron blockchain network. This means that it provides developers with access to the complete set of blockchain data, including transactions, blocks, and smart contracts. By using a full node API, developers can interact with the Tron blockchain at a deeper level, enabling them to build more advanced and sophisticated applications.\n\nNetwork\tURL\tGraphql URL\nMainnet\thttps://mainnet.tron.tronql.com 5\thttps://api.tron.tronql.com/ 6\nNile\thttps://nile.tron.tronql.com\thttps://api-nile.tron.tronql.com/ 1\nTo access Full node api you can use official docs - Background 1. Things that you need to change is url and add auth header.","metadata":{"loc":{"lines":{"from":3551,"to":3561}}}}],["1072",{"pageContent":"Smart Contract links: Right now, we do not have smart contracts. They will be deployed for paid users. As method to pay for plans, additional features.\nProject Milestones:\n\nIdea, basic implementation, deploying to nile network. (Q4 2022). Done\n\nMove to mainnet, enable user login, register, create/edit/delete new projects. (Q1 2023). Done\n\nGather stats for amount of requests. (Q1 2023). Done\n\nAddind payed plans, enable to pay for this in crypto using smartcontract on Tron. (Q2 2023). In progress\n\nAdding more networks. Provide api for Ethereum, Solana, etc. (Q2 2023).\n\nEcomarket - Open Marketplace for Procuring Used & Recycled Plastics Online\nTRON Hackathon\nHackathon Season 4\neco-friendly\nApr 10\n25d\n\nChainBuilderPO\n\n17\nApr 10\nProject Name: EcoMarket\n\nProject Track: Eco-Friendly\n\nTeam Name: Team EcoMarket\n\nTeam Member(s): @ChainBuilderPO, @Darabong\n\nDorahacks Project Link: EcoMarket | Buidls | DoraHacks 14\n\nMainnet Smart Contract:\n\n\nTRON","metadata":{"loc":{"lines":{"from":3563,"to":3600}}}}],["1073",{"pageContent":"Project Track: Eco-Friendly\n\nTeam Name: Team EcoMarket\n\nTeam Member(s): @ChainBuilderPO, @Darabong\n\nDorahacks Project Link: EcoMarket | Buidls | DoraHacks 14\n\nMainnet Smart Contract:\n\n\nTRON\n\nTRONSCAN | TRON BlockChain Explorer 1\nTRONSCAN is the first blockchain browser in the tron community. It supports multiple login methods and provides a complete browsing and search experience. Experience the tron-ecology in the TRONSCAN blockchain...\n\nProject Goal:\n\nUp to 9.948 tons of plastic waste in Uganda is uncollected annually, according to a study conducted under the GKMA PET Plastic Recycling Partnership. 11 percent of this ends up directly into water bodies. According to research conducted by the World Climate School’s Uganda chapter, more than 75% of used plastic bottles end up in landfills, lakes, and rivers, which is seriously damaging to the environment.","metadata":{"loc":{"lines":{"from":3600,"to":3618}}}}],["1074",{"pageContent":"This problem is not peculiar to Uganda alone. Most African countries, as well as most parts of the developing world, face similar issues.\n\nPlastic\nnull\nIt is not uncommon to find plastic waste (and other forms of waste) littered in public places. Most waste collectors barely earn a living wage, as they only sell to middlemen who pay them ridiculously low amounts. Also, many individuals are not incentivized to properly recycle waste, and litter them indiscriminately. At the same time, companies find it difficult to access reliable sources of used and recycled plastics, due to limited supply of properly collected waste materials, and the lack of proper infrastructure for collection and cleanups.\n\nEcoMarket wants to build a platform that incentivizes recycling and clean storage of used plastics, and also provide companies with reliable and transparent sources of recycled materials.\n\nProject Info:","metadata":{"loc":{"lines":{"from":3620,"to":3628}}}}],["1075",{"pageContent":"Project Info:\n\nEcoMarket is an open marketplace that directly connects buyers of used and recycled plastics with individuals and businesses who want to donate or sell them.\n\nTo use the platform, companies that need recycled materials can request for these materials, and stake an amount of TRX (equivalent to the quantity of recycled or used plastics required) in a smart contract-powered escrow account.\n\nRecyclers & collectors are then notified of the company’s requests, and can signify interest in providing these plastics. After approval from the company, the collector can go ahead to gather plastics, deposit them in a collection center, and earn rewards from the TRX escrowed by the company, after a 48-hour cool-off period.\n\nEach request and dropoff is weighed and recorded with picture proof, and recorded on the blockchain for traceability and verification.","metadata":{"loc":{"lines":{"from":3628,"to":3636}}}}],["1076",{"pageContent":"Each request and dropoff is weighed and recorded with picture proof, and recorded on the blockchain for traceability and verification.\n\nIn the future, apart from the tokens earned, organizations who participate in the marketplace earn the EcoCredit NFT, a signal of their commitment to environmental sustainability.\n\nWhile EcoMarket is free for now, in the future, we plan on receiving a tiny percentage of the total amount disbursed for each request.","metadata":{"loc":{"lines":{"from":3636,"to":3640}}}}],["1077",{"pageContent":"While EcoMarket is free for now, in the future, we plan on receiving a tiny percentage of the total amount disbursed for each request.\n\nEcoMarket\nnull\nTHE BENEFITS\nIndividuals in developing countries are encouraged to promote healthy recycling practices while also earning extra income for collecting waste plastic.\nOrganizations can easily access a reliable source of plastic waste, and at the same time empower low-income earners in developing societies.\nRecording the dropoff on the blockchain enables the verification and certification of used plastics for organizations’ supply chain.\nDecentralized: The EcoMarket escrow is fully decentralized & powered by a smart contract. Whenever a dropoff has been verified by both the recycler and the company, the recycler can claim their rewards. In cases where the order is not fulfilled, the smart contract automatically processes returns to the company’s wallet address.\nProject Website: EcoMarket App 25\n\nProject Test Instructions:","metadata":{"loc":{"lines":{"from":3640,"to":3651}}}}],["1078",{"pageContent":"Project Test Instructions:\n\nAs a Company\nOn the EcoMarket landing page, click on Get Started, and select Company.\n\nclick-company\n\nConnect your TronLink wallet\n\nconnect-wallet\n\nAs a new user, you’re required to set your profile.\n\nsave-profile\n\nLock some TRX in your escrow wallet, which will be used to automatically pay out rewards to collectors who have successfully delivered the plastics.\n\nlock-funds\n\nYou can also withdraw from your escrow wallet, any amount not currently locked in any ongoing offers.\n\nGo to your Dashboard, and create an offer.\n\nAn offer is a request for plastics to be delivered to a specific collection center in a particular locality. Enter your offer details, including the amount, quantity required, etc…\n\ncreate-offer\n\nOnce an offer is created, you will not be able to withdraw from your escrow wallet any amount locked within the offer.","metadata":{"loc":{"lines":{"from":3651,"to":3678}}}}],["1079",{"pageContent":"create-offer\n\nOnce an offer is created, you will not be able to withdraw from your escrow wallet any amount locked within the offer.\n\nThis offer is then broadcasted via email (and in the future, SMS) to all collectors within the locality of the collection center you’ve selected.\n\nOnce collectors have indicated interest, you’ll need to approve each of their delivery requests. You will sign the approval with your TronLink wallet.\n\napprove delivery request\n\nAfter approval, once a delivery has been marked as complete by the collector, you can view the details of their delivery, including the proof of delivery.\n\nOnce completed by the collector, as the company, you have 48 hours to raise a dispute (work-in-progress).\n\nIf you raise a dispute, the collector will be unable to withdraw the tokens.\n\nIf no dispute is raised, the funds will be withdrawn from your escrow and deposited in the collector’s wallet.","metadata":{"loc":{"lines":{"from":3678,"to":3694}}}}],["1080",{"pageContent":"If you raise a dispute, the collector will be unable to withdraw the tokens.\n\nIf no dispute is raised, the funds will be withdrawn from your escrow and deposited in the collector’s wallet.\n\ncompany-view-delivery\ncompany-view-delivery\nAs a Collector\nOn the EcoMarket landing page, click on Get Started, and select Collector.\n\nThen, connect your TronLink wallet (in the future, collectors will be able to create accounts with just their emails or social accounts).\n\nAs a new user, you’re required to set your profile. As a collector, you will also need to select your location from one of our supported locations.\n\nCollector sign up & create profile\n\nOnce a new offer has been sent by a company for delivery within your locality, you will be notified via email. You can also visit your dashboard to view these offers.\n\nnotification\nnotification\nView the offer details, and click “Fulfill Request” to indicate your interest. Enter the quantity of plastic you’d like to deliver.\n\nindicate-interest","metadata":{"loc":{"lines":{"from":3694,"to":3715}}}}],["1081",{"pageContent":"notification\nnotification\nView the offer details, and click “Fulfill Request” to indicate your interest. Enter the quantity of plastic you’d like to deliver.\n\nindicate-interest\n\nThe company will be notified, and can then approve your request.\n\nOnce approved, go to the collection center and deliver the plastics. Upload proof as part of your delivery.\n\nAfter a cool-off period (48 hours), if no dispute has been raised, you can claim the funds for the delivery within your escrow wallet.\n\ndelivery-details\ndelivery-details\nProject Details:\n\nPITCH VIDEO\nEcoMarket Pitch Video\nEcoMarket Pitch Video\nHOW IT WORKS VIDEO\nA deep-dive into EcoMarket’s features, application architecture, and roadmap can be found in the following Notion doc:\n\n\nNotion\n\nNotion – The all-in-one workspace for your notes, tasks, wikis, and databases. 3\nA new tool that blends your everyday work apps into one. It's the all-in-one workspace for you and your team\n\nSmart Contract links:\n\nEcoMarket Smart Contract on Mainnet 1","metadata":{"loc":{"lines":{"from":3715,"to":3745}}}}],["1082",{"pageContent":"Smart Contract links:\n\nEcoMarket Smart Contract on Mainnet 1\n\nEcoMarket Smart Contract on Sashta testnet 1\n\nProject Milestones:","metadata":{"loc":{"lines":{"from":3745,"to":3751}}}}],["1083",{"pageContent":"During Hackathon\n6/4/2023: Market research, documentation, Figma design :white_check_mark:\n9/4/2023: Smart contract deployment on Sashta testnet :white_check_mark:\n12/4/2023: Backend & Frontend Deployment on ecomarketapp.xyz :hourglass_flowing_sand:\nConnect Wallet (via TronLink)\nProfile SET-UP for companies & recyclers\nCompany Escrow Wallet, including Top Up & Withdrawal features\nOffer creation by the company\nOffer Fulfillment by Recycler, including recording & uploading proof of dropoff\nRecycler Wallet, including Withdraw functions.\nCool-off Period (after which reward can be claimed by the recycler if there is no dispute).\nClaim Rewards (by the recycler, after cool-off period has elapsed without dispute)\nDisputes, which can be raised by the company if drop-off does not match the offer criteria.\nPOST-HACKATHON ROADMAP\nQ2 2023\nPerformance optimizations (pagination, lazy-loading, etc).\nIntegrate Web3Auth for easier sign-up for collectors, most of whom may not be crypto-savvy.","metadata":{"loc":{"lines":{"from":3753,"to":3769}}}}],["1084",{"pageContent":"POST-HACKATHON ROADMAP\nQ2 2023\nPerformance optimizations (pagination, lazy-loading, etc).\nIntegrate Web3Auth for easier sign-up for collectors, most of whom may not be crypto-savvy.\nNFTs — If a company’s offer is 100% fulfilled before the expiry date, the company would earn EcoCredit, a digital collectible that showcases the company’s commitment to eco-friendly initiatives.\nOutreach & Education Initiatives (in schools, marketplaces, and universities)\nEnable offer creation & deliveries for other scrap types (metals, batteries, etc)\nQ3 2023\nConversion of TRX to stablecoins for easier off-ramping for customers.\nAdmin Portal for platform management\nDecentralized verification for Company & Collector\nToken-based Governance Model, DAO\nDispute Management Portal\nQ4 2023\nSupply-driven Marketplace (where a user can upload plastics, or other scrap items available for sale)\na. Amount Negotiation (allows the company rep. to negotiate the amount for items uploaded by the recycler)","metadata":{"loc":{"lines":{"from":3769,"to":3784}}}}],["1085",{"pageContent":"a. Amount Negotiation (allows the company rep. to negotiate the amount for items uploaded by the recycler)\nb. Recycler-Company Chat\nc. Request for Samples (companies request for samples from recycler)\nd. Suggested Pricing\nOne-on-One Matching (match companies with recyclers directly)\nThe Future\nWe want to purchase a reverse vending machine and reprogram it to automate verification of delivery & payout of rewards to collectors.","metadata":{"loc":{"lines":{"from":3784,"to":3790}}}}],["1086",{"pageContent":"Being embedded more deeply within the recycling value chain by providing:\n\nPlastic Recycling Facilities & Centers.\nProvision of logistics infrastructure for large-volume deliveries.\n\nMusiCoinCity - myriad places & exclusive sounds\nTRON Hackathon\nHackathon Season 4\neco-friendly\nApr 11\nJun 6\n\nElfWeb\n\n8\nApr 11\nProject Name: MusiCoinCity\nProject Track: Eco-friendly\nTeam Name: ElfWeb\nTeam Member(s): 1\nDorahacks Project Link: MusiCoinCity | Buidls | DoraHacks 9\nProject Goal: A platform that enables users to meet the sounds of various natural environments that they can choose according to their wishes and to donate to organizations that ensure the continuity of these environments","metadata":{"loc":{"lines":{"from":3792,"to":3813}}}}],["1087",{"pageContent":"Project Info: Sometimes, we listen to relaxing nature sounds while resting and sometimes studying. On this site, you can hear the sounds of 4 different environments and feel like you are in those environments. You can connect your wallet to the site and donate from the option below to protect or improve the environments where the sounds you listen to belong.\n\n1\n1\nProject Website: https://www.musicoincity.com 32\n(All donations and smart contracts on our site work on a mainnet, not a testnet. That’s why we set the amount to a very low amount of $ 0.006 right now, we would like to reiterate that if you want to check the buttons, this amount will be deducted from your wallet.)\n\nGithub: GitHub - ElfWeb/MusiCoinCity 1\n\nVideo: ElfWeb - MusiCoinCity - YouTube 9","metadata":{"loc":{"lines":{"from":3815,"to":3824}}}}],["1088",{"pageContent":"Github: GitHub - ElfWeb/MusiCoinCity 1\n\nVideo: ElfWeb - MusiCoinCity - YouTube 9\n\nProject Test Instructions: The user logs in to the site via the specified link and selects the environment they want to be in from 4 different boxes representing 4 different natural environments on the screen. Then, if the user wants to donate, he connects his Metamask wallet to the site and makes a BTT donation via BTTC.\n\nDonation Amount (fixed):\n10,000 BTT ~ 0.006 USD\n6.3 BTT – gas fee\n\nProject Details: For the BTTC network to be included in your Metamask wallet and to send a BTTC donation over this network, you can click the “Wallet” button on the top right of our site and follow the steps there.\n\nEach user can experience all 4 different environments and donate to projects covering the environment they want. Your donations will be forwarded to the institutions when they reach a certain amount from us.","metadata":{"loc":{"lines":{"from":3824,"to":3836}}}}],["1089",{"pageContent":"Smart Contract links:\nBTTC;\n0x4E523c60E4ad0769d3AEdA5d67cDC0dAfd95FFd5#code 4 (forest → mcc)\n0xBcc89d7C252cc131AA4Da0b851EAc0bc16dc6E3e#code (space → mcc)\n0xfF4AdE89F5A3394e6150Fee125EFcA4a4b96eb9F#code (desert → mcc)\n0x17021007e5b5C8F4BE122Ff58f00427ABd9F1762#code 2 (ocean → mcc)\n\nHow our Project integrates to BTTC:\nThis platform has 4 different wallets and one main wallet for 4 different environments. The amounts in the wallets created for 4 different wallets will be transferred to the main wallet after the 10,000,000 BTT limit. For this reason, a smart contract was created for each of the 4 different environments.","metadata":{"loc":{"lines":{"from":3838,"to":3846}}}}],["1090",{"pageContent":"Project Milestones:\n:musical_note: Creating the building blocks of the idea and considering the details\n:musical_note: Creation of the site after +Design-Thinking\n:musical_note: 4 different environment determination\n:musical_note: Adjustment of sound parameters to reflect 4 different environments\n:musical_note: Connecting wallets to media\n:musical_note: Smart contract development and testing\n:musical_note: Integration of smart contracts to the site & wallets\n:musical_note: Determining the organizations to donate and creating an intermediary channel\n:musical_note: Rechecking site security and design\n\n\n\n\n\nCarboEx - Transforming carbon credits trading through blockchain technology\nTRON Hackathon\nHackathon Season 4\neco-friendly\nApr 9\nMay 11\n\nim_31\n\n14\nApr 9\nProject Name: CarboEx\n\nProject Track: Eco-Friendly\n\nTeam Name: Team CarboEx\n\nTeam Member(s): 6 (@im_31 @victorious @GodFather097 @peterparker @jack212 @pv_189 )\n\nDorahacks Project Link 31","metadata":{"loc":{"lines":{"from":3848,"to":3882}}}}],["1091",{"pageContent":"14\nApr 9\nProject Name: CarboEx\n\nProject Track: Eco-Friendly\n\nTeam Name: Team CarboEx\n\nTeam Member(s): 6 (@im_31 @victorious @GodFather097 @peterparker @jack212 @pv_189 )\n\nDorahacks Project Link 31\n\nProject Goal: Our vision at CarboEx is to build a sustainable future by making individuals, businesses, and governments accountable for their carbon footprint by providing a carbon credit trading platform.\n\nOur ultimate goal is to achieve net-zero emissions, where our platform plays a key role in reducing the carbon footprint of society.\n\nProject Info: CarboEx provides a secure and transparent carbon credit trading platform for buyers and sellers, underpinned by blockchain technology and Renewable Energy (RE) certificates that are verified by our Decentralized Autonomous Organization (DAO).\n\nOur platform uses our own tokens, which are generated and used for carbon credit trading, to increase efficiency and accessibility while reducing costs.\n\nPitch Deck:\n\nInspiration:","metadata":{"loc":{"lines":{"from":3882,"to":3904}}}}],["1092",{"pageContent":"Our platform uses our own tokens, which are generated and used for carbon credit trading, to increase efficiency and accessibility while reducing costs.\n\nPitch Deck:\n\nInspiration:\n\nThis project was inspired by the need for a more sustainable future and the lack of efficient and accessible carbon credit trading platforms, especially one backed by blockchain technology.\n\nWith the increasing threat of climate change, individuals, businesses, and governments need to be held accountable for their carbon footprint. However, the current carbon credit trading system is riddled with intermediaries and high transaction costs, making it difficult for smaller organisations to participate and offset their emissions.\n\nThe CarboEx project seeks to promote sustainable development by establishing a more effective and transparent carbon credit market, motivating businesses to cut their carbon emissions, and assisting in the reduction of climate change’s adverse consequences.","metadata":{"loc":{"lines":{"from":3904,"to":3914}}}}],["1093",{"pageContent":"Project Website: CarboEx 34\n\nAPK of Mobile Application: CarboEx Mobile Application\n\nProject Test Instructions:\n\nStep 1: Upload RE certificate","metadata":{"loc":{"lines":{"from":3916,"to":3922}}}}],["1094",{"pageContent":"Step 1: Upload RE certificate\n\nThe organisation starts by connecting their wallet. Next, they will be navigated to the Sign up page. Here, they can create an account by proving their company details.\nOnce the account is created, an email will be received with a verification link to verify the account\nAfter verification, the log in details can be used to access the account on the platform\nTo find the “Upload RE Certificates” page on the CarboEx website, locate the “My Account” section after logging in.\nWhen on the “Upload RE Certificates” page, it will be required to provide details about your RE certificates such as the certificate issuer, number, and the source of renewable energy used.\nUpload your RE certificates. Make sure that the certificates are in a valid file format, such as PDF or JPG.\nAn organisation can also access the ‘Calculator’ page. This page will help calculate the carbon emissions based on different usage.\nStep 2: Verification of RE certificates","metadata":{"loc":{"lines":{"from":3922,"to":3931}}}}],["1095",{"pageContent":"The uploaded RE certificates are then verified by the Decentralised Autonomous Organization (DAO) within the CarboEx platform.\nThe DAO uses a consensus mechanism to verify the authenticity of the RE certificates.\nThe DAO also checks whether the RE certificates comply with the relevant standards and regulations.\nThe RE certificates are assigned a verification status based on the result of the verification process. The status can be “verified,” “pending,” or \"rejected.\nOrganisations can view the verification status of their RE certificates on their CarboEx dashboard.\nStep 3: Conversion and Trading","metadata":{"loc":{"lines":{"from":3933,"to":3938}}}}],["1096",{"pageContent":"Once the RE certificates are verified, they can be converted into carbon credits using the CarboEx platform tokens.\nThese carbon credits can be sold on the platform.\nOther organisations can purchase these carbon credits to offset their carbon footprint and meet their sustainability goals.\nThe platform uses smart contract automation to ensure that the carbon credit trading process is transparent, secure, and efficient.\nProject Details: CarboEx is a Dapp built on top of blockchain technology that aims to facilitate carbon credit trading. By generating an unchangeable and tamper-proof record of carbon credit transactions, the platform intends to provide efficiency and transparency to the market for carbon credits.","metadata":{"loc":{"lines":{"from":3940,"to":3944}}}}],["1097",{"pageContent":"The platform brings the buyers and sellers of carbon credits to a decentralized marketplace where they can conduct safe and open transactions. The platform will automate the exchange of carbon credits by using smart contracts. In turn, it eliminates intermediaries and reduces transaction cost.\n\nAny organization can upload their RE certificates that are then verified by our DAO. Once verified, the RE certificates can be converted into carbon credits using our platform tokens. The DAO makes sure that the organization’s certificates are authentic.\n\nThus, it provides an incentive for organizations that are offsetting more carbon emissions than the required amount. At the same time, other organizations that have not been able to offset their emissions can buy these carbon credits and still be accountable towards the sustainability of the planet.\n\nThis also helps them save millions of dollars in penalties that are levied by regulatory agencies.\nA win-win for all!","metadata":{"loc":{"lines":{"from":3946,"to":3953}}}}],["1098",{"pageContent":"This also helps them save millions of dollars in penalties that are levied by regulatory agencies.\nA win-win for all!\n\nUltimately, the CarboEx intends to support sustainable development by establishing a more effective and transparent carbon credit market, motivating businesses to cut their carbon emissions, and assisting in the reduction of climate change’s adverse consequences.\n\nFunctionalities of CarboEx Website:\n\n1. How to upload and Validate your RECs?\n\nOn the CarboEx Platform how to upload and Validate your RECs?\nOn the CarboEx Platform how to upload and Validate your RECs?\n2. How a DAO Member will validate the proposal?\n\nOn the CarboEx Platform how a DAO Member will validate the  Proposal?\nOn the CarboEx Platform how a DAO Member will validate the Proposal?\n3. How to sell your carbon credits on the CarboEx Platform?\n\nHow to Sell Carbon Credits on CarboEx Platform?\nHow to Sell Carbon Credits on CarboEx Platform?\n4. How to buy carbon credits on the CarboEx Platform?","metadata":{"loc":{"lines":{"from":3953,"to":3972}}}}],["1099",{"pageContent":"How to Sell Carbon Credits on CarboEx Platform?\nHow to Sell Carbon Credits on CarboEx Platform?\n4. How to buy carbon credits on the CarboEx Platform?\n\nHow to buy Carbon  Credits on the CarboEx Platform?\nHow to buy Carbon Credits on the CarboEx Platform?\nFunctionalities of CarboEx Mobile Application:\n\n1. How to connect the wallet in the CarboEx mobile application?\n\nHow to connect the wallet in the CarboEx mobile application?\nHow to connect the wallet in the CarboEx mobile application?\n2. How to calculate Carbon Footprints in CarboEx mobile Application?\n\nHow to calculate Carbon Footprints in CarboEx Application?\nHow to calculate Carbon Footprints in CarboEx Application?\n3. A Comprehensive Guide to Our Home Screen, About Us, Contact, and Resources Screen.\n\nA Comprehensive Guide to Our Home Screen, About Us, Contact, and Resources Screen.\nA Comprehensive Guide to Our Home Screen, About Us, Contact, and Resources Screen.\n4. How to Become a DAO member and upload your RECs?","metadata":{"loc":{"lines":{"from":3972,"to":3992}}}}],["1100",{"pageContent":"How to Become a DAO member and upload your RECs?\nHow to Become a DAO member and upload your RECs?\nMarket Research:\n\nAll of our team members have spent a significant amount of time to understand the market of carbon credit trading.\n\nWe have a detailed report on which industries emit carbon, how Carbon trading works, who uses these platforms, are there any similar platforms & much more.\n\nIf you’re interested in knowing all these -\n\nHere’s a link to our report: Miro | Online Whiteboard for Visual Collaboration 11\n\nCarboEx research\nCarboEx research\nSmart Contract links: Contract1 5 | Contract2 4 | Contract3 4\n\nUpdated Smart Contract (Deployed on BitTorrent Mainnet):\nToken Contract | Company Contract | Dao Contract\n\nProject Milestones:\n\n08-04-2023: Complete website and mobile design\n10-04-2023: Smart contract deployment\n11-04-2023: QA & Testing\n12-04-2023: Create functions for integration.\n13-04-2023: complete integration\nFuture Goals:","metadata":{"loc":{"lines":{"from":3994,"to":4020}}}}],["1101",{"pageContent":"In the next version, we want to generate RE certificates on the platform to provide end-to-end solution for carbon credit trading\nThe DAO will have expert members that can provide consultation to help organizations offset emissions instead of buying carbon credits\nIncentivizing organizations that are moving beyond compliance and making voluntary carbon reductions\nChallenges we ran into:","metadata":{"loc":{"lines":{"from":4022,"to":4025}}}}],["1102",{"pageContent":"As with any project, we faced several challenges in understanding the industry and structuring the platform to meet the user’s needs. When we first began working on the project, we quickly realised that understanding the entire carbon credit industry was a massive challenge as it was a complex industry. The carbon capture and utilisation industry is relatively new, and there are still many unknowns in terms of the technology and the market. This means that we had to conduct extensive research to gain an in-depth knowledge of the complex and dynamic carbon emission industry, including carbon credits, trading process, and verification so as to be able to develop a comprehensive solution that addressed the industry’s pain points. We had to gather data and insights from various sources including industry experts, market reports and user feedback.","metadata":{"loc":{"lines":{"from":4027,"to":4027}}}}],["1103",{"pageContent":"Also, we had to structure the platform in a way that was user-friendly and transparent to all stakeholders, taking into account the technicalities of blockchain technology, smart contracts, and DAOs. The CarboEx platform was designed to be a marketplace where carbon credits could be bought and sold. However, we had to ensure that the platform was transparent and easy to use to attract users. This involved designing a user-friendly interface, providing clear information on the carbon credits’ origins and quality, and ensuring that the transaction process was secure and straightforward.","metadata":{"loc":{"lines":{"from":4029,"to":4029}}}}],["1104",{"pageContent":"We also faced challenges in terms of ensuring that the platform was trustworthy. Carbon credits are a relatively new concept, and many people are still sceptical of their value and legitimacy. We had to work hard to ensure that the platform was transparent and trustworthy to build users’ confidence. This involved developing a robust verification process, providing clear information on the carbon credits’ origins and quality, and ensuring that the transaction process was secure and reliable.\n\nThe last challenge that we faced was ensuring that the platform was scalable. The CarboEx platform was designed to be a global marketplace for carbon credits, which meant that it had to be scalable to accommodate a large number of users and transactions. This required us to design a platform that was flexible and could adapt to changing market conditions and user needs.\n\nAccomplishments that we’re proud of:","metadata":{"loc":{"lines":{"from":4031,"to":4035}}}}],["1105",{"pageContent":"Accomplishments that we’re proud of:\n\nWe have made significant strides in the field of carbon credit trading and carbon emissions tracking by creating a first-of-its-kind, blockchain-based platform that is revolutionising the industry. Our innovative approach to utilising blockchain technology has enabled us to create a platform that is transparent, secure, tamper-proof and efficient, making it possible to trade carbon credits in a decentralised and accessible manner.","metadata":{"loc":{"lines":{"from":4035,"to":4037}}}}],["1106",{"pageContent":"Also, we have created a Decentralised Autonomous Organisation (DAO) that verifies renewable energy certificates (RECs). This is an important progress in the field of sustainable development because it allows for the creation of a decentralised, transparent, and trustworthy system for verifying RECs. This system ensures that RECs are accurately accounted for, making it easier for companies and governments to support renewable energy projects and has significantly reduced the risk of fraud and increased confidence in the RECs market.\n\nIn addition, we also developed a ‘Calculator’ for tracking carbon emissions. This system allows companies and individuals to track their carbon emissions, providing them with the information they need to reduce their carbon footprint. By providing this service, the CarboEx team is helping companies to take meaningful steps towards reducing their impact on the environment.","metadata":{"loc":{"lines":{"from":4039,"to":4041}}}}],["1107",{"pageContent":"Finally, we developed a mobile application that improves accessibility to our platform. This app enables users to easily access their carbon credit trading account, track their carbon emissions, trade carbon credits, and verify their RECs from their mobile phones. The app also provides users with real-time data on the carbon credit market, making it easier for them to make informed decisions about buying and selling carbon credits.\n\nWhat makes us unique:\n\ncarboex (1)\ncarboex (1)\nWhat we learned:\n\nWe have learned a great deal about the policies, rules, and regulations surrounding carbon credit trading. We have gained a comprehensive understanding of the verification process, which involves ensuring that carbon credits are real, measurable, and permanent. We have also familiarised ourselves with the market mechanisms that drive carbon credit trading, including the various certification standards and protocols that exist.","metadata":{"loc":{"lines":{"from":4043,"to":4051}}}}],["1108",{"pageContent":"Also, working on this project has helped us explore the potential of blockchain technology for carbon credit trading, recognizing its potential to enhance transparency, traceability, and accountability in the carbon credit market. We have identified blockchain as a promising tool for verifying the authenticity and integrity of carbon credits, thereby promoting greater trust and confidence among market participants.\n\nFinally, by measuring our carbon footprint, we have become more aware of our own environmental impact and the need to reduce it. We have realised that every individual and organisation has a role to play in mitigating climate change and that carbon credit trading can be an effective means of doing so.\n\nOverall, our understanding of carbon credit trading has deepened, and we are better equipped to navigate the complexities of this rapidly evolving field.\n\n\nLanding Page\nLanding Page\nDashboard\nDashboard\nValidate REC\nValidate REC\nOur Team:","metadata":{"loc":{"lines":{"from":4053,"to":4066}}}}],["1109",{"pageContent":"Landing Page\nLanding Page\nDashboard\nDashboard\nValidate REC\nValidate REC\nOur Team:\n\nim_31: A Mobile Developer that is passionate about designing mobile applications that provide seamless integration and an exceptional user experience. He is not just passionate about designing seamless and user-friendly applications, but also enjoys volunteering at local community events. He understands the importance of staying up-to-date with the latest mobile development technologies to ensure that the project is delivered to the highest standard.\n\nVictorious: A skilled Front-end developer with a flair for developing visually appealing and intuitive user interfaces whose values are centred on creating functional and user-friendly websites that meet the needs of the end-users. His eye for visually appealing interfaces also comes from his interest in photography. With his extensive knowledge of web design, he plays a crucial role in the success of the platform.","metadata":{"loc":{"lines":{"from":4066,"to":4076}}}}],["1110",{"pageContent":"GodFather097: A Mobile Developer and an avid reader who enjoys science fiction novels. He shares a similar passion for designing and developing mobile applications that meet the project’s specification. His expertise in mobile app development and willingness to work collaboratively with other team members ensures that the project is delivered successfully.\n\nPeterparker: A Front-end developer who is passionate about web development technologies and the role they play in creating successful websites. He enjoys hiking and exploring nature in his free time.\n\nJack212: A Blockchain Developer who is also a sports enthusiast. He is passionate about developing secure and efficient blockchain infrastructure for the project. His premium expertise in blockchain technologies ensures that the platform is secure and meets the project’s requirements.","metadata":{"loc":{"lines":{"from":4078,"to":4082}}}}],["1111",{"pageContent":"Pv_189: A Blockchain Developer who shares Jack212’s passion for developing secure blockchain infrastructure. She is an avid traveller who loves to explore new cultures and learn about sustainable practices. Her collaborative approach and passion for secure blockchain infrastructure ensure that the platform meets the project’s requirements.\n\n\nForGreen - Donation events as a service, to create the most easy, transparent, fun NFT charity auction, to help organizations raise additional support for a green world!\nTRON Hackathon\nHackathon Season 4\neco-friendly\nApr 16\n ​Back\nMay 30\n\nbahauddin","metadata":{"loc":{"lines":{"from":4084,"to":4095}}}}],["1112",{"pageContent":"bahauddin\n\n2\nApr 16\nProject Name: ForGreen\nProject Track: Eco-Friendly\nTeam Name: ForGreen\nTeam Member(s):2 @Steve20 @bahauddin\nDorahacks Project Link: https://dorahacks.io/buidl/5308 6\nProject Goal: Donation events as a service, to create the most easy, transparent, fun NFT charity auction, to help organizations raise additional support for a green world!\nProject Info: https://bit.ly/3L2vGCu 7\nProject Website: https://forgreen-tron-s4.vercel.app/ 13\nProject Test Instructions: https://vimeo.com/818005565\nProject Details:\nVision\nSupport charities to raise additional support that create a better world for our planet\n\nWhat it does Please see the presentation: ForGreen.pptx - Google Slides 7\n\nWhat’s next for ForGreen Raise ±200k USD to make the product ready for the first pilots in Q3 2023. This will be done by applying for the SBIR-STTR (America’s Seed Fund), TEDCO (Leading Innovation to Market), GovCon Incubator and America’s SBDC Maryland.","metadata":{"loc":{"lines":{"from":4095,"to":4114}}}}],["1113",{"pageContent":"KPIs for the next five years. Social media: - By the end of 2024, we have more then 20k followers on Instagram - By the end of 2024, we have more then 10k discord users\n\nFunding and prizes: - In the year 2023 we have raised at least 200k USD and 100k USD in prizes - By 2025 we have raised at least 2 million USD and 200k USD in prizes\n\nICO ForGreen - Q3 2025, 25 million tokens (of the 1 billion total supply) of 0,50 USD are sold in private sales - Q4 2025, 100 million tokens (of the 1 billion total supply) of 0,50 USD are sold in public sales Employees\n\nEmployees: - By the end of 2023, we will have 15 employees of which at least 40% is women and 30% BAME - By the end of 2026, we will have over 30 employees of which at least 50% is women and 40% BAME Transactions\n\nUsers and events: - By the end of 2026, more than 5000 organizations are using ForGreen, over 10.000 events are created and more then 200 million USD is sent on ForGreen.","metadata":{"loc":{"lines":{"from":4116,"to":4124}}}}],["1114",{"pageContent":"Users and events: - By the end of 2026, more than 5000 organizations are using ForGreen, over 10.000 events are created and more then 200 million USD is sent on ForGreen.\n\nRevenue In the year 2026: - ForGeeen will have over 20 million USD in revenue, of which 10 million is from transaction fees and 10 million from marketing\n\nBlockForest: TRON’s Carbon Credit Explorer & Marketplace\nTRON Hackathon\nHackathon Season 4\neco-friendly\nApr 11\nMay 31\n\ntanzhixuan\n\n4\nApr 11\nProject Name: BlockForest - TRON’s Carbon Credit Explorer & Marketplace\nProject Track: Eco-Friendly\nTeam Name: BlockForest\nTeam Member(s): Tan Zhi Xuan (Malaysia) @tanzhixuan - Solo Hacker\nDorahacks Project Link: BlockForest: TRON’s Carbon Credit Explorer & Marketplace | Buidls | DoraHacks 8\n\nThe Goal: Leveraging transactions on the TRON network and utilizing their power to contribute to a greener earth :earth_asia:","metadata":{"loc":{"lines":{"from":4124,"to":4145}}}}],["1115",{"pageContent":"The Goal: Leveraging transactions on the TRON network and utilizing their power to contribute to a greener earth :earth_asia:\n\nProject Website: BlockForest Application 24\nGitHub Repo: BlockForest GitHub Repo 4\nDemo Video: BlockForest Demo on Youtube 7\n\nProject Test Instructions: Visit the BlockForest application and connect your TronLink wallet on Shasta Testnet. Make some transactions on Shasta Testnet. Look for your wallet address on BlockForest Explorer. Now, you can become a “planter” on BlockForest too, and start contributing carbon credits to the tree block chain!\n\n\nProject Details :point_down:\n\nVision | TL;DR","metadata":{"loc":{"lines":{"from":4145,"to":4156}}}}],["1116",{"pageContent":"Project Details :point_down:\n\nVision | TL;DR\n\n“BlockForest - the first carbon credit explorer and marketplace on the TRON network”. Keeping track of all network transaction records and offering users a personalized profile to manage their carbon credits in a one-stop solution. The platform's specially designed tree block chain mechanism facilitates the planting of trees on Earth by accumulating carbon credits on BlockForest. A built-in carbon credit marketplace on each individual profile streamlines the process of carbon credit purchasing.\nInspiration | Why BlockForest?","metadata":{"loc":{"lines":{"from":4156,"to":4161}}}}],["1117",{"pageContent":"By leveraging transactions on the TRON network and utilizing their power to contribute to a greener earth, BlockForest has found inspiration. Every day, millions of transactions are performed on TRON, making it a great opportunity to aggregate these transactions and use them to create a positive impact on the environment. In accordance with this concept, BlockForest has been developed to collect all transaction records on the TRON network and allocate carbon credit quotas to TRON users. Each transaction made by a user on TRON earns them one carbon credit quota, which can then be used to purchase a carbon credit associated with the transaction and offset its environmental impact. This approach has encouraged more TRON users to buy carbon credits for their transactions, creating a positive influence on the TRON ecosystem.\nThe Green Concept Behind | How BlockForest works?","metadata":{"loc":{"lines":{"from":4163,"to":4164}}}}],["1118",{"pageContent":"BlockForest’s unique tree block chain mechanism is at the core of its green concept. Each tree block is designed to accumulate carbon credits contributed by users of the TRON network. Once a tree block has collected enough carbon credits, the funds are automatically transferred to the BlockForest fund pool, enabling the team to plant a real-life tree. At the same time, a new tree block is opened and added to the chain to continue the cycle. As more users purchase carbon credits for their transactions on TRON, this positive infinite loop continues, resulting in an increasing number of trees being planted on Earth. Ultimately, this loop contributes to building a more sustainable planet and transforming TRON into a greener network.","metadata":{"loc":{"lines":{"from":4166,"to":4166}}}}],["1119",{"pageContent":"BlockForest is currently collaborating with Exabytes (Southeast Asia’s Leading Web Hosting Company) to carry out tree planting activities in the Southeast Asia region. As I’m a final year student in Malaysia, I worked in Exabytes for a year. At that time, I had introduced a tree-planting campaign to my product manager and being the leader of this collaboration since then. BlockForest also utilizes tree planting as a form of carbon credits, hence, I had discussed this with Exabytes and they are happy to help with all the trees required to plant from BlockForest and also help us with the tree tracking. This is a campaign I started with Exabytes: Let’s Plant A Tree | Join forces with us in Saving Our Earth (exabytes.my)","metadata":{"loc":{"lines":{"from":4167,"to":4167}}}}],["1120",{"pageContent":"The BlockForest concept involves breaking down the cost of planting a tree into smaller pieces of carbon credits, which encourages more users on the TRON network to contribute to a greener planet with minimal effort and cost.\n\nAn explorer built on TRON, but for the “Green.”","metadata":{"loc":{"lines":{"from":4169,"to":4171}}}}],["1121",{"pageContent":"An explorer built on TRON, but for the “Green.”\n\nBlockForest has a purpose-driven explorer built on the TRON network with a mission to create a more sustainable ecosystem. It achieves this goal by aggregating all transactions that occur on the network and meticulously tracking the carbon credit status for each one. Users can effortlessly search their account address or a single transaction through the explorer and access their carbon credit quotas as tracked by BlockForest. In addition, the explorer provides a comprehensive overview of planter status, representing users on the platform, tree block status, and current carbon credit status. This provides users with a holistic view of their environmental impact and enables them to make more informed decisions.\nOne-stop Carbon Credit Management for Each Planter","metadata":{"loc":{"lines":{"from":4171,"to":4174}}}}],["1122",{"pageContent":"BlockForest offers personalized profiles to every user on the TRON network. By simply accessing their profile on BlockForest, users can check their transaction history and the carbon credit quota assigned to them. By connecting their TronLink wallet to BlockForest, users can easily purchase carbon credits for their transactions with just a few clicks. The transactions are automatically recorded in the BlockForest database, and the funds are collected in the tree block at that moment. This makes it easy for users to contribute to tree plantations and track their carbon credit purchasing status. As a result, BlockForest is a comprehensive one-stop solution for carbon credit management, as it integrates the carbon credit marketplace directly into each user’s profile.\nBuilt-In Tree Metadata Tracker","metadata":{"loc":{"lines":{"from":4176,"to":4177}}}}],["1123",{"pageContent":"Once a tree block has collected enough carbon credits and has closed, the funds are automatically transferred to the BlockForest Fund Pool. The BlockForest team will then use the funds to plant a real-life tree for that specific tree block. After the tree has been planted, the BlockForest team uploads the metadata, including the tree’s ID, location, species, partner, photos, and more, to inform users about the tree they contributed to. The tracker allows users to easily access the metadata of their trees, creating a sense of satisfaction and pride and helping users visualize the impact of their contributions.\n\nThe Key Features Overview | How powerful is BlockForest on Milestone One? :point_down:\n\nThe BlockForest fund pool leverages a tree blockchain mechanism specially designed to collect carbon credits and streamline the automated process of tree plantation.\n\nAn aggregator within the TRON network records transactions and monitors the carbon credit status of all users on TRON.","metadata":{"loc":{"lines":{"from":4179,"to":4185}}}}],["1124",{"pageContent":"An aggregator within the TRON network records transactions and monitors the carbon credit status of all users on TRON.\n\nThe carbon credit marketplace is integrated directly into each planter’s (user’s) personalized profile, making it easy for everyone to manage their carbon credits.\n\nA tree planting certificate is issued for every tree block in the chain and recorded in the planter’s contribution profile. Metadata of the planted trees will also be recorded in BlockForest.\n\nBlockForest had deployed on Shasta Testnet.\n\n\nWhat’s Next | Plan on Milestone Two :point_down:\n\nSoul-bounded NFTs are generated for each tree block, and contributors can mint them to display on their BlockForest profile, serving as an achievement, motivation, and appreciation for their eco-friendly actions.\n\nMore carbon credit purchasing plans for planters will be introduced, along with gamification to make it more engaging and less monotonous.","metadata":{"loc":{"lines":{"from":4185,"to":4198}}}}],["1125",{"pageContent":"More carbon credit purchasing plans for planters will be introduced, along with gamification to make it more engaging and less monotonous.\n\nThe “Friend of Green” function will be added, allowing users to help others on TRON purchase carbon credits for their transactions. This will encourage more users to embark on their tree-planting journey.\n\nBlockForest will be deployed on TRON Mainnet.\n\n\n:tada: ANNOUNCEMNT: BlockForest is now on Mainnet","metadata":{"loc":{"lines":{"from":4198,"to":4205}}}}],["1126",{"pageContent":"BlockForest will be deployed on TRON Mainnet.\n\n\n:tada: ANNOUNCEMNT: BlockForest is now on Mainnet\n\nI am grateful for the support of the TRON community members, which has been instrumental in the success of BlockForest. Winning the eco-friendly track has provided me with added motivation to further improve this project. I am thrilled to announce that BlockForest is now live on the TRON mainnet. All TRON users can now easily purchase carbon credits for their transactions or activities on the mainnet. To get started, simply switch to the mainnet, connect your wallet, and you’ll be ready to contribute your first carbon credit and plant your first tree on planet Earth through BlockForest. Let’s acknowledge the immense power of the TRON network in constructing a better world for everyone.\n\nmainnet banner\nmainnet banner","metadata":{"loc":{"lines":{"from":4205,"to":4213}}}}],["1127",{"pageContent":"TRON Hackathon Season 5\nJuly 6 - Nov 30\n500,000 in USDD prize pool\nsubmission period end\n\nRegister now\n\n\n\nBENEFITS OF JOINING\nOpportunity to get funding from TDV and Huobi Ventures\n\nAccess to industry partner network\n\nVisibility among leading vc partners\n\nWin from a 500k USDD prize pool\n\nTracks\nGlobal hacker community platform\n\nArtistry track\nArtistry\nStep into a dynamic realm where entertainment converges with blockchain technology. Delve into the future of gaming, crafting groundbreaking game ideas that redefine the industry. Simultaneously, embrace the creator economy and the limitless possibilities of NFT applications.\n\nAI track\nAI\nImmerse yourself in the realm where artificial intelligence and blockchain technology seamlessly intersect, unleashing a new wave of innovation.\n\nWeb3 track\nWeb3\nThe future of the Web is in your hands. The judges are looking to developers for a contribution that will help transition this new technology and bring it to fruition.","metadata":{"loc":{"lines":{"from":1,"to":32}}}}],["1128",{"pageContent":"Web3 track\nWeb3\nThe future of the Web is in your hands. The judges are looking to developers for a contribution that will help transition this new technology and bring it to fruition.\n\nDeFi track\nDeFi\nDeFi continues to be a crucial movement for the crypto space as it enables financial services to operate in an open, accessible, and transparent digital form. Looking for the next innovative DeFi solution that could provide accessible financial services to billions of people.\n\nBuilder track\nBuilder\nA new track for returning projects that continued development on TRON/BTTC and create significant updates for their project.\n\nLet’s BUIDL the future of web3 together\nWelcome to HackaTRON, where pioneers gather to redefine the digital landscape. Join us on a journey unlocking the power of blockchain. Explore Gaming, AI, DeFI, and more. Together, we BUIDL the future of Web3.","metadata":{"loc":{"lines":{"from":32,"to":45}}}}],["1129",{"pageContent":"Register now\nHighlights\nWinning projects will have the opportunity to obtain capital funding from blockchain focused venture firms, TRON DAO Ventures and Huobi Ventures.","metadata":{"loc":{"lines":{"from":48,"to":50}}}}],["1130",{"pageContent":"JUSTLEND DOCS\n\nWhat is JustLend?\n DeFi Support\n3 years ago Updated\nNot yet followed by anyone\nJustLend is a TRON-powered coin market protocol aimed at establishing fund pools whose interest rates are determined by an algorithm based on the supply and demand of TRON assets. There are two roles within the protocol, namely the supplyer and borrower. Both of them can directly interact with the protocol to earn or pay the floating interest rate.\n\nOn JustLend, each coin market corresponds to a unique TRON asset such as TRX, TRC20 stablecoin (e.g. USDT) or other TRC20-based tokens, and entails an open and transparent ledger that records all transactions and past interest rates.","metadata":{"loc":{"lines":{"from":1,"to":9}}}}],["1131",{"pageContent":"Supplyer\nOn peer-to-peer platforms where borrowers are matched with lenders, a user's asset is directly lent to another. By contrast, JustLend protocol pools all users' supplys, which drives up liquidity and strikes a better monetary balance. Supplyer can withdraw their assets anytime without having to wait for the loan to expire, allowing JustLend a much higher liquidity than their peer-to-peer counterparts.\n\nAsset supplied is denoted as jToken (a TRC-20 token). Token holders can acquire corresponding jToken on JustLend and follow relevant rules to obtain rewards (interest).","metadata":{"loc":{"lines":{"from":11,"to":14}}}}],["1132",{"pageContent":"Asset supplied is denoted as jToken (a TRC-20 token). Token holders can acquire corresponding jToken on JustLend and follow relevant rules to obtain rewards (interest).\n\nBorrowing\nIf users (borrowers) wish to borrow an asset on JustLend, they need to first acquire jTokens as collateral with their underlying asset, and then borrow any available asset on the platform. Unlike peer-to-peer protocols, JustLend only asks borrowers to specify the borrowing asset with no other requirements such as the expiry date. Borrowing is executed real-time, and its interest rate will be automatically adjusted based on the market's supply and demand. Here's an example: the interest rates for borrowing TRX and TRC20-USDT may be 2% and 5% respectively. Different assets have varying interest rates, which are automatically calculated according to the market's supply and demand.\n\nExplore Apps\n\nSupply & Borrow\n19 decentralized token markets are supported\n\nStaked TRX\nStake TRX to enjoy higher yields","metadata":{"loc":{"lines":{"from":14,"to":25}}}}],["1133",{"pageContent":"Explore Apps\n\nSupply & Borrow\n19 decentralized token markets are supported\n\nStaked TRX\nStake TRX to enjoy higher yields\n\nEnergy Rental\nTransaction costs on TRON are greatly reduced\n\nStaked USDT\nFirst RWA platform on TRON\nHome\nMarkets\nDAO\nDocs\nLaunch App\n\n\nJustLend and Borrow in the Decentralized Platform\nJustLend DAO is TRON's decentralized financial platform where users can earn yields through supplied assets, borrow digital assets against collateral, participate in TRX staking, and rent Energy.\n\nMarket Size\n$ 4,927,514,585\n\nSupply & Borrow\n19 decentralized token markets are supported\n\nStaked TRX\nStake TRX to enjoy higher yields\n\nEnergy Rental\nTransaction costs on TRON are greatly reduced\nMarkets\tSupply APY\t\nBorrow APY\n\nTRX\n3.08 %\n8.40 %\n\nUSDD\n5.12 %\n2.57 %\n\nUSDT\n0.47 %\n1.77 %\n\nBTC\n0.02 %\n2.00 %\n\nETH\n0.01 %\n2.27 %\n\nBTT\n14.57 %\n11.18 %\n\nSUN\n12.65 %\n9.83 %","metadata":{"loc":{"lines":{"from":25,"to":88}}}}],["1134",{"pageContent":"TRX\n3.08 %\n8.40 %\n\nUSDD\n5.12 %\n2.57 %\n\nUSDT\n0.47 %\n1.77 %\n\nBTC\n0.02 %\n2.00 %\n\nETH\n0.01 %\n2.27 %\n\nBTT\n14.57 %\n11.18 %\n\nSUN\n12.65 %\n9.83 %\n\nSupply & Borrow\nSupply and borrow assets anytime to earn yields\nTotal Supply\n$4.80B+\nTotal Borrow\n$88.52M+\nMining Rewards/Day\n$45.00K+\nView More Markets\n4.02%Trx Liquid Staking Image\n\nStaked TRX\nYou can get the receipt token sTRX by staking TRX and earn double yields from voting and Energy rental. Compared to participating in Stake 2.0, sTRX can bring you higher returns and can be used in the DeFi applications such as in DEXs. This token removes the liquidity constraints caused by the unstaking period in Stake 2.0.\nStake TRX\nLearn More\nEnergy Lending Image\n\nEnergy Rental\nA platform for flexible and low-price Energy rental. Energy obtained here is much cheaper than that obtained from burning or staking TRX, reducing the cost of most transactions to below 1 TRX.\nTry Energy Rental\nLearn More\n4.21%stUSDT Lending Image","metadata":{"loc":{"lines":{"from":88,"to":137}}}}],["1135",{"pageContent":"Staked USDT\nAs the first Real-World Assets (RWA) platform on TRON, stUSDT provides users with fairer access to RWA investment through its decentralized smart contract. It also develops a decentralized RWA investment and management mechanism to introduce real-world assets into the TRON ecosystem.\nStake USDT\nDecentralized\nDeployed on BTFS and IPFS and governed by the community through voting, JustLend DAO provides open-source code and uses WINkLink for token prices. All these efforts make JustLend DAO every bit as decentralized as it can be.\n DApp on BTFS\nWINkLink\nGitHub\nDocs\nWhitepaper\nSafe\nJustLend DAO is built with a comprehensive risk governance mechanism and a robust anti-fraud price strategy. All contract code of JustLend DAO undergoes stringent audits. Additionally, a bounty program is set up to encourage all participants to find and address vulnerabilities in the system to enhance security and protect users' assets.\nBug Bounty\nAudit Report\nCommunity First","metadata":{"loc":{"lines":{"from":139,"to":153}}}}],["1136",{"pageContent":"Bug Bounty\nAudit Report\nCommunity First\nJustLend DAO is a decentralized and self-governed system led by the community. All \nJST","metadata":{"loc":{"lines":{"from":153,"to":157}}}}],["1137",{"pageContent":"holders can contribute to the proposals and participate in the platform governance. About JST\nAbout JustLend DAO\nBuild Community Together\nBoth users and developers are welcome to offer suggestions for the development of JustLend DAO. Community developers will contribute code to turn well-acknowledged suggestions into proposals, which JST holders vote on for implementation.\nForumVoting Governance\nRisk Governance\nJustLend DAO's risk governance is overseen by the community, with the goal of mitigating protocol risks and defending against any potential external attacks. It safeguards supply and borrow markets as well as user assets by upgrading protocols and monitoring markets.\nTwitterTelegram\nScalable Ecosystem\nA growing number of DApps are collaborating with JustLend DAO to create a multi-chain DeFi ecosystem\nBTFS Storage3","metadata":{"loc":{"lines":{"from":159,"to":169}}}}],["1138",{"pageContent":"TwitterTelegram\nScalable Ecosystem\nA growing number of DApps are collaborating with JustLend DAO to create a multi-chain DeFi ecosystem\nBTFS Storage3\nStorage3 is a next-generation application for storage based on the decentralized storage protocol BTFS. It brings users a fresh Web3 experience by giving them more convenient access to BTFS for the deployment of JustLend DApps.\nDecentralized USD\nJustLend DAO maintains USDD's over-collateralization while supporting the supply and borrow services of all stablecoins on PSM.\nSUN Ecosystem\nAll tokens supported by JustLend DAO can be staked for liquidity mining and exchanged for other tokens on the SUN platform, offering greater rewards.\nBitTorrent Chain\nJustLend DAO supports the supply and borrow of all tokens in the TRON ecosystem. With BTTC Bridge, a cross-chain solution, tokens can be transferred across Ethereum, TRON, BSC, and BTTC.\nJustStable","metadata":{"loc":{"lines":{"from":169,"to":180}}}}],["1139",{"pageContent":"JustLend DAO supports the supply and borrow of all tokens in the TRON ecosystem. With BTTC Bridge, a cross-chain solution, tokens can be transferred across Ethereum, TRON, BSC, and BTTC.\nJustStable\nLike JustLend DAO, JustStable is also a core project in the JUST ecology and uses JST as the governance token. The over-collateralization of USDJ, which is the platform token of JustStable, is now supported on JustLend DAO.\nWINkLink\nAs a decentralized price feed oracle, WINkLink provides prices for JustLend DAO's token markets.\nTronLink\nAs the most comprehensive TRON wallet, TronLink offers mobile apps and browser extensions for premium user experience.\nTronScan\nTronScan is the go-to explorer for users to find information on TRON-based tokens and projects, as well as related transactions.\nTRX Staking\nTRX Stake 2.0 is an important upgrade in the TRON ecosystem and the foundation for sTRX and Energy rental services.\nStaked USDT","metadata":{"loc":{"lines":{"from":180,"to":191}}}}],["1140",{"pageContent":"TRX Staking\nTRX Stake 2.0 is an important upgrade in the TRON ecosystem and the foundation for sTRX and Energy rental services.\nStaked USDT\nThe first RWA platform on TRON. By holding stUSDT, users can get rewards from investment in real-world assets.\nContinue to empower more outstanding projects\nStay tuned for the upcoming multi-chain service!","metadata":{"loc":{"lines":{"from":191,"to":196}}}}],["1141",{"pageContent":"Explore Apps\n\nSupply & Borrow\n19 decentralized token markets are supported\n\nStaked TRX\nStake TRX to enjoy higher yields\n\nEnergy Rental\nTransaction costs on TRON are greatly reduced\n\nStaked USDT\nFirst RWA platform on TRON\nHome\nMarkets\nDAO\nDocs\nLaunch App\n\nJST\nin JustLend DAO\nJST is a TRC-20 token issued on TRON and is used in multiple DApps and ecosystems.\nSince JST is the sole governance token in the JUST ecosystem, JST holders can shape JUST's development through proposals and votes. And JustLend DAO, as the core project in the JUST ecosystem, also depends on JST to carry out its decentralized governance.\nCirculating Market Cap\n$206,526,145\n$206,526,145\nHolders\n440,800\n440,800\nJustLend APY\n12.95%\n12.95%\nSupply Now\nRoles in JustLend DAO\nJST is not only a lending market in JustLend DAO, but also the sole governance token of the platform.","metadata":{"loc":{"lines":{"from":200,"to":234}}}}],["1142",{"pageContent":"Initiate Proposals\nYou can share your ideas on the Forum, which can be turned into proposals with the help of JST holders.\nJoin Discussions\nVote on Proposals\nJST holders can participate in JustLend DAO governance by voting on proposals.\nVote Now\nJUST's Governance Mechanism Ensures Sustainability of JustLend DAO\nJST is the sole governance token in the JUST ecosystem. All governance activities are recorded on the chain and cannot be tampered with. This ensures that JustLend DAO can always operate in a fair, transparent, and decentralized manner.\nHow to Get JST\nGet JST from DEXs\nSunSwap\n$16,045,934\nJST Liquidity\nAll tokens supported by JustLend DAO can be staked for liquidity mining or exchanged on the SUN platform, generating greater value and rewards.\nSunSwap V1\nSunSwap V2\nGet JST from CEXs\nHuobi\nHuobi\nPoloniex\nPoloniex\nBinance\nBinance\nBithumb\nBithumb\nKucoin\nKucoin\nGate.io\nGate.io\nOKX\nOKX\nBitfinex\nBitfinex\nBybit\nBybit\nMEXC\nMEXC\nBitMart\nBitMart\nCoinEX\nCoinEX\nMore Use Cases of JST","metadata":{"loc":{"lines":{"from":236,"to":277}}}}],["1143",{"pageContent":"Huobi\nHuobi\nPoloniex\nPoloniex\nBinance\nBinance\nBithumb\nBithumb\nKucoin\nKucoin\nGate.io\nGate.io\nOKX\nOKX\nBitfinex\nBitfinex\nBybit\nBybit\nMEXC\nMEXC\nBitMart\nBitMart\nCoinEX\nCoinEX\nMore Use Cases of JST\nJST is being applied to a growing number of scenarios beyond JustLend DAO.\nJustStableJustStable\nJST can be used to pay for the CDP stability fee or participate in the platform governance.\nSUN Liquidity MiningSUN Liquidity Mining\nTotal value locked (TVL) of JST on the SUN platform is $27.2M.\nBTTC BridgeBTTC Bridge\nJST can be transferred across different chains via BTTC Bridge.\nLegal Tender of DominicaLegal Tender of Dominica\nJST is granted the statutory status as an authorized digital currency in the Commonwealth of Dominica.","metadata":{"loc":{"lines":{"from":277,"to":310}}}}],["1144",{"pageContent":"JUSTLEND DAO INTRO\nJustLend DAO protocol is a TRON-powered money market protocol aimed at establishing fund pools whose interest rates are determined by an algorithm based on the supply and demand of TRON assets. There are two roles within the protocol, namely suppliers and borrowers. Both of them interact directly with the protocol to earn or pay a floating interest rate.\nOn JustLend DAO, each money market corresponds to a unique TRON asset such as TRX, TRC20 stablecoin (e.g. USDT), or other TRC20-based tokens, and entails an open and transparent ledger that records all transactions and historical interest rates.\nSupplier","metadata":{"loc":{"lines":{"from":313,"to":316}}}}],["1145",{"pageContent":"Supplier\nOn peer-to-peer platforms where borrowers are matched with lenders, a user's asset is directly lent to another. By contrast, JustLend DAO protocol pools all users' supplies, which drives up liquidity and strikes a better monetary balance. Suppliers can withdraw their assets anytime without having to wait for the loan to expire, allowing JustLend DAO much higher liquidity than their peer-to-peer counterparts.\nAsset supplied is denoted as jToken (a TRC-20 token). Token holders can acquire corresponding jToken on JustLend DAO and follow relevant rules to obtain rewards (interest).\nBorrowing","metadata":{"loc":{"lines":{"from":316,"to":319}}}}],["1146",{"pageContent":"Asset supplied is denoted as jToken (a TRC-20 token). Token holders can acquire corresponding jToken on JustLend DAO and follow relevant rules to obtain rewards (interest).\nBorrowing\nIf users (borrowers) wish to borrow an asset on JustLend DAO, they need to first acquire jTokens as collateral with their underlying asset, and then borrow any available asset on the platform. Unlike peer-to-peer protocols, JustLend DAO only asks borrowers to specify the borrowing asset with no other requirements such as the expiry date. Borrowing is executed in real-time, and its interest rate will be automatically adjusted based on the market's supply and demand. For example, the interest rates for borrowing TRX and TRC20-USDT may be 2% and 5% respectively. Different assets have varying interest rates, which are automatically calculated according to market supply and demand.\nCore Architecture of JustLend DAO\nCore Logic of JustLend DAO","metadata":{"loc":{"lines":{"from":319,"to":323}}}}],["1147",{"pageContent":"Core Architecture of JustLend DAO\nCore Logic of JustLend DAO\nSuppliers/borrowers deposit assets to the money markets of JustLend DAO smart contracts, and the assets supplied are the underlying assets.\nSmart contracts distribute jToken that corresponds to underlying assets to users' accounts at the exchange rate.\nSuppliers who supply assets to JustLend DAO money markets can enjoy interest earnings on their loans.\nBorrowers who over-collateralize an asset can borrow from the corresponding market on JustLend DAO. Unlike P2P lending, borrowers do not have to negotiate with lenders: orders will be automatically matched by JustLend DAO smart contracts as long as the token market has sufficient liquidity.\nBorrowing interest rates are determined by JustLend DAO smart contracts in real-time based on market supply and demand. Within a block, borrowers of the same token share the same borrowing interest rate.\nBorrowing interest on JustLend DAO accrues based on the number of blocks.","metadata":{"loc":{"lines":{"from":323,"to":330}}}}],["1148",{"pageContent":"Borrowing interest on JustLend DAO accrues based on the number of blocks.\nSuppliers can redeem the underlying assets they have supplied at any time.\nBorrowers can repay their loans at any time.\nIf the value of a borrower's collateralized assets falls below the liquidation threshold, JustLend DAO smart contracts will trigger liquidation automatically.","metadata":{"loc":{"lines":{"from":330,"to":333}}}}],["1149",{"pageContent":"JUSTLEND DAO WHITEPAPER\nJustLend\nMoney Market Protocol\nV1.0\nDecember 2020\nAbstract\nThis document will introduce a decentralized protocol on the TRON network that aims to establish money markets based on interest rates determined by a supply-demand-based algorithm.\n​\n1 Introduction\nDistributed finance (or open finance) has evolved to be one of the key drivers of applications on the TRON network. The core principle of DeFi is to pioneer a censorship-free financial service ecosystem that is immune to centralized authority and accessible to all. Within the ecosystem, users are their own asset custodians, and are granted full asset control and ownership. They can freely access any decentralized market available.\nLending protocols and platforms offer varying incentives to market participants, for example:\nFor borrowers: sell short an asset or borrow the right of use\nFor lenders: earn interest on assets","metadata":{"loc":{"lines":{"from":335,"to":347}}}}],["1150",{"pageContent":"Lending protocols and platforms offer varying incentives to market participants, for example:\nFor borrowers: sell short an asset or borrow the right of use\nFor lenders: earn interest on assets\nCompared with traditional financial products, custodian-free decentralized protocols enjoy the following promising edges:\nTransparency & effective pricing based on market demand\nFast and convenient lending\nImmunity to censorship & immutability\nThis document will introduce JustLend, a TRON-based decentralized lending protocol that provides a distributed and secure market where users can receive loans and earn interest at a low trading cost.\n2 JustLend Protocol\n2.1 Overview","metadata":{"loc":{"lines":{"from":347,"to":356}}}}],["1151",{"pageContent":"2 JustLend Protocol\n2.1 Overview\nJustLend is a TRON-powered money market protocol aimed at establishing fund pools whose interest rates are determined by an algorithm based on the supply and demand of TRON assets. There are two roles within the protocol, namely suppliers and borrowers. Both of them interact directly with the protocol to earn or pay a floating interest rate.\nOn JustLend, each money market corresponds to a unique TRON asset such as TRX, TRC20 stablecoin (e.g. USDT) or other TRC20-based tokens, and entails an open and transparent ledger that records all transactions and historical interest rates.\n2.2 Supplying Assets","metadata":{"loc":{"lines":{"from":356,"to":360}}}}],["1152",{"pageContent":"2.2 Supplying Assets\nOn peer-to-peer platforms where borrowers are matched with lenders, a user's asset is directly lent to another. By contrast, JustLend protocol pools the supply of each user, which drives up liquidity and strikes a better monetary balance. Suppliers can withdraw their assets anytime without having to wait for a specific loan to expire, allowing JustLend a much higher liquidity than their peer-to-peer counterparts.\nAssets supplied to a market are denoted as jToken (a TRC-20 token balance). Token holders can acquire corresponding jToken by supplying and abide by relevant rules to earn interest.\n2.2.1 Primary Use Cases\nUsers can supply tokens on JustLend and earn interest at a low risk.\nAssets of DApps, institutions and exchanges can appreciate on JustLend.\n2.3 Borrowing Assets","metadata":{"loc":{"lines":{"from":360,"to":366}}}}],["1153",{"pageContent":"2.2.1 Primary Use Cases\nUsers can supply tokens on JustLend and earn interest at a low risk.\nAssets of DApps, institutions and exchanges can appreciate on JustLend.\n2.3 Borrowing Assets\nIf users (borrowers) wish to borrow an asset on JustLend, they need to first acquire jTokens as collateral through depositing tokens, and then borrow any available asset on the platform. Unlike peer-to-peer protocols, JustLend only asks borrowers to specify the borrowing asset with no other requirements such as the expiry date. Borrowing is executed real-time, and its interest rate will be automatically adjusted based on the market's supply and demand. Here's an example: the interest rates for borrowing TRX and TRC20-USDT might be 2% and 5% respectively. Different assets have varying interest rates, which are automatically calculated according to the market's supply and demand.\n2.3.1 Collateral Value","metadata":{"loc":{"lines":{"from":366,"to":371}}}}],["1154",{"pageContent":"2.3.1 Collateral Value\nEach market features a collateral factor ranging from 0 to 1, which represents the borrowing capacity for a certain amount of jToken (the collateral a borrower obtains by supplying the underlying asset).\nA lower collateral factor indicates an asset with lower liquidity, while a higher factor indicates higher liquidity. Borrowers are allowed to borrow up to, but not exceeding, their borrowing capacity so as to minimize the default risk for asset loaners.\n2.3.2 Risks & Liquidation\nIf the value of a borrower's borrowing outstanding exceeds the collateral factor that is deemed safe (their borrowing capacity), liquidation will be triggered automatically in JustLend smart contract to eliminate risks and ensure the over-repayment capacity for asset withdrawal and supply while safeguarding the depositors' assets.\n2.3.3 Primary Use Cases","metadata":{"loc":{"lines":{"from":371,"to":376}}}}],["1155",{"pageContent":"2.3.3 Primary Use Cases\nJustLend protocol allows us to hold new assets seamlessly without having to sell tokens or go to various exchanges. This opens users, developers and traders to various forms of trading, such as:\nUsers can pledge multiple TRC20 tokens in their possession in exchange for other TRC20 tokens.\nWe can short a certain token: borrow the token we wish to short from JustLend and sell on the exchange prior to its fall. This allows us to profit from the token's loss.\n2.4 Interest Rate Mechanics","metadata":{"loc":{"lines":{"from":376,"to":380}}}}],["1156",{"pageContent":"While the interest of most traditional financial lending accrues by day, interest on JustLend is calculated based on the time of block generation on TRON (around 3 seconds). The interest rate of traditional financial lending remains fixed for the entire term of a loan. On the contrary, interest rates in the JustLend protocol change in real time according to the variation in market supply and demand, and the borrowing/supplying interest rates may vary from block to block in different markets. The JustLend protocol uses an algorithm to calculate the supplying interest rate for each asset. When borrowers' demand for an crypto asset declines, the excessive tokens available for lending in the pool will bring about higher liquidity and a lower interest rate, thus encouraging borrowing; likewise, when the demand for borrowing an asset is high, the number of tokens available for lending drops, which will result in lower liquidity and a higher interest rate, thus attracting supplies.","metadata":{"loc":{"lines":{"from":381,"to":381}}}}],["1157",{"pageContent":"2.5 Features of JustLend Protocol\nFund supply: JustLend adopts the idea of money market fund pools, with different underlying assets corresponding to their own markets.\nMatching: Orders are matched by smart contracts automatically. There is no need for suppliers and borrowers to negotiate interest rates, loan terms, etc.\nInterest accrual: Interest accrues as each block is generated on TRON (which takes around 3 seconds).\nLending: Lending is executed in real time. Suppliers can enjoy interest without any action as long as they hold jToken.\nRepayment: Borrow and repay as you go. Borrowing can be done as long as the collateral value * collateral factor > loan value + accumulated interest.\nSupplying/borrowing interest rate: The floating interest rate is automatically calculated by JustLend smart contracts based on market supply and demand.\nLiquidation: If the borrower's collateral value falls below the liquidation threshold, JustLend smart contracts will automatically trigger liquidation.","metadata":{"loc":{"lines":{"from":382,"to":389}}}}],["1158",{"pageContent":"Liquidation: If the borrower's collateral value falls below the liquidation threshold, JustLend smart contracts will automatically trigger liquidation.\n3 Architecture of JustLend Protocol\nJustLend money market is essentially a distributed ledger that allows users to supply or borrow assets as interest accrues.\n3.1 Core Architecture of JustLend\n3.2 Core Logic of JustLend\nSuppliers/borrowers deposit assets to the money markets of JustLend smart contracts, and the assets supplied are the underlying assets.\nSmart contracts distribute jToken that corresponds to underlying assets to users' accounts at the exchange rate.\nSuppliers who supply assets to JustLend money markets can enjoy interest earnings on their loans.","metadata":{"loc":{"lines":{"from":389,"to":396}}}}],["1159",{"pageContent":"Suppliers who supply assets to JustLend money markets can enjoy interest earnings on their loans.\nBorrowers who over-collateralize an asset can borrow from the corresponding market on JustLend. Unlike P2P lending, borrowers do not have to negotiate with lenders: orders will be automatically matched by JustLend smart contracts as long as the token market has sufficient liquidity.Borrowing interest rates are determined by JustLend smart contracts in real time based on market supply and demand. Within a block, borrowers of the same token share the same borrowing interest rate.\nBorrowing interest on JustLend accrues based on the number of blocks.\nSuppliers can redeem the underlying assets they have supplied at any time.\nBorrowers can repay their loans at any time.\nIf the value of a borrower's collateralized assets falls below the liquidation threshold, JustLend smart contracts will trigger liquidation automatically.\n3.3. Interest Rate Model","metadata":{"loc":{"lines":{"from":396,"to":402}}}}],["1160",{"pageContent":"If the value of a borrower's collateralized assets falls below the liquidation threshold, JustLend smart contracts will trigger liquidation automatically.\n3.3. Interest Rate Model\nThe interest rate model is the core element of JustLend. It involves concepts such as exchange rate, utilization rate, supplying interest rate, borrowing interest rate and collateral factor.\n3.3.1 Exchange Rate\nIn the JustLend protocol, each money market is a smart contract that implements the TRC-20 standard, and a user's balance is denoted as jToken, which can be minted by supplying assets to the market or redeemed. The exchange rate between jToken and a corresponding underlying asset will increase over time.\nWhere:\nrepresents the exchange rate at which jToken is converted to the corresponding asset.\nrepresents the amount of assets supplied by suppliers to smart contracts, but not yet loaned.\nrepresents the total reserve on the platform.\nrepresents the total circulation of jToken at the moment.","metadata":{"loc":{"lines":{"from":402,"to":411}}}}],["1161",{"pageContent":"represents the amount of assets supplied by suppliers to smart contracts, but not yet loaned.\nrepresents the total reserve on the platform.\nrepresents the total circulation of jToken at the moment.\nrepresents the amount of loaned assets at the moment.\n3.3.2 Utilization Rate\nUtilization rate measures the efficiency of a platform's uses of funds. The utilization rate U for a given market can be expressed as follows. The rate indicates how much money is loaned out from the entire pool. The higher the proportion of money loaned out, the higher the utilization rate.\n3.3.3 Reserve\nIn traditional finance, banks and P2P platforms set aside a risk reserve from the proceeds of each loan. JustLend sets aside a reserve from the proceeds of each loan based on the reserve factor.\n3.3.4 Borrowing Interest Rate","metadata":{"loc":{"lines":{"from":411,"to":419}}}}],["1162",{"pageContent":"3.3.4 Borrowing Interest Rate\nThe borrowing interest rate is determined by the utilization rate and the corresponding money market. Now, the borrowing interest rate is calculated according to two models, namely smoothing interest rate model and staged interest rate model. Smoothing interest rate model is as follows:\nInterest rate set by the staged interest rate model is as follows:\nWhen the utilization rate <= kink:\nWhen the utilization rate > kink:\nWhere = /.\n3.3.5 Supplying Interest Rate\nLike borrowing interest rate, supplying interest rate is also determined by utilization rate, etc.The supplying interest rate for any given money market is calculated in the formula below, where is the borrowing interest rate for money market a, is the utilization rate for money market a, and is the reserve factor.\n3.4 Liquidation","metadata":{"loc":{"lines":{"from":419,"to":427}}}}],["1163",{"pageContent":"3.4 Liquidation\nJustLend requires users to deposit a certain amount of assets as collateral when they are borrowing. The amount of borrowed asset is determined by the collateral factor, i.e. max loan = collateral value * collateral factor.As crypto assets are subject to great market volatility, collateral value changes all the time. Therefore, JustLend monitors the overall health of each borrowing account in real time and automatically liquidates accounts whose health value is lower than 1. Health value = value of the total collateral (converted and denoted in TRX) / value of the total borrowed asset (converted and denoted in TRX).\n3.5 Price Oracle","metadata":{"loc":{"lines":{"from":427,"to":429}}}}],["1164",{"pageContent":"3.5 Price Oracle\nPrices of a variety of underlying assets are required for the calculation of collateral value of borrowers, the value of their borrowed assets, etc.To begin with, JustLend uses JustLink, a decentralized price oracle, to access prices from JustSwap and other sources of prices, and pick the right ones. Solutions such as the \"smooth mechanism\" are adopted to help avoid risks and greater volatility of prices within a short period of time. Statistics from JustLink are available for JustLend and calls by other contracts. As time goes by, JustLend will expand and improve its price feeding mechanism, where everyone can provide price data for JustLend.\n3.6 Management & Auditing","metadata":{"loc":{"lines":{"from":429,"to":431}}}}],["1165",{"pageContent":"3.6 Management & Auditing\nComptroller manages and audits calls of JustLend smart contracts. Comptroller manages the risks of the JustLend protocol through the collateral factor, i.e. Comptroller is the risk management layer of the JustLend protocol. Each underlying asset has an independent collateral factor, which ranges between 0~100% according to its liquidity and market cap. The higher the liquidity and the market cap, the bigger the value is. An underlying asset cannot be used as collateral or used to pay for borrowed assets in liquidation when its collateral factor is zero. JustLend uses a collateral factor to determine the value of the collateral required and whether a user can be liquidated or not.\n3.7 Governance","metadata":{"loc":{"lines":{"from":431,"to":433}}}}],["1166",{"pageContent":"3.7 Governance\nGovernance of JustLend is implemented through voting for proposals. JST can be used for community governance of JustLend, and its holders may submit proposals on the JustLend protocol or vote for them.JustLend will begin with centralized control and over time transition into a fully community-led platform. The following rights in the protocol are controlled by the admin:\nThe ability to open/close/enable a money market\nThe ability to update the interest rate model for each market\nThe ability to update the oracle address\n4. Smart Contract of Money Market\nMoney markets in the JustLend protocol are built on the basis of smart contracts for money markets. Users can interact with the JustLend protocol via smart contracts. Here are some key functions of the smart contracts of money markets on JustLend:\n4.1 Mint","metadata":{"loc":{"lines":{"from":433,"to":440}}}}],["1167",{"pageContent":"4.1 Mint\nThis feature transfers underlying assets to the JustLend protocol, which accrues interest according to the current supplying interest rate of the asset. The amount of jToken users receive is the number of underlying tokens divided by the current exchange rate. The function is as follows:\njTRC20:\nfunction mint(uint mintAmount) returns (uint)\njTRX:\nfunction mint() payable\n4.2 Withdraw\nThis feature sends users' assets from the money market back to users and reduces users' supply equilibrium in the protocol. The function is as follows:\njTRC20/jTRX:\nfunction redeem(uint redeemTokens) returns (uint)\n4.3 Borrow\nThis feature sends assets from the money market to borrowers, and starts to accrue interest according to the borrowing interest rate of the borrowed asset. The function is as follows:\njTRC20/jTRX:\nfunction borrow(uint borrowAmount) returns (uint)\n4.4 Repay","metadata":{"loc":{"lines":{"from":440,"to":454}}}}],["1168",{"pageContent":"jTRC20/jTRX:\nfunction borrow(uint borrowAmount) returns (uint)\n4.4 Repay\nThis feature retrieves the borrowed asset and puts them back into the market, which reduces the balance of the borrower's asset. The function is as follows:\njTRC20/jTRX:\nfunction repayBorrow(uint repayAmount) returns (uint)\n4.5 Liquidate\nJustLend will automatically liquidate accounts whose health value is smaller than 1. The liquidator may payback all or part of the outstanding loan on behalf of the borrower. The function is as follows:\njTRC20:\nfunction liquidateBorrow(address borrower, uint amount, address collateral) returns (uint)\njTRX:\nfunction liquidateBorrow(address borrower, address jTokenCollateral) payable\n5. Summary","metadata":{"loc":{"lines":{"from":454,"to":466}}}}],["1169",{"pageContent":"jTRC20:\nfunction liquidateBorrow(address borrower, uint amount, address collateral) returns (uint)\njTRX:\nfunction liquidateBorrow(address borrower, address jTokenCollateral) payable\n5. Summary\nThis article provides an overview of the TRON-powered JustLend protocol, including the details of supplying, borrowing and the interest rate mechanics in the protocol. It also covers the seven features such as asset supplying and order matching, as well as the architecture of the JustLend protocol and smart contracts of money markets. Fully operated on the TRON network, JustLend provides a high-speed and lower-cost decentralized lending protocol accessible to all.","metadata":{"loc":{"lines":{"from":466,"to":471}}}}],["1170",{"pageContent":"JustLend DAO Governance\nBackground\nThe JustLend DAO introduces a formal path for the decentralization of the JustLend protocol and the autonomy of the community. JustLend DAO promotes consensus among all participants in the JustLend ecosystem through governance mechanisms and economic incentives. The functions of the protocol and the JST token are the core security elements of the JustLend protocol.\nGovernance mechanisms in decentralized protocols stem from the interplay of participation, incentives, self-regulation, and policy management within the community, all of which adapt to and coexist with the market. JustLend DAO manages on-chain through proposals so that the protocol can achieve self-operation, self-governance, and self-evolution according to pre-set rules through intelligent management and token economic incentives without third-party intervention, and then achieve maximum efficiency and value transfer.","metadata":{"loc":{"lines":{"from":473,"to":476}}}}],["1171",{"pageContent":"As an important incentive method in the governance process of JustLend DAO, JST digitizes and tokenizes various elements in the organization, so as to fully integrate monetary capital, human capital, and other element capital to better stimulate the efficiency of the organization.\nThe goal of the JST economy is to achieve the virtuous and long-term development of the entire JustLend DAO ecosystem, allowing stakeholders and investors to profit under a more secure agreement. JST holders are responsible for the protocol and ecosystem while contributing to the protocol with practical actions, usually in the form of technical integration, such as DeFi front-end integration, or in the form of financial investment, such as liquidity providers. These all contribute considerably to protocol execution, security, and functionality.","metadata":{"loc":{"lines":{"from":477,"to":478}}}}],["1172",{"pageContent":"The JustLend DAO provides for trust among stakeholders such as JST token holders, voting delegates, market managers, liquidity providers, and integrators, to name a few. Our liquidity-based governance creates economic incentives that keep the voting pool active, while the voting pool grows as new JustLend participants join.\nThe JustLend DAO was established to facilitate the development and long-term governance of the JustLend DAO protocol. The goal is to create a future-proof governance framework that relies on system incentives and multi-level governance to create an effective balance that stimulates long-term growth and continuous optimization of the protocol.\nGovernance Process","metadata":{"loc":{"lines":{"from":479,"to":481}}}}],["1173",{"pageContent":"Governance Process\nJustLend DAO governance is mainly composed of JST tokens, the governance module (GovernorAlpha), and Timelock. Together, these contracts allow the community to propose, vote, and implement changes through the governance functions of jToken or the Comptroller. Proposals can modify system parameters, add new markets, or add entirely new features to the protocol, etc.\nThe governance is first discussed in the . If there is no contentious, then it is conducted through voting. Any users who hold more than 200 million JST can initiate a proposal on the platform, and other users can participate in the vote. If and only if the number of votes in favor of the proposal exceeds the number of negative votes and meanwhile exceeds 600 million, the proposal can be passed and implemented two days later.","metadata":{"loc":{"lines":{"from":481,"to":483}}}}],["1174",{"pageContent":"JST tokens enable holders to collectively act as managers of the protocol, enabling them to vote and propose. The process of submitting a proposal and voting is as shown below (before entering the lock phase, you can cancel the created proposal at any time by proposal)\nJST holders call governance contracts to create proposals. After a proposal is successfully created, it will enter a 2-day review period. Voting rights are recorded and voting begins after the review period. \nJST holders get votes and choose to support or oppose the proposal according to the content. One JST one vote. The voting period is 3 days. \nAfter the voting is over (the voting deadline is reached), the governance contract will judge whether the proposal is passed or not based on the number of votes. If the vote is not passed, this proposal will end, if passed, go to step 4.","metadata":{"loc":{"lines":{"from":484,"to":487}}}}],["1175",{"pageContent":"If the proposal is passed, the proposal will enter a lock-up period of 48 hours. After the lock-up period ends, the proposal will be in a pending state, and the proposal will take effect immediately after the execution. \nTaken together, in general, a full proposal will take at least a week.","metadata":{"loc":{"lines":{"from":488,"to":489}}}}],["1176",{"pageContent":"How to redeem votes?\n1. Go to the voting list page and you can see JST in your wallet. Click on the \"Redeem Votes\" button.\n2. If it is your first time redeeming votes, you need to approve first. Click on the \"Give Approval\" button.\n3. Please click on the \"Accept\" button in the TronLink Request Signature pop-up window to confirm approval.\n4. After the approval is completed, you can enter an amount and redeem votes now. Click on the \"Redeem\" button.\n5. Please click on the \"Accept\" button in the TronLink Request Signature pop-up window to confirm redeeming.\n6. After you have confirmed, a message will notify you of the transaction being sent. You can go to the corresponding page to view your votes.","metadata":{"loc":{"lines":{"from":491,"to":497}}}}],["1177",{"pageContent":"How to vote?\n1. Select a project from the Voting for Governance list to vote for or against it.\n2. Enter the number of votes in the voting box and click on the \"Vote\" button.\n3. Click on the \"Accept\" button in the TronLink Request Signature pop-up window to confirm your votes.\n4. After confirmation, you will be notified that the transaction has been sent. You can go to the voting page to check the details.\n\nHow to withdraw JST?\n1. Go to the page of Voting for Governance, where you can see the number of votes. Click “Withdraw JST” to withdraw them.\n2. After clicking the Withdraw JST button, you can enter the amount and click on “Withdraw”.\n3. Please click on the \"Accept\" button in the TronLink Request Signature pop-up window to confirm the withdrawal.\n4. After confirmation, you will be notified that the transaction has been sent. You can go to the corresponding page to view your JST balance.","metadata":{"loc":{"lines":{"from":499,"to":509}}}}],["1178",{"pageContent":"Risk Overview\nDefi ecosystem is composed of many components, and the risk of a single component may affect the entire system, so we need to consider the risk composition of the Defi system. Currency is the core of the JustLend DAO protocol. This document will focus on the risk assessment of currency in the JustLend DAO protocol. The main risk factors are smart contracts, trading opponents and currency markets. This document aims to contribute to a higher standard of risk in DeFi.\nAdd An Asset\nUsers can deposit and lend digital currency in the JustLend DAO protocol, and depositors are compensated with interest. Each loan in the agreement has collateral as a guarantee. The borrower deposits the collateral to lend the loan. Generally, the collateral currency and the loan currency are different. The following conditions need to be considered when adding new currency support to the agreement :","metadata":{"loc":{"lines":{"from":511,"to":514}}}}],["1179",{"pageContent":"Every time a new currency is added as collateral to the JustLend DAO protocol, it increases the risk of the protocol going bankrupt. From a financial perspective, the assets of the JustLend DAO protocol are the collateral, and the liabilities are the loan amount. Assets and liabilities are often in different base currencies, and both loans and collateral contain stablecoins, which means the protocol is vulnerable to failures in the collateral tokens themselves, as well as market volatility.\nCentralized collateral tokens will expose the protocol to centralization risks, and the single point of failure risk of the base currency will bring systemic risks to the JustLend DAO protocol.\nCurrency used only for deposits and loans generally does not bring high risk to the protocol, the lent tokens are liabilities of the JustLend DAO protocol, and the collateral is the assets held by the protocol. To ensure the health of the protocol, these assets must remain larger than debt.","metadata":{"loc":{"lines":{"from":515,"to":517}}}}],["1180",{"pageContent":"Diversified currencies are supported in the loan pool of the JustLend DAO protocol, which can reduce risks through diversified returns.\nWhen adding new currencies to the protocol, careful consideration is required, and the basic rule is to ensure that the value of adding new currencies outweighs the risks, so we only consider currencies with high value and are from important communities.\nAssessment\nThe Defi ecosystem is usually composed of individual components that may be part of other systems, which enables the JustLend DAO protocol to connect with other ecosystems, which also makes the protocol potentially affected by other systems. The currency used in the protocol is the key to affecting the protocol, especially the currency used as collateral. To ensure that the currency supported by the protocol has reasonable risk, we will evaluate a currency from three levels.","metadata":{"loc":{"lines":{"from":518,"to":521}}}}],["1181",{"pageContent":"First, we look at the smart contract security of the currency and the counterparty of the currency. If the risks in these two aspects are too high, we will refuse to accept the such currency, and the currency that has been accepted will also be disqualified as collateral. Then, we analyze the market risk. Of course, this part of the risk can be controlled by the protocol through the risk parameter parameters.\nRisk Factors\nSmart Contract\nThe main consideration of smart contract risk is the technical security of the underlying code of the token. If there is a security risk in the smart contract of a collateral currency supported by JustLend DAO, the collateral will be affected, thereby threatening the solvency of the protocol.","metadata":{"loc":{"lines":{"from":522,"to":525}}}}],["1182",{"pageContent":"Smart contract hacks have caused millions of dollars in losses, so currencies with higher smart contract risks cannot be integrated into the protocol, and the token’s smart contract must pass a rigorous review before the token can be accepted. For the risks posed by smart contracts, sometimes bug bounties can help, but not completely. We evaluate the maturity of token smart contracts based on metrics such as creation time, number of transactions, and audit reports.\nCounterparty\nAssessing counterparty risk is primarily an assessment of how the currency is managed and who manages it. We have seen that some token management is too centralized, which brings an extremely high risk to the token. We will consider the number of token managers, the number of token holders, and the trust of the token team. Currencies with high counterparty risk are not eligible as collateral tokens.\nMarket","metadata":{"loc":{"lines":{"from":526,"to":529}}}}],["1183",{"pageContent":"Market\nMarket risk is related to market size and token price fluctuations, and the market risk of collateral tokens brings a lot of risk to the JustLend DAO protocol. If the value of the collateral falls, the liquidation threshold may be reached and liquidation begins, then the market needs to have sufficient trading volume to fully liquidate these debts, and a large amount of liquidation will also put a lot of selling pressure on the collateral tokens in the market. Thereby, further causing the value of the collateral to fall.\nCryptocurrencies can be subject to wild swings in the market, often seeing prices fluctuate by 30% within a week or month. In order to protect users when the price of tokens rises, the JustLend DAO protocol may adjust parameters to prevent the risks that users' new actions may bring. The JustLend DAO protocol has a set of parameters to control the risk of price fluctuations, and the protocol will determine the collateralization rate based on price volatility.","metadata":{"loc":{"lines":{"from":529,"to":531}}}}],["1184",{"pageContent":"We also consider the market size of the token. Generally, we use the market value of the token to measure the market size of a token.\nPrice Tracking\nWhen the borrower's outstanding loan value exceeds its safe collateral rate, the JustLend DAO protocol will automatically initiate liquidation to eliminate the risk of the protocol and ensure that funds withdrawal and lending always have excess cash ability, while protecting the depositor's capital risk. Therefore, there is a need to calculate the asset value of the borrower's collateral and the value of the borrower's assets in real-time. Therefore, it is necessary to obtain the price information of various assets in real time. The JustLend DAO protocol uses the Winlink decentralized oracle for price feeds, and at the same time adopts a \"smoothing mechanism\" to avoid risks and avoid the risks brought by short-term large price fluctuations to the protocol.","metadata":{"loc":{"lines":{"from":532,"to":534}}}}],["1185",{"pageContent":"Liquidity Risk\nJustLend DAO Protocol is a money market that enables loans via liquidity pools in the different currencies proposed across various markets. Suppliers receive derivative jTokens, representing the cryptocurrency supply.\nThe liquidity of the protocol is the availability of capital to meet different business scenarios. It is a key metric, as a lack of liquidity will block business.\nAt any point in time, utilization, which is the share of the total supply of coins that have been lent out by various markets, is an important indicator of the liquidity of the JustLend DAO Protocol.","metadata":{"loc":{"lines":{"from":536,"to":539}}}}],["1186",{"pageContent":"At any point in time, utilization, which is the share of the total supply of coins that have been lent out by various markets, is an important indicator of the liquidity of the JustLend DAO Protocol.\nIn this section, we dive into JustLend DAO’s liquidity risk by analyzing the availability of JustLend DAO‘s assets. Then we look at the valuation of jTokens, illiquid assets often suffer from illiquidity discounts due to the difficulty to find counterparties. The utilization and jToken valuation help us assess the level of liquidity risk of the protocol. Once this risk is understood, we can put in place risk management techniques through the borrow interest rate model.\n​\n​Borrow Interest Rate\nThe utilization rate of each market reflects the true situation of the available assets in that market, the utilization rate U is defined as follows:","metadata":{"loc":{"lines":{"from":539,"to":543}}}}],["1187",{"pageContent":"​\n​Borrow Interest Rate\nThe utilization rate of each market reflects the true situation of the available assets in that market, the utilization rate U is defined as follows:\nAs U approaches 100%, loanable assets become more and more scarce, and when U = 100%, because there is no more liquidity, users can no longer borrow assets. At the same time, if suppliers want to withdraw their liquidity, they will fail because there is no liquidity available.\nJustLend DAO's interest rate strategy can maximize the utilization of assets while effectively managing liquidity risks. The borrowing rate is closely related to the utilization rate of funds in the market. The interest rate model is calibrated around an optimal utilization rate Uₒₚₜᵢₘₐₗ per market that reflects the real conditions and the JustLend DAO also supports market liquidity by providing incentives for deposit users and managing liquidity risk through the interest rate model.","metadata":{"loc":{"lines":{"from":543,"to":547}}}}],["1188",{"pageContent":"When sufficient funds are available in the market: Lower interest rates to encourage borrowing.\nWhen available funds in the market are scarce: Increase interest rates to encourage loan repayments and additional deposits.\nInterest Rate Model\nWhen utilization in the market is high, liquidity risk will appear, and as it approaches 100%, liquidity risk will peak. In order to better solve this problem, the interest rate curve of JustLend DAO is divided into two parts with optimal utilization as the dividing line. The slope of the curve is small until optimum utilization is reached, and increases sharply beyond optimum utilization.\nThe U value can be used to monitor the share of the market's total assets that have been borrowed at time t. The interest rate Rₜ is defined as below: \n     if  U < Uₒₚₜᵢₘₐₗ :     Rₜ = R₀ + Uₜ/Uₒₚₜᵢₘₐₗ * Rₛₗₒₚₑ₁\n     if U ≥  Uₒₚₜᵢₘₐₗ :    Rₜ = R₀ + Rₛₗₒₚₑ₁ + (Uₜ-Uₒₚₜᵢₘₐₗ)/(1-Uₒₚₜᵢₘₐₗ) *Rₛₗₒₚₑ₂","metadata":{"loc":{"lines":{"from":548,"to":554}}}}],["1189",{"pageContent":"if  U < Uₒₚₜᵢₘₐₗ :     Rₜ = R₀ + Uₜ/Uₒₚₜᵢₘₐₗ * Rₛₗₒₚₑ₁\n     if U ≥  Uₒₚₜᵢₘₐₗ :    Rₜ = R₀ + Rₛₗₒₚₑ₁ + (Uₜ-Uₒₚₜᵢₘₐₗ)/(1-Uₒₚₜᵢₘₐₗ) *Rₛₗₒₚₑ₂\nThe interest rate models for all markets are derived from the formula above, with different parameters used for different markets. \nWhen  U < Uₒₚₜᵢₘₐₗ, the borrowing rate increases slowly with the utilization.\nWhen U ≥  Uₒₚₜᵢₘₐₗ, the borrow interest rates increase sharply with utilization to above 50% APY if the liquidity is fully utilized.\nSince the borrowing rate keeps changing with the change of the utilization rate, this characteristic brings certain difficulties to financial planning. Especially for those users who need to stabilize the borrowing interest rate, when calculating the borrowing rate, a certain buffer needs to be added, and at the same time, it is necessary to pay close attention to the capital utilization rate of the market.\nModel Parameters","metadata":{"loc":{"lines":{"from":554,"to":560}}}}],["1190",{"pageContent":"Model Parameters\nIn general, tokens with similar risk profiles will have similar interest rate models and parameters. The parameters of the interest rate model can be adjusted with changes in market conditions, and changes in these parameters need to be adapted to the current utilization rate of the JustLend DAO market and the corresponding incentive measures.\nFor example, USDD has staking incentives on multiple platforms, the interest rate curve of USDD is much higher than other stable coin markets. With the utilization increase of the USDD market, the supply users will get super high returns.\nWith the rise of liquidity mining and various Defis, supplier and borrowers can earn income by participating in different Defis, in order to balance the borrowing costs in various markets. The JustLend DAO can increase the cost of borrowing users by adjusting the optimal usage of a specific market, thereby offsetting the benefits they earn in borrowing mining.","metadata":{"loc":{"lines":{"from":560,"to":563}}}}],["1191",{"pageContent":"Main parameters of the JustLend DAO markets (as of Jul 17, 2023)\nMarket\nUₒₚₜᵢₘₐₗ\nBase\nSlope 1\nSlope 2\nETH\n-\n2.00%\n-\n32.00%\nsTRX\n80.00%\n2.00%\n25.00%\n200.00%\nTRX\n80.00%\n2.00%\n25.00%\n200.00%\nUSDT \n80.00%\n0.00% \n5.00% \n26.80%\nUSDJ\n80.00%\n0.00% \n5.00% \n26.80%\nWIN\n80.00%\n2.00%\n32.00%\n112.00%\nBTC\n-\n2.00%\n-\n32.00%\nJST\n80.00%\n2.00%\n32.00%\n112.00%\nWBTT\n80.00%\n2.00%\n32.00%\n112.00%\nETHOLD\n-\n2.00%\n-\n32.00%\nTUSD\n80.00%\n0.00%\n5.00%\n26.80%\nNFT\n80.00%\n2.00%\n32.00%\n112.00%\nSUN\n45.00%\n5.00%\n55.00%\n275.00%\nUSDC\n80.00%\n0.00%\n5.00%\n26.80%\nBUSD\n80.00%\n0.00%\n5.00%\n26.80%\nBTT\n80.00%\n2.00%\n32.00%\n112.00%\nUSDD\n50.00%\n1.00%\n25.00%\n200.00%\nInterest Rate Parameters Change History\nWhen market conditions change, so does risk. JustLend DAO will continuously monitor the utilization rate of each market, and adjust the interest rate parameters in time to ensure that the liquidity of each market is available for a long time. Mitigate risks from market conditions.","metadata":{"loc":{"lines":{"from":564,"to":656}}}}],["1192",{"pageContent":"Below is a record of JustLend DAO’s adjusted interest rate Parameters.\nDate\nMarket\nUₒₚₜᵢₘₐₗ\nBase\nSlope1\nSlope2\n14 Jul 2023\nETH\n-\n2.00%\n-\n32.00%\n26 Jun 2023\nsTRX\n80.00%\n2.00%\n25.00%\n200.00%\n22 Jan 2023\nUSDC\n80.00%\n0.00%\n5.00%\n26.80%\n22 Jan 2023\nBUSD\n80.00%\n0.00%\n5.00%\n26.80%\n26 Dec 2022\nTRX\n80.00%\n2.00%\n25.00%\n200.00%\n30 Aug 2022\nUSDC\n90.00%\n0.00%\n5.00%\n20.00%\n2 Aug 2022\nTRX\n80.00%\n2.00%\n30.00%\n300.00%\n2 Aug 2022\nUSDD\n50.00%\n1.00%\n25.00%\n200.00%\n28 Jun 2022\nTRX\n40.00%\n2.00%\n20.00%\n300.00%\n28 Jun 2022\nUSDD\n5.00%\n1.00%\n20.00%\n200.00%\n27 Jun 2022\nTRX\n80.00%\n2.00%\n25.00%\n150.00%\n27 Jun 2022\nUSDD\n30.00%\n0.00%\n5.00%\n120.00%\nInterest Rate Curves\nThis section shows JustLend DAO interest rate curves per market. \nUSDD\nUSDC/BUSD\nUSDT/TUSD/USDJ\nTRX/sTRX\nBTT/WBTT/JST/WIN/NFT\nBTC/ETH\nSUN","metadata":{"loc":{"lines":{"from":657,"to":744}}}}],["1193",{"pageContent":"Risk Value of Users\nRisk value is an indicator of the health of the current portfolio. Collaterals will be liquidated when the risk value reaches 100.\nFormula: Risk value = Total borrow ÷ Borrow limit x 100\nOur recommendations for users at different levels of risk are as follows:\nRange\nLevels of risk\nRecommendations\n0-35\nLow Risk\nHealthy portfolio, eligible for loans.\n35-60\nMedium Risk\nHealthy portfolio overall, eligible for extra loan, but with caution.\n60-80\nHigh Risk\nPortfolio faces risk of liquidation, and you are advised to add collateral or pay off part of your loans.\n80-100\nExtremely High Risk\nCollaterals are about to be liquidated, and you are advised to add collateral or pay off part of your loans.","metadata":{"loc":{"lines":{"from":746,"to":764}}}}],["1194",{"pageContent":"JustLend DAO Mainnet Contracts\nJustLend DAO Protocol is a TRON smart contract protocol for supplying or borrowing assets. Through the jToken contracts, accounts on the TRON blockchain supply capital (TRX or TRC20 tokens) to receive jTokens or borrow assets from the protocol (holding other assets as collateral). The JustLend DAO jToken contracts track these balances and algorithmically set interest rates for borrowers. Check more info on . \nMain Contracts\nWe detail a few of the core contracts in the JustLend DAO protocol.\nCToken, CErc20 and CEther","metadata":{"loc":{"lines":{"from":766,"to":770}}}}],["1195",{"pageContent":"Main Contracts\nWe detail a few of the core contracts in the JustLend DAO protocol.\nCToken, CErc20 and CEther\nThe JustLend DAO jTokens which are self-contained borrowing and lending contracts, are deployed from the code of CToken and CEther contracts. CToken contains the core logic and CTrc20 and CEther add public interfaces for TRC20 tokens and TRX, respectively. Each jToken is assigned an interest rate and risk model (see InterestRateModel and Comptroller parts), and allows accounts to mint (supply capital), redeem (withdraw capital), borrow and repay a borrow. Each jToken is a TRC20-compliant token where balances represent ownership of the market.\nComptroller\nThe risk model contract validates permissible user actions and disallows actions if they do not fit certain risk parameters. For instance, the Comptroller enforces that each borrowing user must maintain a sufficient collateral balance across all cTokens.\nGovernorAlpha","metadata":{"loc":{"lines":{"from":770,"to":776}}}}],["1196",{"pageContent":"GovernorAlpha\nThe administrator of the JustLend DAO Timelock contract. Holders of JST token may create and vote on proposals that will be queued into the JustLend DAO Timelock and then have effects on JustLend DAO jToken and Comptroller contracts. This contract may be replaced in the future with a beta version.\nInterestRateModel\nContracts that define interest rate models. These models algorithmically determine interest rates based on the current utilization of a given market (that is, how much of the supplied assets are liquid versus borrowed).\nErrorReporter\nLibrary for tracking error codes and failure conditions.\nExponential\nLibrary for handling fixed-point decimal numbers.\nWhitePaperInterestRateModel\nInitial interest rate model, as defined in the Whitepaper. This contract accepts a base rate and slope parameter in its constructor.\nCareful Math\nLibrary for safe math operations.\nSafeToken\nLibrary for safely handling Trc20 interaction.\nStaked TRX\nThe contract is used to stake TRX.","metadata":{"loc":{"lines":{"from":776,"to":791}}}}],["1197",{"pageContent":"Careful Math\nLibrary for safe math operations.\nSafeToken\nLibrary for safely handling Trc20 interaction.\nStaked TRX\nThe contract is used to stake TRX.\nEnergy Rental\nThe contract is used to rent energy.\nHow to Compile The Contract\nYou can get the compiler from ​\nAnd rename the compiler executable file to solc512, then compile the contracts with these commands.\n./solc512   --allow-paths $YOUR_PATH/justlend-protocol/, --bin --abi --optimize $YOUR_PATH/justlend-protocol/Unitroller.sol\n./solc512   --allow-paths $YOUR_PATH/justlend-protocol/, --bin --abi --optimize $YOUR_PATH/justlend-protocol/Comptroller.sol\n./solc512   --allow-paths $YOUR_PATH/justlend-protocol/, --bin --abi --optimize $YOUR_PATH/justlend-protocol/Governance/WJST.sol\n./solc512   --allow-paths $YOUR_PATH/justlend-protocol/, --bin --abi --optimize $YOUR_PATH/justlend-protocol/Governance/GovernorAlpha.sol\n./solc512   --allow-paths $YOUR_PATH/justlend-protocol/, --bin --abi --optimize $YOUR_PATH/justlend-protocol/Timelock.sol","metadata":{"loc":{"lines":{"from":791,"to":806}}}}],["1198",{"pageContent":"./solc512   --allow-paths $YOUR_PATH/justlend-protocol/, --bin --abi --optimize $YOUR_PATH/justlend-protocol/Timelock.sol\n./solc512   --allow-paths $YOUR_PATH/justlend-protocol/, --bin --abi --optimize $YOUR_PATH/justlend-protocol/JumpRateModelV2.sol\n./solc512   --allow-paths $YOUR_PATH/justlend-protocol/, --bin --abi --optimize $YOUR_PATH/justlend-protocol/WhitePaperInterestRateModel.sol\n./solc512   --allow-paths $YOUR_PATH/justlend-protocol/, --bin --abi --optimize $YOUR_PATH/justlend-protocol/CEther.sol\n./solc512   --allow-paths $YOUR_PATH/justlend-protocol/, --bin --abi --optimize $YOUR_PATH/justlend-protocol/CErc20Delegate.sol\n./solc512   --allow-paths $YOUR_PATH/justlend-protocol/, --bin --abi --optimize $YOUR_PATH/justlend-protocol/CErc20Delegator.sol\n./solc512   --allow-paths $YOUR_PATH/justlend-protocol/, --bin --abi --optimize $YOUR_PATH/justlend-protocol/PriceOracle/PriceOracle.sol","metadata":{"loc":{"lines":{"from":806,"to":812}}}}],["1199",{"pageContent":"./solc512   --allow-paths $YOUR_PATH/justlend-protocol/, --bin --abi --optimize $YOUR_PATH/justlend-protocol/PriceOracle/PriceOracle.sol\n./solc512   --allow-paths $YOUR_PATH/justlend-protocol/, --bin --abi --optimize $YOUR_PATH/justlend-protocol/PriceOracleProxy.sol\n./solc512   --allow-paths $YOUR_PATH/justlend-protocol/, --bin --abi --optimize $YOUR_PATH/justlend-protocol/PriceOracle/PriceOracle.sol\n./solc512   --allow-paths $YOUR_PATH/justlend-protocol/, --bin --abi --optimize $YOUR_PATH/justlend-protocol/PriceOracleProxy.sol\n./solc512   --allow-paths $YOUR_PATH/justlend-protocol/, --bin --abi --optimize $YOUR_PATH/justlend-protocol/Lens/CompoundLens.sol\nDeployed Contract Address\nName\nAddress\nUnitroller\nTGjYzgCyPobsNS9n6WcbdLVR9dH7mWqFx7\nComptroller\nTB23wYojvAsSx6gR8ebHiBqwSeABiBMPAr\nGovernorBravo\nTEqiF5JbhDPD77yjEfnEMncGRZNDt2uogD\nTimelock\nTRWNvb15NmfNKNLhQpxefFz7cNjrYjEw7x\nOracle PriceOracle\nTD8bq1aFY8yc9nsD2rfqqJGDtkh7aPpEpr\nOracle proxy PriceOracleProxy","metadata":{"loc":{"lines":{"from":812,"to":830}}}}],["1200",{"pageContent":"GovernorBravo\nTEqiF5JbhDPD77yjEfnEMncGRZNDt2uogD\nTimelock\nTRWNvb15NmfNKNLhQpxefFz7cNjrYjEw7x\nOracle PriceOracle\nTD8bq1aFY8yc9nsD2rfqqJGDtkh7aPpEpr\nOracle proxy PriceOracleProxy\nTCKp2AzuhzV4B4Ahx1ej4mvQgHZ1kH7F7k\nWhitePaperModelTRX WhitePaperInterestRateModel\nTF8B4iysAGfrssdQhMJGYsdd9SZoxGsH7M\nWhitePaperModelBTC WhitePaperInterestRateModel\nTYJi9q4qLQWoBiKmMQY3Mn81tmhw7SeCmh\njumpRateTRX JumpRateModelV2\nTMca13trZmVvVttrGWJyUSm33qZdohDDuh\nTRX CErc20Delegate\nNA\nTRX CErc20Delegator\nTE2RzoSV3wFK99w6J9UnnZ4vLfXYoxvRwP\njumpRateUSDD JumpRateModelV2\nTDoB7y9HHj6bXTwEe6BhfAkdETjQR2He6u\nUSDD CErc20Delegate\nTFdTqrMyb6PMMqTa9vnhmQHDFDU2oUhw9W\nUSDD CErc20Delegator\nTX7kybeP6UwTBRHLNPYmswFESHfyjm9bAS\njumpRateUSDT JumpRateModelV2\nTTetZxp98wcPaciyBMHYvQkS735RZ3tyXY\nUSDT CErc20Delegate\nTLjn59xNM7VEK6VZ3VQ8Y1ipxsdsFka5wZ\nUSDT CErc20Delegator\nTXJgMdjVX5dKiQaUi9QobwNxtSQaFqccvd\njumpRatewstUSDT JumpRateModelV2\nTPqKsaTnSKEU3aGHanpVFNU3cE8SmJsAYz\nwstUSDT CErc20Delegate\nTUx4cV8FQNR5W4FhtF7mHZwaJMoco2464o","metadata":{"loc":{"lines":{"from":830,"to":863}}}}],["1201",{"pageContent":"USDT CErc20Delegator\nTXJgMdjVX5dKiQaUi9QobwNxtSQaFqccvd\njumpRatewstUSDT JumpRateModelV2\nTPqKsaTnSKEU3aGHanpVFNU3cE8SmJsAYz\nwstUSDT CErc20Delegate\nTUx4cV8FQNR5W4FhtF7mHZwaJMoco2464o\nwstUSDT CErc20Delegator\nTD5SdLw5scR6mXgyMK2xKrFJpauDjpKqrW\njumpRatesTRX JumpRateModelV2\nTW4fpkc98kzVbdiPhutCg2uivwVJ9MDa2P\nsTRX CErc20Delegate\nTCyNbCipGbAybb8rG4aatEoEnfuYpVYCPP\nsTRX CErc20Delegator\nTJQ9rbVe9ei3nNtyGgBL22Fuu2xYjZaLAQ\njumpRateSUN JumpRateModelV2\nTHCVC3DHgZ5qmUcJPutw7TrMMfj1h2bvkZ\nSUN CErc20Delegate\nTM82erAZJSP7NKc17JdTnzVC8WKJHismWB\nSUN CErc20Delegator\nTPXDpkg9e3eZzxqxAUyke9S4z4pGJBJw9e\njumpRateBTT JumpRateModelV2\nTQ9zMkrqgej7GjLdMrpNuURozg8J2fSXsW\nBTT CErc20Delegate\nTH3x5EqLnPduHNX41MaCCb2UfnfFMLuYwe\nBTT CErc20Delegator\nTUaUHU9Dy8x5yNi1pKnFYqHWojot61Jfto\njumpRateNFT JumpRateModelV2\nTBE9tkWYdZPEHLNeKC6Xn44YFLpieiM3xq\nNFT CErc20Delegate\nTLkUdtDBLMfJdXni2iTa4u2DKM53XmDJHi\nNFT CErc20Delegator\nTFpPyDCKvNFgos3g3WVsAqMrdqhB81JXHE\njumpRateJST JumpRateModelV2\nTMNXjQTa8x4wNHBa3X647KRnkRQpSuXBRT","metadata":{"loc":{"lines":{"from":863,"to":896}}}}],["1202",{"pageContent":"NFT CErc20Delegate\nTLkUdtDBLMfJdXni2iTa4u2DKM53XmDJHi\nNFT CErc20Delegator\nTFpPyDCKvNFgos3g3WVsAqMrdqhB81JXHE\njumpRateJST JumpRateModelV2\nTMNXjQTa8x4wNHBa3X647KRnkRQpSuXBRT\nJST CErc20Delegate\nTQ2sbnmxtR7jrNk4nxz2A8f9sneCqmk6SB\nJST CErc20Delegator\nTWQhCXaWz4eHK4Kd1ErSDHjMFPoPc9czts\njumpRateWIN JumpRateModelV2\nTBtChPo34CGJkb1QVEwPhxS8HQE2Xp7ir2\nWIN CErc20Delegate\nTW3GyD3hYkKwzSGytWwWGXpe2a93zCpRzJ\nWIN CErc20Delegator\nTRg6MnpsFXc82ymUPgf5qbj59ibxiEDWvv\njumpRateUSDJ JumpRateModelV2\nTLScd7kpWnKADtH7ZXKzrJHAxJUnjiiExq\nUSDJ CErc20Delegate\nTYSHTEq9NFSgst94saeRvt6rAYgWkqMFbj\nUSDJ CErc20Delegator\nTL5x9MtSnDy537FXKx53yAaHRRNdg9TkkA\njumpRateUSDC JumpRateModelV2\nTDECE4PZFEkmTyFk9sJMya9PY99BapHpyP\nUSDC CErc20Delegate\nTHQY8YX19jLFSFg1xhthM5wb7xZvKLCzgq\nUSDC CErc20Delegator\nTNSBA6KvSvMoTqQcEgpVK7VhHT3z7wifxy\njumpRateTUSD JumpRateModelV2\nTLY3wRNGrQpJCZrYKu9VjntMj2kNxisAL2\nTUSD CErc20Delegate\nTHbrSjDsDA2KJRxx8K73tN7vLgaXSUNQFk\nTUSD CErc20Delegator\nTSXv71Fy5XdL3Rh2QfBoUu3NAaM4sMif8R","metadata":{"loc":{"lines":{"from":896,"to":929}}}}],["1203",{"pageContent":"jumpRateTUSD JumpRateModelV2\nTLY3wRNGrQpJCZrYKu9VjntMj2kNxisAL2\nTUSD CErc20Delegate\nTHbrSjDsDA2KJRxx8K73tN7vLgaXSUNQFk\nTUSD CErc20Delegator\nTSXv71Fy5XdL3Rh2QfBoUu3NAaM4sMif8R\njumpRateBTC JumpRateModelV2\nTYJi9q4qLQWoBiKmMQY3Mn81tmhw7SeCmh\nBTC CErc20Delegate\nTVsKSRgRoMcCp798qqRGesXRfzy2MzRjkR\nBTC CErc20Delegator\nTLeEu311Cbw63BcmMHDgDLu7fnk9fqGcqT\njumpRateETH JumpRateModelV2\nTD5wmR7NfBM2JdSGSTTq1MgMARX2k5KE2b\nETH CErc20Delegate\nTS9fVh58y2RMDnpucGXkbfZhAJxmGafGqe\nETH CErc20Delegator\nTWBxQMb6RD3qmkXUXpNwVCYbL8SHNreru6\njumpRateWBTT JumpRateModelV2\nTJAfCJdJZa44pG5adQGLMLh27hJqPeLxod\nWBTT CErc20Delegate\nTV4WWBqBfn1kd4KmpYeSJpVAfybfrxEN9L\nWBTT CErc20Delegator\nTUY54PVeH6WCcYCd6ZXXoBDsHytN9V5PXt\njumpRateBUSD JumpRateModelV2\nTUSGt1WAYeJSV94M5muFi2KvtE6EquZPUC\nBUSD CErc20Delegate\nTNRUqbYfYv4iizWa1b2kd6ZBaoh5zrg3yk\nBUSD CErc20Delegator\nTLHASseQymmpGQdfAyNjkMXFTJh8nzR2x2\njumpRateSUNOLD JumpRateModelV2\nTK7WVRz34wUVRCpsgbW1wUCPmh5bSnCqg1\nSUNOLD CErc20Delegate\nTSCpzKvJfXHj1HW5jKg9dZA8z9aMxxGLd8","metadata":{"loc":{"lines":{"from":929,"to":962}}}}],["1204",{"pageContent":"BUSD CErc20Delegator\nTLHASseQymmpGQdfAyNjkMXFTJh8nzR2x2\njumpRateSUNOLD JumpRateModelV2\nTK7WVRz34wUVRCpsgbW1wUCPmh5bSnCqg1\nSUNOLD CErc20Delegate\nTSCpzKvJfXHj1HW5jKg9dZA8z9aMxxGLd8\nSUNOLD CErc20Delegator\nTGBr8uh9jBVHJhhkwSJvQN2ZAKzVkxDmno\njumpRateETHOLD JumpRateModelV2\nTCiKn6EFBsNrNCFQXWaEuAxr8Su3y4Rx9D\nETHOLD CErc20Delegate\nTQBvTVisiceDvsQVbLbcYyWQGWP7wtaQnc\nETHOLD CErc20Delegator\nTR7BUFRQeq1w5jAZf1FKx85SHuX6PfMqsV\nDiscussion\nFor any concerns with the protocol, open an issue or visit us on  to discuss.\nFor security concerns, please email .","metadata":{"loc":{"lines":{"from":962,"to":978}}}}],["1205",{"pageContent":"JustLend DAO Testnet\nJustLend DAO Testnet (based on the TRON Nile Testnet) has been officially launched here: . Users can experience new JustLend DAO features on the Testnet, including the following:\n​\nTRX Liquid Staking\nBased on Stake 2.0, with TRX Liquid Staking, users can stake TRX to get sTRX tokens and gain high rewards. Compared to traditional staking, TRX Liquid Staking is easier to use and more profitable. Staked TRX will be used automatically for voting and governance, and gain rewards via Energy Rental.\n \nEnergy Rental\nWith Energy Rental, users can easily rent energy on the JustLend DAO Testnet with only a few clicks. Compared with obtaining energy through staking (Stake 1.0) or burning TRX, Energy Rental enables users to rent energy anytime at a much lower price. The rental can be ended anytime as wanted.","metadata":{"loc":{"lines":{"from":980,"to":987}}}}],["1206",{"pageContent":"TRX Liquid Staking\nNote: This documentation is only applicable to the TRON Nile testnet and may not work for the MainNet. \n \n1. What is TRX liquid staking? \nJustLend DAO has released a Stake 2.0-based new feature named \"TRX Liquid Staking\", with which users can get sTRX tokens and earn high rewards by staking TRX. \n \n2. How is it different from traditional staking? \nIn traditional staking, you need to take actions such as staking, voting, and claiming before you can gain voting rewards, with no profit from . In TRX Liquid Staking, however, the platform will automatically earn rewards for you by voting with your staked TRX and renting your Energy, which offers higher rewards and makes staking much easier. \n​\n3. What is sTRX?\nsTRX is a yield-bearing token provided by JustLend DAO based on TRX Liquid Staking. You can obtain sTRX by staking TRX on JustLend DAO, and holding sTRX will earn you rewards. \n​\nRewards from liquid staking consist of two parts:","metadata":{"loc":{"lines":{"from":989,"to":1001}}}}],["1207",{"pageContent":"​\nRewards from liquid staking consist of two parts: \n1. TRON Power obtained from the TRX staked on TRON are voted for Super Representatives (SRs) to earn voting rewards for users.\n2. Energy obtained from the TRX staked on TRON are rented to earn rent for users. \nAs the voting rewards and rent accrue, the exchange rate of TRX to sTRX will increase accordingly, thus increasing your total yields. \n \nYou can unstake TRX at any time to swap sTRX back for TRX. This can also be done through decentralized exchanges like SunSwap or centralized exchanges like Huobi. \nDifferent from the conventional way of staking which only generates rewards on staked assets, TRX liquid staking provides users with both staking rewards and liquidity, increasing the flexibility and efficiency of funds. \n​\n4. How to stake my asset? \n4.1. Rules\nAnyone can stake TRX (starting from a minimum of 0.000001 TRX) to get sTRX. Interest accrues as soon as the asset is successfully staked. \n​\n4.2. Steps","metadata":{"loc":{"lines":{"from":1001,"to":1014}}}}],["1208",{"pageContent":"​\n4. How to stake my asset? \n4.1. Rules\nAnyone can stake TRX (starting from a minimum of 0.000001 TRX) to get sTRX. Interest accrues as soon as the asset is successfully staked. \n​\n4.2. Steps\nClick the \"Stake Now\" tab on the right side.\nYou can enter the amount of TRX by either choosing a percentage below or typing in a number.\nClick \"Stake Now\" and sign in your wallet. \nYou can view the total amount of your staked asset in the section illustrated below.\n5. How to unstake my asset?\n5.1. Rules\nYou may apply to unstake TRX, which means to swap your sTRX back for TRX, anytime. Unstaking asset will be locked up for a period of time during which the corresponding sTRX no longer yields returns. \n​\n5.2. Steps\nClick the \"Unstake Now\" tab on the right side. \nYou can enter the amount of sTRX by either choosing a percentage below or typing in a number. \nClick \"Unstake Now\" and sign in your wallet.","metadata":{"loc":{"lines":{"from":1014,"to":1031}}}}],["1209",{"pageContent":"5.2. Steps\nClick the \"Unstake Now\" tab on the right side. \nYou can enter the amount of sTRX by either choosing a percentage below or typing in a number. \nClick \"Unstake Now\" and sign in your wallet. \nUnstaked asset can only be withdrawn after the pending period ends. You can view the progress of unstaking in the section illustrated below.\n6. How to withdraw my asset?\nYou need to withdraw your TRX manually after the unstaking period ends. \nClick \"Withdraw\" and sign in your wallet to withdraw your unstaked TRX.","metadata":{"loc":{"lines":{"from":1031,"to":1038}}}}],["1210",{"pageContent":"Energy Rental\nNote: This documentation is only applicable to the TRON Nile testnet and may not work for the MainNet.\n​\n1. What is Energy Rental?\nAll transactions on JustLend DAO consume Energy, which can only be obtained through staking or burning TRX. This involves high costs as well as lengthy processes.\n​\nTherefore, JustLend DAO launches the Energy Rental service, which enables users to rent Energy anytime with a much lower price compared to staking or burning TRX. The rental can be ended anytime as wanted.\n​\n2. How to use Energy Rental?\nOn the “Energy Rental” page, the unit price for renting 10,000 Energy per day is displayed on the left side.\nSpecify the rental amount and duration on the right side as wanted.\nYou can specify the rental amount and duration from different dimensions:\nFor the rental amount, you can specify the number by Energy/Day or TRX.","metadata":{"loc":{"lines":{"from":1040,"to":1052}}}}],["1211",{"pageContent":"You can specify the rental amount and duration from different dimensions:\nFor the rental amount, you can specify the number by Energy/Day or TRX.\nBy Energy/Day: Enter the amount of Energy you want to rent. Renting Energy is equivalent to renting staked TRX, which can bring you Energy for using. Therefore, the amount of staked TRX rented to get the Energy will also be displayed on the card.\nBy TRX: Enter the amount of staked TRX you want to rent. The corresponding Energy you will get is also displayed.\nFor rental calculation, the rent can be calculated based on the rental duration or the asset you want to deposit.\nBy Duration: Enter the rental duration, within which you can use the rented Energy as wanted (Used Energy will recover to the original amount in 24 hours). Your rent will be calculated based on the rental amount and the rental duration.","metadata":{"loc":{"lines":{"from":1052,"to":1057}}}}],["1212",{"pageContent":"By Asset: Enter the amount of asset you want to deposit. Your estimated duration will be calculated based on the Energy rental amount and the asset you deposit.\nClick “Rent Now” and sign in your wallet to rent the Energy. The total payment includes your rent and the security deposit. For more information about how the payment is calculated, see ​\nYou can check your remaining rent and duration on the left side.\nDuring your rental, if you find the Energy amount is insufficient or you want to rent for a longer duration, you can click the “Rent More Energy” or “Extend Rental Duration” tab.\n3. How to end my rental?\nOn the left side of “Energy Rental”, click “End Now”.\nIn the window, you will see the amount of asset to be returned and Energy to be deducted when the rental is ended.\nClick “Confirm” and sign in your wallet to end the rental.\nNote:","metadata":{"loc":{"lines":{"from":1058,"to":1066}}}}],["1213",{"pageContent":"In the window, you will see the amount of asset to be returned and Energy to be deducted when the rental is ended.\nClick “Confirm” and sign in your wallet to end the rental.\nNote: \nPlease remember to manually end your rental on time. Otherwise, the liquidation mechanism will be triggered. All or part of your security deposit will be liquidated and used as rewards for liquidators.\nIf you end the rental when your used Energy is not recovered, your security deposit will be deducted correspondingly.\n​\nFAQ\n1. What are the rules for my rent and security deposit calculation?\nRent = Energy rental amount / 10,000 * Unit price for 10,000 Energy per day * Rental duration (by day)\nSecurity deposit = Energy rental amount / 10,000 * Unit price for 10,000 Energy per day + Liquidation fee\n \nCommonly, all of your security deposit will be returned when the rental is ended. However, in the following scenarios, part of your security deposit will be deducted:","metadata":{"loc":{"lines":{"from":1066,"to":1077}}}}],["1214",{"pageContent":"Commonly, all of your security deposit will be returned when the rental is ended. However, in the following scenarios, part of your security deposit will be deducted:\nIf you end your rental when the used Energy is not recovered to the original amount, your security deposit will be deducted correspondingly. Security deposit deducted = (Used Energy / Total Energy rented) / 10,000 * Unit price for 10,000 Energy per day * 1/2.\nIf you do not end your rental before expiration, the security deposit will be deducted based on the exceeded duration.\nIf your rental is liquidated due to expiration, the liquidation fee will be deducted from your security deposit.\nTherefore, you can get all your security deposit back when you end the rental on time and with all Energy recovered to the original amount.","metadata":{"loc":{"lines":{"from":1077,"to":1081}}}}],["1215",{"pageContent":"Start with TronWeb\n​ is a JavaScript SDK for TRON. It is designed for web browsers, Node.js, and IoT devices. If you are familiar with web3, TronWeb will bring you the same brilliant experience.\nInstallation\nEither npm or yarn is available for installation.\nnpm install tronweb\nyarn add tronweb\nInitialization\nCreate a TronWeb instance before other actions:\nconst TronWeb = require('tronweb')\nconst HttpProvider = TronWeb.providers.HttpProvider\n// You may put your node ip:port for HttpProvider\n// also, you may use TronGrid services for main net and test nets:\n// main net: https://api.trongrid.io\n// shasta test net https://api.shasta.trongrid.io\n// nile test net: https://api.nileex.io\nconst fullNode = new HttpProvider(\"\")\nconst solidityNode = new HttpProvider(\"\")\nconst eventServer = new HttpProvider(\"\") \nconst privateKey = \"your private key\"\nconst tronWeb = new TronWeb(fullNode, solidityNode, eventServer, privKey)\nInteracting with Contracts","metadata":{"loc":{"lines":{"from":1083,"to":1103}}}}],["1216",{"pageContent":"const eventServer = new HttpProvider(\"\") \nconst privateKey = \"your private key\"\nconst tronWeb = new TronWeb(fullNode, solidityNode, eventServer, privKey)\nInteracting with Contracts\nYou are able to load a smart contract in a JavaScript variable. Take Comptroller as an example:\n// The main net address of Comptroller is: TJZi9eWzCLGBi9tuwvPxnaZTGa2iUpRc8v\nconst comptroller = tronWeb.contract().at(\"TJZi9eWzCLGBi9tuwvPxnaZTGa2iUpRc8v\")\nAll set. Now you can call contract methods with comptroller.\nCalling Contract Methods\nConstant Calls\nYou can call pure and view methods with methodname.call(). Take getAccountLiquidity as an example:\nconst result = await comptroller.getAccountLiquidity(\"the account to calculate liquidity\").call()\nWhen calling other methods, simply change getAccountLiquidity to the corresponding method name and input the correct parameters within the brackets.","metadata":{"loc":{"lines":{"from":1103,"to":1115}}}}],["1217",{"pageContent":"When calling other methods, simply change getAccountLiquidity to the corresponding method name and input the correct parameters within the brackets.\nIf a contract's ABI is not stored on the blockchain, ABI should be manually loaded and _isConstant: trueis required, like below.\ncomptroller.loadAbi(ABI JSON)\nconst result = await comptroller.methodname(params).call(_isConstant:true)\nTrigger Calls\nCalls that modify on-chain data are called trigger calls. Take castVote() as an example:\nconst result = governorAlpha.castVote(proposalId,votes,support).send({\n  feeLimit:10_000_000_000,\n  callValue:0,\n  shouldPollResponse:true\n});\nThere are several available parameters in a trigger call:\nParameter\nDescription\nfeeLimit\nThe maximum energy can be used during a trigger call(in 10^-6 TRX, or sun)\nPlease refer to ​\ncallValue\nThe number of TRX to be sent in the transaction(in 10^-6 TRX, or sun)\nshouldPollResponse\nReturns after confirmation if set as true\nPlease refer to  for details.","metadata":{"loc":{"lines":{"from":1115,"to":1136}}}}],["1218",{"pageContent":"Please refer to ​\ncallValue\nThe number of TRX to be sent in the transaction(in 10^-6 TRX, or sun)\nshouldPollResponse\nReturns after confirmation if set as true\nPlease refer to  for details.\njToken Integration\nWhat is jToken?\njToken refers to the \"receipt\" users get for supplying underlying assets to JustLend DAO, such as the jTRX, jUSDT, jSUN and jBTC you receive after supplying the corresponding assets. jToken is a TRC20 token in your wallet.\nAll assets supported by JustLend DAO, a DeFi protocol, are packed and integrated through the smart contract - jToken. Users mint jToken, which generates interest for its holders, and provide assets to the protocol. Each jToken can be swapped back into the corresponding base asset when users redeem it.","metadata":{"loc":{"lines":{"from":1136,"to":1145}}}}],["1219",{"pageContent":"jToken shares the same properties as other TRC20 tokens, such as being transferred to others or deposited into a smart contract. Your transfer of jToken to other users or institutions constitutes a waiver of ownership over the assets you have supplied to JustLend DAO.\nUsage Scenario\nUser A supplies 100 TRX on JustLend DAO and receives 10,000 jTRX (jToken) as a receipt, after which A transfers 6,000 jTRX to User B. Now, A only has 4,000 jTRX left (equivalent to a 40 TRX supply on JustLend DAO), while B gets 6,000 jTRX (from A's transfer, which is equivalent to a 60 TRX supply on JustLend DAO). If B does not transfer jToken back to A, A will no longer own the 6000 jTRX (60 TRX). (The example exchange rate here is 1 TRX = 100 jTRX).\njToken acts as a key means to interact with the JustLend DAO protocol. While each jToken contract creates its own token market, users use jToken contracts to mint, redeem, borrow loans, repay loans, liquidate loans or transfer jToken.","metadata":{"loc":{"lines":{"from":1146,"to":1149}}}}],["1220",{"pageContent":"How do jTokens earn interest?\nEach market has its own Supply interest rate (APR). Interest isn't distributed; instead, simply by holding jTokens, you'll earn interest.\njTokens accumulates interest through their exchange rate — over time, each jToken becomes convertible into an increasing amount of it's underlying asset, even while the number of jTokens in your wallet stays the same.\nSmart Contract Addresses\nName\nContract Address\nUnitroller\nTGjYzgCyPobsNS9n6WcbdLVR9dH7mWqFx7\njTRX\nTE2RzoSV3wFK99w6J9UnnZ4vLfXYoxvRwP\njUSDD\nTX7kybeP6UwTBRHLNPYmswFESHfyjm9bAS\njUSDT\nTXJgMdjVX5dKiQaUi9QobwNxtSQaFqccvd\njUSDJ\nTL5x9MtSnDy537FXKx53yAaHRRNdg9TkkA\njSUNOLD\nTGBr8uh9jBVHJhhkwSJvQN2ZAKzVkxDmno\njSUN\nTPXDpkg9e3eZzxqxAUyke9S4z4pGJBJw9e\njWIN\nTRg6MnpsFXc82ymUPgf5qbj59ibxiEDWvv\njBTC\nTLeEu311Cbw63BcmMHDgDLu7fnk9fqGcqT\njETH\nTR7BUFRQeq1w5jAZf1FKx85SHuX6PfMqsV\njJST\nTWQhCXaWz4eHK4Kd1ErSDHjMFPoPc9czts\njWBTT\nTUY54PVeH6WCcYCd6ZXXoBDsHytN9V5PXt\njTUSD\nTSXv71Fy5XdL3Rh2QfBoUu3NAaM4sMif8R\njUSDC","metadata":{"loc":{"lines":{"from":1150,"to":1182}}}}],["1221",{"pageContent":"jETH\nTR7BUFRQeq1w5jAZf1FKx85SHuX6PfMqsV\njJST\nTWQhCXaWz4eHK4Kd1ErSDHjMFPoPc9czts\njWBTT\nTUY54PVeH6WCcYCd6ZXXoBDsHytN9V5PXt\njTUSD\nTSXv71Fy5XdL3Rh2QfBoUu3NAaM4sMif8R\njUSDC\nTNSBA6KvSvMoTqQcEgpVK7VhHT3z7wifxy\njNFT\nTFpPyDCKvNFgos3g3WVsAqMrdqhB81JXHE\njBTT\nTUaUHU9Dy8x5yNi1pKnFYqHWojot61Jfto\njBUSD\nTLHASseQymmpGQdfAyNjkMXFTJh8nzR2x2\nQuery interface\nLiquidation Incentive\nfunction liquidationIncentiveMantissa() view returns (uint)\nFeature description: By calling the liquidationIncentiveMantissa function of the Unitroller contract, liquidation incentives can be inquired. Liquidators will be given a proportion of the borrower's collateral as an incentive, which is defined as liquidation incentive. This is to encourage liquidators to perform liquidation of underwater accounts.\nParameter description: N/A\nReturns：\ngetAccountLiquidity function\ngetAccountLiquidity(address account) view returns (uint, uint, uint)\ngetAccountLiquidity(address account) view returns (uint, uint, uint)","metadata":{"loc":{"lines":{"from":1182,"to":1206}}}}],["1222",{"pageContent":"Returns：\ngetAccountLiquidity function\ngetAccountLiquidity(address account) view returns (uint, uint, uint)\ngetAccountLiquidity(address account) view returns (uint, uint, uint)\nFeature description: By calling the getAccountLiquidity function of the Unitroller contract, account information can be accessed through an account's address to determine whether the account should be liquidated or not.\nParameter description:\nParameter\nType\nDescription\naccount\naddress\nUser address\nReturn value:\nuint256\nerror (error code, 0 means success)\nuint256\nliquidity\nuint256\nshortfall (When the value is bigger than 0, the current account does not meet the market requirement for collateralization and needs to be liquidated.)\nNote: There should be at most one non-zero value between liquidity and shortfall.\nExchangeRate\nfunction exchangeRateCurrent() public nonReentrant returns (uint)\nFeature description: Calling this method accrues interest and returns the up-to-date exchange rate\nParameter description: N/A","metadata":{"loc":{"lines":{"from":1206,"to":1229}}}}],["1223",{"pageContent":"function exchangeRateCurrent() public nonReentrant returns (uint)\nFeature description: Calling this method accrues interest and returns the up-to-date exchange rate\nParameter description: N/A\nReturns:\nCalculated exchange rate scaled by 1e18\nGet Cash\nfunction getCash() public view returns (uint)\nFeature description: Calling this method gets the total amount of underlying balance currently available to this market.\nParameter description: N/A\nReturns:\nThe quantity of underlying assets owned by this contract\nTotal Borrows\nfunction totalBorrowsCurrent() external nonReentrant returns (uint)\nFeature description: Calling this method gets the sum of the currently loaned-outs and the accrued interests.\nParameter description: N/A\nReturns:\nThe total borrows with interest\nBorrow Balance\nfunction borrowBalanceCurrent(address account) external nonReentrant returns (uint)","metadata":{"loc":{"lines":{"from":1229,"to":1247}}}}],["1224",{"pageContent":"Parameter description: N/A\nReturns:\nThe total borrows with interest\nBorrow Balance\nfunction borrowBalanceCurrent(address account) external nonReentrant returns (uint)\nFeature description: Calling this method accrues interest to the updated borrowIndex and then calculates the account's borrow balance using the updated borrowIndex\nParameter description: \nParameter\nType\nDescription\naccount\naddress\nThe address whose balance should be calculated after updating borrowIndex\nReturns:\nThe calculated balance\nBorrow Rate\nfunction borrowRatePerBlock() external view returns (uint)\nFeature description: Calling this method gets the current per-block borrow interest rate for this jToken\nParameter description: N/A\nReturns:\nThe borrow interest rate per block, scaled by 1e18\nTotal Supply\nfunction totalSupply() external view returns (uint256)\nFeature description: Calling this method gets the total number of tokens in circulation\nParameter description: N/A\nReturns:\nThe supply of tokens\nUnderlying Balance","metadata":{"loc":{"lines":{"from":1247,"to":1274}}}}],["1225",{"pageContent":"Feature description: Calling this method gets the total number of tokens in circulation\nParameter description: N/A\nReturns:\nThe supply of tokens\nUnderlying Balance\nfunction balanceOfUnderlying(address owner) external returns (uint)\nFeature description: Calling this method gets the underlying balance of the owner\nParameter description: \nParameter\nType\nDescription\nowner\naddress\nThe address of the account\nReturns:\nThe amount of underlying owned by owner\nSupply Rate\nfunction supplyRatePerBlock() external view returns (uint)\nFeature description: Calling this method gets the current per-block supply interest rate for this jToken\nParameter description: N/A\nReturns:\nThe supply interest rate per block, scaled by 1e18\nTotal Reserves\nfunction totalReserves() returns (uint)\nFeature description: Calling this method gets the reserves. Reserve represents a portion of historical interest set aside as cash which can be withdrawn or transferred through the protocol's governance.","metadata":{"loc":{"lines":{"from":1274,"to":1298}}}}],["1226",{"pageContent":"Parameter description: N/A\nReturns:\nThe total amount of reserves\nReserve Factor\nfunction reserveFactorMantissa() returns (uint)\nFeature description: Calling this method gets the current reserve factor.\nParameter description: N/A\nReturns:\nThe current reserve factor\nModification Interface\nBorrow\nfunction borrow(uint borrowAmount) external returns (uint)\nFeature description: Calling this method borrows assets from JustLend DAO protocol to the sender's owner address\nParameter description:\nParameter\nType\nDescription\nborrowAmount\nuint\nThe amount of the underlying asset to borrow\nReturns:\nNone, reverts on error.\nrepayBorrow\nfunction repayBorrow(uint amount) external payable\nFeature description: Calling this method repays their own borrow\nParameter description:\nParameter\nType\nDescription\namount\nuint\nThe amount of the asset to repay\nReturns:\nNone, reverts on error.\nrepayBorrowBehalf\nfunction repayBorrowBehalf(address borrower) external payable","metadata":{"loc":{"lines":{"from":1299,"to":1334}}}}],["1227",{"pageContent":"Parameter\nType\nDescription\namount\nuint\nThe amount of the asset to repay\nReturns:\nNone, reverts on error.\nrepayBorrowBehalf\nfunction repayBorrowBehalf(address borrower) external payable\nFeature description: Calling this method repays a borrow belonging to borrower\nParameter description:\nParameter\nType\nDescription\nborrower\naddress\nThe account with the debt being payed off\nmsg.value\n​\nThe amount to repay\nReturns:\nNone, reverts on error.\nMint\nfunction mint() external payable\nFeature description: Calling this method supplies assets into the market and receives jTokens in exchange\nParameter description:\nParameter\nType\nDescription\nmsg.value\n​\nThe amount of TRX to supply\nReturns:\nNone, reverts on error.\nRedeem\nfunction redeem(uint redeemTokens) external returns (uint)\nFeature description: Calling this method redeems jTokens in exchange for the underlying asset and accrues interest whether or not the operation succeeds.\nParameter description:\nParameter\nType\nDescription\nredeemTokens\nuint","metadata":{"loc":{"lines":{"from":1334,"to":1377}}}}],["1228",{"pageContent":"Parameter description:\nParameter\nType\nDescription\nredeemTokens\nuint\nThe number of jTokens to redeem into underlying\nReturns:\n0 for success, reverts on error.\nRedeemUnderlying\nfunction redeemUnderlying(uint redeemAmount) external returns (uint)\nFeature description: Calling this method redeems jTokens in exchange for a specified amount of underlying asset.\nParameter description:\nParameter\nType\nDescription\nredeemAmount\nuint\nThe amount of underlying to redeem\nReturns:\n0 for success, reverts on error.\nTransfer\nfunction transfer(address dst, uint256 amount) external nonReentrant returns (bool)\nFeature description: Calling this method transfers a specified amount of jtokens to the destination. This action will fail if the account's liquidity become negative due to the transfer.\nParameter description:\nParameter\nType\nDescription\ndst\ndst\nThe receiver's address\namount\nuint256\nAmount of token to be transferred\nReturns:\nA boolean value indicating whether or not the transfer succeeded.","metadata":{"loc":{"lines":{"from":1377,"to":1412}}}}],["1229",{"pageContent":"Parameter\nType\nDescription\ndst\ndst\nThe receiver's address\namount\nuint256\nAmount of token to be transferred\nReturns:\nA boolean value indicating whether or not the transfer succeeded.\nLiquidate Borrow（jTrc20）\nfunction liquidateBorrow(address borrower, uint repayAmount, address jTokenCollateral) returns (uint)\nFeature description: By calling liquidateBorrow function of the corresponding jTrc20 contract (e.g. jUSDT), accounts whose liquidity does not meet the market requirement for collateralization will be liquidated by other users to restore the account liquidity to a normal level (i.e. higher than the market requirement for collateralization). In the event of liquidation, liquidators may repay part or 50% of the loan for the borrower. Liquidators will be given a proportion of the borrower's collateral as an incentive.\nParameter description:\nParameter\nType\nDescription\nborrower\naddress\nAddress of a liquidated account\nrepayAmount\nuint256","metadata":{"loc":{"lines":{"from":1412,"to":1434}}}}],["1230",{"pageContent":"Parameter description:\nParameter\nType\nDescription\nborrower\naddress\nAddress of a liquidated account\nrepayAmount\nuint256\nAmount of token to be repaid in the event of liquidation (measured in the borrowed asset)\njTokenCollateral\naddress\nAddress of the jTOKEN contract to set aside the collateralized asset of a borrower\nReturns:\nLiquidate Borrow（jTRX）\nfunction liquidateBorrow(address borrower, address jTokenCollateral) payable\nFunction description: By calling the liquidateBorrow function of the jTRX contract, accounts whose liquidity does not meet the market requirement for collateralization will be liquidated by other users to restore the account liquidity to a normal level (i.e., higher than the market requirement for collateralization). In the event of liquidation, liquidators may repay part or 50% of the loan for the borrower. Liquidators will be given a proportion of the borrower's collateral as an incentive.\nParameter description:\nParameter\nType\nDescription\nborrower\naddress","metadata":{"loc":{"lines":{"from":1434,"to":1456}}}}],["1231",{"pageContent":"Parameter description:\nParameter\nType\nDescription\nborrower\naddress\nAddress of a liquidated account\nmsg.value\nuint256\nAmount of TRX to be repaid in the event of liquidation (measured in SUN)\njTokenCollateral\naddress\nAddress of the jTRX contract to set aside the collateralized asset of a borrower\nReturns:\nNo return. If any error occurs, the transaction will be reverted.\nAppendix\njToken Decimals\nAll jTokens on JustLend have 8 decimal places.\njToken Balance Query\nWe suggest you use Tronweb to query jToken balance. For example, you can follow the steps below to query jUSDT balance:\n//Example 1\nasync function triggercontract(){\n  let instance =\nawait tronWeb.contract().at('TXJgMdjVX5dKiQaUi9QobwNxtSQaFqccvd');\n  let res = await instance.balanceOf().call();\n  console.log(res);\n}\n​\ntriggercontract();\n​\n//Example 2\nasync function triggercontract(){\n  let instance =\nawait tronWeb.contract().at('TXJgMdjVX5dKiQaUi9QobwNxtSQaFqccvd');\n  let res = await instance[\"balanceOf\"]().call();","metadata":{"loc":{"lines":{"from":1456,"to":1490}}}}],["1232",{"pageContent":"​\n//Example 2\nasync function triggercontract(){\n  let instance =\nawait tronWeb.contract().at('TXJgMdjVX5dKiQaUi9QobwNxtSQaFqccvd');\n  let res = await instance[\"balanceOf\"]().call();\n  console.log(res);\n}\n​\ntriggercontract();\nKey Events\nEvent\nDescription\nMint(address minter, uint mintAmount, uint mintTokens)\nEmitted upon a successful Mint.\nRedeem(address redeemer, uint redeemAmount, uint redeemTokens)\nEmitted upon a successful Redeem.\nBorrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows, uint borrowIndex)\nEmitted upon a successful Borrow.\nRepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows, uint borrowIndex)\nEmitted upon a successful Repay Borrow.\nLiquidateBorrow(address liquidator, address borrower, uint repayAmount, address cTokenCollateral, uint seizeTokens)\nEmitted upon a successful Liquidate Borrow.\nAppendix\njToken Decimals\nAll jTokens on JustLend have 8 decimal places.\njToken Balance Query","metadata":{"loc":{"lines":{"from":1490,"to":1516}}}}],["1233",{"pageContent":"Emitted upon a successful Liquidate Borrow.\nAppendix\njToken Decimals\nAll jTokens on JustLend have 8 decimal places.\njToken Balance Query\nWe suggest you use Tronweb to query jToken balance. For example, you can follow the steps below to query jUSDT balance:\n//Example 1\nasync function triggercontract(){\n  let instance =\nawaittronWeb.contract().at('TXJgMdjVX5dKiQaUi9QobwNxtSQaFqccvd');\n  let res = await instance.balanceOf().call();\n  console.log(res);\n}\n​\ntriggercontract();\n​\n//Example 2\nasync function triggercontract(){\n  let instance =\nawaittronWeb.contract().at('TXJgMdjVX5dKiQaUi9QobwNxtSQaFqccvd');\n  let res = await instance[\"balanceOf\"]().call();\n  console.log(res);\n}\n​\ntriggercontract();\nGovernance Integration\nIntroduction\nJustLend DAO protocol is governed and upgraded by JST holders. There are three components included in the governance system: () token, governance module() and .","metadata":{"loc":{"lines":{"from":1516,"to":1543}}}}],["1234",{"pageContent":"Governance Integration\nIntroduction\nJustLend DAO protocol is governed and upgraded by JST holders. There are three components included in the governance system: () token, governance module() and .\nThe governance of the JustLend DAO protocol is through proposals, whose process can be summarized as proposal posting-voting-taking effect. Several parameters are included in the process:\nGovernance Parameters\nParam\nValue\nDescription\nquorumVotes\n600000000\nThe least for-votes for a proposal to take effect\nvotingPeriod\n86400\nVoting duration(block counts), can be changed by proposals\nproposalThreshold\n200000000\nThe least votes that a proposer must possess, can be changed by proposals\nvotingDelay\n1\nThe waiting duration before voting starts(block counts)\nproposalMaxOperations\n10\nAction maximum within a proposal\nproposalCount\n11\nCurrent proposal count\nJST & WJST\nJST can be exchanged for WJST token at a 1:1 ratio. WJST can be used to vote for proposals.\nGovernance Process","metadata":{"loc":{"lines":{"from":1543,"to":1571}}}}],["1235",{"pageContent":"10\nAction maximum within a proposal\nproposalCount\n11\nCurrent proposal count\nJST & WJST\nJST can be exchanged for WJST token at a 1:1 ratio. WJST can be used to vote for proposals.\nGovernance Process\nAn account must possess at least 200,000,000 votes to create governance proposals. When a proposal is created, the voting period starts and will last for 86,400 block times(approx. 3 days). If a majority of affirmation and at least 600,000,000 votes are cast for the proposal, the proposal will wait for 2 days(according to Timelock.delay, the current value is 172,800s) to take into effect.\nRelevant Methods\nProposals\npropose()\nContract: GovernorBravo\nfunction propose(address[] memory targets, uint[] memory values, string[] memory signatures, bytes[] memory calldatas, string memory description) public returns (uint)\nCalling this method creates a proposal to change & update the JustLend DAO protocol.\nParameter\nType\nDescription\ntargets\naddress[]","metadata":{"loc":{"lines":{"from":1571,"to":1590}}}}],["1236",{"pageContent":"Calling this method creates a proposal to change & update the JustLend DAO protocol.\nParameter\nType\nDescription\ntargets\naddress[]\nTarget addresses for calls to be made during proposal execution\nvalues\nuint[]\nValues to be passed to the calls\nsignatures\nstring[]\nFunction signatures\ncalldatas\nbytes[]\nData for each function\ndescription\nstring\nA Readable message of what exactly the proposal changes\nReturns: The ID of this proposal\nconst result = governorBravo.propose(targets, values, signatures, calldatas, description).send({\n  feeLimit:10_000_000_000,\n  callValue:0,\n  shouldPollResponse:true\n});\nqueue()\nContract: GovernorBravo\nfunction queue(uint proposalId) public\nCalling this method moves a successful proposal into the Timelock waiting period. The waiting period begins when this method is successfully called.\nParameter\nType\nDescription\nproposalId\nuint\nID of the successful proposal\nReturns: None, reverts on error.\nconst result = governorBravo.queue(proposalId).send({","metadata":{"loc":{"lines":{"from":1590,"to":1626}}}}],["1237",{"pageContent":"Parameter\nType\nDescription\nproposalId\nuint\nID of the successful proposal\nReturns: None, reverts on error.\nconst result = governorBravo.queue(proposalId).send({\n  feeLimit:10_000_000_000,\n  callValue:0,\n  shouldPollResponse:true\n});\nexecute()\nContract: GovernorBravo\nfunction execute(uint proposalId) public payable\nCalling this method executes the proposal whose waiting period has already been ended. Actions in the proposal will be invoked during the execution.\nParameter\nType\nDescription\nproposalId\nuint\nID of the proposal to be executed\nReturns: None, reverts on error.\nconst result = governorBravo.execute(proposalId).send({\n  feeLimit:10_000_000_000,\n  callValue:0,\n  shouldPollResponse:true\n});\ncancel()\nContract: GovernorBravo\nfunction cancel(uint proposalId) public\nCalling this function cancels a proposal. A proposal can be cancelled at any time prior to its execution.\nParameter\nType\nDescription\nproposalId\nuint\nID of the proposal to be cancelled\nReturns: None, reverts on error.","metadata":{"loc":{"lines":{"from":1626,"to":1664}}}}],["1238",{"pageContent":"Parameter\nType\nDescription\nproposalId\nuint\nID of the proposal to be cancelled\nReturns: None, reverts on error.\nconst result = governorBravo.cancel(proposalId).send({\n  feeLimit:10_000_000_000,\n  callValue:0,\n  shouldPollResponse:true\n});\ngetActions()\nContract: GovernorBravo\nfunction getActions(uint proposalId) public view returns (address[] memory targets, uint[] memory values, string[] memory signatures, bytes[] memory calldatas)\nCalling this method gets the actions of an exact proposal.\nParameter\nType\nDescription\nproposalId\nuint\nID of the proposal\nReturns\nType\nDescription\ntargets\naddress[]\nTarget addresses for calls to be made during proposal execution\nvalues\nuint[]\nValues to be passed to the calls\nsignatures\nstring[]\nFunction signatures\ncalldatas\nbytes[]\nData for each function\nReturns: The ID of this proposal\nconst {0: targets, 1: values, 2: signatures, 3: calldatas} = governorBravo.getActions(proposalId).call();\ngetReceipt()\nContract: GovernorBravo","metadata":{"loc":{"lines":{"from":1664,"to":1704}}}}],["1239",{"pageContent":"Data for each function\nReturns: The ID of this proposal\nconst {0: targets, 1: values, 2: signatures, 3: calldatas} = governorBravo.getActions(proposalId).call();\ngetReceipt()\nContract: GovernorBravo\nfunction getReceipt(uint proposalId, address voter) public view returns (Receipt memory)\nCalling this method gets the votes of a specified voter on a proposal.\nParameter\nType\nDescription\nproposalId\nuint\nID of the specified proposal\nvoter\naddress\nAddress of the specified account\nReturns\nType\nDescription\nReceipt\nstruct\nbool hasVoted // voted or not\nbool support // for or against\nuint96 votes //vote count\nconst {hasVoted, support, votes} = governorBravo.getReceipt(proposalId, voter).call();\nstate()\nContract: GovernorBravo\nfunction state(uint proposalId) public view returns (ProposalState)\nCalling this method returns the state of a specified proposal.\nParameter\nType\nDescription\nproposalId\nuint\nID of the specified proposal\nReturns\nType\nDescription\nProposalState\nenum\nPending\nActive\nCanceled","metadata":{"loc":{"lines":{"from":1704,"to":1746}}}}],["1240",{"pageContent":"Parameter\nType\nDescription\nproposalId\nuint\nID of the specified proposal\nReturns\nType\nDescription\nProposalState\nenum\nPending\nActive\nCanceled\nDefeated\nSucceeded\nQueued\nExpired\nExecuted\nconst result = governorBravo.state(proposalId).call();\nPoll & Vote\ndeposit()\nContract: WJST\nfunction deposit(uint256 sad) public\nCalling this method exchanges JST for WJST at a one-to-one ratio.\nParameter\nType\nDescription\nsad\nuint256\nNumber of votes(WJST) to exchange\nReturns: None, reverts on error\nconst result = wjst.deposit(number).send({\n  feeLimit:10_000_000_000,\n  callValue:0,\n  shouldPollResponse:true\n});\ncastVote()\nContract: GovernorBravo\nfunction castVote(uint proposalId, uint votes, bool support) public\nCalling this method casts a vote on a proposal. The voting weight will be calculated at the time the proposal's state becomes active.\nParameter\nType\nDescription\nproposalId\nuint\nID of the proposal to vote\nvotes\nuint\nNumber of the votes to be cast\nsupport\nbool\nFor or against","metadata":{"loc":{"lines":{"from":1746,"to":1798}}}}],["1241",{"pageContent":"Parameter\nType\nDescription\nproposalId\nuint\nID of the proposal to vote\nvotes\nuint\nNumber of the votes to be cast\nsupport\nbool\nFor or against\nReturns: None, revers on error.\nconst result = governorBravo.castVote(proposalId,votes,support).send({\n  feeLimit:10_000_000_000,\n  callValue:0,\n  shouldPollResponse:true\n});\ncastVoteWithReason()\nContract: GovernorBravo\nfunction castVoteWithReason(uint proposalId, uint votes, bool support, string calldata reson) public\nCalling this method casts a vote on a proposal. The reason can be submitted simultaneously. \nParameter\nType\nDescription\nproposalId\nuint\nID of the proposal to vote\nvotes\nuint\nNumber of the votes to be cast\nsupport\nbool\nFor or against\nreason\nstring\nvoting reason\nReturns: None, revers on error.\nconst result = governorBravo.castVote(proposalId,votes,support,reason).send({\n  feeLimit:10_000_000_000,\n  callValue:0,\n  shouldPollResponse:true\n});\ncastVoteBySig()\nContract: GovernorBravo","metadata":{"loc":{"lines":{"from":1798,"to":1842}}}}],["1242",{"pageContent":"const result = governorBravo.castVote(proposalId,votes,support,reason).send({\n  feeLimit:10_000_000_000,\n  callValue:0,\n  shouldPollResponse:true\n});\ncastVoteBySig()\nContract: GovernorBravo\nfunction castVoteBySig(uint proposalId, uint votes, bool support, uint8 v, bytes32 r, bytes32 s) public\nCalling this method casts votes on a specified proposal. Comparing with castVote(), this method allows offline signature.\nParameter\nType\nDescription\nproposalId\nuint\nID of the proposal to vote\nvotes\nuint\nNumber of the votes to be cast\nsupport\nbool\nFor or against\nv\nuint8\nRecover byte of the signature\nr\nbytes32\nHalf of the ECDSA signature pair\ns\nbytes32\nHalf of the ECDSA signature pair\nReturns: None, reverts on error.\nconst result = governorBravo.castVote(proposalId,votes,support,v,r,s).send({\n  feeLimit:10_000_000_000,\n  callValue:0,\n  shouldPollResponse:true\n});","metadata":{"loc":{"lines":{"from":1842,"to":1877}}}}],["1243",{"pageContent":"Comptroller Integration\nIntroduction\nThe Comptroller is the risk management module of the JustLend DAO protocol. It determines how much collateral should users keep to avoid liquidation.\nThe Comptroller is implemented as an upgradable contract. The entrance is ; the implementation is .\nRelevant Methods\nMarkets\nenterMarkets()\nfunction enterMarkets(address[] memory cTokens) public returns (uint[] memory)\nCalling this method enters a list of markets to supply or borrow.\nParameter\nType\nDescription\ncTokens\naddress[]\nAddress list of the markets to enter\nReturns: For each market, returns 0 for success, otherwise an error code.\nconst result = comptroller.enterMarket(addresses).send({\n  feeLimit:10_000_000_000,\n  callValue:0,\n  shouldPollResponse:true\n});\nexitMarket()\nfunction exitMarket(address cTokenAddress) external returns (uint)\nCalling this method exits a currently entered market.\nParameter\nType\nDescription\ncTokenAddress\naddress\nMarket address to quit","metadata":{"loc":{"lines":{"from":1880,"to":1909}}}}],["1244",{"pageContent":"function exitMarket(address cTokenAddress) external returns (uint)\nCalling this method exits a currently entered market.\nParameter\nType\nDescription\ncTokenAddress\naddress\nMarket address to quit\nReturns: 0 on success, otherwise an error code.\nconst result = comptroller.exitMarket(address).send({\n  feeLimit:10_000_000_000,\n  callValue:0,\n  shouldPollResponse:true\n});\ngetAssetsIn()\nfunction getAssetsIn(address account) external view returns (CToken[] memory)\nCalling this method returns a list of already entered markets.\nParameter\nType\nDescription\naccount\naddress\nThe markets this account enters will be returned \nReturns: Markets have been entered by the specified address.\nconst result = comptroller.getAssetsIn(account).call();\nmarkets()\nfunction markets(address cTokenAddress) view returns (bool, uint, bool)\nCalling this method returns the status of a market(isListed, collateralFactorMantissa, comped)\nParameter\nType\nDescription\ncTokenAddress\naddress\nMarket address\nReturns\nType\nDescription","metadata":{"loc":{"lines":{"from":1909,"to":1945}}}}],["1245",{"pageContent":"Calling this method returns the status of a market(isListed, collateralFactorMantissa, comped)\nParameter\nType\nDescription\ncTokenAddress\naddress\nMarket address\nReturns\nType\nDescription\nisListed\nbool\nWhether recognized by comptroller\ncollateralFactorMantissa\nuint\nThe value can be borrowed(scaled by 1e18)\ncomped\nbool\nWhether suppliers & borrowers can get jst dividends\nconst {0: isListed, 1: collateralFactorMantissa, 2: isComped} = comptroller.markets(address).call();\nCollateral & Liquidation\ngetAccountLiquidity()\nfunction getAccountLiquidity(address account) public view returns (uint, uint, uint)\nCalling this method returns the liquidity and shortfall of a user. \nParameter\nType\nDescription\naccount\naddress\nAddress to be queried\nReturns\nType\nDescription\nerror\nuint\n0 for success, otherwise an error code\nliquidity\nuint\ncurrent liquidity\nshortfall\nuint \nThe shortfall value of the account's collateral requirement","metadata":{"loc":{"lines":{"from":1945,"to":1986}}}}],["1246",{"pageContent":"Returns\nType\nDescription\nerror\nuint\n0 for success, otherwise an error code\nliquidity\nuint\ncurrent liquidity\nshortfall\nuint \nThe shortfall value of the account's collateral requirement \nconst {0: error, 1: liquidity, 2: shortfall} = comptroller.getAccountLiquidity(account).call();\ncloseFactorMantissa()\nfunction closeFactorMantissa() view returns (uint256)\nCalling this method gets the percentage of a liquidatable account should repay in a single liquidation. The range is 0%-100%. The calculation result of this method applies to a single asset.\nReturns: The close factor, scaled by 1e18\nconst result = comptroller.closeFactorMantissa().call();\nliquidationIncentiveMantissa()\nfunction liquidationIncentiveMantissa() view returns (uint256)\nCalling this method gets liquidators' incentives. The incentive is for underwater accounts. Part of this will be given to jToken reserves according to the seize share.\nReturns: The liquidation incentive, scaled by 1e18","metadata":{"loc":{"lines":{"from":1986,"to":2007}}}}],["1247",{"pageContent":"Returns: The liquidation incentive, scaled by 1e18\nconst result = comptroller.liquidationIncentiveMantissa().call();\nKey Events\nEvent\nDescription\nMarketEntered(address cToken, address account)\nEmits when successfully entering a market\nMarketExited(address cToken, address account)\nEmits when successfully exit a market\nError Codes\nCode\nName\nDescription\n0\nNO_ERROR\nSuccess\n1\nUNAUTHORIZED\nThe sender is not authorized to perform this action.\n2\nCOMPTROLLER_MISMATCH\nLiquidation cannot be performed in markets with different comptrollers.\n3\nINSUFFICIENT_SHORTFALL\nThe account does not have sufficient shortfall to perform this action.\n4\nINSUFFICIENT_LIQUIDITY\nThe account does not have sufficient liquidity to perform this action.\n5\nINVALID_CLOSE_FACTOR\nThe close factor is not valid.\n6\nINVALID_COLLATERAL_FACTOR\nThe collateral factor is not valid.\n7\nINVALID_LIQUIDATION_INCENTIVE\nThe liquidation incentive is invalid.\n8\nMARKET_NOT_ENTERED\nThe market has not been entered by the account.\n9","metadata":{"loc":{"lines":{"from":2007,"to":2047}}}}],["1248",{"pageContent":"The collateral factor is not valid.\n7\nINVALID_LIQUIDATION_INCENTIVE\nThe liquidation incentive is invalid.\n8\nMARKET_NOT_ENTERED\nThe market has not been entered by the account.\n9\nMARKET_NOT_LISTED\nThe market is not currently listed by the comptroller.\n10\nMARKET_ALREADY_LISTED\nAn admin tried to list the same market more than once.\n11\nMATH_ERROR\nA math calculation error occurred.\n12\nNONZERO_BORROW_BALANCE\nThe action cannot be performed since the account carries a borrow balance.\n13\nPRICE_ERROR\nThe comptroller could not obtain a required price of an asset.\n14\nREJECTION\nThe comptroller rejects the action requested by the market.\n15\nSNAPSHOT_ERROR\nThe comptroller could not get the account borrows and exchange rate from the market.\n16\nTOO_MANY_ASSETS\nAttempted to enter more markets than are currently supported.\n17\nTOO_MUCH_REPAY\nAttempted to repay more than is allowed by the protocol.\nFailure Info\n​\nCode\nValue\n0\nACCEPT_ADMIN_PENDING_ADMIN_CHECK\n1\nACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK\n2","metadata":{"loc":{"lines":{"from":2047,"to":2089}}}}],["1249",{"pageContent":"17\nTOO_MUCH_REPAY\nAttempted to repay more than is allowed by the protocol.\nFailure Info\n​\nCode\nValue\n0\nACCEPT_ADMIN_PENDING_ADMIN_CHECK\n1\nACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK\n2\nEXIT_MARKET_BALANCE_OWED\n3\nEXIT_MARKET_REJECTION\n4\nSET_CLOSE_FACTOR_OWNER_CHECK\n5\nSET_CLOSE_FACTOR_VALIDATION\n6\nSET_COLLATERAL_FACTOR_OWNER_CHECK\n7\nSET_COLLATERAL_FACTOR_NO_EXISTS\n8\nSET_COLLATERAL_FACTOR_VALIDATION\n9\nSET_COLLATERAL_FACTOR_WITHOUT_PRICE\n10\nSET_IMPLEMENTATION_OWNER_CHECK\n11\nSET_LIQUIDATION_INCENTIVE_OWNER_CHECK\n12\nSET_LIQUIDATION_INCENTIVE_VALIDATION\n13\nSET_MAX_ASSETS_OWNER_CHECK\n14\nSET_PENDING_ADMIN_OWNER_CHECK\n15\nSET_PENDING_IMPLEMENTATION_OWNER_CHECK\n16\nSET_PRICE_ORACLE_OWNER_CHECK\n17\nSUPPORT_MARKET_EXISTS\n18\nSUPPORT_MARKET_OWNER_CHECK","metadata":{"loc":{"lines":{"from":2089,"to":2133}}}}],["1250",{"pageContent":"sTRX Contract Developer Doc\nsTRX Interface\nQuery Interface\nExchange rate\nfunction exchangeRate() public view returns (uint256)\nMethod: Query the exchange rate between sTRX and TRX\nParameters: None\nReturns: Exchange rate, 1 sTRX / 1 TRX exchange rate, scaled by 1e18\n​\nTotal TRX assets\nfunction totalUnderlying() public view returns (uint256)\nMethod: Query the total TRX assets managed by contract\nParameters: None\nReturns: The total assets of TRX managed by contract, the minimum unit\n​\nUser balance in TRX\nfunction balanceInTrx(address _account) public view returns (uint256)\nMethod: Query the amount of TRX corresponding to the sTRX held by user\nParameters:\nParameter\nType\nDescription\n_account\naddress\nUser address\nReturns: The amount of TRX corresponding to the sTRX held by user, the minimum unit\n​\nWrite Interface\nDeposit TRX\nfunction deposit() external payable returns (uint256)\nMethod: Deposit TRX assets and receive sTRX\nParameters:\nParameter\nType\nDescription\nmsg.value\n​","metadata":{"loc":{"lines":{"from":2135,"to":2171}}}}],["1251",{"pageContent":"​\nWrite Interface\nDeposit TRX\nfunction deposit() external payable returns (uint256)\nMethod: Deposit TRX assets and receive sTRX\nParameters:\nParameter\nType\nDescription\nmsg.value\n​\nThe amount of TRX to deposit\nReturns: The amount of sTRX received by user through exchange, the minimum unit\n​\nWithdraw sTRX\nfunction withdraw(uint256 tokenAmount) external returns (uint256)\nMethod: specify the amount of sTRX to withdraw, the minimum unit\nParameters:\nParameter\nType\nDescription\ntokenAmount\nuint256\nThe amount of sTRX to withdraw\nReturns: The amount of TRX to be unfrozen when user withdraws, the minimum unit\n​\nWithdraw sTRX (with the amount of TRX specified)\nfunction withdrawExact(uint256 trxAmount) external returns (uint256)\nMethod: specify the amount of TRX user hopes to obtain through withdrawal, the minimum unit\nParameters:\nParameter\nType\nDescription\ntokenAmount\nuint256\nThe amount of sTRX to withdraw\nReturns: The amount of sTRX withdrawn by user, the minimum unit\n​\nClaim TRX","metadata":{"loc":{"lines":{"from":2171,"to":2209}}}}],["1252",{"pageContent":"Parameters:\nParameter\nType\nDescription\ntokenAmount\nuint256\nThe amount of sTRX to withdraw\nReturns: The amount of sTRX withdrawn by user, the minimum unit\n​\nClaim TRX\nfunction claim() external returns (uint256)\nMethod: Claim the ready-to-be-withdrawn TRX unfrozen in the earliest round\nParameters: None\nReturns: The amount of TRX claimed by user in the earliest unfreezing round, the minimum unit\n​\nClaim all unfrozen TRX\nfunction claimAll() external returns (uint256)\nMethod: Claim all ready-to-be-withdrawn, unfrozen TRX \nParameters: None\nReturns: The amount of TRX claimed by the user for all expired unfreezing rounds, the minimum unit\n​\nKey Events\nEvent\nDescription\nDeposit(address user, uint256 trxAmount, uint256 strx, uint256 userHoldStrx)\nEmits when user successfully deposits TRX\ntrxAmount: the amount of TRX user deposits\nstrx : the amount of sTRX user gets\nuserHoldStrx: the total amount of sTRX held by user after the deposit","metadata":{"loc":{"lines":{"from":2209,"to":2237}}}}],["1253",{"pageContent":"Emits when user successfully deposits TRX\ntrxAmount: the amount of TRX user deposits\nstrx : the amount of sTRX user gets\nuserHoldStrx: the total amount of sTRX held by user after the deposit\nWithdraw(address user, uint256 strx, uint256 trxAmount, uint256 userHoldStrx)\n​\nEmits when user successfully withdraws sTRX\nstrx : the amount of sTRX user withdraws\ntrxAmount: the amount of TRX user gets\nuserHoldStrx: the total amount of sTRX held by user after the withdrawal \nClaim(address user, uint256 trxAmount)\n​\nEmits when user successfully claims TRX\ntrxAmount: the amount of TRX user claims\n​\nMarket Interface\nQuery Interface\nQuery Rental order information\nfunction rentals(\n        address renter, \n        address receiver, \n        uint256 resourceType\n    ) \n        public \n        view \n        returns (RentalInfo)\n​\nstruct RentalInfo {\n    uint256 amount;\n    uint256 securityDeposit;\n    uint256 rentIndex;\n}\nMethod: View the information of an order\nParameters:\nParameter\nType\nDescription","metadata":{"loc":{"lines":{"from":2237,"to":2273}}}}],["1254",{"pageContent":"​\nstruct RentalInfo {\n    uint256 amount;\n    uint256 securityDeposit;\n    uint256 rentIndex;\n}\nMethod: View the information of an order\nParameters:\nParameter\nType\nDescription\nrenter\naddress\nRent payer\nreceiver\naddress\nResource receiver\nresourceType\nuint256\nResource type, 0: bandwidth; 1: energy\nReturns:\nField\nType\nDescription\namount\nuint256\nOrder resources corresponding to the number of TRX\nsecurityDeposit\nuint256\nOrder deposit, not updated to current\nrentIndex\nuint256\nOrder's global index at the time of its last update\n​\nQuery current rental order information (updated to current)\nfunction getRentInfo(\n        address renter,\n        address receiver,\n        uint256 resourceType\n    )\n        external\n        view\n        returns (uint256, uint256)\nMethod: View the information of an order, with the returned data updated to current\nParameters：\nParameter\nType\nDescription\nrenter\naddress\nRent payer\nreceiver\naddress\nResource receiver\nresourceType\nuint256","metadata":{"loc":{"lines":{"from":2273,"to":2328}}}}],["1255",{"pageContent":"Parameters：\nParameter\nType\nDescription\nrenter\naddress\nRent payer\nreceiver\naddress\nResource receiver\nresourceType\nuint256\nResource type, 0: bandwidth; 1: energy\nReturns:\nField\nType\nDescription\n[0] securityDeposit\nuint256\nOrder deposit, updated to current\n[1] rentIndex\nuint256\nReal-time global index of the order at the time of query\n​\nWrite Interface\nRent resources\nfunction rentResource(\n        address receiver,\n        uint256 amount,\n        uint256 resourceType\n    )\n        external\n        payable\nMethod: Rent resources, allow amount = 0 (extension only) or msg.value = 0 (no new deposit), both are 0 is not allowed.\nParameters:\nParameter\nType\nDescription\nmsg.sender\n​\nThe payer for this rental\nreceiver\naddress\nThe resource receiver of this rental Not allowed to be a contract or an unactivated account\namount\nuint256\nThe rent resource corresponding to the amount of TRX, the minimum unit, if the amount is not 0 (renewal only), it must be greater than 1 TRX\nresourceType\nuint256","metadata":{"loc":{"lines":{"from":2328,"to":2376}}}}],["1256",{"pageContent":"amount\nuint256\nThe rent resource corresponding to the amount of TRX, the minimum unit, if the amount is not 0 (renewal only), it must be greater than 1 TRX\nresourceType\nuint256\nResource type, 0: bandwidth; 1: energy\nmsg.value\n​\nNew deposit of this time\nReturns: None, revert on failure\n​\nReturn resources (called by payer)\nfunction returnResource(\n        address receiver,\n        uint256 amount,\n        uint256 resourceType\n    )\n        external\n        returns (uint256)\nMethod: Return resources. Return resources in the order (msg.sender, receiver, resourceType). When the remaining deposit is insufficient, all resources will be forcibly emptied, and the remaining deposit will be returned to the order payer.\nParameters:\nParameter\nType\nDescription\nmsg.sender\n​\nOrder payer\nreceiver\naddress\nResource receiver\namount\nuint256\nThe amount of TRX correspounding to the resources returned, the minimum unit\nresourceType\nuint256\nResource type, 0: bandwidth; 1: energy","metadata":{"loc":{"lines":{"from":2376,"to":2411}}}}],["1257",{"pageContent":"Order payer\nreceiver\naddress\nResource receiver\namount\nuint256\nThe amount of TRX correspounding to the resources returned, the minimum unit\nresourceType\nuint256\nResource type, 0: bandwidth; 1: energy\nReturns: The amount of the deposit returned in this operation. 0 for a partial return\n​\nReturn resources (called by receiver)\nfunction returnResourceByReceiver(\n        address renter,\n        uint256 amount,\n        uint256 resourceType\n    )\n        external\n        returns (uint256)\nMethod: Return resources. Return resources in the order (renter, msg.sender, resourceType). When the remaining deposit is insufficient, all resources will be forcibly emptied, and the remaining deposit will be returned to the order payer\nParameters:\nParameter\nType\nDescription\nmsg.sender\n​\nResource receiver\nrenter\naddress\nOrder payer\namount\nuint256\nThe amount of TRX correspounding to the resources returned, the minimum unit\nresourceType\nuint256\nResource type, 0: bandwidth; 1: energy","metadata":{"loc":{"lines":{"from":2411,"to":2447}}}}],["1258",{"pageContent":"​\nResource receiver\nrenter\naddress\nOrder payer\namount\nuint256\nThe amount of TRX correspounding to the resources returned, the minimum unit\nresourceType\nuint256\nResource type, 0: bandwidth; 1: energy\nReturns: The amount of the deposit returned in this operation. 0 for partial return\n​\nLiquidate\nfunction liquidate(\n        address renter,\n        address receiver,\n        uint256 resourceType\n    )\n        external\n        returns (uint256)\nMethod: When the order deposit is insufficient, the liquidator can liquidate the order, and the liquidator will get the liquidation reward. If there is any remaining deposit, it will be returned to the order payer.\nParameters:\nParameter\nType\nDescription\nmsg.sender\n​\nLiquidator\nrenter\naddress\nOrder payer\nReceiver\naddress\nResource receiver\nresourceType\nuint256\nResource type, 0: bandwidth; 1: energy\nReturns: Liquidation reward in this operation\n​\nKey Events\nEvent\nDescription","metadata":{"loc":{"lines":{"from":2447,"to":2489}}}}],["1259",{"pageContent":"renter\naddress\nOrder payer\nReceiver\naddress\nResource receiver\nresourceType\nuint256\nResource type, 0: bandwidth; 1: energy\nReturns: Liquidation reward in this operation\n​\nKey Events\nEvent\nDescription\nRentResource( address indexed renter, address indexed receiver, uint256 addedAmount, uint256 resourceType, uint256 addedSecurityDeposit, uint256 amount)\nEmits when renting occurs\naddedAmount: the TRX amount (minimum unit) of the newly-rent resource\naddedSecurityDeposit: the added deposit amount\namount: the total amount of rental resources in the order after renting\nReturnResource( address indexed renter, address indexed receiver, uint256 subedAmount, uint256 resourceType, uint256 usageRental, uint256 subedSecurityDeposit, uint256 amount)\nEmits when resources are returned\nsubedAmount: the amount of TRX (minimum unit) for returned resources\nusageRental: the cost of recovery for the used resources in the returned resources","metadata":{"loc":{"lines":{"from":2489,"to":2511}}}}],["1260",{"pageContent":"Emits when resources are returned\nsubedAmount: the amount of TRX (minimum unit) for returned resources\nusageRental: the cost of recovery for the used resources in the returned resources\nsubedSecurityDeposit: the refunded deposit amount (0 for partial returns)\namount: the remaining amount of rental resources after returning resources\nLiquidate( address indexed liquidator, address indexed renter, address indexed receiver, uint256 amount, uint256 resourceType, uint256 usageRental, uint256 liquidateFee, uint256 sendBack)\nEmits when liquidation occurs\namount: the amount of TRX (minimum unit) of the order resource\nusageRental: the fee for the recovery time of the order resource usage\nliquidateFee: the liquidation reward received by the liquidator\nsendBack: the remaining deposit received by the payer","metadata":{"loc":{"lines":{"from":2511,"to":2521}}}}],["1261",{"pageContent":"Manual Claim Mining Reward\nBackground \nJustLend DAO upgraded the mining reward distribution from AirDrop to User self-claim on Feb 20th, 2023. \nPlease check the detailed announcement at: \n​​\nAnd please refer to the claim guide on ​\n​\nManually claim the reward from the distribution contract\nThe user can default claim the reward from the JustLend DAO UI page. However,  users can also manually claim the reward by triggering the if the have difficulty in claiming from the JustLend DAO UI. For example, user account has multi-sign set up.\nClaim from contract on Tronscan.org \nCurrently user can only claim one by one on Tronscan if they have more than one un-claimed records. The function is `claim` and requires 4 parameters.\nSingle Claim Transaction sample:\n​​\nMethod and parameters:\nHow to get the parameters:","metadata":{"loc":{"lines":{"from":2523,"to":2537}}}}],["1262",{"pageContent":"Single Claim Transaction sample:\n​​\nMethod and parameters:\nHow to get the parameters:\nAPI:  here let us use TR4AHdK6LKANAcP12Eqdy2t45Dt7PwbpT4 for example, you can change it to any other address according to your need. All the parameters can be queried from JustLend DAO API, below are the API detail. \nNote: The limit of API access frequency is 10 times/second. Please optimize your code logic to prevent API instability caused by high access frequency.\n​ \nDescription of the return value:\n“22”:{}  : represents an un-claimed record, there will be more than one record if the user did not claim the previous reward. \nBelow is the value needed for trigger the `claim` function: \n“merkleIndex” \n“Index” \n“amount” \n“prooft”  \nSend the transaction on Tronscan.rog\nFill in all the parameters and click the “Send” button.  See the detail from the below screenshot.\nClaim with SW program \nHere we use Tronweb as an example to go through the claim.","metadata":{"loc":{"lines":{"from":2537,"to":2554}}}}],["1263",{"pageContent":"Fill in all the parameters and click the “Send” button.  See the detail from the below screenshot.\nClaim with SW program \nHere we use Tronweb as an example to go through the claim. \nWith TronWeb, it is super easy to trigger the `claim` or `multiClaim` function to get the rewards. \nCode sample for `Claim`：\nThe first step is the same as claim on tronscan, user need to get all the parameters from the JustLend DAO API. \n​ \nBelow are the code samples:\nconst funcAbi = [\n      {\n        'inputs': [\n          {\n            'components': [\n              {\n                'internalType': 'uint256',\n                'name': 'merkleIndex',\n                'type': 'uint256'\n              },\n              {\n                'internalType': 'uint256',\n                'name': 'index',\n                'type': 'uint256'\n              },\n              {\n                'internalType': 'uint256',\n                'name': 'amount',\n                'type': 'uint256'\n              },\n              {","metadata":{"loc":{"lines":{"from":2554,"to":2582}}}}],["1264",{"pageContent":"},\n              {\n                'internalType': 'uint256',\n                'name': 'amount',\n                'type': 'uint256'\n              },\n              {\n                'internalType': 'bytes32[]',\n                'name': 'merkleProof',\n                'type': 'bytes32[]'\n              }\n            ],\n            'internalType': 'struct MerkleDistributor.Basic[]',\n            'name': 'basic',\n            'type': 'tuple[]'\n          }\n        ],\n        'name': 'multiClaim',\n        'outputs': [],\n        'stateMutability': 'nonpayable',\n        'type': 'function'\n      }\n    ];\n​\nconst parametersV2 = [\n    [\n        [\n            \"0x07\",\n            \"0x1edd\",\n            \"0xf5a07bac417c1\",\n            [\n                \"0xe747f73c964cae0e90d84b715247e967aa813dc182b29aa96f4a62a5b01881f1\",\n                \"0xade0f346370e361e34a5efeba7ac3e84a15c12350c296edae180999db7f287c1\",\n                \"0x5fc30f3dc7656845b3133e8c75ba3f753717ba2c5ad53cac3c52720a885b738a\",","metadata":{"loc":{"lines":{"from":2582,"to":2615}}}}],["1265",{"pageContent":"\"0xade0f346370e361e34a5efeba7ac3e84a15c12350c296edae180999db7f287c1\",\n                \"0x5fc30f3dc7656845b3133e8c75ba3f753717ba2c5ad53cac3c52720a885b738a\",\n                \"0xebf28cc1674de2823ee018daa41122832f40aede383f47e37640668e4801ed3c\",\n                \"0x2fbdcfdcc43b3c0452c48c4150d0d6eb6f5e30e99858f2641cacf793fdf3c57d\",\n                \"0xe7950e05764f3c31c519994a1caa1f748104dd7661ca753e2f6f937ff5babe1d\",\n                \"0x13e7afa426c68c8d284fba97358329128e55336e65ca4b93f9606a76694ad9b4\",\n                \"0x905d6de418a5b5bb298774e4ad6d01c6e8895a4f5f73d13d98f5ba7fe140e1a9\",\n                \"0x22340ab3ac7c69e7d67e267e05e4f10682e46b5a43b2c7195489ae0b8badeed2\",\n                \"0xeaf5056bb155b55f7e8f3b9759815bdce9036299f3d8235bf6f53796648ee3fb\",\n                \"0x63f1602ac026332195faa00bf3bcffbcf5fdc49455d5caba553d6551776c24c9\",\n                \"0x2d6488b5949b6099d3942fb01c064aaf7ddc21a5ef91889fb6f74063b30540e1\",","metadata":{"loc":{"lines":{"from":2615,"to":2625}}}}],["1266",{"pageContent":"\"0x63f1602ac026332195faa00bf3bcffbcf5fdc49455d5caba553d6551776c24c9\",\n                \"0x2d6488b5949b6099d3942fb01c064aaf7ddc21a5ef91889fb6f74063b30540e1\",\n                \"0x9853f10432a3e64e5013ce0a1197a2558069f431d4ad3be5ffeaa7425dbf183f\",\n                \"0x02824cfa0446139829b1f83c2ce682a136c6c1609b077f0020e5157bb4621a14\",\n                \"0x64bb7f663f1338d807393b26a8dbca8be74974640d7bab2bdfcaa4fe6e13b7b3\"\n            ]\n        ]\n    ]\n];\nconst rawParameter = tronWeb.utils.abi.encodeParamsV2ByABI(funcAbi[0], parametersV2);\nconst options = { shieldedParameter: rawParameter, feeLimit:200000000};\nconst functionSelector = 'claim((uint256,uint256,uint256,bytes32[]))';\nconst transaction = await tronWeb.transactionBuilder.triggerSmartContract(\n      'TQoiXqruw4SqYPwHAd6QiNZ3ES4rLsejAj',\n      functionSelector,\n      options,\n      [],\n      'TH4Vi2SXuiYCpnWykZgmphEKfajVNbFYA7'\n    );\n​\nCode sample for `multiClaim`：","metadata":{"loc":{"lines":{"from":2625,"to":2645}}}}],["1267",{"pageContent":"'TQoiXqruw4SqYPwHAd6QiNZ3ES4rLsejAj',\n      functionSelector,\n      options,\n      [],\n      'TH4Vi2SXuiYCpnWykZgmphEKfajVNbFYA7'\n    );\n​\nCode sample for `multiClaim`：\nThe first step is the same as claim on tronscan, user need to get all the parameters from the JustLend DAO API. \n​ \nThere could be more than one records in the return value if there are more than one un-claimed rewards.  Below are the examples(it is not real data, just an example data):\n{    \n    \"22\": {\n        \"amount\": \"0xf748f6f4d54861\",\n        \"claimed\": true,\n        \"index\": \"0x1801\",\n        \"merkleIndex\": \"0x00\",\n        \"proof\": [\n            \"0x655c3609bae4d1db3d905b25d3bdd8ec79b83f5288b5756921d02fa7127714de\",\n            \"0xa9a6df5b336a2e52018a079eaec6c477952d56ecfdfdb0745160037c865a83d8\",\n            \"0xdd91a2295b96128ea32196f6a2228970dc22342f957be76c4297b517236a4daf\",\n            \"0xa29184873648fbf6d5fe67db3fc8036c145f4b5e7861c1c35bfa2606826a5d7d\",","metadata":{"loc":{"lines":{"from":2645,"to":2666}}}}],["1268",{"pageContent":"\"0xdd91a2295b96128ea32196f6a2228970dc22342f957be76c4297b517236a4daf\",\n            \"0xa29184873648fbf6d5fe67db3fc8036c145f4b5e7861c1c35bfa2606826a5d7d\",\n            \"0xdcd82bc3bea2e7a7a1d1a6502ab93c293f92f7e9928f0826d731da9d2a537b41\",\n            \"0xfda762589af4cd6812450f1f8b5b199094a81bde881d4f5f645b4dc32f74547c\",\n            \"0x3fb4c0c830f88413b6b9fd5f6f2a237ea36f1399f292e1303387f0499bda712d\",\n            \"0x2d16294f4390501b16eb8f94f5e8396b76d5307e9a38b099b6cbc5c083aa0534\",\n            \"0x2eabb0d475248f1f7ab63542a2c21f056f80d230cd6fb3c76afd3c32984115be\",\n            \"0x6cf17401cda4a192dc9e05bb5f67ac0e4d20834a93a6db85ddcd9a971720f2d8\",\n            \"0x8a137a9c92302ec8b9194fb313fa8074d308092ba3238e43d57b1972fbda9a33\",\n            \"0xd93c82752e5202d4006fb01a4af3b1381d6f6ae8871f392f993f474b2dc71d20\",\n            \"0xfacc476d236171a5fb8177283188d125756254e18865ce4fbd3367c1dec989e4\",\n            \"0xeed1fc29326b1156d0b44d431e4e3a5b21a78e70d156db235662da428421d2a8\",","metadata":{"loc":{"lines":{"from":2666,"to":2677}}}}],["1269",{"pageContent":"\"0xfacc476d236171a5fb8177283188d125756254e18865ce4fbd3367c1dec989e4\",\n            \"0xeed1fc29326b1156d0b44d431e4e3a5b21a78e70d156db235662da428421d2a8\",\n            \"0xb3c366576c84eb2e9a6abb9f9676ef6483a2a4945e4b32482e6ab8c2d8630971\"\n        ],\n        \"merkleRoot\": \"0x560729bcf5ab7fc1916f6d67b22d59b2d007577174e1d6c6b77bd078598ef788\"\n    },\n    \"23\": {\n        \"amount\": \"0xf748f6f4d54861\",\n        \"claimed\": false,\n        \"index\": \"0x1801\",\n        \"merkleIndex\": \"0x01\",\n        \"proof\": [\n            \"0x655c3609bae4d1db3d905b25d3bdd8ec79b83f5288b5756921d02fa7127714de\",\n            \"0xa9a6df5b336a2e52018a079eaec6c477952d56ecfdfdb0745160037c865a83d8\",\n            \"0xdd91a2295b96128ea32196f6a2228970dc22342f957be76c4297b517236a4daf\",\n            \"0xa29184873648fbf6d5fe67db3fc8036c145f4b5e7861c1c35bfa2606826a5d7d\",\n            \"0xdcd82bc3bea2e7a7a1d1a6502ab93c293f92f7e9928f0826d731da9d2a537b41\",\n            \"0xfda762589af4cd6812450f1f8b5b199094a81bde881d4f5f645b4dc32f74547c\",","metadata":{"loc":{"lines":{"from":2677,"to":2694}}}}],["1270",{"pageContent":"\"0xdcd82bc3bea2e7a7a1d1a6502ab93c293f92f7e9928f0826d731da9d2a537b41\",\n            \"0xfda762589af4cd6812450f1f8b5b199094a81bde881d4f5f645b4dc32f74547c\",\n            \"0x3fb4c0c830f88413b6b9fd5f6f2a237ea36f1399f292e1303387f0499bda712d\",\n            \"0x2d16294f4390501b16eb8f94f5e8396b76d5307e9a38b099b6cbc5c083aa0534\",\n            \"0x2eabb0d475248f1f7ab63542a2c21f056f80d230cd6fb3c76afd3c32984115be\",\n            \"0x6cf17401cda4a192dc9e05bb5f67ac0e4d20834a93a6db85ddcd9a971720f2d8\",\n            \"0x8a137a9c92302ec8b9194fb313fa8074d308092ba3238e43d57b1972fbda9a33\",\n            \"0xd93c82752e5202d4006fb01a4af3b1381d6f6ae8871f392f993f474b2dc71d20\",\n            \"0xfacc476d236171a5fb8177283188d125756254e18865ce4fbd3367c1dec989e4\",\n            \"0xeed1fc29326b1156d0b44d431e4e3a5b21a78e70d156db235662da428421d2a8\",\n            \"0xb3c366576c84eb2e9a6abb9f9676ef6483a2a4945e4b32482e6ab8c2d8630971\"\n        ],","metadata":{"loc":{"lines":{"from":2694,"to":2705}}}}],["1271",{"pageContent":"\"0xeed1fc29326b1156d0b44d431e4e3a5b21a78e70d156db235662da428421d2a8\",\n            \"0xb3c366576c84eb2e9a6abb9f9676ef6483a2a4945e4b32482e6ab8c2d8630971\"\n        ],\n        \"merkleRoot\": \"0x560729bcf5ab7fc1916f6d67b22d59b2d007577174e1d6c6b77bd078598ef788\"\n    },\n    \"24\": {\n        \"amount\": \"0xf748f6f4d54861\",\n        \"claimed\": false,\n        \"index\": \"0x1801\",\n        \"merkleIndex\": \"0x02\",\n        \"proof\": [\n            \"0x655c3609bae4d1db3d905b25d3bdd8ec79b83f5288b5756921d02fa7127714de\",\n            \"0xa9a6df5b336a2e52018a079eaec6c477952d56ecfdfdb0745160037c865a83d8\",\n            \"0xdd91a2295b96128ea32196f6a2228970dc22342f957be76c4297b517236a4daf\",\n            \"0xa29184873648fbf6d5fe67db3fc8036c145f4b5e7861c1c35bfa2606826a5d7d\",\n            \"0xdcd82bc3bea2e7a7a1d1a6502ab93c293f92f7e9928f0826d731da9d2a537b41\",\n            \"0xfda762589af4cd6812450f1f8b5b199094a81bde881d4f5f645b4dc32f74547c\",\n            \"0x3fb4c0c830f88413b6b9fd5f6f2a237ea36f1399f292e1303387f0499bda712d\",","metadata":{"loc":{"lines":{"from":2727,"to":2744}}}}],["1272",{"pageContent":"\"0xfda762589af4cd6812450f1f8b5b199094a81bde881d4f5f645b4dc32f74547c\",\n            \"0x3fb4c0c830f88413b6b9fd5f6f2a237ea36f1399f292e1303387f0499bda712d\",\n            \"0x2d16294f4390501b16eb8f94f5e8396b76d5307e9a38b099b6cbc5c083aa0534\",\n            \"0x2eabb0d475248f1f7ab63542a2c21f056f80d230cd6fb3c76afd3c32984115be\",\n            \"0x6cf17401cda4a192dc9e05bb5f67ac0e4d20834a93a6db85ddcd9a971720f2d8\",\n            \"0x8a137a9c92302ec8b9194fb313fa8074d308092ba3238e43d57b1972fbda9a33\",\n            \"0xd93c82752e5202d4006fb01a4af3b1381d6f6ae8871f392f993f474b2dc71d20\",\n            \"0xfacc476d236171a5fb8177283188d125756254e18865ce4fbd3367c1dec989e4\",\n            \"0xeed1fc29326b1156d0b44d431e4e3a5b21a78e70d156db235662da428421d2a8\",\n            \"0xb3c366576c84eb2e9a6abb9f9676ef6483a2a4945e4b32482e6ab8c2d8630971\"\n        ],\n        \"merkleRoot\": \"0x560729bcf5ab7fc1916f6d67b22d59b2d007577174e1d6c6b77bd078598ef788\"\n    }\n}\n​","metadata":{"loc":{"lines":{"from":2744,"to":2758}}}}],["1273",{"pageContent":"\"0xb3c366576c84eb2e9a6abb9f9676ef6483a2a4945e4b32482e6ab8c2d8630971\"\n        ],\n        \"merkleRoot\": \"0x560729bcf5ab7fc1916f6d67b22d59b2d007577174e1d6c6b77bd078598ef788\"\n    }\n}\n​\n`multiClaim`  can claim more than one rewards within a single transaction. User can also choose to use `multiClaim` for single claim. \nCode samples:  the `parametersV2`  here is dummy data. Do not use it on Mainnet.\nconst funcAbi = [\n      {\n        'inputs': [\n          {\n            'components': [\n              {\n                'internalType': 'uint256',\n                'name': 'merkleIndex',\n                'type': 'uint256'\n              },\n              {\n                'internalType': 'uint256',\n                'name': 'index',\n                'type': 'uint256'\n              },\n              {\n                'internalType': 'uint256',\n                'name': 'amount',\n                'type': 'uint256'\n              },\n              {\n                'internalType': 'bytes32[]',","metadata":{"loc":{"lines":{"from":2758,"to":2787}}}}],["1274",{"pageContent":"'internalType': 'uint256',\n                'name': 'amount',\n                'type': 'uint256'\n              },\n              {\n                'internalType': 'bytes32[]',\n                'name': 'merkleProof',\n                'type': 'bytes32[]'\n              }\n            ],\n            'internalType': 'struct MerkleDistributor.Basic[]',\n            'name': 'basic',\n            'type': 'tuple[]'\n          }\n        ],\n        'name': 'multiClaim',\n        'outputs': [],\n        'stateMutability': 'nonpayable',\n        'type': 'function'\n      }\n    ];\n​\nconst parametersV2 = [\n    [\n        [\n            \"0x07\",\n            \"0x1edd\",\n            \"0xf5a07bac417c1\",\n            [\n                \"0xe747f73c964cae0e90d84b715247e967aa813dc182b29aa96f4a62a5b01881f1\",\n                \"0xade0f346370e361e34a5efeba7ac3e84a15c12350c296edae180999db7f287c1\",\n                \"0x5fc30f3dc7656845b3133e8c75ba3f753717ba2c5ad53cac3c52720a885b738a\",","metadata":{"loc":{"lines":{"from":2787,"to":2818}}}}],["1275",{"pageContent":"\"0xade0f346370e361e34a5efeba7ac3e84a15c12350c296edae180999db7f287c1\",\n                \"0x5fc30f3dc7656845b3133e8c75ba3f753717ba2c5ad53cac3c52720a885b738a\",\n                \"0xebf28cc1674de2823ee018daa41122832f40aede383f47e37640668e4801ed3c\",\n                \"0x2fbdcfdcc43b3c0452c48c4150d0d6eb6f5e30e99858f2641cacf793fdf3c57d\",\n                \"0xe7950e05764f3c31c519994a1caa1f748104dd7661ca753e2f6f937ff5babe1d\",\n                \"0x13e7afa426c68c8d284fba97358329128e55336e65ca4b93f9606a76694ad9b4\",\n                \"0x905d6de418a5b5bb298774e4ad6d01c6e8895a4f5f73d13d98f5ba7fe140e1a9\",\n                \"0x22340ab3ac7c69e7d67e267e05e4f10682e46b5a43b2c7195489ae0b8badeed2\",\n                \"0xeaf5056bb155b55f7e8f3b9759815bdce9036299f3d8235bf6f53796648ee3fb\",\n                \"0x63f1602ac026332195faa00bf3bcffbcf5fdc49455d5caba553d6551776c24c9\",\n                \"0x2d6488b5949b6099d3942fb01c064aaf7ddc21a5ef91889fb6f74063b30540e1\",","metadata":{"loc":{"lines":{"from":2818,"to":2828}}}}],["1276",{"pageContent":"\"0x63f1602ac026332195faa00bf3bcffbcf5fdc49455d5caba553d6551776c24c9\",\n                \"0x2d6488b5949b6099d3942fb01c064aaf7ddc21a5ef91889fb6f74063b30540e1\",\n                \"0x9853f10432a3e64e5013ce0a1197a2558069f431d4ad3be5ffeaa7425dbf183f\",\n                \"0x02824cfa0446139829b1f83c2ce682a136c6c1609b077f0020e5157bb4621a14\",\n                \"0x64bb7f663f1338d807393b26a8dbca8be74974640d7bab2bdfcaa4fe6e13b7b3\"\n            ]\n        ],\n        [\n            \"0x08\",\n            \"0x1ede\",\n            \"0xf5a07bac417c2\",\n            [\n                \"0xe747f73c964cae0e90d84b715247e967aa813dc182b29aa96f4a62a5b01881f1\",\n                \"0xade0f346370e361e34a5efeba7ac3e84a15c12350c296edae180999db7f287c1\",\n                \"0x5fc30f3dc7656845b3133e8c75ba3f753717ba2c5ad53cac3c52720a885b738a\",\n                \"0xebf28cc1674de2823ee018daa41122832f40aede383f47e37640668e4801ed3c\",\n                \"0x2fbdcfdcc43b3c0452c48c4150d0d6eb6f5e30e99858f2641cacf793fdf3c57d\",","metadata":{"loc":{"lines":{"from":2983,"to":2999}}}}],["1277",{"pageContent":"\"0xebf28cc1674de2823ee018daa41122832f40aede383f47e37640668e4801ed3c\",\n                \"0x2fbdcfdcc43b3c0452c48c4150d0d6eb6f5e30e99858f2641cacf793fdf3c57d\",\n                \"0xe7950e05764f3c31c519994a1caa1f748104dd7661ca753e2f6f937ff5babe1d\",\n                \"0x13e7afa426c68c8d284fba97358329128e55336e65ca4b93f9606a76694ad9b4\",\n                \"0x905d6de418a5b5bb298774e4ad6d01c6e8895a4f5f73d13d98f5ba7fe140e1a9\",\n                \"0x22340ab3ac7c69e7d67e267e05e4f10682e46b5a43b2c7195489ae0b8badeed2\",\n                \"0xeaf5056bb155b55f7e8f3b9759815bdce9036299f3d8235bf6f53796648ee3fb\",\n                \"0x63f1602ac026332195faa00bf3bcffbcf5fdc49455d5caba553d6551776c24c9\",\n                \"0x2d6488b5949b6099d3942fb01c064aaf7ddc21a5ef91889fb6f74063b30540e1\",\n                \"0x9853f10432a3e64e5013ce0a1197a2558069f431d4ad3be5ffeaa7425dbf183f\",\n                \"0x02824cfa0446139829b1f83c2ce682a136c6c1609b077f0020e5157bb4621a14\",","metadata":{"loc":{"lines":{"from":2999,"to":3009}}}}],["1278",{"pageContent":"\"0x9853f10432a3e64e5013ce0a1197a2558069f431d4ad3be5ffeaa7425dbf183f\",\n                \"0x02824cfa0446139829b1f83c2ce682a136c6c1609b077f0020e5157bb4621a14\",\n                \"0x64bb7f663f1338d807393b26a8dbca8be74974640d7bab2bdfcaa4fe6e13b7b3\"\n            ]\n        ]\n    ]\n];\nconst rawParameter = tronWeb.utils.abi.encodeParamsV2ByABI(funcAbi[0], parametersV2);\nconst options = { shieldedParameter: rawParameter, feeLimit:200000000};\nconst functionSelector = 'multiClaim((uint256,uint256,uint256,bytes32[])[])';\nconst transaction = await tronWeb.transactionBuilder.triggerSmartContract(\n      'TUQb328PQfbredVY3qUD9NZ6DipFxSRZ84',\n      functionSelector,\n      options,\n    [],\n      'TH4Vi2SXuiYCpnWykZgmphEKfajVNbFYA7'\n    );","metadata":{"loc":{"lines":{"from":3186,"to":3202}}}}],["1279",{"pageContent":"Backend API\nMarket Information\nGET: https://openapi.just.network/lend/jtoken\nParameters: N/A\nReturns:\n{\n\t\"code\": 0,\n\t\"message\": \"SUCCESS\",\n\t\"data\": {\n\t\t\"tokenList\": [{\n\t\t\t\"address\": \"TDchKqQ8T2BhGfL7m2DfWfxp5eqa1we5hu\", //address of jToken\n\t\t\t\"underlyingAddress\": \"T9yD14Nj9j7xAB4dbGeiX9h8unkKHxuWwb\", //address of the underlying asset \n\t\t\t\"underlyingDecimal\": 6, //decimal of the underlying asset\n\t\t\t\"underlyingPriceInTrx\": \"1.000000\", //price of the underlying asset (in TRX)\n\t\t\t\"symbol\": \"jTRX\", //symbol of jToken\n\t\t\t\"underlyingSymbol\": \"TRX\", //symbol of the underlying asset\n\t\t\t\"collateralFactor\": \"0.750000000000000000\", //collateral factor\n\t\t\t\"reserveFactor\": \"0.100000000000000000\", //reserve factor\n\t\t\t\"exchangeRate\": \"0.010004175484185673\", //exchange rate between jToken and the corresponding Token \n\t\t\t\"borrowRate\": \"0.032076159971472000\", //borrowing APY\n\t\t\t\"supplyRate\": \"0.003486211548048000\", //supplying APY\n\t\t\t\"cash\": \"540965.907046000000000000\", //amount of cash in the contract","metadata":{"loc":{"lines":{"from":3204,"to":3225}}}}],["1280",{"pageContent":"\"borrowRate\": \"0.032076159971472000\", //borrowing APY\n\t\t\t\"supplyRate\": \"0.003486211548048000\", //supplying APY\n\t\t\t\"cash\": \"540965.907046000000000000\", //amount of cash in the contract\n\t\t\t\"reserves\": \"27.193286000000000000\", //amount of reserve in the contract\n\t\t\t\"totalBorrows\": \"74296.866915000000000000\", //total borrowed amount\n\t\t\t\"totalSupply\": \"61497879.72507555\", //total supply of jToken\n\t\t}]\n\t}\n}\nAccount Information\nGET: https://openapi.just.network/lend/account\nParameter:\nParameter\nType\nRequired\nDescription\naddresses\nString\nQuery of the address list; separated by commas when there are multiple addresses\nminBorrowValueInTrx\nString\nQuery of the minimum value of borrowed asset in TRX\nmaxHealth\nString\n​\npageNo\nint\n​\npageSize\nint\n​\nReturns:\n{\n\t\"code\": 0,\n\t\"data\": {\n\t\t\"totalPage\": 1, // total pages\n\t\t\"list\": [{\n\t\t\t\"address\": \"TTJJvoPKGVKnbUBPVTn1Zi8o6k3EfFDXVS\", //user address","metadata":{"loc":{"lines":{"from":3225,"to":3262}}}}],["1281",{"pageContent":"maxHealth\nString\n​\npageNo\nint\n​\npageSize\nint\n​\nReturns:\n{\n\t\"code\": 0,\n\t\"data\": {\n\t\t\"totalPage\": 1, // total pages\n\t\t\"list\": [{\n\t\t\t\"address\": \"TTJJvoPKGVKnbUBPVTn1Zi8o6k3EfFDXVS\", //user address\n\t\t\t\"health\": \"1.051123\", //health value, when health value is smaller than 1, the account can be liquidated\n\t\t\t\"tokens\": [{\n\t\t\t\t\"address\": \"TTUtHMoRLR97C3kd6gyGPWb1ReCWDcRAyA\", //jToken address\n\t\t\t\t\"entered\": 1, //collateral switch for the underlying asset; 1 means open, 0 means closed\n\t\t\t\t\"underlyingSymbol\": \"USDT\" //token symbol of the underlying asset\n\t\t\t\t\"borrowBalanceUnderlying\": \"690.34863897809162688555918\", //balance of the underlying asset for borrowing \n\t\t\t\t\"supplyBalanceUnderlying\": \"15.00524721487779258852751065\", //balance of the underlying asset for supplying\n\t\t\t}],\n\t\t\t\"totalBorrowValueInTrx\": \"1823305.071152\", //total loan of the account (in TRX)\n\t\t\t\"totalCollateralValueInTrx\": \"1916517.351443\" //total collateral of the account (in TRX)\n\t\t}],","metadata":{"loc":{"lines":{"from":3262,"to":3288}}}}],["1282",{"pageContent":"}],\n\t\t\t\"totalBorrowValueInTrx\": \"1823305.071152\", //total loan of the account (in TRX)\n\t\t\t\"totalCollateralValueInTrx\": \"1916517.351443\" //total collateral of the account (in TRX)\n\t\t}],\n\t\t\"totalCount\": 1 //total number of entries\n\t},\n\t\"message\": \"SUCCESS\"\n}\n​​sTRX API\nQuery sTRX market information\nRequest Address\n/lend/strx\nProtocol\nHTTPS GET\nHeader\nNone\nPublic Parameters\nNone\nInput Parameters\nNone\nReturn\nParameter\nType\nDescription\ncode\nInteger\n0 is success\nmessage\nString\nMessage description\ndata\nMap<String, Object>\nStakeInfo: staking data\nRentInfo: rental data\nStakeInfo\nParameter\nType\nDescription\nstrxAddress\nString\nContract address of sTRX\nsymbol\nString\nsTRX\ndecimal\nString\nScale of sTRX\ntotalSupply\nString\nSupply of sTRX\ntotalSupplyUsd\nString\nTotal Value Locked (TVL) of sTRX\nexchangeRate\nString\nExchange rate between sTRX and TRX, the amount of TRX that can be exchanged for 1 sTRX\ntotalUnderlying\nString\nAmount of underlying assets (the amount of TRX)\nunderlyingDecimal\nString","metadata":{"loc":{"lines":{"from":3288,"to":3348}}}}],["1283",{"pageContent":"String\nExchange rate between sTRX and TRX, the amount of TRX that can be exchanged for 1 sTRX\ntotalUnderlying\nString\nAmount of underlying assets (the amount of TRX)\nunderlyingDecimal\nString\nScale of underlying assets (the scale of TRX)\nrentReserveFactor\nString\nReserve factor for rental income\nrewardReserveFactor\nString\nReserve factor for voting reward\nreserves\nString\nReserves\nsupplyRate\nString\nAnnualized Rate of Return (ARR)of staking\ntrxPrice\nString\nUSD price of TRX\nRentInfo\nParameter\nType\nDescription\nrentMarketAddress\nString\nContract address of the rental market\npriceFor10KEnergByRent\nString\nAmount of TRX required for renting to get 10,000 Energy (deposit not included)\npriceFor10KEnergByStake\nString\nAmount of TRX required for staking to get 10,000 Energy\npriceFor10KEnergByBurn\nString\nAmount of TRX required for burning to obtain 10,000 Energy\ntotalDelegatedEnergyTrx\nString\nAmount of TRX corresponding to the delegated energy\ntotalDelegatedEnergyRate\nString","metadata":{"loc":{"lines":{"from":3348,"to":3391}}}}],["1284",{"pageContent":"String\nAmount of TRX required for burning to obtain 10,000 Energy\ntotalDelegatedEnergyTrx\nString\nAmount of TRX corresponding to the delegated energy\ntotalDelegatedEnergyRate\nString\nCapital utilization rate, i.e. delegated energy / total energy in the market\n​\n​\n​\nOutput Example\n{\n    \"code\":0,\n    \"data\":{\n        \"rentInfo\":{\n            \"priceFor10KEnergByBurn\":\"4.20000000\",\n            \"priceFor10KEnergByRent\":\"0.10688361\",\n            \"priceFor10KEnergByStake\":\"48.37391022\",\n            \"rentMarketAddress\":\"TSos1xxjqMrGKBxycVmtgrnFvv9M6FDFUX\",\n            \"totalDelegatedEnergyRate\":\"0.16762312\",\n            \"totalDelegatedEnergyTrx\":\"20075.732341\"\n        },\n        \"stakeInfo\":{\n            \"decimal\":\"18\",\n            \"exchangeRate\":\"1.011404397263171363\",\n            \"rentReserveFactor\":\"0.101234000000000000\",\n            \"reserves\":\"168.336743\",\n            \"rewardReserveFactor\":\"0.201230000000000000\",\n            \"strxAddress\":\"TZ8du1HkatTWDbS6FLZei4dQfjfpSm9mxp\",","metadata":{"loc":{"lines":{"from":3391,"to":3420}}}}],["1285",{"pageContent":"\"reserves\":\"168.336743\",\n            \"rewardReserveFactor\":\"0.201230000000000000\",\n            \"strxAddress\":\"TZ8du1HkatTWDbS6FLZei4dQfjfpSm9mxp\",\n            \"supplyRate\":\"0.15633008\",\n            \"symbol\":\"sTRX\",\n            \"totalSupply\":\"246104.935152098442750529\",\n            \"totalSupplyUsd\":\"16423.38430758\",\n            \"totalUnderlying\":\"248911.613601\",\n            \"trxPrice\":\"0.065980787597578113\",\n            \"underlyingDecimal\":\"6\"\n        }\n    },\n    \"message\":\"SUCCESS\"\n}\n​\nObtain user data of sTRX liquidity staking\nRequest Address\n/lend/strxStake/account\nProtocol\nHTTPS GET\nHeader\nNone\nPublic Parameters\nNone\nInput Parameters\nRequired\nParameter\nType\nDefault\nDescription\nN\naddresses\nString\n\"\"\nAddress list to query; when there are multiple addresses, separate them with commas, and the default means all addresses\nN\npageNo\nint\n1\nPage number to query, starting from 1\nN\npageSize\nint\n50\nPage size\nN\nminStrxBalance\nString\n0","metadata":{"loc":{"lines":{"from":3420,"to":3468}}}}],["1286",{"pageContent":"N\npageNo\nint\n1\nPage number to query, starting from 1\nN\npageSize\nint\n50\nPage size\nN\nminStrxBalance\nString\n0\nMinimum amount of sTRX held, which returns data of users whose sTRX holdings are more than or equal to this value\nReturn\nParameter\nType\nDescription\ncode\nInteger\n0 is success\nmessage\nString\nMessage description\ndata\nObject\nUser list and related data in Liquid Staking\nOutput Parameters - StakeAccountInfo\nParameter\nType\nDescription\naddress\nString\nUser address\nsTRXBalance\nString\nsTRX holdings\nunstakingAmount\nString\nAmount of TRX being unfrozen (cannot be withdrawn)\navailableWithdrawAmount\nString\nAmount of unfrozen TRX that can be withdrawn\nOutput Example\n{\n    \"code\":0,\n    \"data\":{\n        \"totalPage\":10,\n        \"list\":[\n            {\n                \"address\":\"TZ8du1HkatTWDbS6FLZei4dQfjfpSm9mxp\",\n                \"availableWithdrawAmount\":\"0\",\n                \"unstakingAmount\":\"5627.831922\",\n                \"sTRXBalance\":\"1.000000000000000000\"\n            },\n            {","metadata":{"loc":{"lines":{"from":3468,"to":3524}}}}],["1287",{"pageContent":"\"availableWithdrawAmount\":\"0\",\n                \"unstakingAmount\":\"5627.831922\",\n                \"sTRXBalance\":\"1.000000000000000000\"\n            },\n            {\n                \"address\":\"TFj4syqrAQp545Xgaw8NDew79U6PUHVMBZ\",\n                \"availableWithdrawAmount\":\"0\",\n                \"unstakingAmount\":\"0\",\n                \"sTRXBalance\":\"102.000000000052000000\"\n            }\n        ],\n        \"totalCount\":20\n    },\n    \"message\":\"SUCCESS\"\n}\n​\nObtain user data of resource rent (only supports Energy Rental currently)\nRequest Address\n/lend/rentResource/account\nProtocol\nHTTPS GET\nHeader\nNone\nPublic Parameters\nNone\nInput Parameters\nRequired\nParameter\nType\nDefault\nDescription\nN\naddresses\nString\n\"\"\nAddress list to query; when there are multiple addresses, separate them with commas, and the default means all addresses\nN\npageNo\nint\n1\nPage number to query, starting from 1\nN\npageSize\nint\n50\nPage size\nN\nminStrxBalance\nString\n0","metadata":{"loc":{"lines":{"from":3524,"to":3573}}}}],["1288",{"pageContent":"N\npageNo\nint\n1\nPage number to query, starting from 1\nN\npageSize\nint\n50\nPage size\nN\nminStrxBalance\nString\n0\nMinimum amount of sTRX staked, which returns data of users whose staked sTRX more than or equal to this value\nN\nmaxRemainingRentAmount\nString\n\"\"\nMaximum remaining rent, which returns data of users whose remaining rent is less than or equal to this value, and there is no query restraint by default\nReturn\nParameter\nType\nDescription\ncode\nInteger\n0 is success\nmessage\nString\nMessage description\ndata\nObject\nUser list and related data in staking\nOutput Parameters - RentAccountInfo\nParameter\nType\nDescription\nrenter\nString\nAccount address of resource renting \nreceiver\nString\nAccount address of resource receiving \nrentType\nString\nResource type. \"Energy\" is the only type currently available\ndelegatedAmount\nString\nDelegated amount. Unit: TRX\nrentAmountPerDay\nString\nRent amount per day. Unit: TRX\nrentRemainAmount\nString\nRemaining rent amount, excluding deposit. Unit: TRX\nOutput Example\n{","metadata":{"loc":{"lines":{"from":3573,"to":3629}}}}],["1289",{"pageContent":"delegatedAmount\nString\nDelegated amount. Unit: TRX\nrentAmountPerDay\nString\nRent amount per day. Unit: TRX\nrentRemainAmount\nString\nRemaining rent amount, excluding deposit. Unit: TRX\nOutput Example\n{\n    \"code\":0,\n    \"data\":{\n        \"totalPage\":11,\n        \"list\":[\n            {\n                \"rentRemainAmount\":\"0.000000\",\n                \"receiver\":\"TAvMRE6SL8aYYyVx5mHkEwBPvgD3FGSQND\",\n                \"delegatedAmount\":\"0.000000\",\n                \"rentAmountPerDay\":\"0.000000\",\n                \"rentType\":\"Energy\",\n                \"renter\":\"TAvMRE6SL8aYYyVx5mHkEwBPvgD3FGSQND\"\n            },\n            {\n                \"rentRemainAmount\":\"984.830388\",\n                \"receiver\":\"TKGRE6oiU3rEzasue4MsB6sCXXSTx9BAe3\",\n                \"delegatedAmount\":\"5.000000\",\n                \"rentAmountPerDay\":\"0.011048\",\n                \"rentType\":\"Energy\",\n                \"renter\":\"TCukPh41eQuicwc8wsqv9k6umMQ5esJD9d\"\n            }\n        ],\n        \"totalCount\":22\n    },\n    \"message\":\"SUCCESS\"","metadata":{"loc":{"lines":{"from":3629,"to":3663}}}}],["1290",{"pageContent":"\"rentType\":\"Energy\",\n                \"renter\":\"TCukPh41eQuicwc8wsqv9k6umMQ5esJD9d\"\n            }\n        ],\n        \"totalCount\":22\n    },\n    \"message\":\"SUCCESS\"\n}\nPrice Oracle\nIntroduction\nAs blockchain-powered smart contracts are unable to directly communicate with the external system, JustLend DAO protocol requires reliable price feeds. We have chosen 's price service as our price feed.\nJustLend DAO protocol uses a  contract to set and display token prices in sun(10^-6 TRX),  scaled by 10^(tokenDecimal - 6).\nPrices of the underlying tokens are posted every 30 minutes via setPrice()by a specified poster.\nRelevant Methods\nanchors()\nfunction anchors(address) view returns(uint256, uint256)\nCalling this methods returns the current price anchor of a specified token.\nParameter\nType\nDescription\n​\naddress\nThe address of the underlying token(e.g. TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t for USDT) \nReturns\nType\nDescription\nperiod\nuint256","metadata":{"loc":{"lines":{"from":3663,"to":3690}}}}],["1291",{"pageContent":"Parameter\nType\nDescription\n​\naddress\nThe address of the underlying token(e.g. TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t for USDT) \nReturns\nType\nDescription\nperiod\nuint256\nThe current time period. Calculated as: current block height/ 600 (the TRON network produces approx. 600 blocks per 30 mins)\npriceMantissa\nuint256\nToken prices in sun(10^-6 TRX),  scaled by 10^(tokenDecimal - 6).\nconst result = priceOracle.anchors(token).call();\nposter()\nfunction poster() view returns(address)\nCalling this methods returns the current price poster.\nReturns: Address of the current poster.\nconst result = priceOracle.poster().call();\nassetPrices()\nfunction assetPrices(address asset) public view returns (uint)\nCalling this method returns the current price of the specified asset.\nParameter\nType\nDescription\nasset\naddress\nThe address of the token to query\nReturns: The current price of the token in sun(10^-6 TRX), scaled by 10^(tokenDecimal - 6).\ngetPrice()\nfunction getPrice(address asset) public view returns (uint)","metadata":{"loc":{"lines":{"from":3690,"to":3722}}}}],["1292",{"pageContent":"The address of the token to query\nReturns: The current price of the token in sun(10^-6 TRX), scaled by 10^(tokenDecimal - 6).\ngetPrice()\nfunction getPrice(address asset) public view returns (uint)\nCalling this method returns the current price of the specified asset.\nParameter\nType\nDescription\nasset\naddress\nThe address of the token to query\nReturns: The current price of the token in sun(10^-6 TRX), scaled by 10^(tokenDecimal - 6).\nsetPrice()\nfunction setPrice(address asset, uint requestedPriceMantissa) public returns (uint)\nCalling this methods sets a token price for the current time period.\nThis method is poster-only.\nParameter\nType\nDescription\nasset\naddress\nThe address of the underlying token(e.g. TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t for USDT) \nrequestedPriceMantissa\nuint\nNew price, scaled by 10^18\nReturns: 0 for success, otherwise an error code.\nconst result = priceOracle.setPrice(asset, price).send({\n  feeLimit:10_000_000_000,\n  callValue:0,\n  shouldPollResponse:true\n});\n​","metadata":{"loc":{"lines":{"from":3722,"to":3753}}}}],["1293",{"pageContent":"How to Borrow Tokens?\n1.  Before you borrow from JustLend, please make sure you have supplied assets to at least one Collateral-enabled market on JustLend DAO.\n2.  In the All Markets section of Dashboard or on the Market page, find the asset you want to borrow and click Borrow.\nWe recommend that you pay attention to the risk value when you borrow assets. The default upper limit of the risk value is 80.\nYou can click on the drop-down list to change the upper limit to 90. In this mode, please keep an eye on your account risk value to avoid liquidation.\n3.  The Total Borrowed amount and the risk bar color will change with the borrowing amount you enter. When the risk bar turns to Red, it indicates that the risk value of your account will be high if you borrow assets of the entered amount. After you borrow the assets, the corresponding market will automatically have Collateral enabled.","metadata":{"loc":{"lines":{"from":3755,"to":3760}}}}],["1294",{"pageContent":"How to repay tokens?\n1.  On the right side of Dashboard, you can view all the markets in which you have borrowed assets.\n2.  Click Repay next to a market, and you will see the Repay window.\nYou should repay in the same token as the borrowed asset. If you have no assets borrowed in the market, no repayment is required.\nIf you have assets borrowed in the market, the total borrowed amount and the risk value will reduce as you repay. The repayment covers both the principal and the interest.","metadata":{"loc":{"lines":{"from":3762,"to":3766}}}}],["1295",{"pageContent":"How to Link a Wallet?\n1.Click \"Link Wallet\" on the top left of the navigation bar\n2. Select \"TronLink\"Note: If you haven't installed TronLink Chrome extension yet, you can press \"Click to get\" and follow the instructions to install it.\n​3.In TronLink Chrome extension, enter your password and log in, and then choose the wallet account you want to link.\n​\n​4.Once the wallet is successfully linked, your wallet address will be shown on the top left corner.​\nHow to Supply Tokens?\n1.  In the All Markets section of Dashboard or in Market, find a target market or filter markets by token balance.\n2.  Click Supply to supply your assets to a market.\n3.  Your approval is required before supplying assets in a market for the first time. We recommend that you reserve sufficient resources or TRX as transaction fees in your account before the action. Otherwise, the transaction may fail.","metadata":{"loc":{"lines":{"from":3769,"to":3778}}}}],["1296",{"pageContent":"If you have already enabled Collateral for the market, the borrow limit and risk value will change with the amount of assets you supply.\nIf not, you will see a prompt message showing the change to your borrow limit once you enable Collateral. \n4.  Click Supply, and sign to confirm in your wallet. After that, you will receive jTokens corresponding to your supplied assets. Please note that jTokens are important receipts of your supplied assets and think twice before you transfer them to a third party. Otherwise, your supplied assets and yields may be lost.","metadata":{"loc":{"lines":{"from":3779,"to":3781}}}}],["1297",{"pageContent":"How can I enable or disable collateral?\nWhen you supply your assets to a token market, you can choose whether to use the supplied assets as collateral for borrowing from the market. This can affect your borrow limit and the risk value, which determines whether and when your account will be liquidated.\n​\nHow to enable collateral\nOn the right side of the Dashboard page, you can find in the Supply tab whether assets of a market are used as collateral for borrowing. Enable collateral by turning on the switch.\nOnce collateral is enabled for a market, the borrow limit in the market will increase and the risk value will decrease.\nClick the button below and sign in your wallet for confirmation. Collateral is then enabled for the market. Please note that you are currently allowed to enable collateral for at most 11 markets. If you are prompted that the market count limit is reached, you can disable collateral for the markets without supplied assets.\n \nHow to disable collateral?","metadata":{"loc":{"lines":{"from":3783,"to":3791}}}}],["1298",{"pageContent":"How to disable collateral?\nOn the right side of the Dashboard page, you can find in the Supply tab whether assets of a market are used as collateral for borrowing. Disable collateral by turning off the switch.\nOnce collateral is disabled for a market, the borrow limit in the market will decrease and the risk value will increase. The action will fail if the risk value becomes greater than or equal to 100 after collateral is disabled.\nPlease note that you need to pay off your debt in a market before you can disable collateral for the market.\nNote: Please be cautious as disabling collateral can lead to an increased risk value, which may then cause account liquidation.","metadata":{"loc":{"lines":{"from":3791,"to":3795}}}}],["1299",{"pageContent":"How to withdraw tokens?\n1.  On the right side of Dashboard, you can view your assets supplied to each market.\n2.  Click on a market, and you will see the Withdraw window.\n3.   If you have no debts on JustLend, you can withdraw all your supplied assets. If you have debts, we recommend that you pay attention to the risk bar below when you enter the withdrawal amount. When the risk bar turns to Red, it indicates that the risk value of your account is very high.\n\nWhat Will Trigger Liquidation?\nYour account will be partially liquidated if the value of your borrowed assets exceeds the borrowing limit. This occurs when the value of your supplied assets falls or that of your borrowed assets rises.\nIf your account is in liquidation, the liquidator can repay up to 50% of your outstanding borrowed assets; the liquidator will receive a corresponding amount of your deposited assets (including an additional 8% bonus).\nTherefore, please closely monitor your borrowing limit and borrowed assets.","metadata":{"loc":{"lines":{"from":3797,"to":3805}}}}],["1300",{"pageContent":"How to claim my mining rewards?\nNow, you can claim your mining rewards on JustLend DAO in both new and traditional interface.\nNew version of the Web App\nTraditional version of the Web App\nMobile version\nThe following section will take the new version of the Web app as an example and walk you through the process of claiming your mining rewards on JustLend DAO:\nTo begin with, click “Claim”.\nIn the pop-up window, you can check the amount of rewards you earned from different mining rounds.\nClick “Claim” to claim these rewards.\nSign in your TronLink wallet. The rewards will then be sent to your account.\nYou can also click the icon next to “Mining Rewards” to view more details, including the to-be-claimed rewards and accruing rewards.\n​","metadata":{"loc":{"lines":{"from":3808,"to":3819}}}}],["1301",{"pageContent":"Common questions\nSupply & withdraw\nWhy do I have supplied assets but cannot borrow from JustLend DAO?\nTo borrow from JustLend DAO, you must have supplied assets and enable collateral for the corresponding markets. Please note that you can enable collateral for at most 11 markets.\nWhy cannot I withdraw all my supplied assets?\nThis may be because the assets are used as collateral or you have debt in the target market. We recommend that you repay all debt in this market and supply assets of other markets as collateral to withdraw all your assets from the target market.\n \n​\nBorrow & repay\nIs the 80/90 risk value a must-follow threshold when I borrow from JustLend DAO?\nNo, the 80/90 risk value is more of a risk alert set by JustLend DAO for your account. If you want to borrow more assets that may cause a risk value higher than 80 or 90, we recommend that you supply more assets as collateral and pay special attention to the risk value of your account to prevent liquidation.","metadata":{"loc":{"lines":{"from":3821,"to":3831}}}}],["1302",{"pageContent":"Can I choose to repay my principal before the interest?\nYou can pay off your debt in multiple payments, but cannot choose to repay only the principal or the interest.\n \n​\nLiquidate\nWhat will cause my account to be liquidated?\nWhen the risk value of your account reaches 100, your account will be liquidated.\nWhen my account involves assets of multiple token markets, what determines the token to be liquidated?\nThis is decided by the liquidator, who will repay your debt in one token at a time and choose assets of a token from your collateral as fees.\n​","metadata":{"loc":{"lines":{"from":3832,"to":3841}}}}],["1303",{"pageContent":"Common questions\nSupply & withdraw\nWhy do I have supplied assets but cannot borrow from JustLend DAO?\nTo borrow from JustLend DAO, you must have supplied assets and enable collateral for the corresponding markets. Please note that you can enable collateral for at most 11 markets.\nWhy cannot I withdraw all my supplied assets?\nThis may be because the assets are used as collateral or you have debt in the target market. We recommend that you repay all debt in this market and supply assets of other markets as collateral to withdraw all your assets from the target market.\n \n​\nBorrow & repay\nIs the 80/90 risk value a must-follow threshold when I borrow from JustLend DAO?\nNo, the 80/90 risk value is more of a risk alert set by JustLend DAO for your account. If you want to borrow more assets that may cause a risk value higher than 80 or 90, we recommend that you supply more assets as collateral and pay special attention to the risk value of your account to prevent liquidation.","metadata":{"loc":{"lines":{"from":3841,"to":3851}}}}],["1304",{"pageContent":"Can I choose to repay my principal before the interest?\nYou can pay off your debt in multiple payments, but cannot choose to repay only the principal or the interest.\n \n​\nLiquidate\nWhat will cause my account to be liquidated?\nWhen the risk value of your account reaches 100, your account will be liquidated.\nWhen my account involves assets of multiple token markets, what determines the token to be liquidated?\nThis is decided by the liquidator, who will repay your debt in one token at a time and choose assets of a token from your collateral as fees.\n​\nUser guide on the Market page\nOverview:\nIn the Market Overview section, you can view all token markets supported by JustLend DAO.\nAsset: The abbreviation, full name, and logo of the token in a market.\nTotal Supply: The total value of supplied assets (in USD) in a market.\nSupply APY: The yield rate for supplying assets in a market. \nTotal Borrow: The total value of borrowed assets (in USD) in a market.","metadata":{"loc":{"lines":{"from":3874,"to":3890}}}}],["1305",{"pageContent":"Supply APY: The yield rate for supplying assets in a market. \nTotal Borrow: The total value of borrowed assets (in USD) in a market.\nBorrow APY: The interest rate for borrowing assets in a market.\nAvailable Lending: The amount of tokens available for borrowing in a market.\n \nYou can click on a specific market to view its details. Taking TRX as an example:\nSupply Base APY (Rewards: same as supplied assets): The yield rate for the jToken received.\nSupply Mining APY (Rewards: USDD): The yield rate from mining programs on JustLend DAO.\n​\nPrice: The token value in USD.\nBorrow Cap: The maximum amount of tokens that are available for borrowing in the market.\nSuppliers: The number of users that have supplied assets to this market.\nBorrowers: The number of users that have borrowed assets from this market.\n​\nTotal Interest / Day: The daily value of interest generated in this market in USD.\nReserve Amount: The amount of reserves left in this market.","metadata":{"loc":{"lines":{"from":3890,"to":3905}}}}],["1306",{"pageContent":"​\nTotal Interest / Day: The daily value of interest generated in this market in USD.\nReserve Amount: The amount of reserves left in this market.\nReserve Factor: Supply Base APY = (100% - Reserve Factor) * Borrow APY * Utilization\nThe reserve factor determines the ratio of interest that is retained as reserves to those distributed to asset suppliers on JustLend DAO.\njToken Minted: The number of jToken issued in the market.\nCollateral Factor: Borrowable Amount = Supplied Assets * Collateral Factor. Therefore, the higher the collateral factor is, the higher amount you can borrow based on your supplied assets.\njToken Exchange Rate: The exchange rate between the jToken and the supplied token.\n​\nUtilization: U = Total Borrow / Total Supply. The utilization cannot be greater than 100%.","metadata":{"loc":{"lines":{"from":3905,"to":3914}}}}],["1307",{"pageContent":"What are the rules for borrowing interest calculation?\nBorrowing assets from JustLend will incur borrowing interest.\nThe borrowing interest of a market depends on the utilization rate (U) of the market at the time of borrowing:\nU = Total Assets Borrowed / Total Assets Supplied\nThe borrowing interest increases as the utilization rate rising. For the borrowing interest of a market at a specific time, check the Borrow APY of the market on the Market page.\nIn the Interest Rate Model section of a specific market, you can view the correlation between Borrow APY and Utilization Rate. The green curve illustrates the relationship between the Borrow APY and changes of the utilization rate. You can move the pointer to view Borrow APY levels in respect of different utilization rates.","metadata":{"loc":{"lines":{"from":3916,"to":3921}}}}],["1308",{"pageContent":"How to calculate my risk value?\nRisk Value = Total Borrow / Borrow Limit * 100\nWhere:\nTotal Borrow = Sum of all assets borrowed by the user\nBorrow Limit = ∑(Asset supplied by the user * Collateral factor of the asset)\n \nExample:\nA user supplies $100 worth of SUN tokens with a collateral factor of 50% and $200 worth of USDC tokens with a collateral factor of 75% on JustLend DAO. In this case, Borrow Limit = $100 × 50% + $200 × 75% = $200.\n​\nThe user also borrows $90 worth of TRX tokens and $50 worth of JST tokens from JustLend DAO. In this case, Total Borrow = $90 + $50 = $140.\n \nTherefore, the user’s Risk Value = Total Borrow / Borrow Limit * 100 = $140 ÷ $200 × 100 = 70.","metadata":{"loc":{"lines":{"from":3923,"to":3934}}}}],["1309",{"pageContent":"What are the rules for APY calculation?\nBy supplying assets on JustLend DAO, you can receive the following two types of rewards:\n1）Base jToken rewards\n2）Rewards from USDD mining programs\njTokens are the receipts for your supplied assets on JustLend DAO.\nThe APY of your jToken is based on the utilization rate (U) of the corresponding market at the time.\nU = Total Assets Borrowed / Total Assets Supplied\nThe APY increases with the utilization rate.\nFor the jToken APY of a market at a specific time, you can click on a token market on the Market page to view Supply Base APY of the market.\nFor the APY of mining programs, you can click on a token market on the Market page to view Supply Mining APY of the market.","metadata":{"loc":{"lines":{"from":3936,"to":3945}}}}],["1310",{"pageContent":"For the APY of mining programs, you can click on a token market on the Market page to view Supply Mining APY of the market.\nIn the Interest Rate Model section of a specific market, you can view the correlation between Supply APY and Utilization Rate. The blue line illustrates the relationship between the APY for supplied assets, including the base APY for jTokens and the mining APY, and changes in the utilization rate. You can move the pointer to view APY levels in respect of different utilization rates.","metadata":{"loc":{"lines":{"from":3945,"to":3946}}}}],["1311",{"pageContent":"What determines the Supply APY and Borrow APY?\nYou will notice that on the market page the APYs for supply and borrow are different.\nClick on each token to view details of the token.\nIt can be seen from the two charts above that the variation curve for the APYs supply and borrow vary from token to token, because parameters vary for each token on. JustLend. Smooth model and jump model are applied to calculate the Supply APY and Borrow APY.","metadata":{"loc":{"lines":{"from":3948,"to":3951}}}}],["1312",{"pageContent":"APY\nWhat is Net APY?\n​\nNet APY is an important reference for users to understand the P&L of the current assets and loans.\nNet APY = [∑ (Value of Supplied Token × Supply APY) - ∑ (Value of Borrowed Token × Borrow APY) ] ÷ Value of Total Supply\nWhat determines the Supply APY and Borrow APY?\n​\nYou will notice that on the market page the APYs for supply and borrow are different\nClick on each token to view details of the token.\nIt can be seen from the two charts above that the variation curve for the APYs supply and borrow vary from token to token, because parameters vary for each token on. JustLend. Smooth model and jump model are applied to calculate the Supply APY and Borrow APY.","metadata":{"loc":{"lines":{"from":3953,"to":3962}}}}],["1313",{"pageContent":"How to understand your risk value?\nRisk value is an indicator of the health of the current portfolio. Collaterals will be liquidated when the risk value reaches 100.\nFormula: Risk value = Total borrow ÷ Borrow limit x 100\nOur recommendations for users at different levels of risk are as follows:\nRange\nLevels of risk\nRecommendations\n0-35\nLow Risk\nHealthy portfolio, eligible for loans.\n35-60\nMedium Risk\nHealthy portfolio overall, eligible for extra loan, but with caution.\n60-80\nHigh Risk\nPortfolio faces risk of liquidation, and you are advised to add collateral or pay off part of your loans.\n80-100\nExtremely High Risk\nCollaterals are about to be liquidated, and you are advised to add collateral or pay off part of your loans.\n \n​\nWhat is jToken?\njToken refers to the \"receipt\" users get for supplying underlying assets to JustLend, such as the jTRX, jUSDT, jSUN and jBTC you receive after supplying the corresponding assets. jToken is a TRC20 token in your wallet.","metadata":{"loc":{"lines":{"from":3964,"to":3986}}}}],["1314",{"pageContent":"All assets supported by JustLend, a DeFi protocol, are packed and integrated through the smart contract - jToken. Users mint jToken, which generates interest for its holders, and provide assets to the protocol. Each jToken can be swapped back into the corresponding base asset when users redeem it.\n \njToken share the same properties as other TRC20 tokens, such as being transferred to others or deposited into a smart contract.Your transfer of jToken to other users or institutions constitute a waiver of ownership over the assets you have supplied to JustLend.\nFor example:","metadata":{"loc":{"lines":{"from":3988,"to":3991}}}}],["1315",{"pageContent":"For example:\nUser A supplies 100 TRX on JustLend and receives 10,000 jTRX (jToken) as a receipt, after which A transfers 6,000 jTRX to User B. Now, A only has 4,000 jTRX left (equivalent to a 40 TRX supply on JustLend), while B gets 6,000 jTRX (from A's transfer, which is equivalent to a 60 TRX supply on JustLend). If B does not transfer jToken back to A, A will no longer own the 6000 jTRX (60 TRX).(The example exchange rate here is 1 TRX = 100 jTRX).\n \njToken acts as a key means to interact with the JustLend protocol. While each jToken contract creates its own token market, users use jToken contracts to mint, redeem, borrow loans, repay loans, liquidate loans or transfer jToken.\n​","metadata":{"loc":{"lines":{"from":3991,"to":3995}}}}],["1316",{"pageContent":"Skip to content\nProduct\nSolutions\nOpen Source\nPricing","metadata":{"loc":{"lines":{"from":3998,"to":4002}}}}],["1317",{"pageContent":"Search or jump to...\nSign in\nSign up\njustlend\n/\njustlend-protocol\nPublic\nCode\nIssues\nPull requests\nActions\nProjects\nSecurity\nInsights\njustlend/justlend-protocol\n 2 branches\n 0 tags\nLatest commit\n@supersmartguy01\nsupersmartguy01 Merge pull request #14 from justlend/feature/busd\n…\n6b61c4d\non Feb 16\nGit stats\n 10 commits\nFiles\nType\nName\nLatest commit message\nCommit time\n.github/workflows\ninit project\nlast year\ncontracts\nUpdate for Governance and BUSD\n9 months ago\ndata\ninit project\nlast year\ndocs\nUpdate for Governance and BUSD\n9 months ago\nmigrations\nSupport GovernorBravo\nlast year\nscript\ninit project\nlast year\n.gitignore\ninit project\nlast year\nREADME.md\nUpdate README.md\nlast year\npackage.json\ninit project\nlast year\nsample-env\nSupport GovernorBravo\nlast year\ntronbox-config.js\ninit project\nlast year\ntronbox.js\nRevert \"Change compiler version\"\nlast year\nREADME.md\nJustLend Protocol","metadata":{"loc":{"lines":{"from":4004,"to":4071}}}}],["1318",{"pageContent":"init project\nlast year\nsample-env\nSupport GovernorBravo\nlast year\ntronbox-config.js\ninit project\nlast year\ntronbox.js\nRevert \"Change compiler version\"\nlast year\nREADME.md\nJustLend Protocol\nJustLend Protocol is an TRON smart contract protocol for supplying or borrowing assets. Through the jToken contracts, accounts on the TRON blockchain supply capital (TRX or TRC20 tokens) to receive jTokens or borrow assets from the protocol (holding other assets as collateral). The JustLend jToken contracts track these balances and algorithmically set interest rates for borrowers.","metadata":{"loc":{"lines":{"from":4071,"to":4084}}}}],["1319",{"pageContent":"Before getting started with this repo, please read:\n\nThe Justlend Whitepaper\nThe Justlend Terms Of Use\nFor questions about interacting with JustLend, please visit our Telegram Group.\n\nContracts\nWe detail a few of the core contracts in the Justlend protocol.","metadata":{"loc":{"lines":{"from":4086,"to":4093}}}}],["1320",{"pageContent":"CToken, CErc20 and CEther\nThe Justlend jTokens which are self-contained borrowing and lending contracts, are deployed from the code of CToken and CEther contracts. CToken contains the core logic and CErc20 and CEther add public interfaces for TRC20 tokens and TRX, respectively. Each jToken is assigned an interest rate and risk model (see InterestRateModel and Comptroller parts), and allows accounts to mint (supply capital), redeem (withdraw capital), borrow and repay a borrow. Each jToken is an TRC20 compliant token where balances represent ownership of the market.\nComptroller\nThe risk model contract, which validates permissible user actions and disallows actions if they do not fit certain risk parameters. For instance, the Comptroller enforces that each borrowing user must maintain a sufficient collateral balance across all cTokens.\nGovernorAlpha (Deprecated)","metadata":{"loc":{"lines":{"from":4095,"to":4099}}}}],["1321",{"pageContent":"GovernorAlpha (Deprecated)\nOld governance contract. The administrator of the Justlend timelock contract. Holders of JST token may create and vote on proposals which will be queued into the Justlend timelock and then have effects on Justlend jToken and Comptroller contracts.\nGovernorBravo\nThe current used governance contract. The administrator of the Justlend timelock contract. Holders of JST token may create and vote on proposals which will be queued into the Justlend timelock and then have effects on Justlend jToken and Comptroller contracts.\nInterestRateModel\nContracts which define interest rate models. These models algorithmically determine interest rates based on the current utilization of a given market (that is, how much of the supplied assets are liquid versus borrowed).\nErrorReporter\nLibrary for tracking error codes and failure conditions.\nExponential\nLibrary for handling fixed-point decimal numbers.\nWhitePaperInterestRateModel","metadata":{"loc":{"lines":{"from":4099,"to":4109}}}}],["1322",{"pageContent":"ErrorReporter\nLibrary for tracking error codes and failure conditions.\nExponential\nLibrary for handling fixed-point decimal numbers.\nWhitePaperInterestRateModel\nInitial interest rate model, as defined in the Whitepaper. This contract accepts a base rate and slope parameter in its constructor.\nCareful Math\nLibrary for safe math operations.\nSafeToken\nLibrary for safely handling Trc20 interaction.\nDeployment\nTronBox is being used in this project. Before getting started with the deployment script, please read:","metadata":{"loc":{"lines":{"from":4109,"to":4120}}}}],["1323",{"pageContent":"Tronbox Tutorial\nCompile and Deployment\nTo get started, first create and initialize a NodeJS 8.0+ environment. Next, clone the repo and install the developer dependencies:\n\nSetup\nnpm i\nOS requirement\nLinux\nMac OS X\nCompile The Contract\nRun this by using tronbox embedded solc:\n\ntronbox compile\nOr you may want to use external compilers. You can get the compiler from here\n\nAnd rename the compiler executable file to solc512, then compile the contracts with these commands.","metadata":{"loc":{"lines":{"from":4122,"to":4137}}}}],["1324",{"pageContent":"./solc512   --allow-paths $YOUR_PATH/justlend-protocol/, --bin --abi --optimize $YOUR_PATH/justlend-protocol/Unitroller.sol\n./solc512   --allow-paths $YOUR_PATH/justlend-protocol/, --bin --abi --optimize $YOUR_PATH/justlend-protocol/Comptroller.sol\n./solc512   --allow-paths $YOUR_PATH/justlend-protocol/, --bin --abi --optimize $YOUR_PATH/justlend-protocol/Governance/WJST.sol\n./solc512   --allow-paths $YOUR_PATH/justlend-protocol/, --bin --abi --optimize $YOUR_PATH/justlend-protocol/Governance/GovernorBravoDelegator.sol\n./solc512   --allow-paths $YOUR_PATH/justlend-protocol/, --bin --abi --optimize $YOUR_PATH/justlend-protocol/Timelock.sol\n./solc512   --allow-paths $YOUR_PATH/justlend-protocol/, --bin --abi --optimize $YOUR_PATH/justlend-protocol/JumpRateModelV2.sol\n./solc512   --allow-paths $YOUR_PATH/justlend-protocol/, --bin --abi --optimize $YOUR_PATH/justlend-protocol/WhitePaperInterestRateModel.sol","metadata":{"loc":{"lines":{"from":4139,"to":4145}}}}],["1325",{"pageContent":"./solc512   --allow-paths $YOUR_PATH/justlend-protocol/, --bin --abi --optimize $YOUR_PATH/justlend-protocol/WhitePaperInterestRateModel.sol\n./solc512   --allow-paths $YOUR_PATH/justlend-protocol/, --bin --abi --optimize $YOUR_PATH/justlend-protocol/CEther.sol\n./solc512   --allow-paths $YOUR_PATH/justlend-protocol/, --bin --abi --optimize $YOUR_PATH/justlend-protocol/CErc20Delegate.sol\n./solc512   --allow-paths $YOUR_PATH/justlend-protocol/, --bin --abi --optimize $YOUR_PATH/justlend-protocol/CErc20Delegator.sol\n./solc512   --allow-paths $YOUR_PATH/justlend-protocol/, --bin --abi --optimize $YOUR_PATH/justlend-protocol/PriceOracle/PriceOracle.sol\n./solc512   --allow-paths $YOUR_PATH/justlend-protocol/, --bin --abi --optimize $YOUR_PATH/justlend-protocol/PriceOracleProxy.sol\n./solc512   --allow-paths $YOUR_PATH/justlend-protocol/, --bin --abi --optimize $YOUR_PATH/justlend-protocol/PriceOracle/PriceOracle.sol","metadata":{"loc":{"lines":{"from":4145,"to":4151}}}}],["1326",{"pageContent":"./solc512   --allow-paths $YOUR_PATH/justlend-protocol/, --bin --abi --optimize $YOUR_PATH/justlend-protocol/PriceOracle/PriceOracle.sol\n./solc512   --allow-paths $YOUR_PATH/justlend-protocol/, --bin --abi --optimize $YOUR_PATH/justlend-protocol/PriceOracleProxy.sol\n./solc512   --allow-paths $YOUR_PATH/justlend-protocol/, --bin --abi --optimize $YOUR_PATH/justlend-protocol/Lens/CompoundLens.sol\nDeploy on Nile TestNet\nBefore use, sample-env should be renamed to .env with the added network config:","metadata":{"loc":{"lines":{"from":6662,"to":6666}}}}],["1327",{"pageContent":"PRIVATE_KEY_NILE=YOUR_PRIVATE_KEY\nRESERVER_ADMIN=YOUR_RESERVE_ADMIN_ADMIN_ADDRESS\nADMIN=YOUR_ADMIN_ADDRESS\nAssuming all contracts haven't been deployed, the user must deploy the script one by one individually by replacing xx with the correct number of the file and then record the contract addresses and data to ../data/test-xxx.json. Please feel free to modify the migrations and contract data.\n\ntronbox migrate --network nile -f xx --to xx\nFor example, if you want to run 3_deploy_comptroller.js, the command will be tronbox migrate --network nile -f 3 --to 3.\n\nDue to the limitation of Tronbox, Governor.setTimelock() is unable to be invoked among the migration script. Therefore, the related script is inside script/2_setTimelock.js. Please run it for setting up the timelock address from Governor.\n\nContract Callers\nThe sample of contract invokers is inside the script folder.\n\nDiscussion\nFor any concerns with the protocol, open an issue or visit us on Telegram to discuss.","metadata":{"loc":{"lines":{"from":6668,"to":6682}}}}],["1328",{"pageContent":"Contract Callers\nThe sample of contract invokers is inside the script folder.\n\nDiscussion\nFor any concerns with the protocol, open an issue or visit us on Telegram to discuss.\n\nFor security concerns, please email support@justlend.org.\n\n_© Copyright 2022 JustLend DAO\n\nAbout\ncontracts of justlend\n\nResources\n Readme\n Activity\nStars\n 20 stars\nWatchers\n 3 watching\nForks\n 14 forks\nReport repository\nReleases\nNo releases published\nPackages\nNo packages published\nContributors\n6\n@huffstarrr81256\n@justlend-dev\n@justlenddev\n@supersmartguy01\n@justacoding\n@Sh11thead\nLanguages\nSolidity\n96.0%\n \nJavaScript\n4.0%\nFooter\n© 2023 GitHub, Inc.","metadata":{"loc":{"lines":{"from":6682,"to":6724}}}}],["1329",{"pageContent":"Skip to main content\nJustLend Help Center home page\nJustLend  How to start?  Mining Guide\nSearch\nArticles in this section\n\"Upcoming\" and \"Frozen\" Mining Rewards Explained\n\"Upcoming\" and \"Frozen\" Mining Rewards Explained\n DeFi Support\n3 months ago Updated\nNot yet followed by anyone\nYour mining rewards consist of \"upcoming\" and \"frozen\" rewards. To understand what they are, you need to know how rewards on JustLend are distributed.\n\n \n\nI.Distribution Rules of Supply Rewards\nHow the rewards of supply mining are distributed:\n\n \n\n1.Rewards of all markets (excluding USDD) are distributed in three phases:\n\n \n\n 1) Before January 21, 2022 at 21:00:00 (SGT), supply mining rewards were given out in JST. All rewards were unlocked in 24 weeks with 1/6 unlocked every 4 weeks, and the unlocked rewards were distributed at 4-week intervals, such as on February 22, March 22, April 19, etc.","metadata":{"loc":{"lines":{"from":6726,"to":6749}}}}],["1330",{"pageContent":"2) From January 21, 2022 at 21:00:00 to July 8, 2022 at 20:59:59 (SGT), supply mining rewards were still given out in JST but no longer needed 24 weeks to be completely unlocked. The rewards were distributed every 4 weeks, with all rewards accrued in the past 4 weeks being given out each time.\n\n \n\n3) After July 8, 2022 at 21:00:00 (SGT) , supply mining rewards are given out in USDD. The rewards will be distributed every 4 weeks, with all rewards accrued in the past 4 weeks being given out each time.\n\n \n\n 2.Rewards of the USDD market are distributed in two phases:\n\n \n\n1) From May 12, 2022 at 20:00:00 to July 7, 2022 at 19:59:59 (SGT), supply mining rewards were distributed in JST and USDD once a week in full on the next day after each week's mining ended. For example, if the first week of mining was from May 12, 2022 at 20:00:00 (SGT) to May 19, 2022 at 19:59:59 (SGT), the mining rewards would be paid out in full on May 20.","metadata":{"loc":{"lines":{"from":6753,"to":6765}}}}],["1331",{"pageContent":"2) After July 7, 2022 at 20:00:00 (SGT), supply mining rewards are distributed in USDD once a week in full on the next day after each week's mining ends.\n\n \n\nII.Composition of \" Upcoming\" and \" Frozen\" Mining Rewards\nBased on the rules above, it can be concluded that\n\n \n\n1.\"Upcoming\" rewards include:\n\n \n\n1) The unlocked but not yet distributed supply mining rewards (in JST) accrued before January 21, 2022, at 21:00:00 (SGT);\n\n \n\n2) The supply mining rewards (in USDD) accrued after July 7, 2022 at 21:00:00 (SGT) that have not been distributed.  \n\n \n\n 2.\"Frozen\" rewards include:\n\n \n\n1) The locked supply mining rewards (in JST) accrued before January 21, 2022, at 21:00:00 (SGT).\n\n \n\nstUSDT: An RWA Market Built on the TRON Network\n TRONSCAN Support\n3 months ago Updated\nNot yet followed by anyone\nPreface","metadata":{"loc":{"lines":{"from":6769,"to":6802}}}}],["1332",{"pageContent":"stUSDT: An RWA Market Built on the TRON Network\n TRONSCAN Support\n3 months ago Updated\nNot yet followed by anyone\nPreface\n\nRWA, an abbreviation for Real-World Assets, serves as a conduit for bringing real-world investment opportunities into the realm of cryptocurrencies. While most investment opportunities and yields in the crypto world are generated from within the circle, RWA presents more diversified alternatives for investors.\n\nRWA possesses four distinctive edges:","metadata":{"loc":{"lines":{"from":6802,"to":6810}}}}],["1333",{"pageContent":"RWA possesses four distinctive edges:\n\nTokenized RWA can circulate freely on-chain without restrictions in TradFi. It represents a more flexible means of investment.\nRWA eliminates the entry barriers and restrictions associated with prime investment targets in TradFi, creating more and fairer investment opportunities.\nUnderpinned by the smart contract, RWA investment adopts a transparent and robust management mechanism to reduce investment risks for users.\nRWA investment shares the TRON blockchain's inherent advantages of cost-effectiveness and operational efficiency. It operates 7/24, and users can start accruing rewards whenever they get on board.\nstUSDT Platform","metadata":{"loc":{"lines":{"from":6810,"to":6816}}}}],["1334",{"pageContent":"The stUSDT platform is dedicated to narrowing the gap between retail and institutional investors while connecting the crypto realm with the real world. By harnessing the power of smart contracts, stUSDT ensures equitable opportunities for all to invest in real-world assets. In this sense, it is a frontrunner in TRON's endeavor to tokenize RWA and introduce assets in the real world to the TRON ecosystem via DeFi.\n\nstUSDT is a decentralized token that serves as receipt of investment in RWA. Its holders can earn passive income by participating in investments in real-world assets. Powered by its smart contract, stUSDT boasts decentralized investment and disclosure strategies as well as a robust asset management mechanism.","metadata":{"loc":{"lines":{"from":6818,"to":6820}}}}],["1335",{"pageContent":"The stUSDT platform offers a comprehensive and user-friendly UI interface, facilitating a seamless exchange of USDT and stUSDT through convenient staking and unstaking processes. The amount of stUSDT that users hold will increase as the smart contract continues to distribute rewards to holders via the Rebase mechanism, while the exchange rate between the two tokens will always be kept at 1:1 to ensure profitability.\n\nRWA DAO\n\nRWA DAO is a decentralized, self-governing community focused on RWA investment via the TRON network. Its aim is to safeguard the interests and rights of community investors and provide an open, fair, and secure RWA investment channel to all users. RWA DAO also manages the RWA-related smart contract to ensure its stability, transparency, and efficiency. At present, RWA DAO is under the custody of JustLend DAO.\n\nRoles in RWA DAO and their functions:\n\n\n\nAdvisory Council","metadata":{"loc":{"lines":{"from":6822,"to":6832}}}}],["1336",{"pageContent":"Roles in RWA DAO and their functions:\n\n\n\nAdvisory Council\n\nElected by RWA DAO and consists of professionals from both fields of TradFi and DeFi investment.\nOversees the day-to-day RWA investment and operations as well as presents major proposed adjustments to RWA DAO for voting when necessary.\nMonitors RWA investment risks and effectively stems potential risks.\nAppoints the RWA Arrangers and evaluates their performance.\nRWA Arranger\n\nSearches for investment opportunities and devise the investment strategy.\nRecruits candidates for the Asset Manager role and verify their qualifications.\nAssesses RWA investment performance and adjust the investment strategy when necessary.\nAsset Managers\n\nImplement the investment strategy provided by RWA Arrangers and adjust within a certain limits during execution as needed.\nPerformance Oracle: Disclose RWA investment performance and asset holdings on-chain periodically.\nstUSDT-RWA Contract","metadata":{"loc":{"lines":{"from":6832,"to":6851}}}}],["1337",{"pageContent":"The stUSDT-RWA Contract is deployed by RWA Arrangers to secure assets according to the established strategy and distribute RWA investment rewards.\nRWA Investment Process\n\nstUSDT invests in RWA through the following process:\n\nPre-investment discussion. The Advisory Council will discuss the potential RWA investment opportunities and investment strategy proposed by RWA Arrangers, and decide whether or not to follow up.\nPre-vote. A pre-vote will be initiated in RWA DAO to decide whether a proposal should be carried out by RWA Arrangers.\nContract creation and execution vote. After the proposal passes the pre-vote, developers from RWA Arrangers will create the stUSDT-RWA Contract and carry out voting on whether to execute the proposal.\nExecution. Once the execution vote has passed, the stUSDT-RWA Contract will be automatically activated, and RWA Arrangers will set up the initial contract parameters.\nDay-to-day operation and management of RWA investment involve the following steps:","metadata":{"loc":{"lines":{"from":6853,"to":6862}}}}],["1338",{"pageContent":"Staking. Users will stake USDT to the stUSDT-RWA Contract to participate in RWA investment.\nExecution of investment strategy. Asset Managers will invest the funds as per the predetermined strategy.\nRewards distribution. Asset Managers will distribute the rewards gained through the stUSDT-RWA Contract to users.\nDisclosure. Asset Managers are required to disclose the performance of the RWA investment and asset holdings periodically.\nPerformance review and strategy adjustment. RWA Arrangers will review the performance of the RWA investment and make adjustments to the investment strategy accordingly.\nOversight and risk control. The Advisory Council will oversee the RWA investment and daily operations. It also monitors potential risks to ensure effective risk control.\nstUSDT token and its upsides\n\nstUSDT is a receipt token that users obtain for the RWA investment after staking USDT.\n\nUSDT staked in the contract will be invested in low-risk RWA with high ratings.","metadata":{"loc":{"lines":{"from":6864,"to":6874}}}}],["1339",{"pageContent":"stUSDT is a receipt token that users obtain for the RWA investment after staking USDT.\n\nUSDT staked in the contract will be invested in low-risk RWA with high ratings.\n\nstUSDT is of the same value as USDT. It shares the features of other TRC-20 tokens, which allow the token to be transferred on-chain and supported by most smart contracts. The exchange rate between stUSDT and USDT is kept as 1:1 by the contract (special rules may apply). stUSDT will periodically distribute rewards to its holders via the Rebase mechanism, which means the longer one holds it, the more rewards one will make from it.","metadata":{"loc":{"lines":{"from":6874,"to":6878}}}}],["1340",{"pageContent":"How to unstake and claim USDT?\n TRONSCAN Support\n3 months ago Updated\nNot yet followed by anyone\nYou can submit an unstaking transaction at any time. However, it's important to note that there may be a waiting period before the unstaking process is complete for you to claim your assets. This duration is put in place as a precautionary measure to prevent potential malicious activities, and it usually takes 0 to 3 days, depending on the reserves in the contract. \n\n \n\nThe steps are as follows:\n\nStep 1: Enter the amount and confirm\n\nEnter the amount of stUSDT you wish to unstake or the amount of USDT you wish to receive and confirm the unstaking fee.\n\n\n\nNote: The unstaking fee is charged to cover the RWA operating costs. It currently stands at 0.1% of the amount you wish to unstake and is subject to change in the future. Please follow further announcements for updates. \n\n \n\nStep 2: Submit the unstaking transaction and sign in your wallet","metadata":{"loc":{"lines":{"from":6881,"to":6901}}}}],["1341",{"pageContent":"Step 2: Submit the unstaking transaction and sign in your wallet\n\nClick \"Unstake\" and confirm the transaction details again in the pop-up window before clicking \"Confirm\", which will take you to sign in your wallet. (The example used below is the TronLink wallet.) After that, wait for 5 to 15 seconds for the transaction to complete.\n\n\n\nStep 3: Claim USDT to your wallet\n\nSwitch to the \"Claim\" tab to view more details.\n\n\n\nIf the unstaking process has been completed, your USDT is ready for claim. You can click \"Claim\" and sign in your wallet. Usually, you can claim the assets from multiple unstaking transactions with one signature.","metadata":{"loc":{"lines":{"from":6901,"to":6913}}}}],["1342",{"pageContent":"If your asset is not yet ready for claim, we kindly ask for your patience. The unstaking process usually takes around 3 days. You can click on \"Details\" to check details of the unstaking transactions.\nHow to stake USDT?\n TRONSCAN Support\n3 months ago Updated\nNot yet followed by anyone\nBy staking your USDT, you will receive the receipt token called stUSDT and enjoy the opportunity to earn rewards easily through real-world assets (RWA). \n\nAt the moment, staking is only available for USDT on the TRON network. If you hold other TRON network tokens, you can acquire USDT through Swap or the Supply & Borrow service. For those who have USDT on other networks, you can use the Bridge service. \n\n \n\nThe steps are as follows:\n\nStep 1: Go to the stUSDT website (https://justlend.org/?lang=zh-CN#/stUSDT) and connect your wallet\n\n\n\nClick \"Connect Wallet\" and follow the prompts to connect the wallet you want to use.\n\n\n\nStep 2: Enter the amount to stake and confirm","metadata":{"loc":{"lines":{"from":6917,"to":6938}}}}],["1343",{"pageContent":"Click \"Connect Wallet\" and follow the prompts to connect the wallet you want to use.\n\n\n\nStep 2: Enter the amount to stake and confirm\n\nEnter the amount of USDT you wish to stake and confirm the amount of stUSDT you will receive. You can also view the estimated daily rewards of your staking.  \n\n\n\nStep 3: Submit the staking transaction and sign in your wallet\n\nClick \"Stake\". Confirm the transaction details again in the pop-up window before clicking \"Confirm\", which will take you to sign in your wallet. (The example used below is the TronLink wallet.) Wait for 5 to 15 seconds for the staking process to complete.\n\n\n\nOnce your staking is successful, you may easily check your stUSDT balance on the web page (as shown below). This balance includes both your staked amount and the earnings you have made. The total amount of stUSDT you have earned is also displayed here.","metadata":{"loc":{"lines":{"from":6938,"to":6954}}}}],["1344",{"pageContent":"Additionally, you may go to the stUSDT introduction section and add the token to your wallet. This allows you to keep track of the amount of stUSDT you hold. \n\n\n\n \n\n \nEnergy Rental\n DeFi Support\n6 months ago Updated\nNot yet followed by anyone\n1. What is Energy Rental?\nAccording to the mechanism of TRON, all transactions on JustLend DAO consume Energy, which can only be obtained through staking or burning TRX. This involves high costs as well as lengthy processes.\n\nTherefore, JustLend DAO launches the Energy Rental service, which enables users to rent Energy anytime with a much lower price compared to staking or burning TRX. The rental can be ended anytime as wanted.\n\n2. How to use Energy Rental?\nOn the “Energy Rental” page, the unit price for renting 100,000 Energy per day is displayed on the left side.\n\n\n\nSpecify the rental amount and duration on the right side as needed.\n\n\n\n \n\nThe prepaid rent and security deposit needed will be displayed below.","metadata":{"loc":{"lines":{"from":6958,"to":6985}}}}],["1345",{"pageContent":"Specify the rental amount and duration on the right side as needed.\n\n\n\n \n\nThe prepaid rent and security deposit needed will be displayed below. \n\n\n\nClick “Rent Now” and sign in your wallet to rent the Energy. The total payment includes your rent and the security deposit. For more information about how the payment is calculated, see What are the rules for my rent and security deposit calculation?\n\nYou can check your remaining rent and duration on the left side.\n\n\n\nDuring your rental, if you find the Energy amount is insufficient or you want to rent for a longer duration, you can click the “Rent More Energy” or “Extend Rental Duration” tab.\n\n\n\n3. How to end my rental?\nOn the left side of “Energy Rental”, click “End Now”.\n\n\n\nIn the window, you will see the amount of asset to be returned and Energy to be deducted when the rental is ended.\n\n\n\nClick “Confirm” and sign in your wallet to end the rental.\n\n\n\nNote:","metadata":{"loc":{"lines":{"from":6985,"to":7018}}}}],["1346",{"pageContent":"In the window, you will see the amount of asset to be returned and Energy to be deducted when the rental is ended.\n\n\n\nClick “Confirm” and sign in your wallet to end the rental.\n\n\n\nNote: \n\nPlease remember to manually end your rental on time. Otherwise, the liquidation mechanism will be triggered. All or part of your security deposit will be liquidated according to the Energy you actually used and distributed to liquidators as rewards.\nIf you end the rental when your used Energy is not recovered, your security deposit will be deducted correspondingly.\nFAQ\n1. What are the rules for my rent and security deposit calculation?\n\nRent = Energy rental amount * Unit price for Energy rental * Rental duration (Day)\n\nSecurity deposit = Energy rental amount * Unit price for Energy rental + Liquidation fee\n\n \n\nCommonly, all of your security deposit will be returned when the rental is ended. However, in the following scenarios, part of your security deposit will be deducted:","metadata":{"loc":{"lines":{"from":7018,"to":7039}}}}],["1347",{"pageContent":"If you end your rental when the used Energy is not recovered to the original amount, your security deposit will be deducted accordingly. Security deposit deducted = (Energy Used / Total Energy rented) / * Unit price for Energy rental * 0.5.\nIf you do not end your rental before expiration, the security deposit will be deducted based on the exceeded duration.\nIf your rental is liquidated due to expiration, the liquidation fee will be deducted from your security deposit.\n \nFor example, a user wants to rent 1,000,000 Energy for 3 days. Currently, 100,000 Energy costs 12 TRX every day for rental. If you choose to get 100,000 Energy by staking, 6,000 TRX will need to be staked.\nRent = 12 TRX/Day * 1,000,000 / 100,000 * 3 days = 360 TRX\nSecurity deposit = 12 TRX * 1,000,000 / 100,000 + 40 TRX = 160 TRX\nThe following section describes common scenarios when the rental ends:\n1、The user ends the rental early (no price fluctuation)","metadata":{"loc":{"lines":{"from":7041,"to":7049}}}}],["1348",{"pageContent":"① Used Energy fully recovered: all security deposit will be returned (160 TRX)\n② Used Energy recovered to 60% of the original amount: Security deposit to be returned = 160 TRX - 40% * 12 TRX * 1,000,000 / 100,000 * 0.5 = 136 TRX\n \n2、The user ends the rental 12 hours (0.5 day) after expiration but is not liquidated (no price fluctuation)\n① Used Energy fully recovered: Security deposit to be returned = 160 TRX - 12 TRX/Day * 1,000,000 / 100,000 * 0.5 day = 100 TRX\n② Used Energy recovered to 60% of the original amount: Security deposit to be returned = 160 TRX - 12 TRX/Day * 1,000,000 / 100,000 * 0.5 day - 40% * 12 TRX * 1,000,000 / 100,000 * 0.5 = 76 TRX","metadata":{"loc":{"lines":{"from":7051,"to":7056}}}}],["1349",{"pageContent":"3、The user does not end the rental upon expiration and is liquidated at that moment (no price fluctuation)\n① Used Energy fully recovered: Security deposit to be returned = 160 TRX - 40 TRX - 6,000 TRX * 1,000,000 / 100,000 * 0.05% = 90 TRX\n② Used Energy recovered to 60% of the original amount: Security deposit to be returned = 160 TRX - 40 TRX - 6,000 TRX * 1,000,000 / 100,000 * 0.05% - 40% * 12 TRX * 1,000,000 / 100,000 * 0.5 = 66 TRX\n\n \n\nTherefore, you can get all your security deposit back when you end the rental on time and with all Energy recovered to the original amount.\n\nStaked TRX\n DeFi Support\n6 months ago Updated\nNot yet followed by anyone\n1. What is Staked TRX? \nJustLend DAO has released a Stake 2.0-based new feature named \"Staked TRX\", with which users can get sTRX tokens and earn high yields by staking TRX.","metadata":{"loc":{"lines":{"from":7059,"to":7072}}}}],["1350",{"pageContent":"2. How is it different from traditional staking? \nIn traditional staking, you need to take actions such as staking, voting, and claiming before you can gain voting rewards, with no profit from Energy Rental. In \"Staked TRX\", however, the platform will automatically earn yields for you by voting with your staked TRX and renting your Energy, which offers higher yields and makes staking much easier. \n\n \n\n3. What is sTRX?\n \n\nsTRX is a yield-bearing token provided by JustLend DAO based on \"Staked TRX\". You can obtain sTRX by staking TRX on JustLend DAO, and holding sTRX will earn you yields. \n\nYields consist of the following two parts: \n\n1. TRON Power obtained from the TRX staked on TRON are voted for Super Representatives (SRs) to earn voting rewards for users.\n\n2. Energy obtained from the TRX staked on TRON are rented to earn rent for users. \n\nAs the voting rewards and rent accrue, the exchange rate of TRX to sTRX will increase accordingly, thus increasing your total yields.","metadata":{"loc":{"lines":{"from":7076,"to":7092}}}}],["1351",{"pageContent":"As the voting rewards and rent accrue, the exchange rate of TRX to sTRX will increase accordingly, thus increasing your total yields. \n\n \n\nYou can unstake TRX at any time to swap sTRX back for TRX. This can also be done through decentralized exchanges like SunSwap or centralized exchanges like Huobi. \n\nDifferent from the conventional way of staking which only generates yields on staked assets, \"Staked TRX\" provides users with both staking yields and liquidity, increasing the flexibility and efficiency of funds. \n\n \n\n4. How to stake my asset? \n4.1. Rules\nAnyone can stake TRX (starting from a minimum of 0.000001 TRX) to get sTRX. Interest accrues as soon as the asset is successfully staked. \n\n4.2. Steps\nOn \"Staked TRX\", click the \"Stake\" tab on the right side.\n\n\nYou can enter the amount of TRX by either choosing a percentage below or typing in a number.\n\n\nClick \"Stake Now\" and sign in your wallet. \nYou can view the total amount of your staked asset in the section illustrated below.","metadata":{"loc":{"lines":{"from":7092,"to":7114}}}}],["1352",{"pageContent":"Click \"Stake Now\" and sign in your wallet. \nYou can view the total amount of your staked asset in the section illustrated below.\n\n\n5. How to unstake my asset?\n5.1. Rules\nYou may apply to unstake TRX, which means to swap your sTRX back for TRX, anytime. Unstaking asset will be locked up for a period during which the corresponding sTRX no longer yields returns. \n\n5.2. Steps\nOn \"Staked TRX\", click the \"Unstake\" tab on the right side. \n\n\nYou can enter the amount of sTRX by either choosing a percentage below or typing in a number. \n\n\nClick \"Unstake Now\" and sign in your wallet. \nUnstaked asset can only be withdrawn after the pending period ends. You can view the progress of unstaking in the section illustrated below.\n    \n\n6. How to withdraw my asset?\nYou need to withdraw your TRX manually after the unstaking period ends. \n\n\n\nClick \"Withdraw\" and sign in your wallet to withdraw your unstaked TRX.","metadata":{"loc":{"lines":{"from":7114,"to":7138}}}}],["1353",{"pageContent":"Introduction\nWhat is JustMoney?\nJustMoney is a decentralized cross-chain DeFi and Web3 ecosystem.\nIt provides all the tools for cryptocurrency exchanging, for merchants to accept cryptocurrency and for crypto projects to grow their business.","metadata":{"loc":{"lines":{"from":1,"to":4}}}}],["1354",{"pageContent":"Our ecosystem consists of a DEX, bridge, cross-chain swap, a decentralized payment gateway with 4 sub products, cryptocurrency gifting platform, a launchpad and many tools that utilize our ecosystem. \nOur key difference between other dexes is that we work closely with projects and we provide them all the tools they need to run their business. We have widgets that projects can use on their own website, we offer charting bots for their telegram channels and other useful tools. We also actually \"list\" projects on our dex after a due-diligence has been done.\n​\nOur DEX ecosystem is currently integrated into 5 chains: Ethereum, Tron, BSC, Polygon and BTTC, but we are looking to integrate more chains in the future. (For now, Ethereum is integrated on the bridge and JM Pay but it will be soon added to swap as well)\nJustMoney Pay is integrated also with Avax, Fantom and Cronos.","metadata":{"loc":{"lines":{"from":6,"to":10}}}}],["1355",{"pageContent":"We are also winners of TronDAO's Hackathon in season 1 and we got a prize in season 2 for the most voted project by community votes.","metadata":{"loc":{"lines":{"from":12,"to":12}}}}],["1356",{"pageContent":"Our Goal\nOur main goal is to increase crypto awareness and adoption and to make cryptocurrency mainstream by bringing real use-cases and utilities for everybody despite their level of knowledge in crypto.\nWe put a lot of focus on products itself and for us a product is only a product if it is easy to use for anybody, looks professional, solves a problem and of course serves its main purpose. Most of the products on crypto are neither of those or at least missing some of those key elements.\nComposability / future integrations\nWe have built our platform in a way to really easily add new features or integrations to third-party vendors or to other chains.","metadata":{"loc":{"lines":{"from":14,"to":18}}}}],["1357",{"pageContent":"Composability / future integrations\nWe have built our platform in a way to really easily add new features or integrations to third-party vendors or to other chains.\nOur DEX is used as the foundation for all of our other products. For example on JustMoney Pay when users pay their order it will automatically swap the used tokens to USDT and merchant will always get USDT. The gift platform and launchpad also uses our pools. Cross-chain swap uses our pools and the bridge to allow swaps from one token on chain A to another token on chain B.\n​\nWe are looking to integrate more chains to our platform but first we want to scale up the ones that are already integrated.\n​\nWhat comes to JustMoney Pay, we have a Woocommerce plugin and API available for checkout and for donations we have API and Wordpress plugin. We want to also bring it to other e-commerce platforms e.g. Shopify.\n​\n​Whitepaper\nVersion 1.3 dated Nov 20, 2022\nIntroduction","metadata":{"loc":{"lines":{"from":18,"to":28}}}}],["1358",{"pageContent":"​\n​Whitepaper\nVersion 1.3 dated Nov 20, 2022\nIntroduction\nA cross-chain ecosystem powering Web3 and DeFi with our next generation decentralized applications.","metadata":{"loc":{"lines":{"from":28,"to":32}}}}],["1359",{"pageContent":"Background\nToday, most cryptocurrencies are treated as collectibles, which is slowing down mass adoption. Cutting out the middleman is an eventuality in every mature industry, and blockchain technology is here to do it to the financial industry. The infrastructure is in place, and early adopters are ready to embrace it. JustMoney was founded to catalyze the shift from fiat to crypto.\n\n\n\nProblems to solve\nThe use of fiat has led to many problems, which cryptocurrencies can solve. Speed and cost are some of the overlooked issues, yet low-hanging fruits, JustMoney, will initially be making use of. Another issue is how to move money from A to B (online and offline) at a fraction of the current cost, regardless of how big or small the transaction is.\n\n\n\nMission\nTo build the next generation of payment applications to make cryptocurrencies mainstream.","metadata":{"loc":{"lines":{"from":36,"to":47}}}}],["1360",{"pageContent":"Mission\nTo build the next generation of payment applications to make cryptocurrencies mainstream.\n\n\n\nToken\n$JM is the token that powers JustMoney that will be used by all products created. The token is a deflationary token which gets bought back and burned occasionally using the revenues that we generate from our products.\n\n\n\n\nRoadmap\n​\nJustMoney Swap Interface (Q3 / 2021)\nAllow users to purchase JustMoney tokens directly from our website. The Swap Interface will use JustSwap as the liquidity pool. Users will need TronLink, Klever, or any other Tron-supported wallet to swap TRX or USDT to JustMoney and vice-versa. This will make it easier for users to acquire $JM and save our time educating users on using different swaps.","metadata":{"loc":{"lines":{"from":47,"to":61}}}}],["1361",{"pageContent":"We will only have TRX to JM swaps in the first phase, but we will add USDT the week after.\nCoinEyes Generator (Q3 / 2021)\nProjects listed with JustMoney will be able to add their logo to the coin eyes generator. It is a fun and free advertising tool to engage the projects with their users. CoinEyes is a tool that will allow communities to band together and further their reach in the crypto-verse.\nJustMoney Swap (Q3 / 2021)\nJustMoney Swap is an AMM decentralized exchange (DEX) launched initially on the Tron Blockchain. It is the first multi-chain swap with full support for taxed tokens on the Tron network. JustMoney Swap currently supports tokens on Tron, BSC, Polygon and Zenith with support for other blockchains later. Listing on the exchange is free if projects provide enough liquidity to prevent an enormous price impact.","metadata":{"loc":{"lines":{"from":63,"to":67}}}}],["1362",{"pageContent":"This was the first \"external\" revenue stream for JustMoney and a game-changer where our value can grow by attracting new users and driving JM's value from each transaction.\n\nFrom each transaction we take a fee and half of it is be used to buy JM from the market, pushing up its price. The other half will be added to the JM liquidity pools as TRX, BNB, MATIC or BTT, automatically increasing JM's price.","metadata":{"loc":{"lines":{"from":69,"to":71}}}}],["1363",{"pageContent":"JustMoney Swap Widget (Q4 / 2021)\nJustMoney offers a swap widget, upon request, for projects listed on its exchange. Projects can install it on their website and start offering swap services for their users for any supported TRC20, ERC20, and BEP20 tokens. Also, this widget will allow token holders to provide liquidity to pools on the project's website directly.\n​\nMulti-chain Swap (Q4 / 2021)\nThis is the first multi-chain swap with full support for taxed tokens. JustMoney has created a platform where users from Tron, Binance, Polygon and Zenith can easily swap their favorite tokens. Soon, it will support more blockchains. There is a 0.3% swap fee from which 0.25% goes to liquidity providers and 0.05% to the platform, which is used to buy back and burn $JM tokens.\n​\nJustMoney Launchpad (Q4 / 2021)","metadata":{"loc":{"lines":{"from":73,"to":79}}}}],["1364",{"pageContent":"​\nJustMoney Launchpad (Q4 / 2021)\nJM Launchpad is a token launch platform initially launched on the Tron Blockchain, which is now a multi-chain platform supporting tokens on Tron, Binance, Polygon and Zenith blockchains. Its intended purpose is to help projects increase their reach across these ecosystems, raise funds, and allow users the chance to be part of the thriving and game-changing projects in each blockchain.","metadata":{"loc":{"lines":{"from":79,"to":81}}}}],["1365",{"pageContent":"Why use JustMoney Launchpad? It is more than a token offering platform as it offers advisory services for new and existing projects. This is an opportunity for projects to benefit from JustMoney's team experience and insight, allowing them to focus on developing their product and, most importantly, increase adoption. It also allows the successful launch of tokens in which slippage is automatically adjusted to minimize failed transactions.","metadata":{"loc":{"lines":{"from":83,"to":83}}}}],["1366",{"pageContent":"JustMoney Launchpad has already successfully launched BabyTuru ($BBT) and Kraftly ($KTY), the native governance and stock token for Kraftly NFT marketplace.\n​\nJustMoney Bridge (Q2 / 2022)\nJustMoney Bridge, it takes us from multi-chain to truly cross-chain. Not only it allows JM tokens to be moved quickly and cheaply from one blockchain to another, but we can also offer this service to other projects, who can apply for their tokens to be added to the bridge. An opportunity to easily expand their project to other chains and utilize our fast ~1 minute transit times.","metadata":{"loc":{"lines":{"from":85,"to":88}}}}],["1367",{"pageContent":"We will charge projects a monthly fee if they want to avail this service. If you run a project and want to add your token on our bridge, please contact any of our admins on our telegram group @JustMoneyTRX or send an email to support@just.money. Using the JustMoney bridge, not only can projects on Tron expand to other chains such as Polygon, BTTC and BSC. But projects native to BSC for example can also expand to Tron network, BTTC and Polygon. A fast and affordable two-way, multiple chain, cross-chain, solution as a service.","metadata":{"loc":{"lines":{"from":90,"to":90}}}}],["1368",{"pageContent":"Transactions are done in 30-90 seconds no matter which destination and source chain is used. Each transaction has a very small fee. Normally around 0.6–1 USD in value. The fee is taken in the base coin of the source chain where you are transferring from. The fee will be used to cover the costs that we need to pay and for the gas fees when our validators do the “voting”. It will also leave us small income on top of that for the buyback and burns of our JM token.\n​\nCross-chain Swap and Widget(Q2 / 2022)\nThis is a platform where people any token on our ecosystem on any supported chain, and they can pay with any token on another chain. This also makes it easier for new users to acquire e.g. TRX or JM, making their journey on the Tron Network smoother. This feature will make it easier for the JustMoney team to target people on other chains.","metadata":{"loc":{"lines":{"from":92,"to":95}}}}],["1369",{"pageContent":"Since TRX can also be bought from the Cross-chain Swap, it will help the whole Tron Ecosystem at the same time and will hopefully also boost trust and acceptance of JustMoney within the Tron community.","metadata":{"loc":{"lines":{"from":96,"to":96}}}}],["1370",{"pageContent":"We also developed a widget for this that any website can take allowing anyone to easily do cross-chain swaps on third-party sites.\n​\nJustMoney Pay(Q3 - Q4 / 2022)\nThe main benefit is opening up to crypto users and receiving funds instantly (instant clearing instead of 14-45 days from purchase)\n\nPlugin for eCommerce stores to start accepting crypto payments\n- Begin with Woocommerce and expand to other payment systems.\n\nApi integration\n- Add API for custom integration possibility\n\nMobile payment terminal\n- A terminal for offline merchants to accept payments from their customers with QR code.\n\nPayment links\n- Allows anyone to create payment links and receive one-time cryptocurrency payments","metadata":{"loc":{"lines":{"from":98,"to":113}}}}],["1371",{"pageContent":"Payment links\n- Allows anyone to create payment links and receive one-time cryptocurrency payments\n\nDonation Button\n- A donations button which can be placed on any website to start receiving donations right away\n​\nFiat on/off-ramp (Q2 - Q4 / 2023)\n- On-ramp will allow buying crypto with debit/credit card\n- Off-ramp will allow converting crypto back to fiat\n- Crypto will be instantly converted to selected token and transferred to user's wallet. Funds will not stay in our custody.\n\nOne Click Buy Button (Q2 - Q4 / 2023)\n- Wallet agnostic shopping app helping to speed up purchases\n- Universal ledger linking wallet address with shipping address\n- Why would anyone buy: Increases store conversion substantially\n- Business model: fixed fee in JM\n\nJM Marketplace - Proof-of-concept (Q1 - Q2 / 2024)\nThis is a shopping marketplace where users can purchase products or services with any TRC-20 tokens.","metadata":{"loc":{"lines":{"from":113,"to":131}}}}],["1372",{"pageContent":"JM Marketplace - Proof-of-concept (Q1 - Q2 / 2024)\nThis is a shopping marketplace where users can purchase products or services with any TRC-20 tokens.\n\n- Launch of marketplace\n- First partner stores integrated. Over 100 brands and 10 000 products in multiple product categories. High-quality brands (Apple, Nike, etc.)\n- Why would anyone buy? Allows users to purchase anything using crypto.\n- Business model: commissions from sales. JM operates everything end-to-end\n\nHalf of profits the marketplace makes (5-12% commission) will be used for buying $JM tokens, making it scarcer and driving the price up.","metadata":{"loc":{"lines":{"from":131,"to":139}}}}],["1373",{"pageContent":"Half of profits the marketplace makes (5-12% commission) will be used for buying $JM tokens, making it scarcer and driving the price up.\n\nOverview\nJustMoney Swap is an AMM decentralized exchange (DEX) launched initially on the Tron Blockchain. It is the first multi and cross-chain swap with full support for taxed tokens.\nJustMoney Swap currently supports tokens on Tron, BNB, Polygon and Bittorrent Chain with support for other blockchains later. Listing on the exchange is free of charge.\nAdditionally, we provide listed projects with free-of-use tools such as telegram bots, charting, swap widgets, giftcard platform and more.","metadata":{"loc":{"lines":{"from":139,"to":144}}}}],["1374",{"pageContent":"How to list your project?\nAll listings are free of charge, however since we actually make your project visible and also announce it, we have certain pre-conditions for each listing.\nYour project passes our due-diligence process. Mainly we check that the project feels solid and it doesn't have any red flags\nYou will open a decent size pool which is normally around min. 2500 usd per side (note that this will still be your money and no listing fees are taken)\n​\nIf you think your project passes the requirements above please fill our listing application in ​\nWe will contact you with more instructions.\n​\nOnce your project is listed on JustMoney Swap, your token will also be visible on JustMoney Gift and our cross-chain swap. If your pool size is large enough we will also add it to JustMoney Pay.\n​","metadata":{"loc":{"lines":{"from":146,"to":155}}}}],["1375",{"pageContent":"​\nOnce your project is listed on JustMoney Swap, your token will also be visible on JustMoney Gift and our cross-chain swap. If your pool size is large enough we will also add it to JustMoney Pay.\n​\nYou can also utilize our tools free of charge. You can install widgets on your webpage, you can ask for charting bot for your telegram channel and you can provide your own cards for our gift platform.","metadata":{"loc":{"lines":{"from":155,"to":158}}}}],["1376",{"pageContent":"Discounted swap fees on Tron\nWe cut the energy cost of swaps by up to 70% on Tron. Enjoy discounted swaps on JustMoney Swap.\nAfter the increase of fees on Tron chain we wanted to offer people a chance to have swaps even cheaper than before the fee increase of Tron so we made a functionality that allows people to pay up to 70% less energy cost when swapping on Tron chain.","metadata":{"loc":{"lines":{"from":160,"to":162}}}}],["1377",{"pageContent":"If you use TRX to pay for the energy cost (instead of energy) you will get a swap for flat rate of 19 TRX when our \"discounted swap\" light is green. You can see that light on the info box at the bottom of the swap just above the connect wallet/swap button.\nIf the light is green you will also see a percentage value of the current energy regeneration and when that goes to 100% the discounted swap will be available again.\nIt looks like this when there is not enough energy on our system for discounted swaps\n​\nWe will use part of the collected fees to buy back and burn JM token and one part to reinvest it by freezing those to grow the energy that this system has (if we see it needs more energy).\nNote: Our platform will try to use discounted swaps only if the user has less than 50000 energy on their wallet\n​","metadata":{"loc":{"lines":{"from":164,"to":170}}}}],["1378",{"pageContent":"Note: Our platform will try to use discounted swaps only if the user has less than 50000 energy on their wallet\n​\nWhen you try to swap with a discounted fee, please note that TronLink still displays the estimated fee like it normally would. It doesn't for some reason know to calculate it correctly by checking that our wallets have energy and that our contract is set to use that energy instead.\nSo even if it's showing that the fee would be e.g. 70 TRX it will still not charge TRX fees for energy as long as our contract has enough energy available.\nThere could be a case that someone would pay some network fees in case too many people are attempting to swap at the exact time as the light turns green. That's why we recommend to not swap immediately after the light turns green but give it a bit of time instead of rushing to swap.\n​\nEarn JM every day by providing energy\nYou can help other people and our ecosystem by providing us energy for this system.","metadata":{"loc":{"lines":{"from":170,"to":177}}}}],["1379",{"pageContent":"​\nEarn JM every day by providing energy\nYou can help other people and our ecosystem by providing us energy for this system.\nIf you freeze energy for our wallet address linked to this system you will automatically earn 0.3 JM per day per 1 TRX frozen.\nJust freeze energy to following address: TSJcv2QH5Td9gSyXjWNxw5DAKk5ujJ3mFM\nand you will automatically start receiving the rewards daily to the same address where you froze TRX from.","metadata":{"loc":{"lines":{"from":177,"to":182}}}}],["1380",{"pageContent":"We might adjust the rate of distributed JM depending on the energy we have there in total. If we see that we have excessive amounts of energy available at most times which is not utilized, we might adjust the rate of distributed JM per TRX.\nOur system will only pay rewards for those that freeze over 5000 TRX for energy. Also the payments are capped to 500k TRX size of freeze per wallet. So if you freeze over 500k for energy you would be paid rewards for 500k TRX frozen value\n​\n​\nMulti-DEX routing\nOur swap infrastructure can now route through third-party DEXes to find the best price for you.\nWhen you select the tokens which you are swapping and input the amount you will see route at the bottom of the swap window. It now also shows DEXes that it will use to take that route.","metadata":{"loc":{"lines":{"from":184,"to":190}}}}],["1381",{"pageContent":"When you select the tokens which you are swapping and input the amount you will see route at the bottom of the swap window. It now also shows DEXes that it will use to take that route.\nLet's take an example here by trying to swap 1000 TRX to JM. You can see below it will first swap TRX to USDT in Sunswap then it will swap that USDT to JM on JustMoney Swap. It means this was the route that gives most JM for you.\nThis not only gives you better prices but also drops the price impact that users will get. We will integrate the big main pools from other DEXes so our users can have better prices with less impact.\nE.g. on Tron side there is no reason for people to go to Sunswap anymore to swap the main tokens/coins since they can now do it directly on JustMoney Swap and there is still a chance that the price will be even better since it checks the pools from our swap as well and prices always differ slightly.\nIn another example let's try to swap 10 000 USDT to TRX","metadata":{"loc":{"lines":{"from":190,"to":194}}}}],["1382",{"pageContent":"In another example let's try to swap 10 000 USDT to TRX\nYou can see it uses only Sunswap pool in this case and swaps 10k USDT with 0.04% price impact.\n​\nOn Tron chain you can also have discounted swap no matter which route is taken so if you are paying energy cost with your TRX then you can enjoy our fixed rate of 19 TRX per swap.","metadata":{"loc":{"lines":{"from":194,"to":197}}}}],["1383",{"pageContent":"Single Chain\nA widget that can be placed on any website. It gives a functionality to swap tokens and add/remove liquidity to/from liquidity pairs that are in ​","metadata":{"loc":{"lines":{"from":199,"to":200}}}}],["1384",{"pageContent":"Usage\nFormat: JmApi.swapWidget(elementId, options);\nIn this case iframe element must be created in HTML. You need to pass elementId to the function and it will attach to the correct element.\nFormat: JmApi.createSwapWidget(element, options);\nThis will create the iframe element. You need to pass \"type\" of the element in options object (see examples below). Type can be \"SINGLECHAIN\", \"MULTICHAIN\" or \"CROSSCHAIN\". If type is not passed \"SINGLECHAIN\" will be used as default.\nElement can be ID of already existing element or an instance of an HTMLElement. It will be appended inside that element. If element does not exist it will be created with this given ID. If element is null, the element will be created with random ID.\nReturns: ID of the iframe element.\nParameters:\ntype: type of the widget (\"SINGLECHAIN\", \"MULTICHAIN\" or \"CROSSCHAIN\")\nnetwork: the network that this widget is for. String if type is 'SINGLECHAIN', array if type is 'MULTICHAIN'\nslippage: slippage setting for the swap","metadata":{"loc":{"lines":{"from":203,"to":213}}}}],["1385",{"pageContent":"network: the network that this widget is for. String if type is 'SINGLECHAIN', array if type is 'MULTICHAIN'\nslippage: slippage setting for the swap\nliquidityTab: can add or remove liquidity if set to true\nshadow: draw shadow under the widget element\ntokens: array of tokens to be visible on the swap widget UI. Empty array shows all tokens.\nfromToken: default token selected for 'from' field\ntoToken: default token selected for 'to' field\nbackgroundColor: background color of the widget. Can also be set to 'transparent'\nbackgroundImage: background image of the widget\ntextColor: main text color\nbuttonStyle: large button style\nmaxButtonStyle: style of the \"max\" button which is shown after user has connected to the widget\ninputContainerStyle: style of the input containers and dropdown elements\nheadingStyle: style of the main heading\nlightBranding: JustMoney logo white when set to true, dark if set to false","metadata":{"loc":{"lines":{"from":213,"to":227}}}}],["1386",{"pageContent":"Examples\nPOLY, BSC, BTTC\n<script src=\"https://just.money/assets/js/widgetLib-1.1.js\"></script>\n<script type=\"application/javascript\">\n    JmApi.swapWidget('jmSwapFrame', {\n        network: 'BTTC',\n        slippage: 0.05,\n        liquidityTab: true,\n        shadow: false,\n        backgroundColor: '#F3F3F3',\n        backgroundImage: 'url(/assets/img/swap-form-bg-lighter.svg);',\n        textColor: '#000',\n        buttonStyle: 'background:#000;color:#FFF;',\n        maxButtonStyle: 'background:#FFF;color:#000;',\n        headingStyle: 'color:#353840;text-shadow:none',\n        lightBranding: false,\n        tokens: ['TRX', 'BTT'],\n        fromToken: \"TRX\",\n        toToken: \"BTT\",\n    });\n</script>\n​\n<iframe id=\"jmSwapFrame\" src=\"https://just.money/widget\" style=\"width:500px;height:500px;margin:auto;display:block;\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\"></iframe>\nOr create element automatically by\n<script src=\"https://just.money/assets/js/widgetLib-1.1.js\"></script>","metadata":{"loc":{"lines":{"from":229,"to":253}}}}],["1387",{"pageContent":"Or create element automatically by\n<script src=\"https://just.money/assets/js/widgetLib-1.1.js\"></script>\n<script type=\"application/javascript\">\n    JmApi.createSwapWidget('anyID', {\n        type:'SINGLECHAIN',\n        network: 'BTTC',\n        slippage: 0.05,\n        liquidityTab: true,\n        shadow: false,\n        backgroundColor: '#F3F3F3',\n        backgroundImage: 'url(/assets/img/swap-form-bg-lighter.svg);',\n        textColor: '#000',\n        buttonStyle: 'background:#000;color:#FFF;',\n        maxButtonStyle: 'background:#FFF;color:#000;',\n        headingStyle: 'color:#353840;text-shadow:none',\n        lightBranding: false,\n        tokens: ['TRX', 'BTT'],\n        fromToken: \"TRX\",\n        toToken: \"BTT\",\n    });\n</script>\nYou can customize the options inside JMSwapOptions object e.g. change the background color, button colors or tokens that will be visible.\nIf you want to show all the tokens and not limit the tokens, use empty array (tokens: [])","metadata":{"loc":{"lines":{"from":253,"to":275}}}}],["1388",{"pageContent":"If you want to show all the tokens and not limit the tokens, use empty array (tokens: [])\nIf you do not wish to show liquidity tab and allow liquidity operations for users set liquidityTab property to false.","metadata":{"loc":{"lines":{"from":275,"to":276}}}}],["1389",{"pageContent":"Multi-chain\n<script src=\"https://just.money/assets/js/widgetLib-1.1.js\"></script>\n<script type=\"application/javascript\">\n    JmApi.swapWidget('jmSwapFrame', {\n        network: ['TRON','BSC','POLY','BTTC','ZENITH'],\n        slippage: 0.05,\n        liquidityTab: true,\n        shadow: false,\n        backgroundColor: '#7f8588',\n        backgroundImage: 'url(/assets/img/swap-form-bg-lighter.svg);',\n        textColor: '#000',\n        buttonStyle: 'background:#0057f6;color:#FFF;',\n        maxButtonStyle: 'background:#0057f6;color:#FFF;',\n        chartBackgroundColor: '#0057f6',\n        headingStyle: 'color:#0057f6;text-shadow:none',\n        lightBranding: false,\n        tokens: {\n            TRON:[],\n            BSC:[],\n            POLY:[],\n            BTTC:[],\n            ZENITH:[],\n        },\n        fromToken: {\n            TRON: \"TRX\",\n            BSC:\"USDT\",\n            POLY:\"MATIC\",\n            BTTC:\"TRX\",\n            ZENITH: \"BUSD\"\n        },\n        toToken: {\n            TRON:\"JM\",","metadata":{"loc":{"lines":{"from":278,"to":309}}}}],["1390",{"pageContent":"fromToken: {\n            TRON: \"TRX\",\n            BSC:\"USDT\",\n            POLY:\"MATIC\",\n            BTTC:\"TRX\",\n            ZENITH: \"BUSD\"\n        },\n        toToken: {\n            TRON:\"JM\",\n            BSC:\"BNB\",\n            POLY:\"USDT\",\n            BTTC:\"BTT\",\n            ZENITH: \"ZENITH\"\n        },\n    });\n</script>\n<iframe id=\"jmSwapFrame\" src=\"https://just.money/widget\" style=\"width:500px;height:500px;margin:auto;display:block;\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\"></iframe>\nOr create automatically by\n<script src=\"https://just.money/assets/js/widgetLib-1.1.js\"></script>\n<script type=\"application/javascript\">\n    JmApi.createSwapWidget('anyID', {\n        type:'MULTICHAIN'\n        network: ['TRON','BSC','POLY','BTTC','ZENITH'],\n        slippage: 0.05,\n        liquidityTab: true,\n        shadow: false,\n        backgroundColor: '#7f8588',\n        backgroundImage: 'url(/assets/img/swap-form-bg-lighter.svg);',\n        textColor: '#000',","metadata":{"loc":{"lines":{"from":309,"to":337}}}}],["1391",{"pageContent":"liquidityTab: true,\n        shadow: false,\n        backgroundColor: '#7f8588',\n        backgroundImage: 'url(/assets/img/swap-form-bg-lighter.svg);',\n        textColor: '#000',\n        buttonStyle: 'background:#0057f6;color:#FFF;',\n        maxButtonStyle: 'background:#0057f6;color:#FFF;',\n        chartBackgroundColor: '#0057f6',\n        headingStyle: 'color:#0057f6;text-shadow:none',\n        lightBranding: false,\n        tokens: {\n            TRON:[],\n            BSC:[],\n            POLY:[],\n            BTTC:[],\n            ZENITH:[],\n        },\n        fromToken: {\n            TRON: \"TRX\",\n            BSC:\"USDT\",\n            POLY:\"MATIC\",\n            BTTC:\"TRX\",\n            ZENITH: \"BUSD\"\n        },\n        toToken: {\n            TRON:\"JM\",\n            BSC:\"BNB\",\n            POLY:\"USDT\",\n            BTTC:\"BTT\",\n            ZENITH: \"ZENITH\"\n        },\n    });\n</script>","metadata":{"loc":{"lines":{"from":337,"to":369}}}}],["1392",{"pageContent":"},\n        toToken: {\n            TRON:\"JM\",\n            BSC:\"BNB\",\n            POLY:\"USDT\",\n            BTTC:\"BTT\",\n            ZENITH: \"ZENITH\"\n        },\n    });\n</script>\nInstead of having single network in \"network\" parameter you can use an array of networks. You need to also in this case specify tokens, fromToken and toToken parameters for each network like shown in the example above.","metadata":{"loc":{"lines":{"from":401,"to":411}}}}],["1393",{"pageContent":"Cross-chain\n<script src=\"https://just.money/assets/js/widgetLib-1.1.js\"></script>\n<script type=\"application/javascript\">\n    JmApi.swapWidget('jmCCSwapFrame', {\n        shadow: false,\n        backgroundColor: '#00ebff',\n        backgroundImage: 'url(/assets/img/swap-form-bg-lighter.svg);',\n        textColor: '#000',\n        buttonStyle: 'background:#FFF;color:#2E3344;',\n        maxButtonStyle: 'background:#FFF;color:#2E3344;',\n        headingStyle: 'color:#FFF;',\n        lightBranding: true,\n        tokens: {TRON:[], BSC:[], POLY:[], BTTC:[]},\n        fromNetwork: \"BSC\",\n        toNetwork: \"TRON\",\n        fromToken: \"BNB\",\n        toToken: \"JM\",\n    });\n</script>\n​\n<iframe id=\"jmCCSwapFrame\" src=\"https://just.money/ccwidget\" style=\"width:500px;height:500px;margin:auto;display:block;\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\"></iframe>\nOr create automatically by\n<script src=\"https://just.money/assets/js/widgetLib-1.1.js\"></script>\n<script type=\"application/javascript\">","metadata":{"loc":{"lines":{"from":413,"to":436}}}}],["1394",{"pageContent":"Or create automatically by\n<script src=\"https://just.money/assets/js/widgetLib-1.1.js\"></script>\n<script type=\"application/javascript\">\n    JmApi.createSwapWidget('anyID', {\n        type:'CROSSCHAIN'\n        shadow: false,\n        backgroundColor: '#00ebff',\n        backgroundImage: 'url(/assets/img/swap-form-bg-lighter.svg);',\n        textColor: '#000',\n        buttonStyle: 'background:#FFF;color:#2E3344;',\n        maxButtonStyle: 'background:#FFF;color:#2E3344;',\n        headingStyle: 'color:#FFF;',\n        lightBranding: true,\n        tokens: {TRON:[], BSC:[], POLY:[], BTTC:[]},\n        fromNetwork: \"BSC\",\n        toNetwork: \"TRON\",\n        fromToken: \"BNB\",\n        toToken: \"JM\",\n    });\n</script>","metadata":{"loc":{"lines":{"from":436,"to":455}}}}],["1395",{"pageContent":"Bridge Widget\nThe bridge widget works similar way as the swap widget but with small differences in the parameters and function to call.\nA widget that can be placed on any website. It gives a functionality to bridge tokens (listed in JustMoney Bridge) between the chain.","metadata":{"loc":{"lines":{"from":457,"to":459}}}}],["1396",{"pageContent":"Usage\nFormat: JmApi.bridgeWidget(elementId, options);\nIn this case iframe element must be created in HTML. You need to pass elementId to the function and it will attach to the correct element.\nFormat: JmApi.createBridgeWidget(element, options);\nThis will create the iframe element with the bridge UI inside it.\nElement can be ID of already existing element or an instance of an HTMLElement. It will be appended inside that element. If element does not exist it will be created with this given ID. If element is null, the element will be created with random ID.\nReturns: ID of the iframe element.\nNote that for the bridge widget you need to import ​\nParameters:\nnetwork: default network that will be chosen initially\ntokens: array of tokens to be visible on the bridge widget UI. Empty array shows all tokens.\ndefaultToken: token that will be selected by default\ngoogleFontFamily: allows to set custom font from Google Fonts","metadata":{"loc":{"lines":{"from":461,"to":473}}}}],["1397",{"pageContent":"defaultToken: token that will be selected by default\ngoogleFontFamily: allows to set custom font from Google Fonts\nbackgroundColor: background color of the widget. Can also be set to 'transparent'\nbackgroundImage: background image of the widget\ntextColor: main text color\nbuttonStyle: large button style\nmaxButtonStyle: style of the \"max\" button which is shown after user has connected to the widget\ninputContainerStyle: style of the input containers and dropdown elements\nheadingStyle: style of the main heading\nlightBranding: JustMoney logo white when set to true, dark if set to false","metadata":{"loc":{"lines":{"from":473,"to":482}}}}],["1398",{"pageContent":"Examples\n<script src=\"https://just.money/assets/js/widgetLibBridge-1.0.js\"></script>\n<script type=\"application/javascript\">\n    JmApi.createBridgeWidget('jmBridgeFrame1', {\n        network: 'BSC',\n        backgroundColor: '#00ebff',\n        backgroundImage: 'url(/assets/img/swap-form-bg-lighter.svg);',\n        textColor: '#000',\n        buttonStyle: 'background:#FFF;color:#2E3344;',\n        maxButtonStyle: 'background:#FFF;color:#2E3344;',\n        headingStyle: 'color:#FFF;',\n        lightBranding: true,\n        tokens: [],\n        defaultToken: \"JM\"\n    });\n</script>\n<script src=\"https://just.money/assets/js/widgetLibBridge-1.0.js\"></script>\n<script type=\"application/javascript\">\n    JmApi.createBridgeWidget('jmBridgeFrame1', {\n        network: 'BSC',\n        backgroundColor: 'transparent',\n        backgroundImage: 'url(/assets/img/swap-form-bg-lighter.svg);',\n        textColor: '#FFF',\n        buttonStyle: 'background:#cc3399;color:#FFF;',","metadata":{"loc":{"lines":{"from":484,"to":507}}}}],["1399",{"pageContent":"backgroundColor: 'transparent',\n        backgroundImage: 'url(/assets/img/swap-form-bg-lighter.svg);',\n        textColor: '#FFF',\n        buttonStyle: 'background:#cc3399;color:#FFF;',\n        maxButtonStyle: 'background:#cc3399;color:#FFF;',\n        inputContainerStyle: 'background: white;color: #000',\n        googleFontFamily: 'Poppins',\n        headingStyle: 'color:#FFF;',\n        lightBranding: true,\n        tokens: ['GOLC'],\n        defaultToken: \"GOLC\"\n    });\n</script>","metadata":{"loc":{"lines":{"from":507,"to":519}}}}],["1400",{"pageContent":"Holder ranks\nGet your \"Medal Of Holder\" by holding JM\nYour holder rank will be displayed on right top corner after you connect your wallet. \n\nOn Tron chain you can also see your discounted swap fee when you hover on top of the status.\nHolder ranks\n🥉 50M -> 100M: BRONZE\n🥈 100 -> 500: SILVER\n🥇 500 -> 1b: GOLD\n🏆 > 1b: PLATINUM\n\nOn Tron chain we have discounted fees for each rank:\n🥉 BRONZE: 17 TRX\n🥈 SILVER: 14 TRX\n🥇 GOLD: 10 TRX\n🏆 PLATINUM: 5 TRX","metadata":{"loc":{"lines":{"from":521,"to":536}}}}],["1401",{"pageContent":"If you hold under 50M your discounted fee is 19 TRX\n​\nNote: if you have over 50k energy on your wallet it will try to use your energy instead, so to utilise discounted swaps open the settings dialog of the swap and toggle \"force discounted fees\" checkbox\n​\nFor now, discounts apply only to Tron; hold the required JM in the same wallet used for swaps.\nOnly when energy is available, a green sign appears below swap fields (never depleted so far).\nApplies only for swaps, limit order fee is 19 TRX for all holder ranks\nWe may adjust the levels in the future depending on the price of the token\n​\nOverview\n“An environment that enables spot trading and is designed to provide users with the best experience.”","metadata":{"loc":{"lines":{"from":538,"to":548}}}}],["1402",{"pageContent":"We may adjust the levels in the future depending on the price of the token\n​\nOverview\n“An environment that enables spot trading and is designed to provide users with the best experience.”\nAs always, the JustMoney team is committed to delivering not just a basic product, but something polished that meets all our quality criteria. Speed, simplicity, practicality, and ease of use are all priorities. Our developers and designers are working diligently to offer you a comprehensive and enjoyable experience rather than just a simple product.\n“Everything you need at your fingertips.”\nThe term \"environment” was not chosen randomly. We aim to provide more than just a limit orders interface; we want to create a space that equips you with the necessary tools and information to make informed decisions and take control of your actions.\n“Built for users”\nExperience a CEX-like interface, familiar to many users.\nPlace limit orders for swaps to be executed at your target price.","metadata":{"loc":{"lines":{"from":548,"to":557}}}}],["1403",{"pageContent":"“Built for users”\nExperience a CEX-like interface, familiar to many users.\nPlace limit orders for swaps to be executed at your target price.\nAdd any indicators to a chart and save your layout for future use.\nMark your most-used pairs as favorites for easy access.\nFollow recent news from projects you trade.\nImplement stop-losses for your trades (coming soon).\nSpot trading/limit orders: The primary goal of this brand-new product is to offer Tronics the ability to buy or sell a predetermined quantity of tokens while specifying the maximum price to be paid or the minimum price to be received. This allows our users to adapt their strategies to the market and seize opportunities without having to constantly monitor their screens.\nTrading view charting and tools: To provide users with the best trading environment, we have integrated Trading View directly into the DEX’s page. All charts, tools, and indicators will be available for JustMoney’s listed tokens.","metadata":{"loc":{"lines":{"from":557,"to":565}}}}],["1404",{"pageContent":"Favorite pairs: A dedicated window for your favorite pairs allows you to switch between them with a single click (available only on computers).\nListed projects’ Twitter feed: Stay informed while trading! After analyzing a token chart and feeling ready to place an order, take a quick look at the project’s Twitter feed to see if there is any news that might influence the token’s price action.\nTrading history: Keep up to date with the latest transactions effortlessly. A list will be available directly on the same page, and clicking on one of these transactions will take you straight to the Tronscan block explorer.\nCoin Wrapper: Please note that only wrapped tokens are supported, so you’ll need to use WMATIC for Polygon, WBNB for BNB Chain and WTRX for Tron. If you lack wrapped coins, a pop-up wrapper will appear.\nInnovation:","metadata":{"loc":{"lines":{"from":566,"to":570}}}}],["1405",{"pageContent":"Innovation:\nBesides allowing traders to stay up to date with the latest news regarding the tokens they are about to buy or sell in real time, we have implemented additional innovations that we believe will become standard on exchange platforms:\nPick from chart button: After identifying support and resistance areas, select the price of your buy or sell orders by simply clicking on the “Pick from chart” button and then clicking on the chart. Of course, you can also set the buy or sell price manually by entering it directly in the “Price” field.\nOrders on chart: Once your order is recorded, a line will appear on the chart at the order price, green for buy orders and red for sell orders.\nClick & drag modifications: If market conditions change and you wish to modify your order, don’t worry. Simply click on the order line on the standard chart and drag it upward or downward. No additional fees will be required from us.","metadata":{"loc":{"lines":{"from":570,"to":574}}}}],["1406",{"pageContent":"Socket Connections: On the spot platform, we utilize socket connections in place of HTTP polling. This approach enables our socket cluster to deliver real-time updates on pricing and order status changes directly to clients, providing a more efficient and seamless user experience.\nRoadmap/project website\nThe JustMoney team is excited to announce that our limit order solution has already been launched on the Tron mainnet! You can access it directly at ​\nMilestone for 2023 Q2:\nVisual representation of order book (depth)\nDifferent order types e.g. stoploss\nBSC and POLYGON networks supported\nInstructions\nBuy/sell order:\nSelect the pair you want to trade\nSelect buy or sell\nSet up a price directly in the “Price” field or using the “Pick from chart” button\nInput the amount of tokens you want to spend or you want to receive\nClick on “place order” button\nSign the approval and the transaction\nCancel order:\nClick “cancel” button and sign the transaction\nModify order:","metadata":{"loc":{"lines":{"from":575,"to":592}}}}],["1407",{"pageContent":"Click on “place order” button\nSign the approval and the transaction\nCancel order:\nClick “cancel” button and sign the transaction\nModify order:\nClick on the order’s line directly on the chart and drag it upward/downward (no extra cost from our platform for order modifications).","metadata":{"loc":{"lines":{"from":592,"to":597}}}}],["1408",{"pageContent":"FAQ\nWhen is the expiration time of my order.\nEach order is valid for one month, after which it will be marked as expired.\nWhy didn't my order get executed even the chart showed that it should have been correct price.\nThere could be a few reasons for this, including not meeting the minimum token requirement due to price impact, price impact calculations on charts, or another user's limit order being executed before yours, causing the price to jump out of your limit order \"region.\"\nPrices on charts are actually calculated from swap events by looking at how many tokens a person used and how many tokens they received. Dividing those will give the price, meaning that those prices also include price impact. So, if someone made a big order, their base price might have been a lot lower when the price impact is calculated.\nIs JustMoney Spot decentralised?","metadata":{"loc":{"lines":{"from":599,"to":605}}}}],["1409",{"pageContent":"Is JustMoney Spot decentralised?\nYes, JustMoney Spot is decentralized. Orders are signed by your wallet and executed on-chain within our contracts. Order information is stored off-chain, but our oracle ensures secure execution and prevents unauthorized changes to order values. Allowance will be requested for our contract to perform a swap only for the same amount of tokens that you set in the order. The signature will contain all the values of the order, such as the price, amount of tokens to use, your wallet address, and the router contract that will execute the order. None of these values can be changed to execute the order. Nobody can, for example, try to execute a bigger amount or execute it at a different price.","metadata":{"loc":{"lines":{"from":605,"to":606}}}}],["1410",{"pageContent":"However, the information about the limit orders is stored on our off-chain systems, and our oracle will notify the contract when to execute each order when prices and other conditions are met. The contract will then perform a swap, and you cannot receive fewer tokens than your order is set to receive, or the transaction will revert. Additionally, our contract validates each signature, so the data cannot be altered.\nHow can I modify my order?\nTo modify your order, drag the order line (on the right side of the standard chart) to a new location and sign a new signature.\nDo I have to pay an extra fee to modify an order?\nNo, modifying orders is free of charge.\nHow to select a buy/sell price by clicking on the chart?\nn the limit order section, click the \"pick from chart\" button next to the price input box, and then click on the desired location on the chart to set your new order.\nIs the spot trading multi-route/multi-DEX?","metadata":{"loc":{"lines":{"from":607,"to":614}}}}],["1411",{"pageContent":"Is the spot trading multi-route/multi-DEX?\nYes, our system checks multiple routes, pairs, and DEXes to ensure you receive the most tokens in the swap when your order executes.\nHow much does it cost to place an order?\nOn the Tron network, a 19 TRX fee is charged to cover execution costs. If you cancel the order, you will receive half of the fee back. Additionally, allowance may consume some energy or TRX for energy fees.\nWhat should I do if my order expires?\nExpired orders will be marked as \"expired\" in your order history. Click the button next to the expired order to claim a refund of half of the paid fees.","metadata":{"loc":{"lines":{"from":614,"to":619}}}}],["1412",{"pageContent":"TradingView\nJustMoney uses  technology to display trading data on charts. TradingView is a charting platform for traders and investors, loved and visited by millions of users worldwide. It offers state-of-the-art charting tools and a space where people driven by markets can track important upcoming events in the , chat, chart, and prepare for trades.","metadata":{"loc":{"lines":{"from":621,"to":622}}}}],["1413",{"pageContent":"Overview\nJustMoney Pay is a decentralized cryptocurrency payment gateway, which has four options to make it easier for businesses and individuals to accept payments with cryptocurrencies: Checkout for e-commerce platforms, Mobile Payment Terminal, Donations button and Payment Links.\nPayment Interface\nMillions of PayPal users worldwide are familiar with being redirected from a vendor’s website to the Paypal payment interface.","metadata":{"loc":{"lines":{"from":624,"to":627}}}}],["1414",{"pageContent":"Payment Interface\nMillions of PayPal users worldwide are familiar with being redirected from a vendor’s website to the Paypal payment interface.\nIn a similar style, JustMoney Pay users are redirected from a vendor’s website to our own highly-scalable, completely secure and easy-to-use payment interface after choosing JustMoney Pay as their preferred payment method. Here, they may select the blockchain network they wish to use, choose which token to pay with, connect their wallet, and authorize the transaction. Unlike the traditional payment gateways, we do not make money by holding the vendor’s or the purchaser’s funds on our own account for extended periods of time. Instead the payment happens on-chain and it happens instantaneously, releasing the order for immediate processing. Instant clearing.\nPayment interface for end-user is simple and clean\n​\n​\nDemo of the e-commerce checkout","metadata":{"loc":{"lines":{"from":627,"to":633}}}}],["1415",{"pageContent":"Payment interface for end-user is simple and clean\n​\n​\nDemo of the e-commerce checkout\nYou can test the payment interface in demo mode on our website  and also you can find a demo of the donation button there.\nIn addition, you can just start using Payment Links and Mobile Payment Terminal straight away on our site without any need to register.\nThese products are JustMoney’s first contribution to promote the mass adoption of cryptocurrencies and we will keep working hard to expand and improve our payment ecosystem.","metadata":{"loc":{"lines":{"from":633,"to":639}}}}],["1416",{"pageContent":"E-commerce intergration\nThe e-commerce checkout is an easy to install and easy to use plugin that any merchant can implement in their web-store, in order to immediately start accepting crypto payments.\nWe have already built a plugin for the WooCommerce e-commerce platform and we are now working on creating plugins for Magento and Shopify as well. By 2021 estimates, around 15 million online vendors use one of these three platforms to accept online payments. Once all three plugins are completed, this would give those 15 million vendors the option to accept cryptocurrency as a payment method on their stores, giving countless numbers of customers the option to pay using cryptocurrency as a day-to-day alternative to FIAT cash.\n​ has already added our plugin on their WooCommerce site and anyone can now go and purchase any products there and choose JustMoney Pay as the payment provider.\nThis is how JustMoney Pay plugin looks like for the end-user on WooCommerce on a checkout page.\n​","metadata":{"loc":{"lines":{"from":641,"to":646}}}}],["1417",{"pageContent":"This is how JustMoney Pay plugin looks like for the end-user on WooCommerce on a checkout page.\n​\nThe WooCommerce vendor admin is simple. The Merchant just adds their wallet addresses and enables the plugin! After that they are ready to go.\nWoocommerce admin","metadata":{"loc":{"lines":{"from":646,"to":649}}}}],["1418",{"pageContent":"We have also created an API integration for those who want to do a custom integration. You can find the API documentation from ​\nYou can also find the instructions for WooCommerce integration at the same link. The repository for the plugin can be found in ​","metadata":{"loc":{"lines":{"from":652,"to":653}}}}],["1419",{"pageContent":"Woocommerce Plugin\nGithub repo: ​\nInstallation\nCopy justmoney_pay directory to wp-content/plugins directory or zip this directory and upload it via wordpress plugin upload function.\nActivate JustMoney Pay plugin in the plugins section in Wordpress admin.\nGot to WooCommerce -> Settings -> Payments and enable JustMoney Pay plugin.\nClick manage button\nEnter your EVM (BSC and Polygon) wallet address in format starting with 0x and Tron wallet address starting with T.\nBoth wallet addresses needs to be given in order plugin to work.\nYou have now configured JustMoney Pay and you can start accepting crypto payments.\nIf you have any issues or other concerns, please contact us by email support@just.money or ask for help on our Telegram channel ​","metadata":{"loc":{"lines":{"from":656,"to":666}}}}],["1420",{"pageContent":"Mobile Payment terminal\nThis product is designed for shop owners and other businesses who are dealing with customers face-to-face. By using a smartphone or tablet as a payment terminal, they can now easily accept cryptocurrency as a payment method.\nThe retail interface requires the shop owner to input the amount that the customer needs to pay. It will then generate a QR code that the shop owner shows to the customer.\nThe customer then scans the QR code using the barcode scanner of their mobile crypto wallet (e.g. the Tronlink Pro or Metamask app) and they will be taken to the payment interface to authorize and complete the transaction.\nAfter the payment is finalized and confirmed on the blockchain, the shop owner will see a message on their payment terminal that the transaction was successful. The terminal will then be available for the shop owner to process the next customer.","metadata":{"loc":{"lines":{"from":669,"to":673}}}}],["1421",{"pageContent":"Payment Links\n​\nThis works similar to the Mobile Payment Terminal but is more targeted for personal users who wish to request a one-time payment, by creating a web-link and sharing it with the person paying.\nSome usage examples:\nA person sells an item on the internet. They send the payment link to the buyer and wait until payment is confirmed before dispatching the item.\nSomeone is owed money and sends a payment link to request it.\nSomeone pays a bill in a restaurant and shares the cost with the other diners by sending a payment link.","metadata":{"loc":{"lines":{"from":675,"to":681}}}}],["1422",{"pageContent":"Donations\n​\nThis allows any website to accept cryptocurrency donations. Whether it’s an open-source code project, a charity or any other cause, it allows the project to accept donations in USDT from donors who can make the donation in one of the wide range of coins or tokens listed on JustMoney Swap.\nThe organization embeds a small snippet of code onto their website, along with their destination wallet addresses, and it will render a button like the one shown (above on the right). When a visitor clicks the button, it will open a small popup window (shown above on the left) where the visitor can input the amount to donate and click the “go to payment” button. They will then be taken to the payment interface to complete the transaction which is sent directly to the project’s defined wallets.\nThe colors of the button can easily be customized to match the branding of the page.\nInstructions and documentation can be found at ​\nYou can find a demo of the donation button on our website.","metadata":{"loc":{"lines":{"from":683,"to":689}}}}],["1423",{"pageContent":"Installation\nYou can install the donation plugin either manually by simple html snippet or by using our Wordpress plugin\nYou can search for the plugin in Wordpress plugin directory directly from wp-admin or visit the following page: ​\n​\nCustom integration\nUsage of the donation button is straightforward. Just copy & paste snippet below to the place where you want your button to be and add your BSC and Polygon wallet address for JMPAY_DONATION_WALLET_EVM variable and Tron wallet address for JMPAY_DONATION_WALLET_TRON variable.\n<script>\nvar JMPAY_DONATION_WALLET_EVM = '0xd0545256AcaA8a20bDC077c0D104fc84dcDc4289';\nvar JMPAY_DONATION_WALLET_TRON = 'THgyXyKoPFxvMri6A8r8P4nSMPFrUbbUkz';\n</script>\n<script src=\"https://pay.just.money/assets/js/donateButton_1.0.js\"></script>","metadata":{"loc":{"lines":{"from":691,"to":701}}}}],["1424",{"pageContent":"Customizing\nYou can customize the color of the button and color of the text on the button by specifying JMPAY_DONATION_BUTTONCOLOR and JMPAY_DONATION_TEXTCOLOR.\n<script>\nvar JMPAY_DONATION_WALLET_EVM = '0xd0545256AcaA8a20bDC077c0D104fc84dcDc4289';\nvar JMPAY_DONATION_WALLET_TRON = 'THgyXyKoPFxvMri6A8r8P4nSMPFrUbbUkz';\nvar JMPAY_DONATION_BUTTONCOLOR = '#000';\nvar JMPAY_DONATION_TEXTCOLOR = '#FFF';\n</script>\n<script src=\"https://pay.just.money/assets/js/donateButton_1.0.js\"></script>\nIf the button doesn't look good on your site you can also define JMPAY_DONATION_BUTTONSTYLES varible with any custom styling. Example below:\n<script>\nvar JMPAY_DONATION_WALLET_EVM = '0xd0545256AcaA8a20bDC077c0D104fc84dcDc4289';\nvar JMPAY_DONATION_WALLET_TRON = 'THgyXyKoPFxvMri6A8r8P4nSMPFrUbbUkz';\nvar JMPAY_DONATION_BUTTONSTYLES = {\n  backgroundColor: '#000',\n  color: '#FFF',\n  display: 'inline'\n};\n</script>\n<script src=\"https://pay.just.money/assets/js/donateButton_1.0.js\"></script>","metadata":{"loc":{"lines":{"from":703,"to":722}}}}],["1425",{"pageContent":"Creating an Order\nYou need to first use this endpoint to create an order on our systems. We will then return an url where you will redirect the user.\nEndpoint: \n\nRequest Type: POST\n\nFormat: JSON","metadata":{"loc":{"lines":{"from":724,"to":730}}}}],["1426",{"pageContent":"POST Params:\nwallet.evm [String]\nSpecify BSC and Polygon wallet address where you want to receive funds e.g. 0xd0545256AcaA8a20bDC077c0D104fc84dcDc4289\nwallet.tron [String]\nSpecify wallet in Tron format where you want to receive funds e.g. THgyXyKoPFxvMri6A8r8P4nSMPFrUbbUkz\nsrc [String]\nSpecify your platform e.g. WOOCOMMERCE_6_5_1. If you don't use ready-made plugin from us then specify here API\nreturnUrl [String]\nYour return url where you want your client to be redirected after the payment. Please make sure your url has some identification in the url e.g. orderId, so you can show correct confirmation/receipt for the user\nstatusHookUrl [String]\nUrl that we call when order has been confirmed. When you receive this call you will receive secret, orderId (order id in your systems), hash, transactionHash and network in POST body as JSON object. \nExample POST body that it sends to the hook:\n{\n    \"secret\": \"xxx\",\n    \"orderId\": \"xxx\",\n    \"hash\": \"xxx\",\n    \"transactionHash\": \"xxx\",","metadata":{"loc":{"lines":{"from":732,"to":748}}}}],["1427",{"pageContent":"Example POST body that it sends to the hook:\n{\n    \"secret\": \"xxx\",\n    \"orderId\": \"xxx\",\n    \"hash\": \"xxx\",\n    \"transactionHash\": \"xxx\",\n    \"network\": \"xxx\" //TRON, BSC, ETH, POLY, FANTOM, AVAX OR CRONOS\n}\nBefore returning a response you this call you need to call our getStatusByHash endpoint to verify that the call is valid, from us and that transaction is confirmed.\nIf it returns {\"status\":\"DONE\"} then you must respond to this call with the secret we sent. This means that you have acknowledged the call, and it will make sure we won't keep pinging your hook again.\ntotalAmount [String]\nTotal USD amount with 2 decimals as String e.g. 12.00\norderId [String]\nYour unique order ID that identifies your order. We will send this when we call statusHookUrl\ncurrency [String]\nCurrency of your order e.g. USD. At the time of writing we only support USD\n​\nExample POST body:\n{\n    wallets: {\n        \"evm\": \"addressHere\",\n        \"tron\": \"addressHere\",\n    },\n    \"src\": \"API\",","metadata":{"loc":{"lines":{"from":748,"to":771}}}}],["1428",{"pageContent":"Currency of your order e.g. USD. At the time of writing we only support USD\n​\nExample POST body:\n{\n    wallets: {\n        \"evm\": \"addressHere\",\n        \"tron\": \"addressHere\",\n    },\n    \"src\": \"API\",\n    \"returnUrl\": \"URL_TO_YOUR_THANKYOU_PAGE\", // or https://pay.just.money/thankyou\n    \"statusHookUrl\": \"https://yourdomain.com/yourHookUrl\",\n    \"totalAmount\": \"100\",\n    \"orderId\": \"ORDER_ID_IN_YOUR_SYSTEM\",\n    \"currency\": \"USD\"\n}\nReturns:\n{\n  \"id\": \"OUR_ORDER_ID\",\n  \"hash\": \"HASH\",\n  \"paymentUrl\": \"PAYMENT_URL\",\n}\nor on error (with status code 500):\n{ error: \"Server error\" }\nYou will need to redirect user to the paymentUrl that we send after you have saved these details in your system.\nYou will need our order id and hash on later stage.","metadata":{"loc":{"lines":{"from":771,"to":795}}}}],["1429",{"pageContent":"Get Order Details\nYou can fetch all the details of the order from here.\nThis does not validate the confirmation of the blockchain.\nIf you want to see if the payment transaction is confirmed you should use getStatusByHash instead.\nEndpoint: ​\nRequest Type: GET\nReturns:\n{\n  \"id\": \"our order id\",\n  \"wallet_evm\": \"address\",\n  \"wallet_tron\": \"address\",\n  \"src\": \"your source\",\n  \"returnUrl\": \"your return url\",\n  \"statusHookUrl\": \"your status hook url\",\n  \"totalAmount\": \"total amount of the order\",\n  \"orderId\": \"your order id\",\n  \"hash\": \"hash that we generated\",\n  \"network\": \"network of payment (user already paid)\",|\n  \"tokenPaidWith\": \"token that user used for the payment\",\n  \"currency\": \"USD\",\n  \"transactionHash\": \"transaction hash in blockchain (user already paid)\",\n  \"status\": \"CREATED | PROCESSING | COMPLETED\",\n  \"createdAt\": \"Date and time of the creation\",\n  \"updatedAt\": \"Date and time of the last update\"\n}","metadata":{"loc":{"lines":{"from":797,"to":821}}}}],["1430",{"pageContent":"Get Order Status\nThis validates if the transaction is confirmed on the blockchain and also if the amount and hash matches the records.\nEndpoint: ​\nRequest Type: GET\nReturns:\n{\"status\": \"DONE\"} // if confirmed\n{\"status\": \"NOT_FOUND\"} // if not found\n{\"status\": \"UNKNOWN\"} // if unknown\n\nJUST MONEY GIFT\nOverview\nYou can send cryptocurrency gift cards to your loved ones or friends at any time of year, ideal for Christmas, New Year, Valentines and birthdays. If you’re not sure how to surprise your friends or relatives then why not gift them a nice bag of crypto with the JustMoney cryptocurrency gift card.","metadata":{"loc":{"lines":{"from":823,"to":834}}}}],["1431",{"pageContent":"How to Send\nStep 1\nChoose your network, the gift token, and the currency you would like to pay with. Some projects have custom-made gift cards that are unique to their token or brand.\nStep 2\nSelect the gift card that you would like to send. We keep a variety for many occasions!\nStep 3\nConnect your wallet, then add a name, an email, the amount of tokens you wish to send, and a personal message for your recipient. Press “Send A Gift”, then confirm to pay.\nStep 4\nThe recipient will receive the gift card in their email with instructions on how to claim it. Our system will create a new address where the tokens will be stored.","metadata":{"loc":{"lines":{"from":836,"to":844}}}}],["1432",{"pageContent":"How to Claim\nStep 1\nIf you have received an email with a gift card from us click the redeem button. This link will bring you to your gift card, click the redeem gift button.\nStep 2\nYou will see a private key and the wallet address where the funds are located. There is also a link for the wallet application if you don’t have it yet.\nStep 3\nCopy and paste the private key somewhere safe. This information will become unretrievable one hour after the redeem gift button is pressed for security purposes and cannot be retrieved.\nStep 4\nImport the private key into your wallet app to gain access to the address with your funds. Welcome to the world of crypto and have a pleasant journey.","metadata":{"loc":{"lines":{"from":846,"to":854}}}}],["1433",{"pageContent":"FAQ\nFrequently Asked Questions\nWhat do I need to send a gift card to someone?\nYou will need a wallet that is compatible with the blockchains of the tokens you want to send (eg: MetaMask for ethereum or bsc). You will also need a sufficient amount of the native coin of that blockchains (bnb for bsc, trx for tron, eth for ethereum and matic for polygon) to purchase the cryptos and cover the gas fees.\nI want to send a cryptocurrency gift card but it keeps failing. What should I do?\nPlease ensure that you have enough of the native coin of that blockchain to cover the purchase amount and the gas (transaction) fees. If you are not sure, send an email to support@just.money\nI've sent $100 worth of cryptocurrency to a friend and he only received $95. What happened?\nThe value of cryptocurrencies is constantly fluctuating. If you request us to send \"x\" amount of a coin, the receiver will have this exact amount of that coin. The value in fiat is not guaranteed as it depends on the market.","metadata":{"loc":{"lines":{"from":856,"to":863}}}}],["1434",{"pageContent":"I want to send some cryptocurrencies to a friend but he doesn't know anything about crypto. Will he succeed to redeem the gift card?\nExplanations to redeem the gift card are provided in the email with the cryptocurrency gift card. If the receiver has any trouble redeeming the gift card he can contact us by email support@just.money\nAfter the cryptocurrency gift card was sent to me, how long do I have to redeem it?\nOnce the gift card is sent, the receiver will have a maximum of 6 months to redeem the card.\nI didn't receive my cryptocurrency gift card, what should I do?\nPlease, verify that the email did not go into your spam or promotions folder. If the gift card isn't there, contact our team support@just.money\nDo you hold my private key on your server?","metadata":{"loc":{"lines":{"from":864,"to":870}}}}],["1435",{"pageContent":"Please, verify that the email did not go into your spam or promotions folder. If the gift card isn't there, contact our team support@just.money\nDo you hold my private key on your server?\nOnce the gift card is redeemed, the private key will be deleted from our servers within 24 hours. Please make sure that you have stored your private key in a safe place because 24 hours after you redeemed the gift card, we won't be able to help you to retrieve it.\nDoes the gift card sender know my private key?\nNo, only the receiver will receive the private key. Please immediately write it down on a piece of paper and don't show it to anybody. The private key allows access to control the funds that are on the associated wallet.\nI have redeemed my gift card and imported the wallet inside my wallet app but I can't see my cryptos. What should I do?","metadata":{"loc":{"lines":{"from":870,"to":875}}}}],["1436",{"pageContent":"I have redeemed my gift card and imported the wallet inside my wallet app but I can't see my cryptos. What should I do?\nFirst of all, make sure that you have imported your wallet properly. Verify that your wallet address matches the wallet address we have sent to you when you redeemed the gift card. If not, import the wallet again and make sure that every character of your private key matches. Still can't see your cryptos? No worries, you probably just have to display them on your wallet app main page. Several step-by-step tutorials are available on the internet for the different wallet apps. Still can't see your cryptos? Contact us by email support@just.money and tell us what wallet app you are using and which cryptos you received.\nDo you use my email address to marketing purposes?\nNo, definitely not. We only use your email address to send the gift card to and nothing else.","metadata":{"loc":{"lines":{"from":875,"to":878}}}}],["1437",{"pageContent":"Overview\nJustMoney Bridge () allows fast under 1-minute token transfers between chains.\nBridge supports Tron, BSC, Polygon, Ethereum and Bittorrent chains. More chains will be added in near future. \n​\nIf you run a project want to expand your token to other chains you can apply for bridge for a small monthly fee.\nWe support mint/burn and lock/release methods.\n\nJustMoney's Ecosystem\nSummary\nJustMoney Swap is an AMM DEX originally launched on the Tron Blockchain. It’s the first multi-chain swap with full support for taxed tokens. JustMoney currently supports tokens on Tron, BSC, Polygon and BTTC, with possible support additions for other blockchains later. Listing on JustMoney Swap is free, with the only requirement being that projects provide enough liquidity in order to prevent a large price impact for their investors.","metadata":{"loc":{"lines":{"from":881,"to":890}}}}],["1438",{"pageContent":"Swap\nNot only does our swap have an intuitive user interface, it also has full support for taxed tokens. It calculates the estimated amounts correctly taking the tax in consideration and allows users to add and remove liquidity tax free, incentivising members to provide liquidity as well as trading it.\n\nThere is a 0.3% swap fee from which 0.25% goes to the liquidity providers and 0.05% to the platform which is used for buy back $JM and burning it.\n\n\nSwap widget\nJustMoney offers a free-of-charge swap widget that projects can add directly to their website for their users to buy tokens seamlessly.\n\nIt also allows token holders to provide liquidity to the pool directly without leaving the project’s website.\n\nImplementation does not require any coding skills. Just copy & paste our small code snippet and you are ready to go.\n\nYou can also customize the colors to match your brand/website colors. We can also help projects choosing a good combination of colors.","metadata":{"loc":{"lines":{"from":892,"to":905}}}}],["1439",{"pageContent":"You can also customize the colors to match your brand/website colors. We can also help projects choosing a good combination of colors.\n\n\n\nPlease check our github repository for more info and instructions: https://github.com/justmoney-io/swap-widget\n\nCross-Chain Swap\nAll listed project will be automatically included on our cross-chain swap. This allows users to swap tokens from one chain to another chain. Transactions take only about 1 minute to complete.\n\nThis allows you to get new buyers easily from other chains too.\n\n\nCross-Chain Swap Widget\nJust like our single-chain widget we have also a cross-chain widget where you can utilize our cross-chain swap. You can install this on any website and users will be able do swap from one chain to another without leaving the site.\n\nThis is using same Javascript library as our single-chain widget so the usage is same. You can also have both widgets on your page if you wish so.","metadata":{"loc":{"lines":{"from":905,"to":920}}}}],["1440",{"pageContent":"This is using same Javascript library as our single-chain widget so the usage is same. You can also have both widgets on your page if you wish so.\n\nColors and enabled tokens can be customized with a simple configuration.\n\n\n\nPlease check our github repository for more info and instructions: https://github.com/justmoney-io/swap-widget\n\nBridge\nThis is one of the most recent additions to our ecosystem. JustMoney Bridge(bridge.just.money) allows fast under 1-minute token transfers between chains.\n\nBridge supports Tron, BSC, Polygon, Ethereum and Bittorrent chains. More chains will be added in near future. If you want to expand to other chains you can apply for bridge for a small monthly fee.\n\nWe support mint/burn and lock and release methods.","metadata":{"loc":{"lines":{"from":920,"to":933}}}}],["1441",{"pageContent":"We support mint/burn and lock and release methods.\n\nCryptocurrency payment gateway for merchants\nJustMoney Pay utilizes our DeFi ecosystem by allowing users to pay online with cryptocurrency on-chain. They can use any token listed on our ecosystem and also the biggest tokens on each supported chain. At the moment on following chains: Tron, BSC, Polygon, Ethereum, Fantom, Avalanche and Cronos.\n\nAt the moment we have a plugin for Woocommerce and also an API integration. A support for more e-commerce platforms will be added soon.\n\nRead more at pay.just.money\n\nlaunchpad\nNewly created projects that list with JustMoney are able to utilize our launchpad service launchpad.just.money. Here you can showcase your token with custom colors and graphics.","metadata":{"loc":{"lines":{"from":933,"to":943}}}}],["1442",{"pageContent":"launchpad\nNewly created projects that list with JustMoney are able to utilize our launchpad service launchpad.just.money. Here you can showcase your token with custom colors and graphics.\n\nBefore the actual launch we show a countdown clock, leaving you time to build hype and get visitors to the page to get ready for the launch. After the countdown reaches zero the swap box will appear automatically and people can start buying the token. The slippage is automatically adjusted to a higher percentage on the launchpad to minimize failed transactions due to the initial high volume of trades.","metadata":{"loc":{"lines":{"from":943,"to":946}}}}],["1443",{"pageContent":"On Oct. 24nd, 2021, JustMoney announced an exclusive launch of Krafly ($KTY).\ncryptocurrency gift card platform\nWhen listed with JustMoney, your token will also be listed on the JustMoney gifting platform that allows users to send customized cryptocurrency gift cards via email to friends and family. The JustMoney gift platform will increase visibility of your project and will drive token sale volume. The Justmoney gift platform is preloaded with several gift cards for special occasions and project-specific gift cards with custom artwork can also be accommodated. This is the perfect gift for Christmas, New Year, Valentine’s Day, and birthdays.\n\nCoin Eyes\nProjects that list with JustMoney will have their logo added to the Coin Eyes generator: (eyes.just.money). This acts as a fun & free advertising tool for the project to build unity among supporters.","metadata":{"loc":{"lines":{"from":948,"to":953}}}}],["1444",{"pageContent":"Coin Eyes has become almost a new “movement” for many token projects. You can nowadays often see “coinified” eyes made with our tool on profile pictures on Twitter and Telegram.\n\nEach profile picture will work as an advertisement for your project and is an excellent way to create brand awareness.\n\nTelegram chart/price bot\nProjects can use our chart and price bot on their Telegram channel. Users can fetch daily, monthly, yearly and all-time charts of the project’s token and the latest price.","metadata":{"loc":{"lines":{"from":955,"to":960}}}}],["1445",{"pageContent":"JustStable Docs\n\nThings to know about JustStable\nHow JustStable works\nJustStable is a decentralized borrowing protocol that allows borrowers to draw loans against TRX deposits. Loans are paid out in USDJ, a USD pegged stablecoin with a collateralization ratio of at least 130%. The DAI peg is further supported by a Target Rate Feedback Mechanism (TRFM). The TRFM triggers once the price of USDJ falls below the Target Price (1 USD) and will increase the Target Rate, thus making it more expensive to mint USDJ with TRX. The increased Target Rate also drives up the demand for holding USDJ. As such, the reduced supply and increased demand works to drive up the price of USDJ back to its Target Price. And vice versa, the same mechanism works in reverse by decreasing the Target Rate when USDJ is above the Target Price.","metadata":{"loc":{"lines":{"from":1,"to":5}}}}],["1446",{"pageContent":"How JustStable makes money\nJustStable collects a stability fee on all USDJ generated through its smart contracts. The stability fee is a variable-rate fee that continuously accrues to the generated USDJ by a user but must be paid in JST governance token. Once repaid, the JST will be burned and removed from the circulating supply.\n\nHow you make money on JustStable\nYou can deposit TRX into the JustStable to mint USDJ to be used across DeFi on the Tron network.\n\nThe Next Generation of DeFi on TRON\nJUST is committed to developing TRON-based DeFi protocols and aims to provide all-in-one financial solutions to its users\n\n$ 9,555,945,454\nTotal Value Locked in JustDeFi\n\n>\n$ 15,996,796,132\nTotal Value Locked on TRON Network\n\n\nJustStable\nLend Stablecoin USDJ\n\nJustStable\n\n\nJustLend DAO\nThe First Official Lending Platform\n\nJustLend DAO\n\n\nJust Cryptos\nBring Value to TRON\n\nJust Cryptos","metadata":{"loc":{"lines":{"from":7,"to":39}}}}],["1447",{"pageContent":"JustStable\nLend Stablecoin USDJ\n\nJustStable\n\n\nJustLend DAO\nThe First Official Lending Platform\n\nJustLend DAO\n\n\nJust Cryptos\nBring Value to TRON\n\nJust Cryptos\n\nJustStable\nJustStable is a decentralized finance system of USDJ stablecoin for everyone, anywhere, anytime.\nGet USDJ View JustScan\nFair\nJST holders can participate in the governance of the USDJ currency system, then achieve decentralized autonomy, the true fairness.\n\nBorderless\nAvailable for anyone to open free account, and own USDJ anywhere, anytime.\n\nProsperous\nAccess the thriving TRON ecosystem and DApps , gives everyone more chances to profit.\n\nJustLend DAO\nThe first official lending platform on TRON where users can borrow, lend, deposit assets and earn interests.\nGet Start View Market\nAutomatic Order Matching\nAutomatically match supply and borrow requirements, and generate attractive returns on supplies.","metadata":{"loc":{"lines":{"from":39,"to":72}}}}],["1448",{"pageContent":"Generous Returns\nSupply and withdrawal are allowed anytime. Tightly integrate with TRON DeFi applications and promise immediate, generous returns.\n\n\nFast & Efficient\nDrawing strengths from the high-performing TRON network, JustLend allows fast and cost-effective transactions.\n\n\nTokens in the JustLend DAO markets (TRX, BTT, JST, NFT, USDT, TUSD, USDD) are granted statutory status as authorized digital currency and medium of exchange in the Commonwealth of Dominica. JustLend DAO will continue to provide stable and convenient financial lending services for all users.\nJust Cryptos\nJust Cryptos builds a bridge that connects premium crypto currencies from the TRON network and other public chains, and introduces token value to TRON to power the JUST ecosystem. All assets are stored, and can be swapped on Poloniex.\nView Detail\n\nSafe and Reliable\nWe provide trusted swap service that easily converts tokens on other public chains into TRC-20 assets.","metadata":{"loc":{"lines":{"from":75,"to":89}}}}],["1449",{"pageContent":"Safe and Reliable\nWe provide trusted swap service that easily converts tokens on other public chains into TRC-20 assets.\n\n\nEfficient\nThe well-performing TRON network offers low handling fees and faster transaction experience.\n\n\nOpen and Transparent\nEveryone can check the total supply, total reserve and the breakdown of an asset.\n\nTokens Available\n\nBTC\n\nETHOLD\n\nLTC\n\nDOGE\n\nMore tokens\nTokens\nJST\n\nJST is the exclusive token for DApp governance and various protocols in the JUST ecosystem. It can be earned through mining, trading and participating in campaigns.\n\nBuy now\n\nGovernance\nToken holders can jointly govern JUST through decentralized voting.\n\n\nMining\nMine JST by depositing, lending, providing liquidity or performing other financial actions.\n\nJST is granted statutory status as authorized digital currency and medium of exchange in the Commonwealth of Dominica effective on October 7th 2022. View Ordinance","metadata":{"loc":{"lines":{"from":89,"to":125}}}}],["1450",{"pageContent":"JST is granted statutory status as authorized digital currency and medium of exchange in the Commonwealth of Dominica effective on October 7th 2022. View Ordinance\n\nUSDJ\nUSDJ is a collateral-based decentralized stablecoin that is pegged to USD at 1:1 and keeps the exchange rate stable with an automatic feedback mechanism. It can be earned through staking and trading.\n\nGenerate\n\nStable\nUSDJ is backed by huge amount of asset reserves to maintain price stability.\n\n\nEfficient\nFast, efficient and almost-free USDJ transfer service based on the TRON network.","metadata":{"loc":{"lines":{"from":125,"to":137}}}}],["1451",{"pageContent":"Features & Advantages\nTrust & Authorization-free\nAccess and availability for everyone, free of authorization from third parties; all transactions are automatically executed by smart contracts, free of third party as a medium.\nStandard & Interoperability\nStandardized financial protocol and contract-based DeFi factors. Protocols can be overlaid to create more potential scenarios.\nSecure\nUsers face minimal risks as financial business logic is implemented by smart contracts, with which on-chain actions are traceable and third-party audit can be strictly enforced.\nDecentralization\nJST holders can jointly govern the JUST community and make decisions on incentives, pooling efforts for building the next-generation DeFi ecosystem.\nJoin the community for more JUST information.\nJoin Today\nPRODUCTS\nJustStable\nJustLend DAO\nJUST Governance\nRESOURCES\nWhitepaper\nCOMPANY\nFoundation\nPrivacy Policy\nContact us\n© 2023 JUST All Rights Reserved","metadata":{"loc":{"lines":{"from":139,"to":160}}}}],["1452",{"pageContent":"Why would I want to use USDJ?\n DeFi Support\n3 years ago Updated\nNot yet followed by anyone\nUSDJ represents a price-predictable, low-volatility unit of account. USDJ can facilitate a wide range of financial activities that have previously been hampered by market speculation and instability.\n\nA decentralized digital economy needs stability in order to function. The USDJ stablecoin represents a fundamentally new solution to this problem making it suitable for a wide range of financial activities.\n\nHedging\nDuring periods of high market instability USDJ offers a safe harbor to store value without having to exit the crypto ecosystem. Large holders of cryptocurrencies, such as hedge funds, foundations, or companies that have recently held a token generating event, may wish to convert their assets into a currency that is insulated from volatility.","metadata":{"loc":{"lines":{"from":162,"to":171}}}}],["1453",{"pageContent":"Decentralized exchanges\nDecentralized exchanges are frequently unable to provide fiat off-ramps. USDJ allows its users to trade their assets for a low volatility currency that tracks the value of the USD.\n\nExchange pairs\nCrypto-to-crypto trading can be a complicated proposition. It is difficult to track earnings when both sides of a trading pair are rising and falling in value. Creating low-volatility pairings with USDJ allows for greater price predictability.\n\nFinancial markets\nUSDJ can also be useful as stable and reliable collateral for use in custom derivative smart contracts, or when creating leverage.\n\nMerchant receipts, cross-border transactions and remittances\nForeign exchange volatility mitigation and lack of intermediaries means the transaction costs of international trade can be significantly reduced by using USDJ.","metadata":{"loc":{"lines":{"from":173,"to":183}}}}],["1454",{"pageContent":"Prediction markets and gambling\nLong term betting becomes infeasible if users also have to gamble on the future price of the asset they are wagering. A cryptocurrency with price stability like USDJ can be the natural choice for prediction markets or gambling applications.\n\n  \n  How to lower my liquidation risk?\n TRONSCAN Support\n3 months ago Updated\nNot yet followed by anyone\nTo redeem the collateral, the debt must be repaid with USDJ along with a stability fee paid with JUST T platform token, JST. Then the CDP holder can send a transaction to JUST to retrieve all collateral assets.\n\nIf the the price of the collateral drops so drastically as to be unable to satisfy the debt, the CDP liquidation will be triggered and the collateral will be auctioned by the system to repay the debt.\n\nThe remaining collateral net of repayment and penalty, if any, will be kept in the CDP and available for collection.","metadata":{"loc":{"lines":{"from":185,"to":197}}}}],["1455",{"pageContent":"The remaining collateral net of repayment and penalty, if any, will be kept in the CDP and available for collection.\n\nDoes anyone else have a claim on my USDJ tokens?\n DeFi Support\n3 years ago Updated\nNot yet followed by anyone\nNo. USDJ is a completely fungible TRC20 token and can be stored in any standard TRON wallet. It can also be freely exchanged without having to interact with the advanced mechanics of the USDJ Stablecoin System.\n\nUSDJ is owned by whoever holds it and is not encumbered by any intermediaries.\n\nWhere does USDJ come from?\n DeFi Support\n3 years ago Updated\nNot yet followed by anyone\nUSDJ enters the cryptocurrency ecosystem when it is minted by CDP owners who have locked up collateral to ensure the USDJ's value. CDP owners wishing to free their staked collateral must purchase USDJ on the open market and return it to their position. This destroys the USDJ. This minting and burning mechanism ensures that all circulating USDJ is backed by an abundance of collateral.","metadata":{"loc":{"lines":{"from":197,"to":211}}}}],["1456",{"pageContent":"An autonomous system of smart contracts specifically designed to respond to market pressures work together to ensure that the essential stability property is maintained. No one can alter the core mechanics of USDJ, making it a safe and predictable form of money.\n\nIt's important to note that USDJ users do not need to understand the mechanics of the system in order to use USDJ; they can simply look at the historical record to determine whether they think USDJ will remain stable at close to $1.\n\n\nIs there any handling fee for borrowing on JUST ?\n TRONSCAN Support\n3 months ago Updated\nNot yet followed by anyone\nA stability fee of 0.5% annualized borrowing rate is charged. The fee is paid with JST when users are closing/paying off the CDP.\n\nWhat is the stabilization fee?\n DeFi Support\n3 years ago Updated\nNot yet followed by anyone\nJUST collects a Stability Fee, which is calculated against the total amount of USDJ drawn on your CDP.","metadata":{"loc":{"lines":{"from":213,"to":228}}}}],["1457",{"pageContent":"What is the stabilization fee?\n DeFi Support\n3 years ago Updated\nNot yet followed by anyone\nJUST collects a Stability Fee, which is calculated against the total amount of USDJ drawn on your CDP.\n\nThe Stability Fee is calculated continuously. As we show in the formulas below, this type of compounding refers to a form of accrual that is measured in tiny increments instead of weeks, months, or years. This produces a fee that is very close to what one would expect from an annualized compounding.\n\nLet's look at the various results from applying different types of compounding fees, given a debt of 100,000 USDJ that has been held for 365 days and where the Stability Fee is 2.5%\n\nCalculated with annual compounding the future Stability Fee is:\n\n'100,000 × (1 + (2.5% / 1)) ^ (1 × 1) - 100,000 = 2500 USDJ'\n\nCalculated with monthly compounding the future Stability Fee is:\n\n'100,000 × (1 + (2.5% / 12)) ^ (12 × 1) - 100,000 = 2528.84 USDJ'","metadata":{"loc":{"lines":{"from":228,"to":244}}}}],["1458",{"pageContent":"'100,000 × (1 + (2.5% / 1)) ^ (1 × 1) - 100,000 = 2500 USDJ'\n\nCalculated with monthly compounding the future Stability Fee is:\n\n'100,000 × (1 + (2.5% / 12)) ^ (12 × 1) - 100,000 = 2528.84 USDJ'\n\nCalculated with continuous compounding the future Stability Fee is:\n\n'100,000 × 2.7183 ^ (2.5% × 1) - 100,000 = 2531.52 USDJ'\n\nThe difference between annual and continuous compounding fees on a 100,000 USDJ debt works out to about 31.52 USDJ.\n\nThis format was chosen due to highly variable lifetime of CDPs. As there are no minimum restrictions on how long a CDP has to remain open, it is important for the system to effectively track extremely small accruals.","metadata":{"loc":{"lines":{"from":244,"to":256}}}}],["1459",{"pageContent":"When do I have to pay the Stability Fee?\n DeFi Support\n3 years ago Updated\nNot yet followed by anyone\nWhen you pay down your debt by returning USDJ to your CDP. You will be charged outstanding fee proportional to the amount of USDJ being returned. The fee is payable in JST tokens. In this context, the JST is required to use a feature of the system, and thus behaves as a utility token.\n\nIt's important to ensure you have enough JST in your wallet to cover the fees owing on the amount you are returning or the transaction will fail.\n\n\nHow to redeem the collateral?\n TRONSCAN Support\n3 months ago Updated\nNot yet followed by anyone\nTo redeem the collateral, the debt must be repaid with USDJ along with a stability fee paid with JUST platform token, JST. After the repayment is done, the CDP holder can send a transaction to JUST to retrieve all collateral assets.","metadata":{"loc":{"lines":{"from":259,"to":272}}}}],["1460",{"pageContent":"If the the price of the collateral drops so drastically as to be unable to satisfy the debt, the CDP liquidation will be triggered and the collateral will be auctioned by the system to repay the debt.\n\nThe remaining collateral net of repayment and penalty, if any, will be kept in the CDP and available for collection.\n\nWhat is penalty ratio?\n DeFi Support\n3 years ago Updated\nNot yet followed by anyone\nPenalty ratio is used to determine the maximum amount of USDJ bought and destroyed in liquidation auctions. The remaining collateral assets after the CDP liquidation will be refunded to the CDP holders before the liquidation. Penalty ratio is used to improve the efficiency of the liquidation mechanism, and the liquidation penalty will be used to buy and burn PTRX, increasing the amount of TRX that can be converted from PTRX.","metadata":{"loc":{"lines":{"from":274,"to":282}}}}],["1461",{"pageContent":"What is the price stability mechanism?\n TRONSCAN Support\n3 months ago Updated\nNot yet followed by anyone\nThe starting Target Price of USDJ is pegged at 1.0 to the US dollar. In the JUST system, USDJ Target Price serves two main functions:\n\n1. To calculate the debt-to-collateral ratio of the CDP.","metadata":{"loc":{"lines":{"from":284,"to":290}}}}],["1462",{"pageContent":"2. To determine the value of collateral assets that USDJ holders will receive upon Global Settlement. In the event of market instability, a Target Rate Feedback Mechanism (TRFM) will be triggered to maintain the same denomination of USDJ. The Target Rate Feedback Mechanism is a process in which the USDJ Stablecoin System helps to adjust the Target Rate, so as to mobilize market forces to maintain the stability of USDJ price. The Target Rate determines the change of the Target Price, which incentivizes people to hold USDJ when the value is positive and lend USDJ when it's negative. Such a feedback mechanism maintains the market price of USDJ around the Target Price, thus dampening the price volatility of USDJ and injecting liquidity during demand shocks. Under the Target Rate Feedback Mechanism, once the market price of USDJ falls below the Target Price, the Target Rate will increase, making it more expensive to generate USDJ with CDPs. In the meantime, an increased Target Rate will","metadata":{"loc":{"lines":{"from":292,"to":292}}}}],["1463",{"pageContent":"once the market price of USDJ falls below the Target Price, the Target Rate will increase, making it more expensive to generate USDJ with CDPs. In the meantime, an increased Target Rate will drive up the capital gains of holding USDJ, thus increasing the demand for USDJ. In this way, the reduced supply and increased demand will push up the market price of USDJ back towards its Target Price. Likewise, when the market price of USDJ rises above the Target Price, the same mechanism takes effect by decreasing the Target Rate, and thus driving down the market price back towards the Target Price.","metadata":{"loc":{"lines":{"from":292,"to":292}}}}],["1464",{"pageContent":"How is the JUST system governed?\n DeFi Support\n3 years ago Updated\nNot yet followed by anyone\nJUST system is mainly governed by JST holders. One the one hand, JST holders can enjoy the revenue from USDT stability fee. On the other hand, JST holders are responsible for governing the JUST system.\n\nJST holders vote and elect valid proposals to govern the JUST platform. Each JST holder can vote and select the contract he supports among all smart contracts that modify the system parameters. The contract with the highest votes becomes a valid proposal and has the system permit to modify variables of JUST internal system governance as per the established logic.","metadata":{"loc":{"lines":{"from":294,"to":300}}}}],["1465",{"pageContent":"The USDJ \n​\nStablecoin System\n \n \nWhite Paper\n \n \n \n \n \n \n \n \n \n \n \nhttps://just.network\n \n \n \nBy the JUST \n​\nTeam","metadata":{"loc":{"lines":{"from":1,"to":24}}}}],["1466",{"pageContent":"I. About USDJ Stablecoin\n \nII. USDJ Stablecoin System\n \nIII. Use Collateralized Debt Positions (CDPs) to Generate USDJ\n \n1. Obtaining the collateral assets\n \n2. Creating CDPs to deposit collateral assets\n \n3. Generating USDJ through CDPs\n \n4. Redeeming the collateral\n \nIV. Price Stability Mechanism\n \nV. Global Settlement Mechanism\n \n1. Global Settlement is activated\n \n2. Global Settlement claims are processed\n \n3. USDJ and CDP holders claim their collateral\n \nVI. Risk Management\n \n1. Modification of Sensitivity Parameter\n \n2. Modification of Target Rate\n \n3. Choosing a set of trusted Oracles\n \n4. Modification of Price Feed Sensitivity\n \n5. Choosing a set of global setters\n \n6. Setting up parameters for risk-control\n \n1). Debt ceiling\n \n2). Liquidation ratio\n \n3). Stability fee\n \n4). Penalty ratio\n \nVII. JUST System Governance\n \n1. Single action proposal contract\n \n2. Delegating Proposal Contracts\n \nVIII. Resources\n \n \n \n1","metadata":{"loc":{"lines":{"from":36,"to":92}}}}],["1467",{"pageContent":"I. \n​\nAbout USDJ \n​\nStablecoin\n \nTRON\nnetwork\noffers\nvarieties\nof\nquality\nassets,\nbut\nmost\nof\nthem\nare\nnot\nviable\nfor\neveryday\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nuse because of their high volatility.\n \n \n \nUSDJ\nis\na\nnew\ncurrency\ngenerated\nthrough\ndecentralized\nsmart\ncontracts\non\nthe\nTRON\n \n \n \n \n \n \n \n \n \n \n \n \n \nnetwork.\nAnyone\ncan\npledge\n​\nTRX\n​\nas\ncollateral\nto\ngenerate\n​\nUSDJ\n​\n.\n​\nUSDJ\nenters\ninto\nfree\n \n \n \n \n \n \n \n \n \n \n \n \n \n \ncirculation\nas\nany\nother\ncryptocurrency\ndoes\nonce\ngenerated.\nIt\nis\npegged\nto\nthe\nUS\ndollar\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nthrough Collateralized Debt Positions (\n​\nCDPs\n​\n), and also has autonomous feedback mechanisms.\n \n \n \nUSDJ\nStablecoin\nis\na\nUSD-pegged\ncryptocurrency\nbacked\nby\ncollateral\nassets.\nWe\nbelieve\nthat\n \n \n \n \n \n \n \n \n \n \n \n \n \nUSDJ\n​\n will become an integral part of the TRON \n​\nDeFi\n​\n ecosystem.\n \nII. \n​\nUSDJ\n​\n Stablecoin System\n \n \nFigure 1. Core Mechanism of the \n​\nJ\nU\nS\nT\n​\n System\n \n2","metadata":{"loc":{"lines":{"from":95,"to":285}}}}],["1468",{"pageContent":"USDJ\nmortgage\nlending\nsystem\nand\ndecentralized\nautonomous\nincentive\nmechanism\nare\nthe\n \n \n \n \n \n \n \n \n \n \n \ncore parts of JUST. Please find the details below.\n \nIII.\nUse\nCollateralized\nDebt\nPositions\n(\n​\nCDPs\n​\n)\nto\n \n \n \n \n \n \n \nGenerate \n​\nUSDJ\n \n \n \nUSDJ\n​\n is generated through depositing collateral assets into \n​\nCDP\n​\n. Here are the steps:\n \n \n \n1\n​\n. Obtaining the collateral assets\n \nExchange\nthe\n​\nTRX\nto\nbe\npledged\nfor\n​\nPTRX\n​\n,\n​\nwhich\nis\nthe\nonly\ncollateral\nassets\naccepted\nby\nthe\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nsystem for the moment.\n \n \n \n2\n​\n. Creating \n​\nCDP\n​\ns to deposit collateral assets\n \nSend\na\ntransaction\nto\n​\nJUST\nto\ncreate\na\n​\nCDP\n​\n,\nthen\nsend\nanother\ntransaction\nto\ndeposit\n​\nPTRX\n​\n,\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nthe collateral asset, into the \n​\nCDP\n​\n to generate \n​\nUSDJ\n​\n.\n \n \n \n3\n​\n. Generating \n​\nUSDJ\n​\n through \n​\nCDPs\n \nThe\nCDP\nholder\nsends\na\ntransaction\nto\nspecify\nthe\namount\nof\n​\nUSDJ\ngenerated\nin\nthe\n​\nCDP\n​\n.","metadata":{"loc":{"lines":{"from":288,"to":481}}}}],["1469",{"pageContent":"​\nUSDJ\n​\n.\n \n \n \n3\n​\n. Generating \n​\nUSDJ\n​\n through \n​\nCDPs\n \nThe\nCDP\nholder\nsends\na\ntransaction\nto\nspecify\nthe\namount\nof\n​\nUSDJ\ngenerated\nin\nthe\n​\nCDP\n​\n.\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nMeanwhile,\nthe\nsame\namount\nof\ndebt\nwill\nbe\ncreated,\nand\nthe\ncollateral\nasset\nis\nlocked\nup\nand\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nnot available for redemption until the debt is repaid.\n \n \n \n4\n​\n. Redeeming the collateral\n \nTo\nredeem\nthe\ncollateral,\nthe\ndebt\nmust\nbe\nrepaid\nwith\n​\nUSDJ\nalong\nwith\na\nstability\nfee\npaid\nwith\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nJUST\nplatform\ntoken,\n​\nJST\n​\n.\nFinally,\n​\nCDP\nholders\ncan\nsend\na\ntransaction\nto\n​\nJUST\nto\nretrieve\nall\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \ncollateral assets.\n \n \n \nIf\na\nprice\nslump\nof\nthe\ncollateral\nmakes\nit\nat\nrisk\nof\nbeing\nunable\nto\ncover\nthe\ndebt,\nthe\n​\nCDP\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nliquidation\nwill\nbe\ntriggered\nto\nauction\nthe\ncollateral\nfor\nrepayment.\nAny\nremaining\nvalue\nnet\nof","metadata":{"loc":{"lines":{"from":481,"to":709}}}}],["1470",{"pageContent":"to\ncover\nthe\ndebt,\nthe\n​\nCDP\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nliquidation\nwill\nbe\ntriggered\nto\nauction\nthe\ncollateral\nfor\nrepayment.\nAny\nremaining\nvalue\nnet\nof\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nthe debt and the penalty fee will be kept in the \n​\nCDP\n​\n for withdrawal.\n \n \n \n3","metadata":{"loc":{"lines":{"from":709,"to":774}}}}],["1471",{"pageContent":"IV. Price Stability Mechanism\n \n \n \nThe\nstarting\nTarget\nPrice\nof\nUSDJ\nis\npegged\nat\n​\n1.0\nto\nthe\nUS\ndollar.\nIn\nthe\n​\nJUST\nsystem,\n​\nUSDJ\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nTarget Price serves two main functions\n​\n:\n \n \n \n1\n​\n. To calculate the debt-to-collateral ratio of the CDP.\n \n2\n​\n.\nTo\ndetermine\nthe\nvalue\nof\ncollateral\nassets\nthat\n​\nUSDJ\nholders\nwill\nreceive\nupon\nGlobal\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nSettlement.\n \n \n \nIn\nthe\nevent\nof\nmarket\ninstability,\na\nTarget\n​\n​\nRate\n​\n​\nFeedback\n​\n​\nMechanism\n​\n​\n(TRFM)\nwill\nbe\ntriggered\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nto\nmaintain\nthe\nsame\ndenomination\nof\n​\nUSDJ\n​\n.\nThe\n​\n​\nTarget\n​\n​\nRate\n​\n​\nFeedback\n​\n​\nMechanism\n​\nis\na\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nprocess\nin\nwhich\nthe\n​\nUSDJ\nStablecoin\nSystem\nhelps\nto\nadjust\nthe\nTarget\nRate,\nso\nas\nto\nmobilize\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nmarket forces to maintain the stability of \n​\nUSDJ\n​\n price.\n \n \n \nThe\nTarget\nRate\ndetermines\nthe\nchange\nof\nthe\nTarget\nPrice,\nwhich\nincentivizes\npeople\nto\nhold","metadata":{"loc":{"lines":{"from":777,"to":1004}}}}],["1472",{"pageContent":"market forces to maintain the stability of \n​\nUSDJ\n​\n price.\n \n \n \nThe\nTarget\nRate\ndetermines\nthe\nchange\nof\nthe\nTarget\nPrice,\nwhich\nincentivizes\npeople\nto\nhold\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nUSDJ\nwhen\nthe\nvalue\nis\npositive\nand\nlend\n​\nUSDJ\nwhen\nit's\nnegative.\nSuch\na\nfeedback\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nmechanism\nmaintains\nthe\nmarket\nprice\nof\n​\nUSDJ\naround\nthe\nTarget\nPrice,\nthus\ndampening\nthe\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nprice volatility of \n​\nUSDJ\n​\n and injecting liquidity during demand shocks.\n \n \n \nUnder\nthe\nTarget\n​\n​\nRate\n​\n​\nFeedback\n​\n​\nMechanism,\nonce\nthe\nmarket\nprice\nof\n​\nUSDJ\nfalls\nbelow\nthe\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nTarget\nPrice,\nthe\nTarget\nRate\nwill\nincrease,\nmaking\nit\nmore\nexpensive\nto\ngenerate\n​\nUSDJ\nwith\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nCDPs\n​\n.\nIn\nthe\nmeantime,\nan\nincreased\nTarget\nRate\nwill\ndrive\nup\nthe\ncapital\ngains\nof\nholding\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nUSDJ\n​\n,\nthus\nincreasing\nthe\ndemand\nfor\n​\nUSDJ\n​\n.\nIn\nthis\nway,\nthe\nreduced","metadata":{"loc":{"lines":{"from":1004,"to":1228}}}}],["1473",{"pageContent":"​\n.\nIn\nthe\nmeantime,\nan\nincreased\nTarget\nRate\nwill\ndrive\nup\nthe\ncapital\ngains\nof\nholding\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nUSDJ\n​\n,\nthus\nincreasing\nthe\ndemand\nfor\n​\nUSDJ\n​\n.\nIn\nthis\nway,\nthe\nreduced\nsupply\nand\nincreased\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \ndemand will push up the market price of \n​\nUSDJ\n​\n back towards its Target Price.\n \n \n \nLikewise,\nwhen\nthe\nmarket\nprice\nof\n​\nUSDJ\nrises\nabove\nthe\nTarget\nPrice,\nthe\nsame\nmechanism\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \ntakes\neffect\nby\ndecreasing\nthe\nTarget\nRate,\nand\nthus\ndriving\ndown\nthe\nmarket\nprice\nback\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \ntowards the Target Price.\n \n \n \nV. Global Settlement Mechanism\n \n \n \nWhen\nthe\n​\nUSDJ\nprice\nthat\nthe\nsystem\nreceives\nfrom\n​\nOracles\ndeviates\ndrastically\nfrom\nthe\nUS\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nDollar\nduring\na\nsystem\nattack\nor\nmalicious\ncontrol\nwhich\ncauses\nintolerable\nrisks\nwithin\nthe\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nsystem,\nglobal\nsettlers\ndesignated\nby\n​\nJST\nholders\ncan\ntrigger\nthe\nGlobal\nSettlement\nMechanism","metadata":{"loc":{"lines":{"from":1228,"to":1446}}}}],["1474",{"pageContent":"malicious\ncontrol\nwhich\ncauses\nintolerable\nrisks\nwithin\nthe\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nsystem,\nglobal\nsettlers\ndesignated\nby\n​\nJST\nholders\ncan\ntrigger\nthe\nGlobal\nSettlement\nMechanism\n \n \n \n \n \n \n \n \n \n \n \n \n \nthat is carried out in the following steps:\n \n \n \n4","metadata":{"loc":{"lines":{"from":1446,"to":1499}}}}],["1475",{"pageContent":"1\n​\n. Global Settlement is activated\n \nAfter\nGlobal\nSettlement\nis\nactivated,\n​\nCDPs\ncan\nno\nlonger\nbe\ncreated\nor\nadjusted\nand\nthe\nPrice\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nFeed will be frozen at a certain value to process all users' claims.\n \n \n \n2\n​\n. Global Settlement claims are processed\n \nMeanwhile,\n​\nKeepers\nin\nthe\n​\nJUST\nsystem\nwill\nauction\nthe\ndebt\nand\ncollateral\nassets\nbased\non\nthe\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nfixed\nPrice\nFeed\nin\na\ndecentralized\nway\nin\norder\nto\nprocess\ncorresponding\nclaims\nof\nall\n​\nUSDJ\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nand CDP holders.\n \n \n \n3\n​\n. \n​\nUSDJ\n​\n and CDP holders claim their collateral\n \nAfter\nKeepers\nprocess\nall\nGlobal\nSettlement\nclaims,\neach\n​\nUSDJ\nand\n​\nCDP\nholder\ncan\nsubmit\na\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nclaim\nrequest\non\n​\nJUST\nto\ndirectly\nexchange\ntheir\n​\nUSDJ\nor\nCDPs\nfor\na\nfixed\namount\nof\n​\nTRX\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nbased on the Target Price of \n​\nUSDJ\n​\n. No time limit is set as for when users can take this step.","metadata":{"loc":{"lines":{"from":1502,"to":1699}}}}],["1476",{"pageContent":"exchange\ntheir\n​\nUSDJ\nor\nCDPs\nfor\na\nfixed\namount\nof\n​\nTRX\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nbased on the Target Price of \n​\nUSDJ\n​\n. No time limit is set as for when users can take this step.\n \n \n \nVI. Risk Management\n \n \n \nTo\neffectively\nmanage\nand\ncontrol\npotential\nrisks,\n​\nUSDJ\n​\nstablecoin\nsystem\nis\narmed\nwith\na\n \n \n \n \n \n \n \n \n \n \n \n \n \n \ncomprehensive\nrisk-management\nsystem.\nOn\none\nhand\n​\n,\nJST\nholders\nelect\nkey\ndecision\nmakers\n \n \n \n \n \n \n \n \n \n \n \n \nthrough\ntheir\nvotes\nto\nregulate\nrisks\nacross\nthe\nsystem.\nOn\nthe\nother\nhand\n​\n,\nJST\n​\nholders\nmay\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nalso vote with \n​\nJST\n​\n to participate in setting up and modifying the risk parameters.\n \n \n \nRisk management consists of the following components:\n \n \n \n1\n​\n. Modification of Sensitivity Parameter\n \n Modify the sensitivity of the Target Rate Feedback Mechanism (TRFM).\n \n \n \n2.\n​\n Modification of Target Rate\n \nAdministrators\nmay\nchange\nTarget\nRate.\nIn\nreal\npractice\n​\n,\nwhen\nJST\nholders\nwant\nto\npeg\nthe","metadata":{"loc":{"lines":{"from":1699,"to":1872}}}}],["1477",{"pageContent":"2.\n​\n Modification of Target Rate\n \nAdministrators\nmay\nchange\nTarget\nRate.\nIn\nreal\npractice\n​\n,\nwhen\nJST\nholders\nwant\nto\npeg\nthe\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nprice\nof\n​\nUSDJ\nto\nthe\ncurrent\nTarget\nPrice,\nthey\nmay\nset\nSensitivity\nParameter\nand\n​\nTarget\n​\nRate\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nat zero to achieve the goal.\n \n5","metadata":{"loc":{"lines":{"from":1872,"to":1945}}}}],["1478",{"pageContent":"3.\n​\n Choosing a set of trusted Oracles\n \nJUST\nplatform\nobtains\nthe\ninternal\nprice\nof\ncollateral\nand\nthe\nmarket\nprice\nof\nUSDJ\nthrough\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \ndecentralized\nOracles.\nJST\nholders\ncan\ncontrol\nthe\nnumber\nof\nOracle\nnodes\nand\ndesignate\n \n \n \n \n \n \n \n \n \n \n \n \n \nspecific\nnodes\nas\ntrusted\nOracles.\nThe\nsystem\noperates\nsafely\nas\nlong\nas\nover\nhalf\nof\nthe\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nOracles function properly.\n \n \n \n4. \n​\nModification of Price Feed Sensitivity\n \nChanges in Price Feed Sensitivity affects the system's internal prices to a certain extent.\n \n \n \n5.\n​\n Choosing a set of global setters\n \nGlobal\nsetter\nis\na\ncrucial\nmechanism\nfor\nJUST\nplatform\nto\nsurvive\nattacks\nagainst\nthe\nOracles\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nand\nthe\ngovernance\nsteps.\nThe\nmechanism\nchooses\na\nset\nof\nglobal\nsetters\nand\ndetermines\nhow\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nmany global setters are needed to activate a global settlement.\n \n \n \n6\n.\n \nS\ne\nt\nt\ni\nn\ng\n \nu\np\n \n​\nparameters for risk-control","metadata":{"loc":{"lines":{"from":1950,"to":2137}}}}],["1479",{"pageContent":"of\nglobal\nsetters\nand\ndetermines\nhow\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nmany global setters are needed to activate a global settlement.\n \n \n \n6\n.\n \nS\ne\nt\nt\ni\nn\ng\n \nu\np\n \n​\nparameters for risk-control\n \nTo\nmaintain\nthe\nstability\nof\nthe\nprice\nof\nUSDJ,\nthe\nJUST\nsystem\nsets\nup\nmultiple\nparameters\nfor\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nrisk-control\nto\nregulate\nthe\nCollateralized\nDebt\nPositions,\nall\nof\nwhich\nwill\nbe\nput\nup\nfor\nvote\nand\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \ndetermined by JST holders.\n \n \n \n1). Debt ceiling\n \nDebt\nceiling\nis\nthe\nmaximum\n​\namount\nof\ndebt\nthat\ncan\nbe\ncreated\nby\nCDP.\nOnce\nthe\ndebt\nceiling\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nis\nreached,\nit\nbecomes\nimpossible\nfor\nCDP\nto\ncreate\nnew\nUSDJ\nunless\nexisting\nCDPs\nare\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nclosed.\n \n \n \n2). Liquidation ratio\n \nLiquidation\nratio\nis\na\nratio\nof\nthe\ncollateral-to-debt\nwhen\na\nCDP\n​\nis\nliquidated.\nA\nlow\nliquidation\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nratio\nmeans\nJST\nvoters\nexpect\nlow\nprice\nvolatility\nof\nthe","metadata":{"loc":{"lines":{"from":2137,"to":2369}}}}],["1480",{"pageContent":"Liquidation\nratio\nis\na\nratio\nof\nthe\ncollateral-to-debt\nwhen\na\nCDP\n​\nis\nliquidated.\nA\nlow\nliquidation\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nratio\nmeans\nJST\nvoters\nexpect\nlow\nprice\nvolatility\nof\nthe\ncollateral,\nwhile\na\nhigh\nliquidation\nratio\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nmeans high volatility is expected.\n \n \n \n6","metadata":{"loc":{"lines":{"from":2369,"to":2439}}}}],["1481",{"pageContent":"3).\n​\n Stability fee\n \nA\nstability\nfee\nis\nthe\n​\nextra\nfee\n​\ncharged\non\nusers\nwhen\nthey\npay\nback\nthe\ndebt\nafter\nborrowing\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nUSDJ\nfrom\nCDPs.\nThe\nstability\nfee\nis\npriced\nby\nUSDJ\nand\nrepaid\nonly\nin\nJST.\nOnce\nrepaid,\nthe\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nJST\nwill\nbe\nburned\nand\nremoved\nfrom\nthe\nsupply.\nThe\nprice\nof\nstability\nfee\nregulates\nthe\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nincentive of borrowing, and therefore controls the risk from the supply-and-demand end.\n \n \n \n4). \n​\nPenalty ratio\n \nPenalty\nratio\nis\nused\nto\ndetermine\nthe\nmaximum\namount\nof\n​\nUSDJ\nbought\nand\ndestroyed\nin\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nliquidation\nauctions.\nThe\nremaining\ncollateral\nassets\nafter\nthe\nCDP\nliquidation\nwill\nbe\nrefunded\nto\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nthe\nCDP\nholders\nbefore\nthe\nliquidation.\nPenalty\nratio\nis\nused\nto\nimprove\nthe\nefficiency\nof\nthe\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nliquidation\nmechanism,\nand\nthe\nliquidation\npenalty\nwill\nbe\nused\nto\nbuy\nand\nburn\nPTRX,","metadata":{"loc":{"lines":{"from":2442,"to":2664}}}}],["1482",{"pageContent":"Penalty\nratio\nis\nused\nto\nimprove\nthe\nefficiency\nof\nthe\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nliquidation\nmechanism,\nand\nthe\nliquidation\npenalty\nwill\nbe\nused\nto\nbuy\nand\nburn\nPTRX,\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nbenefitting the PTRX to TRX ratio.\n \n \n \nVII. \n​\nJUST \n​\nSystem Governance\n \n \n \nJUST\n​\nsystem\ngovernance\nrelies\nmainly\non\nJST\n​\nholders.\nWhile\nJST\n​\nholders\nearn\nrevenue\nfrom\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nthe\nstability\nfees\nof\nUSDJ\n​\n,\nthey\nare\nalso\nresponsible\nfor\nthe\ngovernance\nof\nthe\nJUST\n​\nsystem,\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nwhich is done through selecting valid proposals \n​\n by JST \n​\nvoters.\n \n \n \nEach\nJST\n​\nholder\n​\ncan\nvote\nand\nselect\nthe\ncontract\nhe/she\nsupports\namong\nall\nthe\nsmart\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \ncontracts\nthat\nmodify\nthe\nsystem\nparameters.\nThe\ncontract\nwith\nthe\nhighest\nnumber\nof\nvotes\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nbecomes\na\nvalid\nproposal\nand\nhas\nthe\nsystem\npermit\nto\nmodify\nvariables\nof\nJUST\n​\ninternal","metadata":{"loc":{"lines":{"from":2664,"to":2879}}}}],["1483",{"pageContent":"The\ncontract\nwith\nthe\nhighest\nnumber\nof\nvotes\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nbecomes\na\nvalid\nproposal\nand\nhas\nthe\nsystem\npermit\nto\nmodify\nvariables\nof\nJUST\n​\ninternal\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nsystem governance as per the established logic. Valid contract proposals can be in two forms:\n \n \n \n1\n​\n. Single action proposal contract\n \nSingle\naction\nproposal\ncontracts\nare\nproposals\nthat\ncan\nonly\nbe\nexecuted\nafter\ngaining\nthe\nroot\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \naccess,\nand\nafter\nexecution\nimmediately\napplies\nits\nchanges\nto\nthe\nvariables\nof\ninternal\nsystem\n \n \n \n \n \n \n \n \n \n \n \n \n \n \ngovernance.\nThe\nsingle\naction\nproposal\nwill\ndelete\nitself\nand\nbecome\ninvalid.\nIt’s\neasy\nto\nuse\nbut\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nnot flexible. This type of proposal will be adopted in the early stage of the system.\n \n \n \n2\n​\n. Delegating Proposal Contracts\n \nDelegating\nProposal\nContracts\nare\nproposals\nthat\ncontinuously\nutilize\ntheir\nroot\naccess\nthrough\n \n \n \n \n \n \n \n \n \n \n \n \nsecond\nlayer\ngovernance\nlogic.\nThe","metadata":{"loc":{"lines":{"from":2879,"to":3066}}}}],["1484",{"pageContent":"2\n​\n. Delegating Proposal Contracts\n \nDelegating\nProposal\nContracts\nare\nproposals\nthat\ncontinuously\nutilize\ntheir\nroot\naccess\nthrough\n \n \n \n \n \n \n \n \n \n \n \n \nsecond\nlayer\ngovernance\nlogic.\nThe\nsecond\nlayer\ngovernance\nlogic\ncan\nbe\nrelatively\nsimple,\n \n \n \n \n \n \n \n \n \n \n \n \n \n7","metadata":{"loc":{"lines":{"from":3066,"to":3120}}}}],["1485",{"pageContent":"such\nas\ndefining\na\nprotocol\nfor\nholding\na\nweekly\nvote\non\nupdated\nrisk\nparameters.\nIt\ncan\nalso\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nimplement\nmore\nadvanced\nlogic,\nsuch\nas\nrestrictions\non\nthe\nmagnitude\nof\ngovernance\nactions\n \n \n \n \n \n \n \n \n \n \n \n \n \nwithin\ndefined\ntime\nperiods,\nor\neven\ndeleting\npermissions\nof\nits\nthird\nlayer\nDelegating\nProposal\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nContracts with restrictions.\n \n \n \nThere\nis\nno\nspecial\nrequirement\nfor\nproposal\ninitiation.\nAny\nTRON\naccount\ncan\nsubmit\n \n \n \n \n \n \n \n \n \n \n \n \n \nsuggestions\nfor\nimproving\nthe\nJUST\n​\nsystem\nby\ndeploying\nvalid\nsmart\ncontracts.\n​\nJST\n​\nholders\ncan\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nuse\ntheir\nJST\ntokens\nto\ncast\napproval\nvotes\nfor\none\nor\nmultiple\nproposals\nthat\nthey\nwant\nto\nselect\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nas\nthe\nvalid\nproposal.\nThis\nmechanism\nensures\nthat\nJST\n​\nholders\nfulfill\ntheir\nobligation\nof\n \n \n \n \n \n \n \n \n \n \n \n \n \n \ngovernance\nin\na\nfair\nand\njust\nmanner,\nand\nthat\nsuggestions\ncarried\nin\nthese\nvalid\nproposals\nare","metadata":{"loc":{"lines":{"from":3123,"to":3352}}}}],["1486",{"pageContent":"This\nmechanism\nensures\nthat\nJST\n​\nholders\nfulfill\ntheir\nobligation\nof\n \n \n \n \n \n \n \n \n \n \n \n \n \n \ngovernance\nin\na\nfair\nand\njust\nmanner,\nand\nthat\nsuggestions\ncarried\nin\nthese\nvalid\nproposals\nare\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nsafely deployed in the\n​\n JUST \n​\nsystem.\n \n \n \nWe\nbelieve\nthat\nunder\nsuccessful\ncommunity\ngovernance,\nUSDJ\nwill\nbring\ninto\nfull\nplay\nits\n \n \n \n \n \n \n \n \n \n \n \n \n \n \nadvantages as a stablecoin and be widely applied across the TRON network.\n \n \n \nVIII. Resources\n \n \n \nJUST Official Website:\n​\n \n​\nwww.just.network\n \nProduct Website: \n​\njust.tronscan.org\n \n \n \n \n \n \n \n \n \n \n8","metadata":{"loc":{"lines":{"from":3352,"to":3472}}}}],["1487",{"pageContent":"socialswap logo\n\n\n\nGet the best prices\non Tron Blockchain\nThe smartest and easiest way to exchange your cryptocurrencies and to earn money passively with your cryptocurrencies on the Tron Blockchain.\n\nGet more info\n\nsocialswap logo\n$3,494,674.80\nTotal locked value\n\n$1,500,173.57\nSST Market Cap\n919065\nTotal transactions\n\nSocialSwap Features\nLowest Transaction Cost\nLowest Transaction Cost\nGet the opportunity to participate in the lowest transaction fees.\n\nSafe Smart Contracts\nSafe Smart Contracts\nAudited smart contracts by well known companies.\n\nFast Blockchain Protocol\nFast Blockchain Protocol\nBased on one of the fastest blockchains.\n\nLimit Order Protocol\nLimit Order Protocol\nThe most flexible and innovative limit order functionality in TRON DeFi.\n\nAggregation Protocol\nAggregation Protocol\nLiquidity aggregation from multiple DEXes to ensure the best swap rates.\n\nTrading Fee Refund\nTrading Fee Refund\nProfit from up to 100% refund of trading fees.\n\nThe SocialSwap Token\n\n6991\n\nHolders","metadata":{"loc":{"lines":{"from":1,"to":49}}}}],["1488",{"pageContent":"Trading Fee Refund\nTrading Fee Refund\nProfit from up to 100% refund of trading fees.\n\nThe SocialSwap Token\n\n6991\n\nHolders\n\n$ 0.0024\n\nCurrent Price\n\n$ 1,500,173.57\n\nMarket Cap\n\n$ 3,494,674.80\n\nTotal Locked Value\n\nAbout SocialSwap\n\nWhat makes SocialSwap special\n\nGovernance\nSocialSwap is designed to be governed by you, reflecting our commitment to democracy.\n\n\nExclusive Community\nSocialSwap is a community project. Meet the co-creators and the community at one of many meetups each year!\n\n\nDeflation\nThe SocialSwap Token is designed to decrease in supply ensuring that it becomes scarcer over time.\n\nOur Staking Pools\n\nEarn passive Income with SocialSwap\nStake your cryptocurrencies in numerous SST pools and earn attractive bonuses.\n\n\nLocked Solo Pool\nup to 77% APR\n\n\nTron / SST Locked Pool\nup to 45% APR\n\n\nUSDT / SST Locked Pool\nup to 37% APR\n\nIntegrated Protocols\non the Network\n\n\n\nGet SocialSwap Tokens at\n\n\nBuy with Bitcoin\n\nBuy with Ethereum","metadata":{"loc":{"lines":{"from":49,"to":113}}}}],["1489",{"pageContent":"Tron / SST Locked Pool\nup to 45% APR\n\n\nUSDT / SST Locked Pool\nup to 37% APR\n\nIntegrated Protocols\non the Network\n\n\n\nGet SocialSwap Tokens at\n\n\nBuy with Bitcoin\n\nBuy with Ethereum\n\nBuy with Tether\nAudits & Security\nSocialSwap.io has been reviewed and audited by several independent security companies. If you click on the logos of Turing Point and CERTIK, you will be redirected to the individual audits and you can view the results of their reviews","metadata":{"loc":{"lines":{"from":113,"to":134}}}}],["1490",{"pageContent":"1.0 Introduction\n1.1 Mission\n1.2 Vision\n1.3 Why Tron\n2.0 SocialSwap Overview\n2.1 Opportunities that SocialSwap offers\n3.0 Core Features of SocialSwap\n3.1 SocialSwap\n3.2 Price Oracle and Slippage\n3.3 How Smart Contracts Automate Trading on Socialswap\n3.4 Staking and Liquidity Pool Explained\n4.0 SocialSwapToken\n5.0 Marketing strategy\n6.0 SocialSwap Tokenomics\n6.1 Token Allocation\n7.0 Buy-Back and Hold-Back Pools\n7.1 Buy-Back\n7.2 Hold-Back\n8.0 Roadmap\n9.0 Social Media Channels \nTa b l e   o f   C o n t e n t s","metadata":{"loc":{"lines":{"from":1,"to":21}}}}],["1491",{"pageContent":"1.0 Introduction\nDecentralized Finance or DeFi is the latest development in the blockchain industry and it is used to describe the \ncluster of applications offering financial services based on decentralization. The concept of decentralization \nstands in contrast with the traditional financial services that are generally centralized and controlled by \nfinancial oligarchs.\nDecentralization of financial services is achieved through smart contracts where rules are embedded in a \ncomputer code and enforced automatically, and all the data about transactions is stored in a distributed \nledger. This way, no actor has complete control over transactions, thus preventing censorship or corruption. \nAs such, Decentralized Finance (DeFi) is the movement that leverages decentralized networks to transform old \nfinancial products into trust-less and transparent protocols that run without intermediaries.","metadata":{"loc":{"lines":{"from":23,"to":32}}}}],["1492",{"pageContent":"financial products into trust-less and transparent protocols that run without intermediaries.\nWith DeFi, core traditional financial use cases like staking, stablecoin issuance, lending/borrowing, synthetic \nassets, trading, peer-to-peer payments, and wealth management are managed on the blockchain via Decen\n-\ntralized Applications (DApps) or protocols. These create a peer-to-peer financial network, the majority of \nwhich are currently built on Ethereum.\nAccording to Dune Analytics, the number of DeFi users in August 2020 is following an exponential trend and \nhas surpassed 250, 000, which is a five-fold increase compared to a year ago. Staking represents a big \nshare of the DeFi market to date and it is similar to interest savings account in a traditional bank. In DeFi, \ninfrastructure service providers such as staking pools and Staking-as-a-Service providers play the role of the \nbank, running nodes for decentralized PoS protocols on behalf of investors.","metadata":{"loc":{"lines":{"from":32,"to":42}}}}],["1493",{"pageContent":"infrastructure service providers such as staking pools and Staking-as-a-Service providers play the role of the \nbank, running nodes for decentralized PoS protocols on behalf of investors.\nApart from this, the trading volume on decentralized exchanges soared to set an all-time high above $60 \nbillion, eclipsing the previous record of $26 billion from September 2020 by a wide margin. This shows that \nthere are still a lot of opportunities in the industry as more investors are open to the DeFi ecosystem and \nentrepreneurs and investors are on the lookout for feasible business models to make profitable returns.\n60B\n50B\n40B\n30B\n20B\n10B\n0\nDEX Trading Volume\nUSD Volume\nMay 2020\nJul 2020\nSep 2020\nNov 2020\nJan 2021","metadata":{"loc":{"lines":{"from":42,"to":61}}}}],["1494",{"pageContent":"In this paper, we introduce SocialSwap, a swap also referred to as a Decentralized Exchange and a Staking \nplatform where users can provide liquidity to the DEX with our native token and get rewarded for doing so. \nThe platform is created without the flaws of existing approaches, enabling proper money markets to function, \nand creating a safe positive-yield approach to the liquidity provided by platform members. Social swap aims \nto provide a comprehensive decentralized financial service – DEX (Swap), Staking and Liquidity pool using \nnative currencies of the ecosystem – SocialSwapToken (SST), a Tron based token that governs the activities on \nthe platform.\nWe understand that there is a need to put an end to the notoriously vague and abysmal trends in traditional \nfinance and existing swap and DEX protocols. For instance, existing platforms charge high fees, transactions \nare slow because of the poor scalability of the blockchain they use and lots more. With us, consequently, there","metadata":{"loc":{"lines":{"from":63,"to":72}}}}],["1495",{"pageContent":"are slow because of the poor scalability of the blockchain they use and lots more. With us, consequently, there \nare no such things, everything is automated, fast and decentralized, thanks to the Tron Blockchain. Trades are \ncarried out automatically and users can stake their idle funds in the liquidity pool to gain high return on their \ninvestment.\n1.1 Mission\nThe mission of SocialSwap is to open up the vast potential within DeFi and maximize value for every DeFi user. \nWe aim to create a DEX that enables users and other decentralized protocols to carry out seamless asset \nswapping (from one token to the other) as well as the provision of liquidity to ensure profit is maximized and \ninclusivity is created for everyone in the vast market that DeFi creates.\nOur technology lets us unite major features in the industry and provide opportunity for previously isolated \ndigital assets to be exchanged as desired. That’s not all, with Tron blockchain, we are able to execute the","metadata":{"loc":{"lines":{"from":72,"to":82}}}}],["1496",{"pageContent":"digital assets to be exchanged as desired. That’s not all, with Tron blockchain, we are able to execute the \nswap or exchange of tokens like ETH and BTC (on TRC-20 basis). As such, transaction can be carried out with \nease. We cater for more assets and allow investors to buy, sell, and trade more cryptocurrencies and increase \ntheir position size in the assets they desire.\nThe modus operandi of our platform is simple but unique, we use liquidity pool as a true decentralized finance \necosystem and liquidity providers can stake their assets and are rewarded accordingly. We understand that \nexisting protocols do not offer an all-round solution for the DeFi industry. As such, we deemed it fit that a \nsolution that will enable the amazing features and use cases of Decentralized Finance like swap and stake is \ncreated.\n1.2 Vision\nOur Vision is an ecosystem where fast, easy, and affordable decentralized financial products and services that","metadata":{"loc":{"lines":{"from":82,"to":92}}}}],["1497",{"pageContent":"created.\n1.2 Vision\nOur Vision is an ecosystem where fast, easy, and affordable decentralized financial products and services that \nmeet an individual’s needs are delivered in a timely, responsible, and sustainable way. Apart from this, we \nproject a platform that will be the forerunner of all DeFi products and use cases in the nearest future and \neasily accessible assets with more use cases that will drive adoption, increase demand and value.\nThere is mining selling pressure on the currency of the current AMM exchange platforms, which cannot be used \nas value support, resulting in large price fluctuations and the embarrassment of currency holders making \nthem unable to stabilize profits. In a nutshell we envision a project that will help alleviate these issues and \ntake the DeFi ecosystem to the next level.","metadata":{"loc":{"lines":{"from":92,"to":101}}}}],["1498",{"pageContent":"High-Throughput\nHigh-Scalability\nHigh-Availability\nHigh throughput is achieved by improving\nthe TPS in TRON, which has surpassed\nBitcoin and Ethereum, to a daily-use \npractical degree.\nMore reliable network structure, user \nasset, intrinsic value and a higher degree\n of decentralization consensus come with\n an improved rewards distribution \nmechanism.\nApplications are given a wider variety of\nways to be deployed in TRON because of\nits scalability and highly effective smart \ncontract. It can support enormous \nnumbers of users.\n1.3 Why Tron\nTRON is a decentralized virtual machine that was built to help users in the decentralized internet. With its \nsimilarly to Ethereum, TRON enables DApp developers to create and utilize complex protocols via smart \ncontracts that live on its native blockchain. Today the platform is best known for its transaction speeds and \nlow fees. The blockchain technology makes it possible for peer-to-peer transactions to be facilitated, such as","metadata":{"loc":{"lines":{"from":103,"to":124}}}}],["1499",{"pageContent":"low fees. The blockchain technology makes it possible for peer-to-peer transactions to be facilitated, such as \nthe transfer of tokens between users.\nThe TRON network relies on a Delegated-Proof-of-Stake (DPoS) consensus mechanism to secure the block\n-\nchain, making it impossible to hack and serves as ground zero to deploy smart contracts and framework for \ndevelopers. A DPoS is similar to a proof-of-stake consensus mechanism in that it allows users to earn passive \nincome whenever they stake their holdings in a network wallet.\nMost other existing blockchain platforms only function with a single layer, which leads to scalability issues and \noften causes network congestion, slows transactions and drives fees higher. Bitcoin and Ethereum 1.0 Block\n-\nchain have approximately 5 and 15 transactions per second (TPS). This small amount of TPS makes their \nnetwork slow and congested within a short time.\n2.0 SocialSwap Overview","metadata":{"loc":{"lines":{"from":124,"to":136}}}}],["1500",{"pageContent":"-\nchain have approximately 5 and 15 transactions per second (TPS). This small amount of TPS makes their \nnetwork slow and congested within a short time.\n2.0 SocialSwap Overview\nSocialSwap is redefining how DeFi works, combining the best of its features to create a bonded system. \nThe SocialSwap protocol’s implementation will bring significant and lasting change to the trading of financial \nproducts and staking. The platform is set to permanently address the numerous issues faced by existing DeFi \nusers from the DeFi swap platform they use and facilitate a safe, fast, highly secure, and accessible solution at \nreduced fee. What is more, we also have a native currency SST with which access will be given to the liquidity \npool on the decentralized exchange platform. \nExtensive research on the users of current AMM trading platforms and users of decentralized exchanges and \ngateways has revealed that users are only managing the existing ones as they do not get maximum value are","metadata":{"loc":{"lines":{"from":136,"to":147}}}}],["1501",{"pageContent":"gateways has revealed that users are only managing the existing ones as they do not get maximum value are \nnot truly satisfied with the services they get. This shows us that it is clearly time for a groundbreaking solution \nlike ours to hit the industry and change the status quo.","metadata":{"loc":{"lines":{"from":147,"to":149}}}}],["1502",{"pageContent":"Our team believes that financial process should be more democratic and accessible to the vast majority of \npeople who want to trade their portfolio. As such, we have created a platform that is an embodiment of \ndecentralized finance use cases - swap, staking and access to liquidity to flip profit.\n2.1 Opportunities that SocialSwap offers\nAs a platform with the goal to bring true decentralization to exchange, SocialSwap offers some key advantag\n-\nes over it peers in the industry. Some of them include:\n• Liquidity pool access\n• Transparency in fund movements and the underlying smart contract\n• Price efficiency as price is subject to market demand\n• Much easier access for users\n• Greater platform utility, speed, and flexibility\n• Easy swap\n• Staking\n• Open governance option\n3.0 Core Features of SocialSwap\n3.1 SocialSwap\nSocialSwap is the AMM-based Decentralized Exchange on the TRON network and it is designed to exchange","metadata":{"loc":{"lines":{"from":151,"to":168}}}}],["1503",{"pageContent":"• Easy swap\n• Staking\n• Open governance option\n3.0 Core Features of SocialSwap\n3.1 SocialSwap\nSocialSwap is the AMM-based Decentralized Exchange on the TRON network and it is designed to exchange \none token for another directly, bypassing trading platforms and other intermediaries. To carry out exchange \noperations, the user does not need to create an account on the exchange, go through the KYC procedure and \ntrust their funds to third parties. All the user needs to do is connecting the browser wallet (eg. Tronlink, Tron \nWallet), select the exchange direction and make a transaction. Next, the smart contract will automatically \nsend the corresponding amount of Tron or tokens to the user’s account.\nSocialSwap is an attempt to work around the performance restrictions of smart contract blockchains, especial\n-\nly Ethereum. Before AMMs came into prominence, decentralized exchanges attempted to use a classical order","metadata":{"loc":{"lines":{"from":168,"to":181}}}}],["1504",{"pageContent":"-\nly Ethereum. Before AMMs came into prominence, decentralized exchanges attempted to use a classical order \nbook mechanism. However, they suffered from liquidity issues, as placing each order required spending gas \nand waiting for block confirmation times. Ethereum’s low throughput also meant that only a small number of \ntransactions could be submitted before the blockchain would be completely swamped by these orders.\nThis was especially problematic for market makers, the liquidity providers on order book exchanges. “Making” \na market typically requires constantly adjusting buy and sell orders to the latest price, even if they do not get \nfilled.\nWhen each submitted order costs money and time, they may lose more than they gain from the bid-ask \nspread, which is the difference between the highest offered buy price and lowest sell price.\nIt is important to note that there is no manual token listing on SocialSwap. Tokens are listed automatically in a","metadata":{"loc":{"lines":{"from":181,"to":191}}}}],["1505",{"pageContent":"It is important to note that there is no manual token listing on SocialSwap. Tokens are listed automatically in a \ndecentralized fashion without the intervention of anyone.","metadata":{"loc":{"lines":{"from":191,"to":192}}}}],["1506",{"pageContent":"Every information and transaction is recorded on-chain and is available for everyone to verify and use. \nSocialSwap is created to offer traders a simple way to buy and sell assets at the best price possible across all \nDEX liquidity sources.\n3.2 Price Oracle and Slippage\nSocialSwap makes providing liquidity cheaper and simpler through a completely automated one-time process \nand the price change is constantly updated by our price oracle. Users can then stake or pitch in with their \nliquidity and earn reward on it. The marginal price offered by SocialSwap (not including fees) at time T can be \ncomputed by dividing the reserves of asset A by the reserves of asset B:\nSocialSwap improves this oracle functionality by measuring and recording the price before them first trade of \neach block (or equivalently, after the last trade of the previous one).\nSlippage also come in at this point and it refers to the difference between the expected price of a trade and","metadata":{"loc":{"lines":{"from":194,"to":204}}}}],["1507",{"pageContent":"each block (or equivalently, after the last trade of the previous one).\nSlippage also come in at this point and it refers to the difference between the expected price of a trade and \nthe price at which the trade is executed. Slippage can occur at any time but is most prevalent during periods \nof higher volatility.\nIn order to adequately implement the oracle mechanism, SocialSwap only support reserve balances of up to \n2    - 1. This number is high enough to support 18-decimal-place tokens with a total Supply over 1 quadrillion.  \nIf either reserve balance does go above 2    - 1, any call to the swap function will begin to fail (due to a check \nin the _update() function). To bypass from this situation, any user can call the skim() function to remove excess \nassets from the liquidity pool.\nOur price oracle accumulates price by keeping track of the total sum of prices at the beginning of each block in","metadata":{"loc":{"lines":{"from":204,"to":213}}}}],["1508",{"pageContent":"assets from the liquidity pool.\nOur price oracle accumulates price by keeping track of the total sum of prices at the beginning of each block in \nwhich someone interacts with the contract. The price is then measured by the amount of time that has passed \nsince the last block in which it was updated, according to the block timestamp. This means that the accumula\n-\ntor value at any given time (after being updated) should be the sum of the spot price at each second in the \nhistory of the contract.\nTo define the time-weighted average price from time t1 to t2, an external caller can checkpoint the accumula\n-\ntor's value at t1 and then again at t2, subtract the first value from the second, and divide by the number of \nseconds elapsed (Note that the contract itself does not store historical values for this accumulator - the caller \nhas to call the contract at the beginning of the period to read and store this value).","metadata":{"loc":{"lines":{"from":213,"to":224}}}}],["1509",{"pageContent":"3.3 How Smart Contracts Automate Trading on Socialswap\nWhen trading on SocialSwap, users interact with the liquidity pool. Under the hood, when the user instructs \nthe smart contract to perform a trade, the contract sends their tokens, such as TRX, to the liquidity pool. A \nmathematical formula then decides how many tokens from the other side of the pair they should receive in \nreturn.\nThe simplest practical formula is X multiplied by Y equals K, where the X and Y represent the amount of each \ntoken in the pool and K is a predefined constant. This equation defines a hyperbola: a smooth geometric \nshape that approaches both infinity and zero at its extremes but never quite reaches them.\nK = X ×Y\n \nEach trade has some amount of slippage — how much the size of the order affects the ultimate price at which \na token was bought or sold. The hyperbola shape means that slippage will be low with small orders, but with \nlarge orders, slippage rises exponentially.","metadata":{"loc":{"lines":{"from":228,"to":240}}}}],["1510",{"pageContent":"3.4 Staking and Liquidity Pool Explained\nStaking serves a couple of crucial purposes. For one, it allows users to earn passive income. Mainly, it keeps \nthe network safe. In the SocialSwap ecosystem, users stake their TRX at a 1:1 ratio. The more they stake in the \nSwap, the more earn. Below are the staking details:\nThe platform charges a 3% staking fee for all paired pools and 0% staking fee for single pool, reward (SST) \nwhich is claimable anytime.\nWhenever liquidity is deposited into a pool, special tokens known as liquidity tokens are minted to the provid\n-\ner’s address in proportion to how much liquidity they contributed to the pool. These tokens are a representa\n-\ntion of a liquidity provider’s contribution to a pool. Whenever a trade occurs, the fee which is levied is distrib\n-\nuted pro-rata to all LPs in the pool at the moment of the trade. To receive the underlying liquidity back, plus","metadata":{"loc":{"lines":{"from":242,"to":254}}}}],["1511",{"pageContent":"-\nuted pro-rata to all LPs in the pool at the moment of the trade. To receive the underlying liquidity back, plus \nany fees that were accrued while their liquidity was locked, LPs must burn their liquidity tokens. \nExplained in clearer terms, when a user supplies an asset – provides liquidity to the pool, it automatically \nbecomes a fungible resource. The token deposited in the liquidity pool is denoted with a value or derivative. \nThis gives the supplier ownership rights of the reward paid on the total amount supplied. The assigned deriva\n-\ntive is thus defined as an increasing percentage ownership claim of a portion of the liquidity pool supplied to \nthe smart contract on the Tron blockchain. With this, getting by supplying liquidity to the pool is equal to \nhaving a derivative which represents the suppliers contribution in the liquidity pool.  \nLiquidity providers can then choose to sell, transfer, or otherwise use their liquidity tokens in any way they see \nfit on the platform.","metadata":{"loc":{"lines":{"from":254,"to":265}}}}],["1512",{"pageContent":"Liquidity providers can then choose to sell, transfer, or otherwise use their liquidity tokens in any way they see \nfit on the platform. \nBelow is the Liquidity Pool details:\n• Pools renew every 10 days \n• Standard Pairings: BTC/SST, ETH/SST, TRX/SST, USDT/SST\n4.0 SocialSwapToken\nAs earlier mentioned, the platform has a native token which transactions and governance of the platform will \nbe carried out. The success of major DeFi protocols depends on how valuable the features they offer are and \nhow much users are attracted to the liquidity of their protocols. The native tokens of DeFi protocols have \nshown tremendous potential for upside price appreciation and our token is modelled to appreciate in value in \nboth long and short terms. \nSummarily, SST is a TRC token and it will allow holders to:\n• Participate in liquidity pools (to earn yield on their money)\n• Partake in platform governance\n• Carry out trade\n1","metadata":{"loc":{"lines":{"from":265,"to":280}}}}],["1513",{"pageContent":"5.0 Marketing strategy\n \nIn order to market SocialSwap in a targeted manner, a digital marketing strategy is used above all. On social \nmedia, mainly the channels Instagram, Facebook and YouTube are used from the beginning and the specific \ntarget group is addressed in the best possible way through appropriate posts and story contributions. \nThe primary aim is to communicate clear information and insights in order to address people who have little or \nno experience with the topics addressed (blockchains, crypto currencies, DeFi) by SocialSwap. \nIn the long term, various other channels such as LinkedIn will also be integrated into the digital strategy in \norder to better address business partners and investors on social media.\nIn order to achieve a certain reach, both an organic and a paid growth strategy will be used (including target\n-\ned hashtag use and paid ads).\nIn addition, the company cooperates with selected influencers and bloggers on platforms such as Twitter and","metadata":{"loc":{"lines":{"from":282,"to":294}}}}],["1514",{"pageContent":"-\ned hashtag use and paid ads).\nIn addition, the company cooperates with selected influencers and bloggers on platforms such as Twitter and \nReddit to communicate information about SocialSwap and to reach the target group on these platforms as \nwell. Additional content marketing strategies are also being planned on platforms such as Medium and Quora.\nWhat is more, we will also provide competitions, videos and information on our social media platforms such as \nTwitter and Telegram as part of the strategy and introduce a recommendation system.\nBelow is a summary of our proposed marketing activities:\n• Social media/ influencer marketing\n• SEO (news portals, PR, listing websites and blogs)\n• Content marketing (YouTube, Steemit, Medium, Telegram, Bitcoin talk, Reddit, Hacker noon, and other\n   platforms that serve as an executive tool and medium).\n• Referral programme\n• Industry events/ exhibitions\n• Brand partnerships","metadata":{"loc":{"lines":{"from":294,"to":308}}}}],["1515",{"pageContent":"platforms that serve as an executive tool and medium).\n• Referral programme\n• Industry events/ exhibitions\n• Brand partnerships\n• Referrals - Anyone who has a wallet connected to the DApp wallet can get a reflink. When someone joins a\n   pool, the referring person receives 10% of the claimed tokens directly into the wallet.\n6.0 SocialSwap Tokenomics\n• Total supply: 1 Billion\n• Type: TRC-20 with governance features\n• Working Mechanism: DEX, Staking and liquidity pool\n• Staking rewards: Rewards will be based on time duration of staking the SocialSwapToken\n• Many pools high yield farming with a great APY will be added after SocialSwapToken sale\n• Token price on DEX: 0.1 USDT","metadata":{"loc":{"lines":{"from":308,"to":320}}}}],["1516",{"pageContent":"90%\n5%\n4%\n1%\nLiquidity pool and St...\nDEX launch\nEarly investors\nHold-Back Pool\n7.0 Buy-Back and Hold-Back Pools\nAs we want to guarantee a stable, healthy and long-term growth of SST, market price pumps and dumps \nshould be reduced to a bare minimum. Therefore, we got Buy-Back and Hold-Back Pools to either Buy back \nSST to increase the price of sell SST to decrease the price.\n7.1 Buy-Back\nIn order to minimize price drops of SST, major parts of Early Investors Funds (>1 Million Dollars) will be used to \nbuy back SST if the price drops for a set percentage.\n7.2 Hold-Back\n5 Million SST will be stored separately and sold to counteract massive price pumps, especially in the first weeks \nafter the launch of SST.\n8.0 Roadmap\nConception of Idea – January 2021\nFounding of Team – February 2021\nWhitepaper and Documentation – February 2021\nLaunch DEX, SST and liquidity pools - late March 2021\nLaunch of Community Pools - early April 2021\n9.0 Social Media Channels\nWebsite: https://socialswap.io","metadata":{"loc":{"lines":{"from":322,"to":347}}}}],["1517",{"pageContent":"Launch DEX, SST and liquidity pools - late March 2021\nLaunch of Community Pools - early April 2021\n9.0 Social Media Channels\nWebsite: https://socialswap.io\nTelegram: https://t.me/@socialswapdefi\nInstagram: https://www.instagram.com/socialswap.io\nToken Allocation","metadata":{"loc":{"lines":{"from":347,"to":353}}}}],["1518",{"pageContent":"USDC\nUSDC Introduction\nUSD Coin (USDC) is a dollar digital currency that offers frictionless, secure and interoperable access to capital markets, global trade, payments and modern commerce. Dollar digital currencies work just like other digital content — they move at the speed of the internet. USDC is interoperable across multiple blockchains, including the TRON network.TRON USDC was launched in June 2021 and has seen significant growth and adoption, with more than $200 million in on-chain transactions within a few months. TRON USDC is a TRC20-based token that enables users to transact, store, and exchange value across TRON-based protocols and decentralized apps (DApps)\n\nTRON USDC ACTIVITY\n\nTRC20 USDC Smart Contract: TEkxiTehnzSmSe2XqrBj4w32RUN966rdz8","metadata":{"loc":{"lines":{"from":1,"to":7}}}}],["1519",{"pageContent":"TRON USDC ACTIVITY\n\nTRC20 USDC Smart Contract: TEkxiTehnzSmSe2XqrBj4w32RUN966rdz8\n\nUSDC\nReserves\tBacked by cash and equivalents and short-duration U.S. Treasuries, ensuring that USDC is always redeemable 1:1 for U.S. Dollars.\nTransparency\tMonthly attestation reports regarding the reserve balances backing USDC are published by Grant Thorton, a leading global accounting firm.\nGovernance\tGoverned by Centre, an independent consortium.","metadata":{"loc":{"lines":{"from":7,"to":14}}}}],["1520",{"pageContent":"About USDD\nWhat Is USDD?\nUSDD is a stablecoin issued by the TRON DAO Reserve. It’s pegged to the value of the US dollar and aims to provide a reliable, decentralized cryptocurrency for blockchain transactions. USDD can be used for payments, trading, staking and as a value store.\n\nUSDD is backed by a number of cryptocurrencies, including Bitcoin, Ethereum and TRON. To ensure stability and security, the reserve is over-collateralized, meaning that it holds more assets than the amount of USDD currently in circulation.\n\nWho Are the Founders of USDD?\nJustin Sun is the founder of the TRON, which is behind the USDD stablecoin. Launched on May 5, 2022, USDD is on the TRON blockchain and is also available on Ethereum and BNB Chain.\nWhat Makes USDD Unique?\nUSDD is issued and redeemed via smart contracts on TRON. This allows for fast and secure transactions, as well as transparent and verifiable records of USDD issuance and redemption. It also lets users join staking pools.","metadata":{"loc":{"lines":{"from":1,"to":10}}}}],["1521",{"pageContent":"A decentralized community of stakeholders oversees the management and development of USDD, and makes decisions on behalf of the wider community via the TRON DAO Reserve (TDR). The TDR is the principal custodian of USDD and is responsible for preserving the value of the currency and maintaining a stable exchange rate.\n\nIt was established as a separate financial organization to protect the Tron ecosystem against the effects of extended economic downturns, financial panic, and unstable exchange prices for both centralized and decentralized Tron stable currency.\n\nIts primary roles are as a lender of last resort, a regulator of risk-free interest rates, a manager of liquidity through the release and restriction of funds, and an implementer of monetary and exchange rate policies.","metadata":{"loc":{"lines":{"from":12,"to":16}}}}],["1522",{"pageContent":"How Many USDD Coins Are There in Circulation?\nUSDD stablecoin is intended to maintain a fixed exchange rate of 1:1 with the US dollar. This implies that for every USDD coin in circulation, a corresponding amount of US dollars is set aside in reserve.\n\n$2 billion worth of USDD has been authorized, while $1.25 billion worth of coins remain authorized but not yet issued.\n\nAs of June 2023, the total supply of USDD is around $741K, and the total collateral is around $1.2 billion. These are mainly held in TRX, BTC and TUSD.\n\nHow Is the USDD Network Secured?\nAny stablecoin’s security relies heavily on the stability of the assets that underpin it. As such, the USDD protocol over-collateralizes the protocol with highly liquid assets, including BTC, TUSD and TRX.\n\nIn order to keep the currency stable when its reserve assets’ values change as a result of adverse market conditions, the protocol’s monetary policy allows it to adjust the reserve asset ratios dynamically.","metadata":{"loc":{"lines":{"from":18,"to":28}}}}],["1523",{"pageContent":"Where Can You Buy USDD?\nUSDD is listed on crypto exchanges, including KuCoin, PancakeSwap (V2), Uniswap (V3), SushiSwap, Gate.io, Poloniex, Huobi, Bybit and more.\n\n\nI. How to understand USDD’s stability?\n1. USDD’s core mission is to provide the blockchain world with a decentralized cryptocurrency of stable value.\n\n2. What is decentralization?","metadata":{"loc":{"lines":{"from":30,"to":37}}}}],["1524",{"pageContent":"USDT and USDC, the largest stablecoins at present, are strictly pegged 1:1 to the U.S. dollar reserves of the centralized platforms Tether and Centre. Their use and price stability are thus subject to the credibility and control of centralized organizations: for example, whether the organization has sufficient U.S. dollar reserves and who provides credible real-time attestations. Further, centralized organizations are allowed to freeze the assets in a designated wallet through smart contracts, and users have to pass rigorous KYC verification before they can redeem stablecoins for dollars. USDC and USDT are by nature centralized stablecoins under strict supervision by the relevant U.S. regulatory authority.","metadata":{"loc":{"lines":{"from":39,"to":39}}}}],["1525",{"pageContent":"USDD is minted by the whitelisted institutions of the TRON DAO Reserve (TDR) through burning TRX. Its value is backed by the over-collateralization of highly liquid crypto assets under the TDR, including BTC, USDT, USDC, and TRX. The circulation and use of USDD are free from the intervention of any centralized parties. Similar to BTC and ETH, USDD grants its holders full ownership, meaning that no organization or individual has access to freeze users’ USDD.\n3. What do we mean by stable value?","metadata":{"loc":{"lines":{"from":40,"to":41}}}}],["1526",{"pageContent":"Tether and Centre, which are centralized, are obliged to exchange USDT and USDC for U.S. dollars at a 1:1 ratio upon users’ requests, so the price of one USDT or USDC should theoretically be pegged at $1. When the issuer’s ability to meet such an obligation is challenged by the market, the stablecoin is very likely to lose its $1 peg.","metadata":{"loc":{"lines":{"from":43,"to":43}}}}],["1527",{"pageContent":"USDD, given its decentralized nature, is not bound by the duty of redemption in real U.S. dollars as is the case with centralized stablecoin issuers, and its price stability is maintained through a series of monetary policies adopted by the TDR based on market conditions. The price of USDD is not strictly pegged to the U.S. dollar but floats up and down around it. An analogy is the Linked Exchange Rate System (LERS) established to maintain the Hong Kong dollar’s link to the U.S. dollar at the rate of HK$7.8 to one U.S. dollar. In cases where the exchange rate fluctuates within a band of HK$7.75–7.85, Convertibility Undertakings (CUs) of the Hong Kong Monetary Authority will not be triggered.","metadata":{"loc":{"lines":{"from":44,"to":44}}}}],["1528",{"pageContent":"In the same vein, USDD is not considered de-pegged to the U.S. dollar when its price swings modestly below or above $1, and therefore the TDR does not need to implement a monetary policy intervention to “re-peg” it. The TDR considers it acceptable when the price of USDD fluctuates within a 3% range (up or down) under extremely volatile market conditions (e.g., since 2015, there have been 15 days when the single-day fluctuation of BTC price overshot 15%, an average of 2 days per year). However, suppose USDD records a significant and unreasonable movement in its price, the TDR will strive to keep its value stable by taking concrete monetary policy interventions as it has been doing in the past two weeks.\nThe TDR adopts a linked exchange rate system for USDD, which allows its price to move up and down within a reasonable range instead of having to be strictly pegged 1:1 to the U.S. dollar.\nII. Who are suitable holders of USDD?","metadata":{"loc":{"lines":{"from":45,"to":47}}}}],["1529",{"pageContent":"II. Who are suitable holders of USDD?\nUsers who wish to completely control their stablecoin without any institution or individual being able to freeze their wallet funds, just like holding BTC and ETH in their personal crypto wallets. Users who wish to have their token value remain stable and free from fluctuations as violent as BTC and ETH may experience, are also suitable for holding USDD.\nIII. Why has USDD fluctuated significantly in the recent past?\n1. The market has mistakenly equated the relation between TRX and USDD to that between Luna and UST.","metadata":{"loc":{"lines":{"from":47,"to":50}}}}],["1530",{"pageContent":"a. Luna and UST used an arbitrage system to maintain UST’s peg.","metadata":{"loc":{"lines":{"from":52,"to":52}}}}],["1531",{"pageContent":"Luna and UST are pegged to $1 by an arbitrage system of burning and minting. UST peg does not rely on the existence of any reserves to support the peg. Users mint 1 UST by depositing 1 USD worth of LUNA tokens on the Terra Station to be burnt. If the price of one UST is higher than $1, $1 worth of Luna can be bought and burnt to mint one UST, which is to be sold for an instant profit; meanwhile, if the price of UST is lower than $1, one UST can be bought and burnt to mint $1 worth of Luna, which is to be sold for profit, too. The arbitrage mechanism helps UST peg to the U.S. dollar. The whole process relies heavily on Luna’s liquidity and token value. Once UST was supplied and minted far more than the realizable market value of Luna, the stability of UST could no longer be sustained, and a death spiral would be formed.","metadata":{"loc":{"lines":{"from":54,"to":54}}}}],["1532",{"pageContent":"That is exactly what has happened since May 9, 2022, before which the total value of UST was $18.7 billion and that of Luna was as close as $20.4 billion. However, after the de-peg of UST on May 9, hundreds of millions of Luna were minted under the arbitrage system. The supply of Luna surged 18,000 times from May 9 to May 14, with Luna’s price plummeting to 1.8 parts-per-million (ppm) and the market value shrinking to 3%. Now that Luna could no longer support the tremendous amount of UST, a complete de-pegging was doomed.\nb. The stability of USDD is backed by the reserve assets of the TDR, not the price of TRX.","metadata":{"loc":{"lines":{"from":55,"to":56}}}}],["1533",{"pageContent":"USDD’s price stability is maintained by a basket of monetary policies adopted by the TDR and backed by its reserve assets. As long as the TDR holds a sufficient and healthy reserve, the price of USDD is stable.\nThe details of the TDR’s reserve assets are published in real-time on TRON DAO Reserve. As of now, there are 990 million USDC, 140 million USDT, 14,000 BTC, and 11 billion TRX in the reserve, with a total market value of close to $2.3 billion, 3 times the value of the 725 million USDD in circulation. Even under the extreme circumstance when the value of TRX reaches zero, the remaining reserve assets worth $1.4 billion are still double the value of USDD in circulation. Therefore, the TDR reserve can provide sufficient and healthy liquidity for the stability of USDD.","metadata":{"loc":{"lines":{"from":58,"to":59}}}}],["1534",{"pageContent":"The mutual-minting relationship between TRX and USDD is just part of the effort made to help maintain USDD’s linked exchange rate system, which can be explained by referring to Hong Kong’s case: the Hong Kong Monetary Authority allows swaps between the RMB and the HK dollars, but the RMB is not pegged to the HK dollar. In fact, the stability of the HK dollar is backed by a basket of currencies including the RMB.\nc. In a nutshell, price swings in TRX do not have a substantial correlation to USDD’s price stability, so every USDD holder is advised to remain rational and not to be misled in the face of market rumors.","metadata":{"loc":{"lines":{"from":60,"to":61}}}}],["1535",{"pageContent":"2. Led by misconception swirling in the market, short-sellers borrow and dump USDD, causing it to de-peg, and consequently profit from shorting TRX.\n\na. USDD Obtain.\n\nBetween May 20 and June 12, short-sellers obtained nearly 100mn USDD through JustLend and SUN.io; and then transferred them to the exchanges Poloniex, KuCoin, and Huobi。\nb. USDD dumping.\n\nOn June 12–13, 2022, this user dumped USDD at a loss on KuCoin within a short period of time. During these two days, the USDD/USDT trading pair recorded $19 million and $39 million in trading volume respectively, a 6–10 times increase from the daily average of $3–4 million a few days earlier, pushing USDD down to $0.9111 at one point.\n\nc. Market panic triggered by “USDD de-pegging”.\n\nJudging from the trending searches on Google Trends, “USDD”, “USDD peg”, and “USDD Depeg” skyrocketed since June 13, and the market began to panic that USDD would repeat the saga of Luna/UST.\n\nd. Profit from shorting TRX with high leverage.","metadata":{"loc":{"lines":{"from":63,"to":76}}}}],["1536",{"pageContent":"d. Profit from shorting TRX with high leverage.\n\nShort-sellers took advantage of the panic in the markets and shorted TRX with high leverage on centralized exchanges. On June 13, 2022, the trading volume of TRX/USDT Perpetual on Binance surged to $1.6 billion, a ten-fold increase from the daily average a week earlier. On June 15, 2022, the annualized funding rate for shorting TRX hit a record high of 534%. As a result, the price of TRX fell to $0.04567 on June 15, 2022, a 40% drop from $0.07605 the closing price on June 12, 2022. Short-sellers then closed their positions and succeeded in profiting from shorting TRX.\n\n\n3. In other words, the recent price swings of USDD stemmed not from an ill-designed mechanism between USDD and TRX but from the attack on the two tokens by short-sellers leveraging the misconception in the market. Many USDD holders read the false headline and they deserve to see the truth.","metadata":{"loc":{"lines":{"from":76,"to":81}}}}],["1537",{"pageContent":"4. Although short-selling and long-buying run against the TDR’s mission to safeguard the price stability of USDD, they are legitimate acts driven by the market. As the TDR also adopts market-oriented means to maintain the value of USDD, we will not criticize the acts of short-sellers and long-buyers. Pursuing profits is a natural part of the market, and short-sellers and long-buyers have their moral ground to stand on.\n\nIV. What monetary policies will the TDR adopt to maintain the value of USDD?\n1. The goal of monetary policies is to maintain USDD’s price stability and drive the growth of the TRON ecosystem.","metadata":{"loc":{"lines":{"from":83,"to":86}}}}],["1538",{"pageContent":"IV. What monetary policies will the TDR adopt to maintain the value of USDD?\n1. The goal of monetary policies is to maintain USDD’s price stability and drive the growth of the TRON ecosystem.\n\nJust like any central bank, the TDR, the central bank at phase 1.0 of USDD, adopts monetary policies to maintain its price stability and spur growth in the TRON ecosystem.\nIt is not like what some have argued, that the TDR’s monetary policies are profit-oriented, for such action runs against the TDR’s founding mission to guide and regulate USDD. Nevertheless, rational investors are advised not to take the TDR’s monetary policies as their investment guide.\n2. Monetary policy instrument №1: setting interest rate","metadata":{"loc":{"lines":{"from":86,"to":91}}}}],["1539",{"pageContent":"One of the main monetary policy tools for central banks worldwide, setting interest rates is a mechanism often used to regulate the supply and demand of currencies and loans. Similarly, the TDR works with its partner institutions and protocols to set USDD’s benchmark interest rates and has the power to adjust the rate at any time based on market conditions.\nNow, the initial benchmark interest rate for USDD is 30% and is slightly higher on platforms that recently listed USDD, all subsidized by the TDR to acquire new users and drive up its adoption. In the early stages of USDD, its interest rate will stay at a higher level than those of the US dollar and USDT/USDC. The rationale behind such a decision is that the TRON ecosystem is similar to some emerging economies such as China, Vietnam, and India, which want to attract foreign capital with higher interest rates to grow their economies.","metadata":{"loc":{"lines":{"from":93,"to":94}}}}],["1540",{"pageContent":"Interests for USDD holders are paid out in USDD issued by the TDR and credited to their accounts. USDD holders have full control over USDD in their wallets. Users staking or lending USDD enter the respective smart contracts on different protocols, to which the TDR has no access. This dispels the misinformation claimed by some that USDD is a Ponzi Scheme and that the TDR convinces people to invest money by promising unreasonable high returns.\n3. Monetary policy instrument №2: open market operations.","metadata":{"loc":{"lines":{"from":95,"to":96}}}}],["1541",{"pageContent":"Open market operations (OMO) refer to a central bank openly buying or selling bonds in the secondary market. These central banks are essentially trading base money for bonds in the secondary market: they deposit base money through purchases and withdraw it through sales, thereby adjusting the supply and demand of the base money and stabilizing its value.\nThe TDR adopts a mechanism that functions similarly to OMO. Through buying or selling USDD and reserve assets, including TRX, BTC, USDT, and USDC on CEXs or DEXs, it manages to keep USDD’s price stable. The TDR will announce each of its OMO publicly to the market on its Twitter account (@trondaoreserve) to positively guide the market perception.","metadata":{"loc":{"lines":{"from":98,"to":99}}}}],["1542",{"pageContent":"It is worth noting that the core purpose of the TDR’s OMO has been and will always be to maintain USDD’s price stability rather than profit from trading. The proceeds generated from OMO, if any, will go to the reserves for efforts to stabilize USDD’s price and further the growth of TRON’s ecosystem, as echoed by the 1 trillion yuan ($158 billion) transfer from the People’s Bank of China to the Chinese Central Government to help finance fiscal spending this March.\n4. Monetary policy instrument №3: window guidance.","metadata":{"loc":{"lines":{"from":100,"to":101}}}}],["1543",{"pageContent":"In times of severe market turbulence, the TDR will partner with institutions such as JustLend and CEXs to limit the amount of USDD and TRX lent or even temporarily pause the lending of USDD and TRX to crack down on malicious short-sellers.\n5. Monetary policy instrument №4: minting-burning mechanism of TRX and USDD.\n\nThe minting-burning mechanism between TRX and USDD also effectively guarantees USDD’s stability. Depending on the situation, the TDR will achieve this by employing methods such as enabling or disabling the minting process, adjusting the mint-burn ratio, and imposing upper limits on daily minting and burning activities, all carried out in a decentralized manner.\n6. On top of the above monetary policy instruments, the TDR will also explore more use cases of USDD to maintain its value.","metadata":{"loc":{"lines":{"from":103,"to":107}}}}],["1544",{"pageContent":"V. What’s The Guiding Principle Of The TDR’s Monetary Policies?\nThe end goal of the TDR’s monetary policies is to maintain USDD’s price stability and spur the diversity of TRON’s stablecoin ecosystem. While striving to minimize the impact of its monetary policy instruments on the market, the TDR aspires to give all USDD holders access to diverse market activities and present the crypto space with a decentralized, reliable stablecoin option.\nIn short, the guiding principle underpinning the TDR’s monetary policies is to disclose the information required to gain the market’s trust and confidence in USDD’s price stability, while at the same time concealing the information that may be exploited by short-sellers and long-buyers for predictions on the TDR’s next move to avoid price swings and market turbulence.","metadata":{"loc":{"lines":{"from":109,"to":111}}}}],["1545",{"pageContent":"A case in point is what Alan Greenspan, the 13th Chair of the Federal Reserve, has said to play down the impact exerted by the Federal Reserve on the market: “If I seem unduly clear to you, you must have misunderstood what I said.”","metadata":{"loc":{"lines":{"from":112,"to":112}}}}],["1546",{"pageContent":"USDT Introduction\nUSDT is the USD-pegged stablecoin issued by Tether on the TRON network. The token will be able to complete issuance, holding and transfer via smart contract on TRON, with a completely free and transparent process, zero transfer fee, and instant delivery; it will also be able to write programs that are highly expansible based on smart contract. TRC20 based USDT enables interoperability with TRON-based protocols and Decentralised Applications (DApps) while allowing users to transact and exchange fiat pegged currencies across the TRON Network.\n\nUSDT (TRC20) is granted statutory status as authorized digital currency and medium of exchange in the Commonwealth of Dominica effective on October 7th 2022.\nView Ordinance ＞\n\nTRC20 based USDT smart contract address:\nTR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t","metadata":{"loc":{"lines":{"from":1,"to":8}}}}],["1547",{"pageContent":"SunSwap\n \nAPI Documentation\nby Sun\n \nteam\nv 1.0.\n4","metadata":{"loc":{"lines":{"from":1,"to":8}}}}],["1548",{"pageContent":"Table of Contents\nI. Backend API\n3\n1.1 Get access to API for all trading pairs\n3\nII. Smart Contract API\n2.1 Smart contract address\n2.2 List of contract interface\n2.2.1 TRC20 Token\n4\n4\n4\n4\n2.2.2 Factory\n4\n2.2.3 Exchange\n5\n2.3 Detail description of contract interface\n2.3.1 Factory\n7\n7\n2.3.1.1 Query interface\n1. getExchange\n7\n7\n2. getToken\n7\n2.3.1.2 Modification interface\n1. createExchange\n8\n8\n2.3.1.3 Contract Event\n1. NewExchange\n8\n8\n2.3.2 Exchange\n9\n2.3.2.1 Query interface\n1. getTrxToTokenInputPrice\n2. getTrxToTokenOutputPrice\n3. getTokenToTrxInputPrice\n4. getTokenToTrxOutputPrice\n5. tokenAddress\n9\n9\n9\n10\n10\n10\n11\n11\n11\n12\n12\n13\n14\n14\n15\n15\n16\n16\n17\n18\n18\n6. factoryAddress\n2.3.2.2 Modification interface\n1. addLiquidity\n2. removeLiquidity\n3. trxToTokenSwapInput\n4. trxToTokenSwapOutput\n5. tokenToTrxSwapOutput\n6. tokenToTrxSwapInput\n7. trxToTokenTransferInput\n8. trxToTokenTransferOutput\n9. tokenToTrxTransferInput\n10. tokenToTrxTransferOutput\n11. tokenToTokenSwapOutput","metadata":{"loc":{"lines":{"from":10,"to":86}}}}],["1549",{"pageContent":"5. tokenToTrxSwapOutput\n6. tokenToTrxSwapInput\n7. trxToTokenTransferInput\n8. trxToTokenTransferOutput\n9. tokenToTrxTransferInput\n10. tokenToTrxTransferOutput\n11. tokenToTokenSwapOutput\n12. tokenToTokenSwapInput\n13. tokenToTokenTransferInput\n1","metadata":{"loc":{"lines":{"from":86,"to":95}}}}],["1550",{"pageContent":"14. tokenToTokenTransferOutput\n2.3.2.3 Contract event\n1. TokenPurchase\n19\n20\n20\n20\n21\n21\n2. TrxPurchase\n3. AddLiquidity\n4. RemoveLiquidity\n2","metadata":{"loc":{"lines":{"from":97,"to":109}}}}],["1551",{"pageContent":"I.\n \nBackend\n \nAPI\n1.1 Get access \nto\n \nAPI    for   all  trading \npairs\nGET:\n \nhttps://\nopenapi.sun.io\n/v2/allpairs\nParameters:\npage_size \n: int, size of each \npage, \nmax 50\n0\npage_num: \nint, number \nof the page, \nstarting \nfrom \n0\nver\n \n:  take 1 for Sunswap1.0, \ntake 2 \nfor Sunswap1.5, \ntake 3 for Sunswap\n \n2.0\ntoken_address: optional; return only the data containing the specific token address\norderBy: optional; return the data order\ned by the specific item (price, quote_volume or base_volume) \ndesc: optional; true = decreasing order; false = incr\neasing order\nFormat \nof  return \nvalue:\n3\n{ \"data\":\n  [{\n    \"0_TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t\": //key: ID of base and quote token\n    {\n      \"quote_id\": \"0\",// addres\ns of the quote token, 0 refers to TRX's id\n      \"quote_name\":     \"TRX\", //quote token name\n      \"quote_symbol\": \"TRX\", // quote token symbol\n      \"quote_decimal\": \"6\", //precision of quote token","metadata":{"loc":{"lines":{"from":111,"to":163}}}}],["1552",{"pageContent":"s of the quote token, 0 refers to TRX's id\n      \"quote_name\":     \"TRX\", //quote token name\n      \"quote_symbol\": \"TRX\", // quote token symbol\n      \"quote_decimal\": \"6\", //precision of quote token\n      \"base_id\": \"TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t\", // contract address\n of the \nbase token\n      \"base_name\": \"Tether USD\", // name of base_token, e.g. USDT\n      \"base_symbol\": \"USDT\", // symbol for base token\n      \"base_decimal\": \"6\", // precision of base token\n      \"price\": \"37.450887374011593590\", // price of the base_token, 1 US\nDT = 37.45 \nTRX at the moment\n      \"quote_volume\": \"16928742252878\", // total amount of quot\ne_token traded in the \nlast 24 hours, unit : min unit of the quote_token\n      \"base_volume\": \"452025130508\" // total amount of base_tok\nen traded in the last 24 \nhours, unit: min unit of the base_token\n    } \n  }],\n  \"total_num\": 25, // total entries \n  \n\"err_no\":0,\n  \n\"err_msg\":\"\"\n  \"max_page_no\": 5\n}  \nNote:\nMaximum \nnumber \nof requests \nto\n the","metadata":{"loc":{"lines":{"from":163,"to":196}}}}],["1553",{"pageContent":"hours, unit: min unit of the base_token\n    } \n  }],\n  \"total_num\": 25, // total entries \n  \n\"err_no\":0,\n  \n\"err_msg\":\"\"\n  \"max_page_no\": 5\n}  \nNote:\nMaximum \nnumber \nof requests \nto\n the\n \nAPI   is  1  request\n \nper   us","metadata":{"loc":{"lines":{"from":196,"to":215}}}}],["1554",{"pageContent":"er \nper   second","metadata":{"loc":{"lines":{"from":217,"to":218}}}}],["1555",{"pageContent":"II. Smart Contract API\n2.1 Smart contract address\nName\nAddress\nNote\nfactory contract\nV1 :    TXk8rQSAvPvBBNtqSoY6nCfsXWCSSpTVQF\nV1.5 :\nTB2LM4iegvhPJGWn9qizeefkPMm7bqqaMs\nFactory contract is\ndesigned to create trading\npairs and to manage lists\nof trading pairs\nexchange\ncontract\nV1 :  TQn9Y2khEsLJW1ChVWFMSMeRDow5KcbLSE\nV1.5 :\nTEXsUGyKSapM3cDUpvsShnvE8TqP83qosA\nEach trading pair comes\nwith an exchange\ncontract. This is an\nexchange contract\naddress for USDT/TRX.\n2.2 List of contract interface\n2.2.1 TRC20 Token\ninterface ITRC20 {\nfunction transfer(address to, uint256 value) external returns (bool);\nfunction approve(address spender, uint256 value) external returns (bool);\nfunction transferFrom(address from, address to, uint256 value) external returns (bool);\nfunction totalSupply() external view returns (uint256);\nfunction balanceOf(address who) external view returns (uint256);\nfunction allowance(address owner, address spender) external view returns (uint256);","metadata":{"loc":{"lines":{"from":220,"to":251}}}}],["1556",{"pageContent":"function balanceOf(address who) external view returns (uint256);\nfunction allowance(address owner, address spender) external view returns (uint256);\nevent Transfer(address indexed from, address indexed to, uint256 value);\nevent Approval(address indexed owner, address indexed spender, uint256 value);\n}\n2.2.2 Factory\n4","metadata":{"loc":{"lines":{"from":251,"to":257}}}}],["1557",{"pageContent":"interface \nI\nSun\nswapFactory\n{\nevent NewExchange(address indexed token, address indexed exchange);\nfunction initializeFactory(address template) external;\nfunction createExchange(address token) external returns (address payable);\nfunction getExchange(address token) external view returns (address payable);\nfunction getToken(address token) external view returns (address);\nfunction getTokenWihId(uint256 token_id) external view returns (address);\n}\n2.2.3 Exchange\ninterface \nI\nSun\nswapExchange\n{\nevent TokenPurchase(address indexed buyer, uint256 indexed trx_sold, uint256 indexed\ntokens_bought);\nevent TrxPurchase(address indexed buyer, uint256 indexed tokens_sold, uint256\nindexed trx_bought);\nevent AddLiquidity(address indexed provider, uint256 indexed trx_amount, uint256\nindexed token_amount);\nevent RemoveLiquidity(address indexed provider, uint256 indexed trx_amount, uint256\nindexed token_amount);\nfunction () external payable;","metadata":{"loc":{"lines":{"from":259,"to":285}}}}],["1558",{"pageContent":"indexed token_amount);\nevent RemoveLiquidity(address indexed provider, uint256 indexed trx_amount, uint256\nindexed token_amount);\nfunction () external payable;\nfunction getInputPrice(uint256 input_amount, uint256 input_reserve, uint256\noutput_reserve) external view returns (uint256);\nfunction getOutputPrice(uint256 output_amount, uint256 input_reserve, uint256\noutput_reserve) external view returns (uint256);\nfunction trxToTokenSwapInput(uint256 min_tokens, uint256 deadline) external payable\nreturns (uint256);\nfunction trxToTokenTransferInput(uint256 min_tokens, uint256 deadline, address\nrecipient) external payable returns(uint256);\nfunction trxToTokenSwapOutput(uint256 tokens_bought, uint256 deadline) external\npayable returns(uint256);\nfunction trxToTokenTransferOutput(uint256 tokens_bought, uint256 deadline, address\nrecipient) external payable returns (uint256);\nfunction tokenToTrxSwapInput(uint256 tokens_sold, uint256 min_trx, uint256 deadline)\n5","metadata":{"loc":{"lines":{"from":285,"to":302}}}}],["1559",{"pageContent":"external returns (uint256);\nfunction tokenToTrxTransferInput(uint256 tokens_sold, uint256 min_trx, uint256\ndeadline, address recipient) external returns (uint256);\nfunction tokenToTrxSwapOutput(uint256 trx_bought, uint256 max_tokens, uint256\ndeadline) external returns (uint256);\nfunction tokenToTrxTransferOutput(uint256 trx_bought, uint256 max_tokens, uint256\ndeadline, address recipient) external returns (uint256);\nfunction tokenToTokenSwapInput(uint256 tokens_sold, uint256 min_tokens_bought,\nuint256 min_trx_bought, uint256 deadline, address token_addr) external returns (uint256);\nfunction tokenToTokenTransferInput(uint256 tokens_sold, uint256 min_tokens_bought,\nuint256 min_trx_bought, uint256 deadline, address recipient, address token_addr) external\nreturns (uint256);\nfunction tokenToTokenSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold,\nuint256 max_trx_sold, uint256 deadline, address token_addr) external returns (uint256);","metadata":{"loc":{"lines":{"from":304,"to":317}}}}],["1560",{"pageContent":"returns (uint256);\nfunction tokenToTokenSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold,\nuint256 max_trx_sold, uint256 deadline, address token_addr) external returns (uint256);\nfunction tokenToTokenTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold,\nuint256 max_trx_sold, uint256 deadline, address recipient, address token_addr) external\nreturns (uint256);\nfunction tokenToExchangeSwapInput(uint256 tokens_sold, uint256 min_tokens_bought,\nuint256 min_trx_bought, uint256 deadline, address exchange_addr) external returns\n(uint256);\nfunction tokenToExchangeTransferInput(uint256 tokens_sold, uint256\nmin_tokens_bought, uint256 min_trx_bought, uint256 deadline, address recipient, address\nexchange_addr) external returns (uint256);\nfunction tokenToExchangeSwapOutput(uint256 tokens_bought, uint256\nmax_tokens_sold, uint256 max_trx_sold, uint256 deadline, address exchange_addr)\nexternal returns (uint256);\nfunction tokenToExchangeTransferOutput(uint256 tokens_bought, uint256","metadata":{"loc":{"lines":{"from":317,"to":332}}}}],["1561",{"pageContent":"max_tokens_sold, uint256 max_trx_sold, uint256 deadline, address exchange_addr)\nexternal returns (uint256);\nfunction tokenToExchangeTransferOutput(uint256 tokens_bought, uint256\nmax_tokens_sold, uint256 max_trx_sold, uint256 deadline, address recipient, address\nexchange_addr) external returns (uint256);\nfunction getTrxToTokenInputPrice(uint256 trx_sold) external view returns (uint256);\nfunction getTrxToTokenOutputPrice(uint256 tokens_bought) external view returns\n(uint256);\nfunction getTokenToTrxInputPrice(uint256 tokens_sold) external view returns (uint256);\nfunction getTokenToTrxOutputPrice(uint256 trx_bought) external view returns (uint256);\n6","metadata":{"loc":{"lines":{"from":332,"to":342}}}}],["1562",{"pageContent":"function tokenAddress() external view returns (address);\nfunction factoryAddress() external view returns (address);\nfunction addLiquidity(uint256 min_liquidity, uint256 max_tokens, uint256 deadline)\nexternal payable returns (uint256);\nfunction removeLiquidity(uint256 amount, uint256 min_trx, uint256 min_tokens, uint256\ndeadline) external returns (uint256, uint256);\n}\n2.3 Detail description of contract interface\n2.3.1 Factory\n2.3.1.1 Query interface\n1. getExchange\nfunction getExchange(address token) external view returns (address payable);\nFunction description: Use TRC20 token to obtain the corresponding exchange address in\nSun\nSwap\n.\nParameter description:\nParameter\nType\nDescription\ntoken\naddress\nTRC20 token address\nReturns:\naddress\nTrading pair address in \nSun\nSwap\n2. getToken\nfunction getToken(address token) external view returns (address)\nFunction description: Use the exchange address in \nSun\nSwap\nto obtain the address of\nTRC20 token.\nParameter description:\nParameter\nType","metadata":{"loc":{"lines":{"from":344,"to":381}}}}],["1563",{"pageContent":"Function description: Use the exchange address in \nSun\nSwap\nto obtain the address of\nTRC20 token.\nParameter description:\nParameter\nType\nDescription\ntoken\naddress\nexchange address in \nSun\nSwap\n7","metadata":{"loc":{"lines":{"from":381,"to":395}}}}],["1564",{"pageContent":"Returns:\naddress\nTRC20 token address\n2.3.1.2 Modification interface\n1. createExchange\nfunction createExchange(address token) external returns (address payable);\nFunction description: create \nSun\nSwap\ntrading pair.Each TRC20 token creates only one\nexchange address.\nParameter description:\nParameter\nType\nDescription\ntoken\naddress\nTRC20 token address\nReturns:\naddress\nTrading pair address in \nSun\nSwap\n2.3.1.3 Contract Event\n1. NewExchange\nevent NewExchange(address indexed token, address indexed exchange);\nFunction description: The interface sends an event when creating trading pair with\ncreateExchange.\nParameter description:\nParameter\ntoken\nType\nDescription\naddress\naddress\nTRC20 token address\nexchange\nTRC20 token's corresponding exchange address\nin \nSun\nSwap\n2.3.2 Exchange\n8","metadata":{"loc":{"lines":{"from":397,"to":439}}}}],["1565",{"pageContent":"2.3.2.1 Query interface\n1. getTrxToTokenInputPrice\nfunction getTrxToTokenInputPrice(uint256 trx_sold) external view returns (uint256);\nFunction description: To know the amount of TRC20 token available for purchase through\nthe amount of TRX sold\nParameter description:\nParameter\nType\nDescription\ntrx_sold\nuint256\namount of TRC sold\nReturns:\nuint256\namount of TRC20 token available to purchase\n2. getTrxToTokenOutputPrice\nfunction getTrxToTokenOutputPrice(uint256 tokens_bought) external view returns (uint256);\nFunction description: To know the amount of TRX to be paid through the amount of TRC20\ntoken bought\nParameter description:\nParameter\nType\nDescription\ntokens_bought\nuint256\nAmount of TRC20 token bought\nReturns:\nuint256\nAmount of TRX to be paid\n3. getTokenToTrxInputPrice\nfunction getTokenToTrxInputPrice(uint256 tokens_sold) external view returns (uint256);\nFunction description: To know the amount of TRX available for purchase through the amount\nof TRC20 token sold\n9","metadata":{"loc":{"lines":{"from":441,"to":474}}}}],["1566",{"pageContent":"Parameter description:\nParameter\nType\nDescription\ntokens_sold\nuint256\namount of TRC20 token sold\nReturns:\nuint256\namount of TRX available for purchase\n4. getTokenToTrxOutputPrice\nfunction getTokenToTrxOutputPrice(uint256 trx_bought) external view returns (uint256);\nFunction description: To know the amount of TRC20 token to be paid through the amount of\nTRX bought\nParameter description:\nParameter\nType\nDescription\ntrx_bought\nuint256\namount of TRX bought\nReturns:\nuint256\nAmount of TRC20 token to be paid\n5. tokenAddress\nfunction tokenAddress() external view returns (address);\nFunction description: Obtain the address of TRC20 tokens available for trade within this\ntrading pair in \nSun\nSwap\nParameter description: N/A\nReturns:\naddress\naddress of TRC20 token available to be traded in this trading pair\n6. factoryAddress\nfunction factoryAddress() external view returns (address);\n10","metadata":{"loc":{"lines":{"from":476,"to":512}}}}],["1567",{"pageContent":"Function description: Access the Factory contract address that creates the \nSun\nSwap\ntrading\npairs\nParameter description: N/A\nReturns:\naddress\nfactory contract address for \nSun  Swap\n2.3.2.2 Modification interface\n1. addLiquidity\nfunction addLiquidity(uint256 min_liquidity, uint256 max_tokens, uint256 deadline) external\npayable returns (uint256);\nParameter description:\nAdd liquidity to the current exchange.Deduct callvalue and corresponding token and add\nthem into contracts.Then mint liquidity token as marker.\nApprove before adding liquidity.\nParameter description:\nParameter\nmin_liquidity\nmax_tokens\ndeadline\nType\nDescription\nuint256\nuint256\nuint256\nMinimum additional issuance of liquidity token\nMaximum additional amount of TRC20 token\nUnix timestamp; transaction will revert if exceeding this\ntime limit\nmsg.value\nuint256\nAmount of TRX deposited when adding liquidity\nReturns:\nuint256\nAdditional amount of liquidity token issued to callers\nNote:","metadata":{"loc":{"lines":{"from":514,"to":552}}}}],["1568",{"pageContent":"time limit\nmsg.value\nuint256\nAmount of TRX deposited when adding liquidity\nReturns:\nuint256\nAdditional amount of liquidity token issued to callers\nNote:\n1). msg.value parameter is the callvalue that comes with the function call (namely amount of\nTRX) and is not included on the parameter list of function signature. Other “msg.value”\nbelow are defined as the same.\n2. removeLiquidity\n11","metadata":{"loc":{"lines":{"from":552,"to":564}}}}],["1569",{"pageContent":"function removeLiquidity(uint256 amount, uint256 min_trx, uint256 min_tokens, uint256\ndeadline) external returns (uint256, uint256)\nFunction description: remove liquidity; transfer the amount of TRX and TRC20 token\nremoved to callers.\nParameter description:\nParameter\namount\nType\nDescription\nuint256\nuint256\nuint256\nuint256\nAmount of liquidity token removed\nMinimum amount of TRX removed\nMinimum amount of TRC20 token removed\nmin_trx\nmin_tokens\ndeadline\nUnix timestamp; transaction will revert if exceeding this\ntime limit\nReturns:\nuint256\nAmount of TRX removed\nuint256\nAmount of TRC20 tokens removed\n3. trxToTokenSwapInput\nfunction trxToTokenSwapInput(uint256 min_tokens, uint256 deadline) external payable\nreturns (uint256);\nFunction description: sell \nTRX\n(fixed amount) to buy token\nParameter description:\nParameter\nType\nDescription\nmin_tokens\nuint256\nMinimum amount of token needed; calculated from the\nslippage selected by the user\ndeadline\nuint256\nuint256","metadata":{"loc":{"lines":{"from":566,"to":608}}}}],["1570",{"pageContent":"Parameter description:\nParameter\nType\nDescription\nmin_tokens\nuint256\nMinimum amount of token needed; calculated from the\nslippage selected by the user\ndeadline\nuint256\nuint256\nUnix timestamp; transaction will revert if exceeding this time\nlimit\nmsg.value\nAmount of TRX the user pays for buying token\nReturns:\nuint256\nAmount of TRC20 token purchased\n12","metadata":{"loc":{"lines":{"from":608,"to":626}}}}],["1571",{"pageContent":"4. trxToTokenSwapOutput\nfunction trxToTokenSwapOutput(uint256 tokens_bought, uint256 deadline) external payable\nreturns(uint256);\nFunction description: sell TRX to buy token (fixed amount)\nParameter description:\nParameter\nType\nDescription\ntokens_bought\nuint256\nAmount of token purchased (fixed amount)\ndeadline\nuint256\nuint256\nUnix timestamp; transaction will revert if exceeding this time\nlimit\nmsg.value\nMaximum amount that can be paid to buy the fixed amount of\ntoken; calculated from the slippage\nReturns:\nuint256\nAmount of TRX sold\n5. tokenToTrxSwapOutput\nfunction tokenToTrxSwapOutput(uint256 trx_bought, uint256 max_tokens, uint256 deadline)\nexternal returns (uint256)\nFunction description: sell token to buy TRX (fixed amount)\nParameter description:\nParameter\ntrx_bought\nmax_tokens\nType\nDescription\nuint256\nuint256\nAmount of TRX purchased (fixed amount)\nMaximum amount of token that can be deducted from the user\naccount; calculated from the slippage\ndeadline\nuint256","metadata":{"loc":{"lines":{"from":628,"to":666}}}}],["1572",{"pageContent":"max_tokens\nType\nDescription\nuint256\nuint256\nAmount of TRX purchased (fixed amount)\nMaximum amount of token that can be deducted from the user\naccount; calculated from the slippage\ndeadline\nuint256\nUnix timestamp; transaction will revert if exceeding this time\nlimit\nReturns:\nuint256\nAmount of TRC20 token sold\n13","metadata":{"loc":{"lines":{"from":666,"to":681}}}}],["1573",{"pageContent":"6. tokenToTrxSwapInput\nfunction tokenToTrxSwapInput(uint256 tokens_sold, uint256 min_trx, uint256 deadline)\nexternal returns (uint256);\nFunction description: sell token to buy TRX (token is in a fixed amount)\nParameter description:\nParameter\ntokens_sold\nmin_trx\nType\nDescription\nuint256\nuint256\nAmount of token sold (fixed amount)\nMinimum amount of TRX needed, which is calculated from\nthe slippage\ndeadline\nuint256\nUnix timestamp; transaction will revert if exceeding this time\nlimit\nReturns:\nuint256\nAmount of TRX purchased\n7. trxToTokenTransferInput\nfunction trxToTokenTransferInput(uint256 min_tokens, uint256 deadline, address recipient)\nexternal payable returns(uint256);\nFunction description: sell TRX to buy token (TRX is in a fixed amount)Then, transfer the\npurchased token to the recipient address.\nParameter description:\nParameter\nType\nDescription\nmin_tokens\nuint256\nMinimum amount of token required; calculated from the\nslippage selected by the user\ndeadline\nuint256","metadata":{"loc":{"lines":{"from":683,"to":719}}}}],["1574",{"pageContent":"Parameter description:\nParameter\nType\nDescription\nmin_tokens\nuint256\nMinimum amount of token required; calculated from the\nslippage selected by the user\ndeadline\nuint256\nUnix timestamp; transaction will revert if exceeding this time\nlimit\nrecipient\naddress\nuint256\nAddress receiving token\nmsg.value\nAmount of TRX needed to buy the token\nReturns:\nuint256\nAmount of TRC20 tokens purchased\n14","metadata":{"loc":{"lines":{"from":719,"to":740}}}}],["1575",{"pageContent":"8. trxToTokenTransferOutput\nfunction trxToTokenTransferOutput(uint256 tokens_bought, uint256 deadline, address\nrecipient) external payable returns (uint256);\nFunction description: sell TRX and buy token; token is in a fixed amount. Then, transfer the\npurchased token to the recipient address.\nParameter description:\nParameter\ntokens_bought\ndeadline\nType\nDescription\nuint256\nuint256\nAmount of token purchased (fixed amount)\nUnix timestamp; transaction will revert if exceeding this time\nlimit\nrecipient\naddress\nuint256\nAddress receiving token\nmsg.value\nMaximum amount that can be paid to buy the fixed amount of\ntoken, which is calculated from slippery percentage\nReturns:\nuint256\nAmount of TRX sold\n9. tokenToTrxTransferInput\nfunction tokenToTrxTransferInput(uint256 tokens_sold, uint256 min_trx, uint256 deadline,\naddress recipient) external returns (uint256);\nFunction description: sell tokens and buy TRX; token is in a fixed amount. Then, transfer the\npurchased TRX to the recipient address.","metadata":{"loc":{"lines":{"from":742,"to":772}}}}],["1576",{"pageContent":"address recipient) external returns (uint256);\nFunction description: sell tokens and buy TRX; token is in a fixed amount. Then, transfer the\npurchased TRX to the recipient address.\nParameter description:\n类型\nmin_liquidity\nmax_tokens\ndeadline\nuint256\nuint256\nuint256\nMinimum additional issuance of liquidity token\nMaximum additional amount of TRC20 token\nUnix timestamp; transaction will revert if exceeding this time\nlimit\n15","metadata":{"loc":{"lines":{"from":772,"to":787}}}}],["1577",{"pageContent":"msg.value\nuint256\nAmount of TRX deposited when adding liquidity\nReturns:\nuint256\nAmount of TRX purchased\n10. tokenToTrxTransferOutput\nfunction tokenToTrxTransferOutput(uint256 trx_bought, uint256 max_tokens, uint256\ndeadline, address recipient) external returns (uint256);\nFunction description: sell tokens and buy TRX; TRX is in a fixed amount. Then, transfer the\npurchased TRX to the recipient address.\nParameter description:\nParameter\ntrx_bought\nmax_tokens\nType\nDescription\nuint256\nuint256\nAmount of TRX purchased (fixed amount)\nMaximum amount of tokens that can be deducted from the user\naccount; calculated from the slippage\ndeadline\nrecipient\nuint256\naddress\nUnix timestamp; transaction will revert if exceeding this time\nlimit\nAddress receiving TRX\nReturns:\nuint256\nAmount of TRC20 token sold\n11. tokenToTokenSwapOutput\nfunction tokenToTokenSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold,\nuint256 max_trx_sold, uint256 deadline, address token_addr) external returns (uint256);","metadata":{"loc":{"lines":{"from":789,"to":823}}}}],["1578",{"pageContent":"11. tokenToTokenSwapOutput\nfunction tokenToTokenSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold,\nuint256 max_trx_sold, uint256 deadline, address token_addr) external returns (uint256);\nFunction description: sell token1 and buy token2 (token2 is in a fixd amount).Since TRX\nfunctions as intermediary, both token1 and token2 need to have exchange addresses.\nParameter description:\nParameter\nType\nDescription\ntokens_bought\nuint256\nAmount of token2 purchased (fixed amount)\n16","metadata":{"loc":{"lines":{"from":823,"to":835}}}}],["1579",{"pageContent":"max_tokens_sold\nuint256\nMaximum amount of token1 that can be deducted from the user\naccount; calculated from the slippage\nmax_trx_sold\ndeadline\nuint256\nuint256\naddress\nAmount of TRX converted in the interim(suggested value: \n-\n1)\nunix timestamp; transaction will revert if exceeding this time limit\ntoken_addr\nToken2 contract address (not the exchange address, because\nit is the token1 exchange address that is called, and the\ncontract will automatically fetch the exchange2 address\naccording to token2)\nReturns:\nuint256\nAmount of token1 sold\n12. tokenToTokenSwapInput\nfunction tokenToTokenSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256\nmin_trx_bought, uint256 deadline, address token_addr) external returns (uint256);\nFunction description: sell token1 and buy token2 (token1 is in a fixd amount).\nParameter description:\nParameter\nType\nDescription\ntokens_sold\nuint256\nuint256\nAmount of token1 sold (fixed amount)\nmin_tokens_bought","metadata":{"loc":{"lines":{"from":837,"to":870}}}}],["1580",{"pageContent":"Parameter description:\nParameter\nType\nDescription\ntokens_sold\nuint256\nuint256\nAmount of token1 sold (fixed amount)\nmin_tokens_bought\nMinimum amount of token2 needed, which is calculated\nfrom the slippage\nmin_trx_bought\ndeadline\nuint256\nuint256\naddress\nAmount of TRX converted in the interim(suggested value:\n1)\nUnix timestamp; transaction will revert if exceeding this\ntime limit\ntoken_addr\nReturns:\nToken2 contract address\nuint256\nAmount of token2 purchased\n17","metadata":{"loc":{"lines":{"from":870,"to":895}}}}],["1581",{"pageContent":"13. tokenToTokenTransferInput\nfunction tokenToTokenTransferInput(uint256 tokens_sold, uint256 min_tokens_bought,\nuint256 min_trx_bought, uint256 deadline, address recipient, address token_addr) external\nreturns (uint256);\nFunction description: sell token1 and buy token2 (token1 is in a fixd amount).Then, transfer\nthe purchased token2 to the recipient's address.\nParameter description:\nParameter\nType\nDescription\ntokens_sold\nuint256\nuint256\nAmount of token1 sold (fixed amount)\nmin_tokens_bought\nMinimum amount of token2 needed, which is calculated\nfrom the slippage\nmin_trx_bought\ndeadline\nuint256\nuint256\nAmount of TRX converted in the interim(suggested value:\n1)\nunix timestamp; transaction will revert if exceeding this\ntime limit\nrecipient\naddress\naddress\nAddress receiving token2\nToken2 contract address\ntoken_addr\nReturns:\nuint256\nAmount of token2 purchased\n14. tokenToTokenTransferOutput\nfunction tokenToTokenTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold,","metadata":{"loc":{"lines":{"from":897,"to":932}}}}],["1582",{"pageContent":"Token2 contract address\ntoken_addr\nReturns:\nuint256\nAmount of token2 purchased\n14. tokenToTokenTransferOutput\nfunction tokenToTokenTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold,\nuint256 max_trx_sold, uint256 deadline, address recipient, address token_addr) external\nreturns (uint256);\nFunction description: sell token1 and buy token2 (token2 is in a fixd amount).Then, transfer\nthe purchased token2 to the recipient's address.\nParameter description:\nParameter\nType\nDescription\ntokens_bought\nuint256\nAmount of token2 purchased (fixed amount)\n18","metadata":{"loc":{"lines":{"from":932,"to":950}}}}],["1583",{"pageContent":"max_tokens_sold\nuint256\nMaximum amount of token1 that can be deducted from the\nuser account; calculated from the slippage\nmax_trx_sold\ndeadline\nuint256\nuint256\nAmount of TRX converted in the interim(suggested value:\n-1)\nunix timestamp; transaction will revert if exceeding this time\nlimit\nrecipient\naddress\naddress\nAddress receiving token2\nToken2 contract address\ntoken_addr\nReturns:\nuint256\nAmount of token1 sold\n2.3.2.3 Contract event\n1. TokenPurchase\nevent TokenPurchase(address indexed buyer, uint256 indexed trx_sold, uint256 indexed\ntokens_bought)\nFunction description: trigger the event in trxToTokenSwapInput, trxToTokenTransferInput,\ntrxToTokenSwapOutput and trxToTokenTransferOutput\nParameter description:\nParameter\nType\nDescription\nbuyer\naddress\nUser who triggers the\ntransaction\ntrx_sold\nuint256\nuint256\nAmount of TRX paid\ntokens_bought\nAmount of TRC20 tokens\npurchased\n2. TrxPurchase\nevent TrxPurchase(address indexed buyer, uint256 indexed tokens_sold, uint256 indexed\ntrx_bought)\n19","metadata":{"loc":{"lines":{"from":952,"to":997}}}}],["1584",{"pageContent":"Function description: trigger the event in tokenToTrxSwapInput, tokenToTrxTransferInput,\ntokenToTrxSwapOutput, tokenToTrxTransferOutput, tokenToTokenSwapInput,\ntokenToTokenTransferInput, tokenToTokenSwapOutput and tokenToTokenTransferOutput\nParameter description:\nParameter\nType\nDescription\nbuyer\naddress\nUser who triggers the\ntransaction\ntokens_sold\ntrx_bought\nuint256\nuint256\nAmount of TRC20 tokens\npaid\nAmount of TRX purchased\n3. AddLiquidity\nevent AddLiquidity(address indexed provider, uint256 indexed trx_amount, uint256 indexed\ntoken_amount)\nFunction description: trigger the event in addLiquidity\nParameter description:\nParameter\nType\nDescription\nprovider\naddress\nUser who triggers the transaction (the\none who provides the liquidity)\ntrx_amount\nuint256\nuint256\nAmount of TRX provided by the liquidity\ntoken_amount\nAmount of TRC20 tokens provided by the\nliquidity\n4. RemoveLiquidity\nevent RemoveLiquidity(address indexed provider, uint256 indexed trx_amount, uint256\nindexed token_amount)","metadata":{"loc":{"lines":{"from":999,"to":1038}}}}],["1585",{"pageContent":"token_amount\nAmount of TRC20 tokens provided by the\nliquidity\n4. RemoveLiquidity\nevent RemoveLiquidity(address indexed provider, uint256 indexed trx_amount, uint256\nindexed token_amount)\nFunction description: trigger the event in \nremoveLiquidity\nParameter description:\nParameter\nType\nDescription\nprovider\naddress\nUser who triggers the transaction (the one\nwho removes the liquidity)\n20","metadata":{"loc":{"lines":{"from":1038,"to":1054}}}}],["1586",{"pageContent":"trx_amount\nuint256\nuint256\nAmount of TRX removed\ntoken_amount\nAmount of TRC20 tokens removed\n21","metadata":{"loc":{"lines":{"from":1056,"to":1062}}}}],["1587",{"pageContent":"SUN.io Overview\nSun.io is a TRON-powered DeFi platform that integrates token swap, liquidity mining, stablecoin swap, and self-governance. Drawing on the strengths of various trading protocols, SUN.io is able to offer high performance, best prices, and enhanced security.\nThis document describes the technical implementation and smart contract logic of the SUN.io protocol. It helps SUN.io developers with open-source contribution while allowing third-party developers to integrate SUN.io's functionality into their own applications.\nNOTE:\nAll code starting with $ runs in a computer terminal; code starting with >>> runs in NodeJS. Readers are assumed to have some basic knowledge in TronWeb, which is used in code cited in this document.StableSwap Overview\nStableSwap protocol keywords: Automated market maker (AMM), liquidity pool and swap\nBackground","metadata":{"loc":{"lines":{"from":1,"to":7}}}}],["1588",{"pageContent":"StableSwap protocol keywords: Automated market maker (AMM), liquidity pool and swap\nBackground\nAs stablecoins evolve, the popular TRC20-USDT is no longer alone on TRON. TRON's expanding stablecoin family has welcomed USDJ, TUSD, USDC, USDD, and other new members. The growing market share and variety of stablecoins have given rise to more complex demand for swapping between different stablecoins. SUN.io's StableSwap protocol is designed to provide swap services for stablecoins or tokens of equivalent value, and it offers lower fees and slippage than competitors in the market in the following ways:\nSlippage of StableSwap can be reduced to zero when there are sufficient tokens in the liquidity pool;\nStableSwap will increase the transaction price of a token to avoid depletion of its supply in the liquidity pool.\nMechanism","metadata":{"loc":{"lines":{"from":7,"to":12}}}}],["1589",{"pageContent":"StableSwap will increase the transaction price of a token to avoid depletion of its supply in the liquidity pool.\nMechanism\nTo maintain the transaction price at 1, the most straightforward way is to use the equation of a straight line with a slope of -1 (i.e. x + y = k). The price should also be able to adjust itself to avoid liquidity depletion, which requires the constant product formula x * y = k. The StableSwap protocol incorporates both constant sum and constant product. Its model can be simply regarded as the weighted sum of a constant sum and a constant product, as described by the market making formula in the .\n \nAccording to the above formula, token swaps have an impact on the value of \nx \ni\n \n. Take 2pool (USDD, USDT) as an example: suppose the amount before the transaction is \n(\n1\n,\n2\n)\n(x \n1\n​\n ,x \n2\n​\n )\n.  When a user swaps \n1\n′\n−\n1\nx \n1\n′\n \n​\n −x \n1\n​\nUSDD for USDT, the value of \n1\nx \n1\n​\nwill change to \n1\n′\nx \n1\n′\n \n​\n \n. Substitute \n1\n′\nx \n1\n′\n \n​","metadata":{"loc":{"lines":{"from":12,"to":67}}}}],["1590",{"pageContent":"(\n1\n,\n2\n)\n(x \n1\n​\n ,x \n2\n​\n )\n.  When a user swaps \n1\n′\n−\n1\nx \n1\n′\n \n​\n −x \n1\n​\nUSDD for USDT, the value of \n1\nx \n1\n​\nwill change to \n1\n′\nx \n1\n′\n \n​\n \n. Substitute \n1\n′\nx \n1\n′\n \n​\ninto the above equation and you will get the new \n2\n′\nx \n2\n′\n \n​\n \n, and \n2\n−\n2\n′\nx \n2\n​\n −x \n2\n′\n \n​\nrepresents the amount of USDT the user will obtain. The values of both \nA\n and \nD\n remain unchanged during the calculation. \nA\n is a constant, and the value of \nD\n can be found with a given \nx \ni\n​\nusing Newton's Method.\n \nLet \n=\n∑\n=\n1\n,\n=\n0\n0\n∏\n=\n1\nS=∑ \ni=1\nn\n​\n x \ni\n​\n ,D \np\n​\n = \nn \nn\n ∏ \ni=1\nn\n​\n x \ni\n​\n \nD \n0\n​\n D \n0\nn\n​\n \n​\n \n, Substitute these expressions into the above equation and you can get:\nThe corresponding contract code is shown below:\ndef get_D(xp: uint256[N_COINS], amp: uint256) -> uint256:\n    S: uint256 = 0\n    for _x in xp:\n        S += _x\n    if S == 0:\n        return 0\n​\n    Dprev: uint256 = 0\n    D: uint256 = S\n    Ann: uint256 = amp * N_COINS\n    for _i in range(255):","metadata":{"loc":{"lines":{"from":67,"to":205}}}}],["1591",{"pageContent":"S: uint256 = 0\n    for _x in xp:\n        S += _x\n    if S == 0:\n        return 0\n​\n    Dprev: uint256 = 0\n    D: uint256 = S\n    Ann: uint256 = amp * N_COINS\n    for _i in range(255):\n        D_P: uint256 = D\n        for _x in xp:\n            D_P = D_P * D / (_x * N_COINS)       Dprev = D\n        D = (Ann * S + D_P * N_COINS) * D / ((Ann - 1) * D + (N_COINS + 1) * D_P)\n        if D > Dprev:\n            if D - Dprev <= 1:\n                break\n        else:\n            if Dprev - D <= 1:\n                break\n    return D\n​\nLiquidity Pool\nThe StableSwap contract of SUN.io allows users to swap between stablecoins and add or remove liquidity. Its USDD-USDT liquidity pool, USDJ-TUSD-USDT liquidity pool, and USDC liquidity pool are now available on the TRON MainNet.\nUSDD-USDT pool\nMainNet contract address: TNTfaTpkdd4AQDeqr8SGG7tgdkdjdhbP5c\nUSDJ-TUSD-USDT pool\nMainNet contract address: TKcEU8ekq2ZoFzLSGFYCUY6aocJBX9X31b\nUSDC pool","metadata":{"loc":{"lines":{"from":205,"to":233}}}}],["1592",{"pageContent":"USDD-USDT pool\nMainNet contract address: TNTfaTpkdd4AQDeqr8SGG7tgdkdjdhbP5c\nUSDJ-TUSD-USDT pool\nMainNet contract address: TKcEU8ekq2ZoFzLSGFYCUY6aocJBX9X31b\nUSDC pool\nMainNet contract address: TNTfaTpkdd4AQDeqr8SGG7tgdkdjdhbP5c\nInteract with Contract\nWe utilize TronWeb to facilitate interaction with on-chain contracts. First, you need to initialize the TronWeb instance.\nconst TronWeb = require('tronweb')\nconst privateKey = process.env.PRIVATE_KEY\nconst apiKey = process.env.API_KEY\n​\nvar tronWeb = new TronWeb({\n\tfullHost: \"https://api.trongrid.io\",\n\theaders: { \"TRON-PRO-API-KEY\": apiKey },\n\tprivateKey: privateKey,\n      })\nGet Liquidity Pool's Information\nGet a liquidity's token address\nFunction: coins(uint256)\nParameter: The i-th token of the stablecoin pool\n>>> let contract = await tronWeb.getContract('TNTfaTpkdd4AQDeqr8SGG7tgdkdjdhbP5c')\n>>> await contract.methods.coins(0).call() \nTR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t \nGet a liquidity pool's size\nFunction: balances(uint256)","metadata":{"loc":{"lines":{"from":233,"to":258}}}}],["1593",{"pageContent":">>> await contract.methods.coins(0).call() \nTR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t \nGet a liquidity pool's size\nFunction: balances(uint256)\nParameter: The i-th token of the stablecoin pool\n>>> let contract = await tronWeb.getContract('TNTfaTpkdd4AQDeqr8SGG7tgdkdjdhbP5c')\n>>> await contract.methods.balances(0).call()\n1000000000000\nGet a liquidity pool's LP token address\nFunction: lp_token()\nParameter: No input parameters\n>>> let contract = await tronWeb.getContract('TNTfaTpkdd4AQDeqr8SGG7tgdkdjdhbP5c')\n>>> await contract.methods.lp_token().call() \nTD3et9gS2pYz46ZC2mkCfYcKQGNwrnBLef \nGet A's value\nFunction: A()\nParameter: No input parameters\n>>> let contract = await tronWeb.getContract('TNTfaTpkdd4AQDeqr8SGG7tgdkdjdhbP5c')\n>>> await contract.methods.A().call()\n300\nExecute Transaction\nGet the amount of Token to swap for\nFunction: get_dy(uint128,uint128,uint256)","metadata":{"loc":{"lines":{"from":258,"to":280}}}}],["1594",{"pageContent":">>> await contract.methods.A().call()\n300\nExecute Transaction\nGet the amount of Token to swap for\nFunction: get_dy(uint128,uint128,uint256)\nParameters: In-pool sequence number of the token to be sold, in-pool sequence number of the token to be bought, amount of the token to be sold\n>>> let contract = await tronWeb.getContract('TNTfaTpkdd4AQDeqr8SGG7tgdkdjdhbP5c')\n>>> await contract.methods.get_dy(0, 1, 100).send() \n103\nSwap\nFunction: exchange(uint128,uint128,uint256,uint256)\nParameters: In-pool sequence number of the token to be sold, in-pool sequence number of the token to be bought, amount of the token to be sold, minimum amount expected to get\n>>> let contract = await tronWeb.getContract('TNTfaTpkdd4AQDeqr8SGG7tgdkdjdhbP5c')\n>>> await contract.methods.exchange(0, 1, 100, 99).send() \nAdd & Remove Liquidity\nAdd liquidity\nFunction: add_liquidity(uint256[n],uint256)\nParameters: Amount of all tokens to add, minimum LP token amount expected to get","metadata":{"loc":{"lines":{"from":280,"to":297}}}}],["1595",{"pageContent":"Add & Remove Liquidity\nAdd liquidity\nFunction: add_liquidity(uint256[n],uint256)\nParameters: Amount of all tokens to add, minimum LP token amount expected to get\n>>> let contract = await tronWeb.getContract('TNTfaTpkdd4AQDeqr8SGG7tgdkdjdhbP5c')\n>>> await contract.methods.add_liquidity(100, 100, 299).send() \nRemove liquidity\nFunction: remove_liquidity(uint256, uint256[n])\nParameters: LP token amount to remove, minimum token amount expected to get\n>>> let contract = await tronWeb.getContract('TNTfaTpkdd4AQDeqr8SGG7tgdkdjdhbP5c')\n>>> await contract.methods.remove_liquidity(299.9, 100, 100).send()","metadata":{"loc":{"lines":{"from":297,"to":307}}}}],["1596",{"pageContent":"Sunswap is the most popular option to swap tokens on TRON, such as TRX to USDD, and other token pair such as the following with their respective liquidity:\n\nName\t\nLiquidity\nVolume (24hr)\nVolume (7d)\nFees (24hrs)\n\nUSDT-TRX\n$55.5176M\t$1.8041M\t$20.2091M\t$5,412.5376\t\n\nUSDD-TRX\n$48.749M\t$595,373.6456\t$3.1323M\t$1,786.1209\t\n\nUSDJ-TRX\n$33.6914M\t$210,607.0339\t$1.1549M\t$631.8211\t\n\nJST-TRX\n$26.9204M\t$362,359.9759\t$3.7267M\t$1,087.0799\t\n\nSUN-TRX\n$14.3345M\t$39,937.7828\t$522,138.8998\t$119.8133\t\n\nNFT-TRX\n$14.2773M\t$74,066.9529\t$262,082.3206\t$222.2008\t\n\nWBTT-TRX\n$10.0704M\t$0.9712\t$438.1292\t$0.0029\t\n\nWIN-TRX\n$7.1483M\t$41,058.78\t$341,412.1978\t$123.1763\t\n\nMOTB-TRX\n$7.0192M\t$27,767.5375\t$129,448.3321\t$83.3026\t\n\nBTT-TRX\n$6.9838M\t$118,088.5779\t$350,089.7558\t$354.2657\t\n\nTUSD-TRX\n$5.9969M\t$75,985.9226\t$425,843.7908\t$227.9577\t\n\nUSDC-TRX\n$3.5493M\t$50,670.7778\t$1.1358M\t$152.0123\t\n\nFIST-TRX\n$2.5971M\t$0\t$0\t$0\t\n\nOSK-TRX\n$2.1579M\t$0\t$6,669.645\t$0\t\n\nMCS-P-TRX\n$2.0037M\t$1,992.3521\t$6,457.9021\t$5.977","metadata":{"loc":{"lines":{"from":309,"to":360}}}}],["1597",{"pageContent":"USDC-TRX\n$3.5493M\t$50,670.7778\t$1.1358M\t$152.0123\t\n\nFIST-TRX\n$2.5971M\t$0\t$0\t$0\t\n\nOSK-TRX\n$2.1579M\t$0\t$6,669.645\t$0\t\n\nMCS-P-TRX\n$2.0037M\t$1,992.3521\t$6,457.9021\t$5.977\t\n\nsTRX-TRX\n$1.7722M\t$1,036.9318\t$1,790.7977\t$3.1107\t\n\nBTC-TRX\n$1.2546M\t$28,869.4971\t$276,864.3248\t$86.6084\t\n\nMST-TRX\n$987,788.5053\t$618.1326\t$5,711.7814\t$1.8543\t\n\nSTAR-TRX\n$986,849.994\t$940.3494\t$8,807.9257\t$2.821\t\n\nYLC-TRX\n$958,943.6868\t$4,219.287\t$46,106.3246\t$12.6578\t\n\nTX-TRX\n$937,267.2197\t$0\t$8,925.0385\t$0\t\n\nBK-TRX\n$901,784.3595\t$0\t$0\t$0\t\n\nRON-TRX\n$813,261.0538\t$169.0648\t$1,488.1285\t$0.5071\t\n\nFT-TRX\n$706,332.2841\t$59.7974\t$2,339.383\t$0.1793\t\n\nAPCH-TRX\n$611,244.3743\t$5,768.9586\t$90,415.7751\t$17.3068\t\n\nBINLI-TRX\n$562,402.5526\t$0\t$552.0752\t$0\t\n\nSUNOLD-TRX\n$496,839.1666\t$31.4293\t$352.9477\t$0.0942\t\n\nFAMP-TRX\n$489,821.5384\t$0\t$795.3996\t$0\t\n\nPGNLZ-TRX\n$425,324.0016\t$56.9945\t$59.2967\t$0.1709\t\n\nFS-TRX\n$418,857.5073\t$501.0068\t$4,854.9578\t$1.503","metadata":{"loc":{"lines":{"from":360,"to":415}}}}],["1598",{"pageContent":"SUNOLD-TRX\n$496,839.1666\t$31.4293\t$352.9477\t$0.0942\t\n\nFAMP-TRX\n$489,821.5384\t$0\t$795.3996\t$0\t\n\nPGNLZ-TRX\n$425,324.0016\t$56.9945\t$59.2967\t$0.1709\t\n\nFS-TRX\n$418,857.5073\t$501.0068\t$4,854.9578\t$1.503\t\n\nSocialSwap and TransitSwap are two other DEXes that allows you to swap tokens on TRON.\n\nHere's the link to sunswap dapp: https://sunswap.com/?lang=en-US#/home","metadata":{"loc":{"lines":{"from":415,"to":429}}}}],["1599",{"pageContent":"SunSwap Overview\nSunSwap protocol keywords: Automated market maker (AMM), liquidity pool and swap\nBackground\nSunSwap AMM (automated market maker) adopts the most used trading model in the world of DeFi today. Unlike the order book, AMMs utilize the constant product model to calculate tokens in the pool, where trades are automatically executed, and the liquidity supply of the trading pair is ensured.\nAnyone can deposit a token into a pool in exchange for the pool's dedicated token (LP token) of an equivalent value, and thus become a liquidity provider (LP) for the pool.  The amount of the LP token received divided by the pool's total LP reserves represents the liquidity provider's share of assets in the pool, and the liquidity provider can redeem the above assets at any time.  \nMechanism\nSwapping is based on the constant product formula, with x and y representing the amount of two different tokens (assumed to be token X and token Y), then:","metadata":{"loc":{"lines":{"from":431,"to":437}}}}],["1600",{"pageContent":"Mechanism\nSwapping is based on the constant product formula, with x and y representing the amount of two different tokens (assumed to be token X and token Y), then:\nIf we want to swap X for Y from the liquidity pool, and assume that the amount of X entered is Δx and the amount of Y obtained is Δy, provided that the pool has sufficient funds, then:This means that the product of the two tokens in the liquidity pool remains unchanged after the transaction. In this case, if the volume of a transaction only accounts for a minimal fraction of the liquidity pool's total volume, then the transaction price will approximate the ratio of the two tokens' amount:\nHowever, the price of y in the liquidity pool is \ny\nx\n​\nbefore the swap. This results in a slippage of y's price:","metadata":{"loc":{"lines":{"from":437,"to":444}}}}],["1601",{"pageContent":"However, the price of y in the liquidity pool is \ny\nx\n​\nbefore the swap. This results in a slippage of y's price:\nThe larger the transaction volume Δx, the greater the slippage and the more the transaction price deviates from the actual price; likewise, more funds and greater depth in the pool can reduce the slippage and thus lower the losses for users. In actual SunSwap transactions, a 0.3% fee will be deducted before the calculation.\nExample: Suppose the liquidity pool has 100 X and 1 Y. If a user wants to trade 20 X, then the actual amount of X traded will be 19.94 X (net of a 0.3% fee), according to the formula x ∗ y = k:\nLiquidity Pool\nThe SunSwap contract of SUN.io allows users to swap between regular tokens and add and remove liquidity. Its V1 and V2 contracts are now running on the TRON MainNet.\nV1\nFactory contract address: TXk8rQSAvPvBBNtqSoY6nCfsXWCSSpTVQF\nV2\nFactory contract address: TKWJdrQkqHisa1X8HUdHEfREvTzw4pMAaY","metadata":{"loc":{"lines":{"from":444,"to":456}}}}],["1602",{"pageContent":"V1\nFactory contract address: TXk8rQSAvPvBBNtqSoY6nCfsXWCSSpTVQF\nV2\nFactory contract address: TKWJdrQkqHisa1X8HUdHEfREvTzw4pMAaY\nRouter contract address: TKzxdSv2FZKQrEqkKVgp5DcwEXBEKMg2Ax\nInteract with Contract\nWe utilize TronWeb to facilitate interaction with on-chain contracts. First, you need to initialize the TronWeb instance.\nconst TronWeb = require('tronweb')\nconst privateKey = process.env.PRIVATE_KEY\nconst apiKey = process.env.API_KEY\n​\nvar tronWeb = new TronWeb({\n\tfullHost: \"https://api.trongrid.io\",\n\theaders: { \"TRON-PRO-API-KEY\": apiKey },\n\tprivateKey: privateKey,\n      })\nGet Liquidity Pool's Information\nGet a liquidity pool's address in V1\nFunction: getExchange(address)\nParameter: Token address\n>>> let contract = await tronWeb.getContract('TXk8rQSAvPvBBNtqSoY6nCfsXWCSSpTVQF')\n>>> await contract.methods.getExchange('TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t').call() \n0x4cAD2750821493b093133B7bf10568bAEc000971\nGet a liquidity pool's address in V2\nFunction: getPair(address, address)","metadata":{"loc":{"lines":{"from":456,"to":480}}}}],["1603",{"pageContent":"0x4cAD2750821493b093133B7bf10568bAEc000971\nGet a liquidity pool's address in V2\nFunction: getPair(address, address)\nParameter: token0's address, token1's address\n>>> let contract = await tronWeb.getContract('TKWJdrQkqHisa1X8HUdHEfREvTzw4pMAaY')\n>>> await contract.methods.getPair('TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t', 'TNUC9Qb1rRpS5CbWLmNMxXBjyFoydXjWFR') \n0x4cAD2750821493b093133B7bf10568bAEc000971\nExecute Transactions\nSell TRX to buy Token in V1\nFunction: trxToTokenTransferInput(uint256, uint256, address)\nParameters: minimum Token amount expected to buy, time window, recipient's address\nlet contract = await tronWeb.getContract('TQn9Y2khEsLJW1ChVWFMSMeRDow5KcbLSE')\n>>> await contract.methods.trxToTokenTransferInput(100, 1662825600, 'TQn9Y2khEsLJW1ChVWFMSMeRDow5KcbLSE')\nSell Token to buy TRX in V1\nFunction: tokenToTrxTransferInput(uint256, uint256, uint256, address)\nParameters: Amount of Token to sell, minimum TRX amount expected to buy, time window, recipient's address","metadata":{"loc":{"lines":{"from":480,"to":495}}}}],["1604",{"pageContent":"Function: tokenToTrxTransferInput(uint256, uint256, uint256, address)\nParameters: Amount of Token to sell, minimum TRX amount expected to buy, time window, recipient's address\n>>> let contract = await tronWeb.getContract('TQn9Y2khEsLJW1ChVWFMSMeRDow5KcbLSE')\n>>> await contract.methods.tokenToTrxTransferInput(100, 1500, 1662825600, 'TQn9Y2khEsLJW1ChVWFMSMeRDow5KcbLSE') \nSell Token to buy Token in V1\nFunction: tokenToTokenSwapInput( uint256, uint256, uint256, uint256, address)\nParameters: Amount of Token to sell, minimum Token amount expected to buy, minimum Token amount expected to buy, time window, recipient's address\n>>> let contract = await tronWeb.getContract('TQn9Y2khEsLJW1ChVWFMSMeRDow5KcbLSE')\n>>> await contract.methods.tokenToTokenSwapInput(100, 100， 1500，1662825600，'TQn9Y2khEsLJW1ChVWFMSMeRDow5KcbLSE') \nSell Token to buy Token in V2\nFunction: swapExactTokensForTokens( uint, uint, address[], address, uint)","metadata":{"loc":{"lines":{"from":495,"to":505}}}}],["1605",{"pageContent":"Sell Token to buy Token in V2\nFunction: swapExactTokensForTokens( uint, uint, address[], address, uint)\nParameters: Amount of Token to sell, minimum Token amount expected to buy, swap route, recipient's address, time window\n>>> let contract = await tronWeb.getContract('TKzxdSv2FZKQrEqkKVgp5DcwEXBEKMg2Ax')\n>>> await contract.methods.swapExactTokensForTokens(1000000000000000000,1000000,['TXYZopYRdj2D9XRtbG411XZZ3kM5VkAeBf','TF17BgPaZYbz8oxbjhriubPDsA7ArKoLX3'],'TF5MekHgFz6neU7zTpX4h2tha3mijDUj3z',1662825600)\nSell TRX to buy Token in V2\nFunction: swapExactETHForTokens(uint, address[], address, uint)\nParameters: Token amount expected to buy, swap route, recipient's address, time window\n>>> let contract = await tronWeb.getContract('TKzxdSv2FZKQrEqkKVgp5DcwEXBEKMg2Ax')\n>>> await contract.methods.swapExactETHForTokens(100000000,1,['TYsbWxNnyTgsZaTFaue9hqpxkU3Fkco94a','TXYZopYRdj2D9XRtbG411XZZ3kM5VkAeBf'],'TF5MekHgFz6neU7zTpX4h2tha5miPDUj3z',1662825600)\nSell Token to buy TRX in V2","metadata":{"loc":{"lines":{"from":505,"to":515}}}}],["1606",{"pageContent":"Sell Token to buy TRX in V2\nFunction: swapExactTokensForETH(uint, uint, address[] , address, uint)\nParameters: Amount of Token to sell, minimum TRX amount expected to buy, swap route, buyer's address, time window\n>>> let contract = await tronWeb.getContract('TKzxdSv2FZKQrEqkKVgp5DcwEXBEKMg2Ax')\n>>> await contract.methods.swapExactTokensForETH(1000000,1000000,['TXYZopYRdj2D9XRtbG411XZZ3kM5VkAeBf','TYsbWxNnyTgsZaTFaue9hqpxkU3Fkco94a'],'TF5MekHgFz6neU7zTpX4h2tha5miPDUj3z',1662825600)\nAdd & Remove Liquidity\nAdd liquidity in V1\nFunction: addLiquidity(uint256, uint256, uint256)\nParameters: Minimum liquidity amount expected to get, maximum liquidity amount to add, time window\n>>> let contract = await tronWeb.getContract('TQn9Y2khEsLJW1ChVWFMSMeRDow5KcbLSE')\n>>> await contract.methods.addLiquidity(100， 100， 1662825600) \nRemove liquidity in V1\nFunction: removeLiquidity(uint256, uint256,uint256, uint256)","metadata":{"loc":{"lines":{"from":515,"to":527}}}}],["1607",{"pageContent":">>> await contract.methods.addLiquidity(100， 100， 1662825600) \nRemove liquidity in V1\nFunction: removeLiquidity(uint256, uint256,uint256, uint256)\nParameters: Liquidity amount to remove, minimum TRX amount expected to get, minimum token amount expected to get, time window\n>>> let contract = await tronWeb.getContract('TQn9Y2khEsLJW1ChVWFMSMeRDow5KcbLSE')\n>>> await contract.methods.removeLiquidity(100, 100, 100, 1662825600) \nAdd liquidity in V2\nFunction: addLiquidity(address,address,uint,uint,uint,uint,address,uint)\nParameters: tokenA's address, tokenB's address, tokenA's amount expected to add, tokenB's amount expected to add, minimum receiving amount of the tokenA added, minimum receiving amount of the tokenB added, target liquidity pool's address, time window\n>>> let contract = await tronWeb.getContract('TKzxdSv2FZKQrEqkKVgp5DcwEXBEKMg2Ax')","metadata":{"loc":{"lines":{"from":527,"to":536}}}}],["1608",{"pageContent":">>> let contract = await tronWeb.getContract('TKzxdSv2FZKQrEqkKVgp5DcwEXBEKMg2Ax')\n>>> await contract.methods.addLiquidity('TXYZopYRdj2D9XRtbG411XZZ3kM5VkAeBf','TF17BgPaZYbz8oxbjhriubPDsA7ArKoLX3',100000000,27661108481018349141,5000000,200000000000000000000,TF5MekHgFz6neU7zTpX4h2tha5miPDUj3z,1662825600)\nRemove liquidity in V2\nName: removeLiquidity(address,address,uint,uint,uint,address,uint)\nParameters: tokenA's address, tokenB's address, amount of liquidity to remove, minimum tokenA amount expected to get, minimum tokenB amount expected to get, token's receiving address, time window\n>>> let contract = await tronWeb.getContract('TKzxdSv2FZKQrEqkKVgp5DcwEXBEKMg2Ax')\n>>> await contract.methods.removeLiquidity('TXYZopYRdj2D9XRtbG411XZZ3kM5VkAeBf','TF17BgPaZYbz8oxbjhriubPDsA7ArKoLX3',100000000,1,1,TF5MekHgFz6neU7zTpX4h2tha5miPDUj3z,1962825600)SunSwap V3 Overview\nKeywords of SunSwap V3: market making model, liquidity pool, and swap\nBackground","metadata":{"loc":{"lines":{"from":536,"to":544}}}}],["1609",{"pageContent":"Keywords of SunSwap V3: market making model, liquidity pool, and swap\nBackground\nWhile SunSwap V2 achieved remarkable success in decentralized trading, it also has its limitations. One of its key drawbacks is the underutilization of liquidity. To address this issue, SunSwap V3 introduces a concept called concentrated capital efficiency. This mechanism empowers liquidity providers to concentrate their funds within a specific price range, thereby allowing them to provide liquidity more effectively and earn higher rewards within a price range featuring high price volatility.","metadata":{"loc":{"lines":{"from":544,"to":546}}}}],["1610",{"pageContent":"Developed by the SUN.io team, SunSwap V3 was launched in June 2023. It introduces a new trading model called \"concentrated liquidity\". With this new model, liquidity providers can allocate their funds to a specific price range rather than a fixed trading pair, which improves the efficiency of liquidity and offers better prices for traders. SunSwap V3 has also introduced flexible fee tiers, allowing liquidity providers to set different fee rates for different price ranges accordingly, which generates higher returns for liquidity providers and incentivizes them to provide more liquidity.\nMechanism\nThe swap logic can be inferred from the constant product formula. Here, x and y represent the respective reserve balance of the tokens involved (token0 and token1): \nL stands for liquidity, and the liquidity of a pool can be calculated from the reserve balance of the tokens involved. Based on the formula, the product of x and y (denoted as k) remains constant.","metadata":{"loc":{"lines":{"from":547,"to":550}}}}],["1611",{"pageContent":"L stands for liquidity, and the liquidity of a pool can be calculated from the reserve balance of the tokens involved. Based on the formula, the product of x and y (denoted as k) remains constant. \nTherefore, we can measure the liquidity of a pool by \nxy\n​\n L is actually the geometric mean of x and y. \nDividing y by x, we can get the prices of token0 and token1. Since the prices of the two tokens in the pool are reciprocal to each other, we'll only use one of them when doing the calculation (SunSwap V3 uses y/x).\n L also indicates the relation between the change of the output amount and the change of p: \np\n​\n \n​\n​Proof：\n \n​\n=\n0\n0\n=\n1\n1\nxy\n​\n = \nx \n0\n​\n y \n0\n​\n \n​\n = \nx \n1\n​\n y \n1\n​\n \n​\n \n，, thus:Contract Addresses\nFactory\nContract address on the Mainnet: TThJt8zaJzJMhCEScH7zWKnp5buVZqys9x\nContract address on Nile Testnet: TUTGcsGDRScK1gsDPMELV2QZxeESWb1Gac\nSwapRouter\nContract address on the Mainnet: TQAvWQpT9H916GckwWDJNhYZvQMkuRL7PN","metadata":{"loc":{"lines":{"from":550,"to":596}}}}],["1612",{"pageContent":"Contract address on Nile Testnet: TUTGcsGDRScK1gsDPMELV2QZxeESWb1Gac\nSwapRouter\nContract address on the Mainnet: TQAvWQpT9H916GckwWDJNhYZvQMkuRL7PN \nContract address on Nile Testnet: TFkswj6rUfK3cQtFGzungCkNXxD2UCpEVD NonfungiblePositionManager\nContract address on the Mainnet: TLSWrv7eC1AZCXkRjpqMZUmvgd99cj7pPF\nContract address on Nile Testnet: TPQzqHbCzQfoVdAV6bLwGDos8Lk2UjXz2R\nInteract with Contract\nWe utilize TronWeb to facilitate interaction with on-chain contracts. First, you need to initialize the TronWeb instance.\nconst TronWeb = require('tronweb')\nconst privateKey = process.env.PRIVATE_KEY\nconst apiKey = process.env.API_KEY\n​\nvar tronWeb = new TronWeb({\n\tfullHost: \"https://api.trongrid.io\",\n\theaders: { \"TRON-PRO-API-KEY\": apiKey },\n\tprivateKey: privateKey,\n      })\nMake queries\nQuery the address of the liquidity pool\nName：getPool(address,address,uint24)\nContract called: Factory\nParameters: address of token0, address of token1, and fee rate \nReturned value: address of pool","metadata":{"loc":{"lines":{"from":596,"to":618}}}}],["1613",{"pageContent":"Query the address of the liquidity pool\nName：getPool(address,address,uint24)\nContract called: Factory\nParameters: address of token0, address of token1, and fee rate \nReturned value: address of pool\n>>> let contract = await tronWeb.getContract('TThJt8zaJzJMhCEScH7zWKnp5buVZqys9x')\n>>> await contract.methods.getPool('TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t',‘TPYmHEhy5n8TCEfYGqW2rPxsghSfzghPDn’,100).call()\n0x839538A1B5E9B57C639035A453E07C9A4309F9D9\nQuery the details of pool\nName: slot0()\nContract called: the pool contract (accessible via factory)  \nParameters: N/A\nReturned values: 1. current price (which equals sqrtPriceX96 squared divided by 2 to the power of 192); 2. current tick;  3. the latest index of the observation array; 4. maximum cardinality of the observations currently stored; 5. maximum cardinality that is triggered in the observation and is to be stored next; 6. percentage of the current protocol fee in the swap fee at the time of withdrawal; 7. whether the pool is locked","metadata":{"loc":{"lines":{"from":618,"to":630}}}}],["1614",{"pageContent":">>> let contract = await tronWeb.getContract('TSUUVjysXV8YqHytSNjfkNXnnB49QDvZpx')\n>>> await contract.methods.slot0().call()\n[\n  sqrtPriceX96: BigNumber { _hex: '0x4714a6b4d8e3d1ab6bcfbe0c', _isBigNumber: true },\n  tick: -25629,\n  observationIndex: 0,\n  observationCardinality: 1,\n  observationCardinalityNext: 1,\n  feeProtocol: 0,\n  unlocked: true\n]\n​\nQuery a user’s tokenId\n​\nName: tokenOfOwnerByIndex(address,uint256) \nContract called: NonfungiblePositionManager\nParameters: user's address, user's nth proof of liquidity\nReturned value: tokenId\n>>> let contract = await tronWeb.getContract('TLSWrv7eC1AZCXkRjpqMZUmvgd99cj7pPF')\n>>> await contract.methods.tokenOfOwnerByIndex('TF5MekHgFz6neU7zTpX4h2tha5miPDUj3z',0).call()\n1\nQuery the details of a user’s liquidity\nName: positions(uint256)\nContract called: NonfungiblePositionManager \nParameter: tokenId","metadata":{"loc":{"lines":{"from":631,"to":655}}}}],["1615",{"pageContent":"1\nQuery the details of a user’s liquidity\nName: positions(uint256)\nContract called: NonfungiblePositionManager \nParameter: tokenId\nReturned values: 1. nonce; 2. address authorized by the tokenId; 3. address of token0 in the pool; 4. address of token1 in the pool; 5. fee rate in the pool; 6. lowest price for the position selected; 7. highest price for the position selected; 8. liquidity; 9. 10. fee growth in all positions at the time the latest change was made to a single position; 11. 12. amount of uncollected tokens owed by this position as of the previous calculation\n>>> let contract = await tronWeb.getContract('TLSWrv7eC1AZCXkRjpqMZUmvgd99cj7pPF')\n>>> await contract.methods.positions (1).call()\n[\n  nonce: 0\n  operator: T9yD14Nj9j7xAB4dbGeiX9h8unkKHxuWwb\n  token0: TF9io9LGyjuK3uTpr73pAaQ5m9scxd9xvr\n  token1: TK8E3sFhBt3EB6gTT6d6co8RMB6DFUnNwE\n  fee: 3000\n  tickLower: -283380\n  tickUpper: -269520\n  liquidity: 1390641886550414128\n  feeGrowthInside0LastX128: 0","metadata":{"loc":{"lines":{"from":655,"to":672}}}}],["1616",{"pageContent":"token1: TK8E3sFhBt3EB6gTT6d6co8RMB6DFUnNwE\n  fee: 3000\n  tickLower: -283380\n  tickUpper: -269520\n  liquidity: 1390641886550414128\n  feeGrowthInside0LastX128: 0\n  feeGrowthInside1LastX128: 540564213145032425660083902\n  tokensOwed0: 0\n  tokensOwed1: 0\n]\nExecute transactions\nMake a transaction\nName: exactInput(ExactInputParams) \nContract called: SwapRouter\nParameters: [encode of the path, user's address, deadline]\n>>> let contract = await tronWeb.getContract('TQAvWQpT9H916GckwWDJNhYZvQMkuRL7PN')\n>>> await contract.methods.exactInput(['0xe518c608a37e2a262050e10be0c9d03c7a0877f3000bb843c42f702b0a11565c46e34022aab677d7bd8ae3','TF5MekHgFz6neU7zTpX4h2tha5miPDUj3z',1662825600])\nAdd liquidity\nName: increaseLiquidity(IncreaseLiquidityParams) \nContract called: NonfungiblePositionManager\nParameters: [tokenId, amount of token0 to be added, amount of token1 to be added, minimum amount of token0 to be added, minimum amount of token1 to be added, deadline]","metadata":{"loc":{"lines":{"from":672,"to":692}}}}],["1617",{"pageContent":"Parameters: [tokenId, amount of token0 to be added, amount of token1 to be added, minimum amount of token0 to be added, minimum amount of token1 to be added, deadline]\n>>> let contract = await tronWeb.getContract('TLSWrv7eC1AZCXkRjpqMZUmvgd99cj7pPF')\n>>> await contract.methods.increaseLiquidity(1,'1000000000000000000','1000000000000000000'，1，1，1662825600)\nReduce liquidity\nName: decreaseLiquidity(DecreaseLiquidityParams) \nContract called: NonfungiblePositionManager\nParameters: [tokenId, liquidity to be removed, minimum amount of token0 to be obtained, minimum amount of token1 to be obtained, deadline]\n>>> let contract = await tronWeb.getContract('TLSWrv7eC1AZCXkRjpqMZUmvgd99cj7pPF')\n>>> await contract.methods.decreaseLiquidity(1,'1390641886550414128',1，1，1662825600)\nCollect rewards\nName: collect(CollectParams)\nContract called: NonfungiblePositionManager\nParameters: [tokenId, address to receive rewards, maximum amount of token0 reward, maximum amount of token1 reward]","metadata":{"loc":{"lines":{"from":692,"to":704}}}}],["1618",{"pageContent":"Name: collect(CollectParams)\nContract called: NonfungiblePositionManager\nParameters: [tokenId, address to receive rewards, maximum amount of token0 reward, maximum amount of token1 reward]\n>>> let contract = await tronWeb.getContract('TLSWrv7eC1AZCXkRjpqMZUmvgd99cj7pPF')\n>>> await contract.methods.collect(1,'TF5MekHgFz6neU7zTpX4h2tha5miPDUj3z',‘100000000000000000000000000’，‘100000000000000000000000000’)Smart Router\nA tool that provides better trading strategy\nBackground\nTo help users boost returns, SUN.io has rolled out the Smart Router feature, which plays an essential role in the following aspects: \nExecuting trades at the best price: The Smart Router finds the best price for traders by choosing the optimal path to execute trades based on the price difference across markets. This means users get more favorable trade prices at execution to maximize returns.","metadata":{"loc":{"lines":{"from":704,"to":712}}}}],["1619",{"pageContent":"Enhancing liquidity: The Smart Router utilizes the liquidity of different markets to provide better depth and liquidity for traders. By executing trades across multiple liquidity pools, it reduces slippage and market shocks, thus offering an enhanced trading experience. \nImproving liquidity utilization: The Smart Router helps improve the utilization of liquidity. By channeling liquidity from highly liquid markets to less liquid ones, it helps improve the overall utilization of liquidity and enables the completion of more trades. \nMechanism\nHow the Smart Router works","metadata":{"loc":{"lines":{"from":713,"to":716}}}}],["1620",{"pageContent":"Mechanism\nHow the Smart Router works\nSUN.io's Smart Router algorithm service retrieves data from SunSwap V1, SunSwap V2, SunSwap V3, PSM, and SunCurve by utilizing the contract image built on the server. It sorts trade paths by the amount of the token users can obtain and displays the top three as options for users. The contract of the Smart Router is a nested contract through which the liquidity pools on SunSwap V1, SunSwap V2, SunSwap V3, PSM, and SunCurve can be called to complete trades.\nSmart Router Contract\nContract address on Mainnet: TFVisXFaijZfeyeSjCEVkHfex7HGdTxzF9\nContract address on Nile testnet: TB6xBCixqRPUSKiXb45ky1GhChFJ7qrfFj\nSmart Router Algorithm Service\nSmart Router algorithm service URL: ​\nContract Interaction\nWe utilize TronWeb to facilitate interaction with on-chain contracts. First, you need to initialize the TronWeb instance.\nconst TronWeb = require('tronweb')\nconst privateKey = process.env.PRIVATE_KEY\nconst apiKey = process.env.API_KEY\n​","metadata":{"loc":{"lines":{"from":716,"to":729}}}}],["1621",{"pageContent":"const TronWeb = require('tronweb')\nconst privateKey = process.env.PRIVATE_KEY\nconst apiKey = process.env.API_KEY\n​\nvar tronWeb = new TronWeb({\n\tfullHost: \"https://api.trongrid.io\",\n\theaders: { \"TRON-PRO-API-KEY\": apiKey },\n\tprivateKey: privateKey,\n      })\nGet Smart Router Info\nSmart Router algorithm service endpoint\nName: ​\nType: GET\nParameters:\nName\nDescription\nfromToken\nAddress of fromToken\ntoToken\nAddress of toToken\namountIn\nAmount of the token to be swapped\ntypeList\nTypes available for the swap\n(PSM,CURVE,CURVE_COMBINATION,WTRX,SUNSWAP_V1,SUN\n_V2,SUNSWAP_V3)\nReturn\n​\nName\nDescription\namountIn\nAmount of the token entered (divided by precision)\namountOut\nAmount of the token that can be swapped for, calculated by the Smart Router (divided by precision)\nInUsd\nUSD price of the entered token\nOutUsd\nUSD price of the token to be swapped for\nimpact\nPrice impact\nfee\nTransaction fee\ntokens\nAddresses of the tokens that the path from fromToken to toToken involves\nsymbols","metadata":{"loc":{"lines":{"from":729,"to":773}}}}],["1622",{"pageContent":"OutUsd\nUSD price of the token to be swapped for\nimpact\nPrice impact\nfee\nTransaction fee\ntokens\nAddresses of the tokens that the path from fromToken to toToken involves\nsymbols\nSymbols of the tokens that the path from fromToken to toToken involves\npoolFees\nTransaction fees of the liquidity pools that the path from fromToken to toToken involves\n(0 is displayed for non-SunSwap V3 pools)\npoolVersions\nVersions of the liquidity pools that the path from fromToken to toToken involves\nstepAmountsOut\nAmounts of the tokens obtained from each pool along the path from fromToken to toToken\n​\n>>> curl 'https://rot.endjgfsv.link/swap/router?fromToken=TWrZRHY9aKQZcyjpovdH6qeCEyYZrRQDZt&toToken=TG9XJ75ZWcUw69W8xViEJZQ365fRupGkFP&amountIn=100000000000000000&typeList=PSM,CURVE,CURVE_COMBINATION,WTRX,SUNSWAP_V1,SUNSWAP_V2,SUNSWAP_V3'","metadata":{"loc":{"lines":{"from":773,"to":791}}}}],["1623",{"pageContent":"{\"code\":0,\"message\":\"SUCCESS\",\"data\":[{\"amountIn\":\"0.100000000000000000\",\"amountOut\":\"0.00340809\",\"inUsd\":\"0.000552211279796638800000000000000000\",\"outUsd\":\"102.28490008408047256262147451\",\"impact\":\"-0.004658\",\"fee\":\"0.001019799010000000\",\"tokens\":[\"TWrZRHY9aKQZcyjpovdH6qeCEyYZrRQDZt\",\"TGfVzt44kg6ZJ4fUqpHzJy3Jb37YMf8pMH\",\"TGjgvdTWWrybVLaVeFqSyVqJQWjxqRYbaK\",\"TG9XJ75ZWcUw69W8xViEJZQ365fRupGkFP\"],\"symbols\":[\"SUN\",\"HT\",\"USDD\",\"BTC\"],\"poolFees\":[\"100\",\"10000\",\"100\",\"0\"],\"poolVersions\":[\"v3\",\"v3\",\"v3\"],\"stepAmountsOut\":[\"0.204301041106368782\",\"0.306491628388168604\",\"0.00340809\"]},{\"amountIn\":\"0.100000000000000000\",\"amountOut\":\"0.00315241\",\"inUsd\":\"0.000552211279796638800000000000000000\",\"outUsd\":\"94.61133417076900038177793499\",\"impact\":\"-0.000471\",\"fee\":\"0.001593109000000000\",\"tokens\":[\"TWrZRHY9aKQZcyjpovdH6qeCEyYZrRQDZt\",\"TYsbWxNnyTgsZaTFaue9hqpxkU3Fkco94a\",\"T9yD14Nj9j7xAB4dbGeiX9h8unkKHxuWwb\",\"TF17BgPaZYbz8oxbjhriubPDsA7ArKoLX3\",\"TG9XJ75ZWcUw69W8xViEJZQ365fRupGkFP\"],\"symbols\":[\"SUN\",\"WTR","metadata":{"loc":{"lines":{"from":792,"to":792}}}}],["1624",{"pageContent":"Y9aKQZcyjpovdH6qeCEyYZrRQDZt\",\"TYsbWxNnyTgsZaTFaue9hqpxkU3Fkco94a\",\"T9yD14Nj9j7xAB4dbGeiX9h8unkKHxuWwb\",\"TF17BgPaZYbz8oxbjhriubPDsA7ArKoLX3\",\"TG9XJ75ZWcUw69W8xViEJZQ365fRupGkFP\"],\"symbols\":[\"SUN\",\"WTRX\",\"TRX\",\"JST\",\"BTC\"],\"poolFees\":[\"0\",\"0\",\"0\",\"10000\",\"0\"],\"poolVersions\":[\"v2\",\"v2\",\"v1\",\"v3\"],\"stepAmountsOut\":[\"9.406036\",\"9.406036\",\"5797.537373084257622564\",\"0.00315241\"]},{\"amountIn\":\"0.100000000000000000\",\"amountOut\":\"0.00311306\",\"inUsd\":\"0.000552211279796638800000000000000000\",\"outUsd\":\"93.43034692621015170250621534\",\"impact\":\"-0.000305\",\"fee\":\"0.001019799010000000\",\"tokens\":[\"TWrZRHY9aKQZcyjpovdH6qeCEyYZrRQDZt\",\"TRz7J6dD2QWxBoumfYt4b3FaiRG23pXfop\",\"TGjgvdTWWrybVLaVeFqSyVqJQWjxqRYbaK\",\"TG9XJ75ZWcUw69W8xViEJZQ365fRupGkFP\"],\"symbols\":[\"SUN\",\"TUSD\",\"USDD\",\"BTC\"],\"poolFees\":[\"10000\",\"100\",\"100\",\"0\"],\"poolVersions\":[\"v3\",\"v3\",\"v3\"],\"stepAmountsOut\":[\"0.279484570175183752\",\"0.279951568868017126\",\"0.00311306\"]}]}","metadata":{"loc":{"lines":{"from":792,"to":792}}}}],["1625",{"pageContent":"Trade Execution\nTrade\nName: swapExactInput( address[], string[], uint256[], uint24[], SwapData)\nParameters: array of paths, array of pool versions, array of lengths of adjacent pool versions, array of fee rates, [amount of the token to be swapped, minimum acceptable amount of the token obtained from the swap, address to receive the token obtained from the swap, deadline].\n​\n>>> let contract = await tronWeb.getContract('TQAvWQpT9H916GckwWDJNhYZvQMkuRL7PN')\n>>> await router.swapExactInput(\n                    ['TWrZRHY9aKQZcyjpovdH6qeCEyYZrRQDZt','TGfVzt44kg6ZJ4fUqpHzJy3Jb37YMf8pMH','TGjgvdTWWrybVLaVeFqSyVqJQWjxqRYbaK','TG9XJ75ZWcUw69W8xViEJZQ365fRupGkFP'],\n                    ['v3'],\n                    [4],\n                    [100,10000,100,0],\n                    ['100000000000000000','1', 'TF5MekHgFz6neU7zTpX4h2tha5miPDUj3z',1662825600]\n                ).send({feeLimit: 10000 * 1e6,shouldPollResponse: true});\nSmart Mining V1\nSmart Mining V1: A flexible on-demand mining mode","metadata":{"loc":{"lines":{"from":793,"to":807}}}}],["1626",{"pageContent":").send({feeLimit: 10000 * 1e6,shouldPollResponse: true});\nSmart Mining V1\nSmart Mining V1: A flexible on-demand mining mode\nBackground\nAs one of the digital financial derivatives on SUN.io, mining provides crypto holders with stable, secure and reliable services for investment product subscription and redemption. Smart Mining V1, also known as flexible mining, is an important part of SUN.io's mining service. It distributes rewards according to the share of users' staked assets in the mining pool's total stake amount. And users can redeem their assets anytime.\n Explanation\nSUN.io's mining service distributes token rewards at an even inflation rate within a certain period of time, as shown in the graph below.\nChanges in the total staked assets in the mining pool at the time point ti will lead to changes in rewards for individual users, who are rewarded according to the following formula:r \nt\n​\ndenotes the expansion factor of token rewards,  \nt \ni\n​","metadata":{"loc":{"lines":{"from":807,"to":820}}}}],["1627",{"pageContent":"t\n​\ndenotes the expansion factor of token rewards,  \nt \ni\n​\ndenotes the i-th change, \nS \ni\n​\ndenotes the total staked assets during the period from ti−1 to ti, and \nU \ni\n​\ndenotes users' staked assets during the period from  \n−\n1\nt \ni−1\n​\nto \nt \ni\n​\n \n.\nAccording to the above formula, changes in the mining pool’s total staked assets will affect the distribution of rewards for all users. In order to avoid high gas fees incurred from updating the reward distribution for every user, the above formula is altered to the following one:\nWhen the total staked assets in the mining pool have changed while the users' staked assets have not during the period from starti to endi, only the following summation formula needs to be updated:\n​\nContract code\nmodifier updateReward(address account) {\n    rewardPerTokenStored = rewardPerToken();\n    lastUpdateTime = lastTimeRewardApplicable();\n    if (canNext && block.timestamp > periodFinish && DURATION_NEXT > 0) {","metadata":{"loc":{"lines":{"from":820,"to":853}}}}],["1628",{"pageContent":"rewardPerTokenStored = rewardPerToken();\n    lastUpdateTime = lastTimeRewardApplicable();\n    if (canNext && block.timestamp > periodFinish && DURATION_NEXT > 0) {\n        rewardRate = rewardNext.div(DURATION_NEXT);\n        uint256 nextRound = (block.timestamp - periodFinish) / DURATION_NEXT + 1;\n        periodFinish = periodFinish.add(nextRound * DURATION_NEXT);\n        rewardPerTokenStored = rewardPerToken();\n        lastUpdateTime = lastTimeRewardApplicable();\n        rewardNow = rewardNext;\n        DURATION = DURATION_NEXT;\n        emit RewardAdded(nextRound * rewardNext);\n    }\n    if (account != address(0)) {\n        userInfo[account].rewards = earned(account);\n        userInfo[account].rewardPerTokenPaid = rewardPerTokenStored;\n    }\n    _;\n}\nMining pools\n2pool farm\nMainnet contract address:TFpg63byqDwniXnyxVYpSzBfWGBwZExM9J\nUSDD-USDT V2 farm\nMainnet contract address:TCkNadwxyik1D66qCGmavuneowDRXPgdkL","metadata":{"loc":{"lines":{"from":853,"to":875}}}}],["1629",{"pageContent":"}\n    _;\n}\nMining pools\n2pool farm\nMainnet contract address:TFpg63byqDwniXnyxVYpSzBfWGBwZExM9J\nUSDD-USDT V2 farm\nMainnet contract address:TCkNadwxyik1D66qCGmavuneowDRXPgdkL\nContract interaction We use TronWeb to interact with contracts. One can easily interact with online contracts after initializing TronWeb instances.\nconst TronWeb = require('tronweb')\nconst privateKey = process.env.PRIVATE_KEY\nconst apiKey = process.env.API_KEY\n​\nvar tronWeb = new TronWeb({\n\tfullHost: \"https://api.trongrid.io\",\n\theaders: { \"TRON-PRO-API-KEY\": apiKey },\n\tprivateKey: privateKey,\n      })\n     \nGet mining pool information\nView addresses of fixed-term/on-demand mining pools\nFunction: reward_contract()\n>>> let contract = await tronWeb.getContract('TFpg63byqDwniXnyxVYpSzBfWGBwZExM9J')\n>>> await contract.methods.reward_contract().call()\nTWHM9Lkf78pHy68yhxdP8SUaRpn1hgaCpS\n  View rewards of on-demand mining pools\nFunction:earned(address)\nParameter: user's address","metadata":{"loc":{"lines":{"from":875,"to":902}}}}],["1630",{"pageContent":">>> await contract.methods.reward_contract().call()\nTWHM9Lkf78pHy68yhxdP8SUaRpn1hgaCpS\n  View rewards of on-demand mining pools\nFunction:earned(address)\nParameter: user's address\n>>> let contract = await tronWeb.getContract('TUgVp8FzZcFLHwruuncXaQo2js5Ym2GqSj')\n>>> await contract.methods.earned('TF5MekHgFz6neU7zTpX4h2tha5miPDUj3z').call()\n1000000000000000000\nTransaction execution\nDeposit\nFunction：deposit(uint256)\nParameter：Deposit amount\n>>> let contract = await tronWeb.getContract('TFpg63byqDwniXnyxVYpSzBfWGBwZExM9J')\n>>> await contract.methods.deposit(1000000000000000000).send()\nWithdrawalFunction：withdraw(uint256)\nParameter：Withdrawal amount\n>>> let contract = await tronWeb.getContract('TFpg63byqDwniXnyxVYpSzBfWGBwZExM9J')\n>>> await contract.methods.withdraw(1000000000000000000).send()Smart Mining V2\nSmart Mining V2: A high-yield fixed-term mining mode\nBackground","metadata":{"loc":{"lines":{"from":902,"to":921}}}}],["1631",{"pageContent":">>> await contract.methods.withdraw(1000000000000000000).send()Smart Mining V2\nSmart Mining V2: A high-yield fixed-term mining mode\nBackground\nAs one of the digital financial derivatives on SUN.io, mining provides crypto holders with stable, secure, and reliable services for subscription and redemption of investment products. Smart Mining V2, also known as fixed-term mining, is an important part of SUN.io's mining service. It converts a user's staked assets to virtual assets of a certain amount according to the amount of assets staked and the staking duration. The total virtual stake is defined as the total amount of virtual assets converted from all users' staked assets. Users are rewarded based on their virtual assets' proportion in the total virtual stake, and they are only allowed to redeem their assets during a specified period of time.\nExplanation\nReward Distribution\nSuppose the stake amount of a token is \"amount\". The token's lock-up duration \nDuration \nlock\n​","metadata":{"loc":{"lines":{"from":921,"to":930}}}}],["1632",{"pageContent":"Explanation\nReward Distribution\nSuppose the stake amount of a token is \"amount\". The token's lock-up duration \nDuration \nlock\n​\nmeets the following condition: \n<\n=\n<\n=\nDuration \nmin\n​\n <=Duration \nlock\n​\n <=Duration \nmax\n​\n \n。 where \nDuration \nmax\n​\nis 1080 days, \nDuration \nmin\n​\nis 30 days, and the maximum acceleration rate\nℎ\nweight \nmax\n​\nis 1400% (magnifying by \n12\ne \n12\ntimes). The veToken is calculated in the following way： \nHere,\nbalance \nveToken\n​\n \nrefers to the amount of a user's virtual assets. According to the reward distribution formula (2) of Smart Mining V1, the user's rewards are calculated in the following way:\nHere,  \nr \nt\n​\ndenotes the expansion factor of the reward token,  \nt \ni\n​\ndenotes the i-th change,  \nT \ni\n​\ndenotes the total virtual stake at the time \n−\n1\nt \ni−1\n​\n \nto \nt \ni\n​\n \n, and \nbalance \nveToken\n​\ndenotes the amount of the user's virtual assets at the time  \n−\n1\nt \ni−1\n​\n \nto \nt \ni\n​\n \n.\nContract code","metadata":{"loc":{"lines":{"from":930,"to":1016}}}}],["1633",{"pageContent":"−\n1\nt \ni−1\n​\n \nto \nt \ni\n​\n \n, and \nbalance \nveToken\n​\ndenotes the amount of the user's virtual assets at the time  \n−\n1\nt \ni−1\n​\n \nto \nt \ni\n​\n \n.\nContract code\nfunction calculateBoostedBalance(uint256 amount, uint256 lockDuration) public view returns (uint256) {\n    if (lockDuration == 0) {\n        return amount;\n    }\n    uint256 boostWeight = lockDuration.mul(BOOST_WEIGHT).div(DURATION_FACTOR);\n    return amount.add(amount.mul(boostWeight).div(PRECISION_FACTOR));\n}\nRedemption Time of Fixed-Term Mining\n​\nDuration \nlock\n​\ndenotes the length of a lock-up period, \nDuration \nmaintenance\n​\ndenotes the length of a cooling-off period for re-staking, \nt \nstake\n​\ndenotes the time when the assets are staked, and \nt \nnow\n​\ndenotes the current time. Assets can be redeemed when the following conditions are both met: \nrewards denotes the total amount of rewards, \nrewards \nprev\n​\ndenotes the amount of settled rewards, \nt \nlastAction\n​\ndenotes the time of the last settlement, and \nDuration \nreward\n​","metadata":{"loc":{"lines":{"from":1016,"to":1081}}}}],["1634",{"pageContent":"rewards denotes the total amount of rewards, \nrewards \nprev\n​\ndenotes the amount of settled rewards, \nt \nlastAction\n​\ndenotes the time of the last settlement, and \nDuration \nreward\n​\ndenotes the lock-up duration during which the rewards are not settled yet. \nDuration \noverdue\n​\ndenotes the duration of time that is after the last lock-up period and shorter than a lock-up period. The user's rewards are calculated in the following way: \nContract code\nfunction overdueDuration(address account) public view returns (bool, uint256, uint256){\n    uint256 duration = userInfo[account].lockDuration;\n    if (duration == 0) {\n        return (true, 0, 0);\n    }\n    uint256 totalTime = block.timestamp.sub(userInfo[account].lockStartTime);\n    uint256 round = totalTime.div(duration);\n    uint256 overdue = totalTime.mod(duration);\n    if (round < 1 || overdue > maintenanceDuration || block.timestamp < userInfo[account].lastActionTime) {\n        return (false, 0, 0);\n    }\n​","metadata":{"loc":{"lines":{"from":1081,"to":1110}}}}],["1635",{"pageContent":"uint256 overdue = totalTime.mod(duration);\n    if (round < 1 || overdue > maintenanceDuration || block.timestamp < userInfo[account].lastActionTime) {\n        return (false, 0, 0);\n    }\n​\n    uint256 rewardsDuration = block.timestamp.sub(userInfo[account].lastActionTime);\n    return (true, rewardsDuration, overdue);\n}\nMining pools\nUSDD_USDT LOCK V2 farm\nMainnet contract address:TY1mxnpL18oDP8hsSrrxNZgUMj71pcyFS8\n2pool LOCK farm\nMainnet contract address:TJmn1bjmNfE2F1sw2x6P224i8sFQj5mnbg\nContract interaction \nWe use TronWeb to interact with contracts. One can easily interact with online contracts after initializing TronWeb instances.\nconst TronWeb = require('tronweb')\nconst privateKey = process.env.PRIVATE_KEY\nconst apiKey = process.env.API_KEY\n​\nvar tronWeb = new TronWeb({\n\tfullHost: \"https://api.trongrid.io\",\n\theaders: { \"TRON-PRO-API-KEY\": apiKey },\n\tprivateKey: privateKey,\n      })\n     \nGet mining pool information\nView addresses of fixed-term/on-demand mining pools","metadata":{"loc":{"lines":{"from":1110,"to":1136}}}}],["1636",{"pageContent":"fullHost: \"https://api.trongrid.io\",\n\theaders: { \"TRON-PRO-API-KEY\": apiKey },\n\tprivateKey: privateKey,\n      })\n     \nGet mining pool information\nView addresses of fixed-term/on-demand mining pools\nFunction: sub_pool()\n>>> let contract = await tronWeb.getContract('TJmn1bjmNfE2F1sw2x6P224i8sFQj5mnbg')\n>>> await contract.methods.sub_pool().call()\nTUgVp8FzZcFLHwruuncXaQo2js5Ym2GqSj\n  View rewards of on-demand mining pools\nFunction:earned(address)\nParameter: user's addres\n>>> let contract = await tronWeb.getContract('TUgVp8FzZcFLHwruuncXaQo2js5Ym2GqSj')\n>>> await contract.methods.earned('TF5MekHgFz6neU7zTpX4h2tha5miPDUj3z').call()\n1000000000000000000\nTransaction execution\nDeposit\nFunction：deposit(uint256)\nParameter：Deposit amount\n>>> let contract = await tronWeb.getContract('TJmn1bjmNfE2F1sw2x6P224i8sFQj5mnbg')\n>>> await contract.methods.deposit(1000000000000000000).send()\nWithdrawal\nFunction：withdraw(uint256)\nParameter：Withdrawal amount","metadata":{"loc":{"lines":{"from":1136,"to":1161}}}}],["1637",{"pageContent":">>> await contract.methods.deposit(1000000000000000000).send()\nWithdrawal\nFunction：withdraw(uint256)\nParameter：Withdrawal amount\n>>> let contract = await tronWeb.getContract('TJmn1bjmNfE2F1sw2x6P224i8sFQj5mnbg')\n>>> await contract.methods.withdraw(1000000000000000000).send()​\nGovernance Mining\nGovernance Mining: A mining mode that gives users more governance rights and rewards\nBackground\nAs one of the digital financial derivatives on SUN.io, mining provides crypto holders with stable, secure, and reliable services for subscription and redemption of investment products. Governance mining is an important part of SUN.io's mining service. As shown in the graph below, the reward distributed to users is closely related to the number of veSun tokens they hold and the weights of the liquidity pools. And users are free to redeem their assets at any time.Explanation\nAfter a user stakes tokens in a liquidity pool, a corresponding amount of virtual stake value will be generated:​\nL \nuser\n​","metadata":{"loc":{"lines":{"from":1161,"to":1174}}}}],["1638",{"pageContent":"After a user stakes tokens in a liquidity pool, a corresponding amount of virtual stake value will be generated:​\nL \nuser\n​\nrepresents the real value staked by the user. \nL \ntotal\n​\nis the total value staked in a liquidity pool. \nveSun \nuser\n​\nis the number of veSun tokens held by the user. \nveSun \ntotal\n​\nis the total number of veSun tokens issued by SUN.io. As shown in formula (1), if the user holds enough veSun, then the virtue stake is indicated as \nL \nuser\n​\n \n; if the user holds 0 veSun, then it is indicated as \nL \nuser\n​\n* 0.4, meaning that the reward for holding veSUN can be amplified by 2.5 times.\n \n​\nW \ngauge\n​\nrepresents the weekly gauge weight of the pool. \nW \ntype\n​\nis the weight of the pool type. \nW \ntotal\n​\nis the total weight of the pool for the week and \nr \nt\n​","metadata":{"loc":{"lines":{"from":1174,"to":1216}}}}],["1639",{"pageContent":"​\nW \ngauge\n​\nrepresents the weekly gauge weight of the pool. \nW \ntype\n​\nis the weight of the pool type. \nW \ntotal\n​\nis the total weight of the pool for the week and \nr \nt\n​\nis the expansion factor of the reward token. According to the reward distribution formula (2) of Smart Mining V1, the user's rewards are calculated in the following way:Here, V represents the final expansion factor of the reward token. \nt \ni\n​\nrepresents the i-th change.  \nT \ni\n​\nrepresents the total virtual stake at the time \n−\n1\nt \ni−1\n​\nto \nt \ni\n​\n \n. \nS \nuser\n​\nrepresents the user's virtual stake value at the time  \n−\n1\nt \ni−1\n​\nto \nt \ni\n​\n \n. \nContract code\ndef _checkpoint(addr: address):\n    Controller(_controller).checkpoint_gauge(convert(self.controller_key, bytes32))\n    _working_balance: uint256 = self.working_balances[addr]\n    _working_supply: uint256 = self.working_supply\n​\n    if block.timestamp > _period_time:\n        prev_week_time: uint256 = _period_time","metadata":{"loc":{"lines":{"from":1216,"to":1274}}}}],["1640",{"pageContent":"_working_balance: uint256 = self.working_balances[addr]\n    _working_supply: uint256 = self.working_supply\n​\n    if block.timestamp > _period_time:\n        prev_week_time: uint256 = _period_time\n        week_time: uint256 = min((_period_time + WEEK) / WEEK * WEEK, block.timestamp)\n​\n        for i in range(500):\n            dt: uint256 = week_time - prev_week_time\n            w: uint256 = Controller(_controller).gauge_relative_weight(convert(self.controller_key, bytes32), prev_week_time / WEEK * WEEK)\n​\n            if _working_supply > 0:\n                if prev_future_epoch >= prev_week_time and prev_future_epoch < week_time:\n                    _integrate_inv_supply += rate * w * (prev_future_epoch - prev_week_time) / _working_supply\n                    rate = new_rate\n                    _integrate_inv_supply += rate * w * (week_time - prev_future_epoch) / _working_supply\n                else:\n                    _integrate_inv_supply += rate * w * dt / _working_supply","metadata":{"loc":{"lines":{"from":1274,"to":1291}}}}],["1641",{"pageContent":"else:\n                    _integrate_inv_supply += rate * w * dt / _working_supply\n            if week_time == block.timestamp:\n                break\n            prev_week_time = week_time\n            week_time = min(week_time + WEEK, block.timestamp)\n​\n    _period += 1\n    self.period = _period\n    self.period_timestamp[_period] = block.timestamp\n    self.integrate_inv_supply[_period] = _integrate_inv_supply\n      self.integrate_fraction[addr] += _working_balance * (_integrate_inv_supply - self.integrate_inv_supply_of[addr]) / 10 ** 18\n    self.integrate_inv_supply_of[addr] = _integrate_inv_supply\n    self.integrate_checkpoint_of[addr] = block.timestamp\nMining Pools\nOld 3pool farm\nMainnet contract address:TCpu3GnK6PPZV9ama85mRP97YqRuVXdcSd\nSUN-TRX farm\nMainnet contract address:TAkrcKsS5FW9f3ZfzvWy6Zvsz9uEjUxPoV\nOld USDC farm\nMainnet contract address:TJ3Qnm9VhzJzhcxk49ZpHBRatD1bsD4xYq\nUSDT-SUN V2 farm\nMainnet contract address:TPx8BXTgiB1tiL9A9BZuz67bZBvFGYdJS8","metadata":{"loc":{"lines":{"from":1291,"to":1313}}}}],["1642",{"pageContent":"Old USDC farm\nMainnet contract address:TJ3Qnm9VhzJzhcxk49ZpHBRatD1bsD4xYq\nUSDT-SUN V2 farm\nMainnet contract address:TPx8BXTgiB1tiL9A9BZuz67bZBvFGYdJS8\nBTT-USDT V2 farm\nMainnet contract address:TEULJy4MJeRUTMPGTTvsBkmDPM4PEsMBTw\nUSDT-TRX farm\nMainnet contract address:TSRhvs1R2hoNf5PuMG4nUrDa4XVBqBaKgF\nUSDJ-TRX farm\nMainnet contract address:TGJ8LcijTaLmzBhqtp2jWQ1DRCpCWPAmD1\nTUSD-TRX farm\nMainnet contract address:TBPEX4Bu3rc8RAvv3qTBFVvSVAFNttinqe\nUSDC-TRX farm\nMainnet contract address:TDsuMrbQ8wHrM8cKpxFczBbaxhJwpmwRHr\nWBTT-TRX farm\nMainnet contract address:TH1XkkkPa7aF1oi7xqFYuUdXR1UvTEd4Ld\nBTT-TRX farm\nMainnet contract address:TVjuRFx5dUn4u386DJRJS8zxgWKKcPocXo\nNFT-TRX farm\nMainnet contract address:TViH23SgGKWfX4EHB4Q7UMeo1wgvfSvyPS\nWIN-TRX farm\nMainnet contract address:TBd8sxVK47adcaLZgbqvN5LTUQGEpawXnx\nJST-TRX farm\nMainnet contract address:TFw58b9t55FsmFeZHjLooS3SkMYDKXZoW7\nUSDT-TRX V2 farm\nMainnet contract address:TUnkvMyZKt4HT2qGWaMwy35c9QTmjiMCWL\nNFT-USDT V2 farm","metadata":{"loc":{"lines":{"from":1313,"to":1339}}}}],["1643",{"pageContent":"JST-TRX farm\nMainnet contract address:TFw58b9t55FsmFeZHjLooS3SkMYDKXZoW7\nUSDT-TRX V2 farm\nMainnet contract address:TUnkvMyZKt4HT2qGWaMwy35c9QTmjiMCWL\nNFT-USDT V2 farm\nMainnet contract address:TSYJHJA5rDYhaiadNXDqA6Fk6sq1yqZKwT\nWIN-USDT V2 farm\nMainnet contract address:TEHtYRLUTGLq4Z5Pyy5C7LYZBBVVcRuvUU\nJST-USDT V2 farm\nMainnet contract address:TKAQajxhQscgakWaokd7uNeTxwBp97xhSD\nUSDD-USDT V2 farm\nMainnet contract address:TCkNadwxyik1D66qCGmavuneowDRXPgdkL\nUSDD-TRX farm\nMainnet contract address:TCpXumigVHd2iuSkotNgkSduKqksUfpcvc\n3poolnew farm\nMainnet contract address:THZgwb6LTg9LydbLw6gT4YMdu9y4nA5dnp\nUsdd2pool farm\nMainnet contract address:TBSRZYLZ2pguF3EqLz86Kt9hZ4eqKEQMSY\n2pool farm\nMainnet contract address:TFpg63byqDwniXnyxVYpSzBfWGBwZExM9J\nUSDD_USDT LOCK V2 farm\nMainnet contract address:TY1mxnpL18oDP8hsSrrxNZgUMj71pcyFS8\n2pool LOCK farm\nMainnet contract address:TJmn1bjmNfE2F1sw2x6P224i8sFQj5mnbg\nContract interaction","metadata":{"loc":{"lines":{"from":1339,"to":1363}}}}],["1644",{"pageContent":"USDD_USDT LOCK V2 farm\nMainnet contract address:TY1mxnpL18oDP8hsSrrxNZgUMj71pcyFS8\n2pool LOCK farm\nMainnet contract address:TJmn1bjmNfE2F1sw2x6P224i8sFQj5mnbg\nContract interaction \nWe use TronWeb to interact with contracts. One can easily interact with online contracts after initializing TronWeb instances.\nconst TronWeb = require('tronweb')\nconst privateKey = process.env.PRIVATE_KEY\nconst apiKey = process.env.API_KEY\n​\nvar tronWeb = new TronWeb({\n\tfullHost: \"https://api.trongrid.io\",\n\theaders: { \"TRON-PRO-API-KEY\": apiKey },\n\tprivateKey: privateKey,\n      })\n     \nTransaction execution\nView Governance Rewards\nFunction：claimable_tokens(address)\nParameter: user's address\n>>> let contract = await tronWeb.getContract('TJmn1bjmNfE2F1sw2x6P224i8sFQj5mnbg')\n>>> await contract.methods.claimable_tokens('TF5MekHgFz6neU7zTpX4h2tha5miPDUj3z').send()\nDeposit\nFunction：deposit(uint256)\nParameter：Deposit amount\n>>> let contract = await tronWeb.getContract('TJmn1bjmNfE2F1sw2x6P224i8sFQj5mnbg')","metadata":{"loc":{"lines":{"from":1363,"to":1388}}}}],["1645",{"pageContent":"Deposit\nFunction：deposit(uint256)\nParameter：Deposit amount\n>>> let contract = await tronWeb.getContract('TJmn1bjmNfE2F1sw2x6P224i8sFQj5mnbg')\n>>> await contract.methods.deposit(1000000000000000000).send()\nWithdrawalFunction：withdraw(uint256)\nParameter：Withdrawal amount\n>>> let contract = await tronWeb.getContract('TJmn1bjmNfE2F1sw2x6P224i8sFQj5mnbg')\n>>> await contract.methods.withdraw(1000000000000000000).send()","metadata":{"loc":{"lines":{"from":1388,"to":1396}}}}],["1646",{"pageContent":"SunSwap 2.0 Interface Documentation\n \n--  Sun Team \nv 1.0.\n4","metadata":{"loc":{"lines":{"from":1,"to":5}}}}],["1647",{"pageContent":"Table of Contents \nI.   Backend API\n3\n\t\n1.1 Access all trading pairs\n3\n\t\nII. Smart Contract Interface\n4\n\t\n2.1 Smart contract address\n4\n\t\n2.2 List of contract interfaces\n \n4\n\t\n2.2.1 TRC20 token \n4\n\t\n2.2.2 Factory \n5\n\t\n2.2.3 ISunswapV2Router\n \n5\n\t\n2.3 Description of contract interfaces\n \n7\n\t\n2.3.1 Factory \n7\n\t\n2.3.1.1 Query interface\n \n7\n\t\n1. getPair\n7\n\t\n2. allPairs\n8\n\t\n3. allPairsLength\n8\n\t\n2.3.1.2 Modification interface\n \n9\n\t\n1. createPair\n9\n\t\n2.3.1.3 Contract event \n9\n\t\n1. PairCreated\n9\n\t\n2.3.2 Router \n10\n\t\n2.3.2.1 Query interface\n \n10\n\t\n1. factory\n10\n\t\n2. WETH\n10\n\t\n2.3.2.2 Modification interface\n \n11\n\t\n1. addLiquidity\n11\n\t\n2. addLiquidityETH\n12\n\t\n3. removeLiquidity\n13\n\t\n4. removeLiquidityETH\n14\n\t\n5. removeLiquidityWithPermit\n15\n\t\n6. removeLiquidityETHWithPermit\n17\n\t\n7. removeLiquidityETHSupportingFeeOnTransferTokens\n18\n\t\n8. removeLiquidityETHWithPermitSupportingFeeOnTransferTokens\n19\n\t\n9. swapExactTokensForTokens\n20\n\t\n10. swapExactETHForTokens\n21\n\t\n11. swapTokensForExactETH\n22","metadata":{"loc":{"lines":{"from":8,"to":116}}}}],["1648",{"pageContent":"18\n\t\n8. removeLiquidityETHWithPermitSupportingFeeOnTransferTokens\n19\n\t\n9. swapExactTokensForTokens\n20\n\t\n10. swapExactETHForTokens\n21\n\t\n11. swapTokensForExactETH\n22\n\t\n12. swapExactTokensForETH\n23\n\t\n13. swapETHForExactTokens\n24\n\t\n14. swapExactTokensForTokensSupportingFeeOnTransferTokens\n25\n\t\n15. swapExactETHForTokensSupportingFeeOnTransferTokens\n26\n\t\n16. swapExactTokensForETHSupportingFeeOnTransferTokens\n27","metadata":{"loc":{"lines":{"from":116,"to":143}}}}],["1649",{"pageContent":"I.\n \nBackend \nAPI\n1.1  Access\n all   trading \npairs \nGET: \nhttps://\nopenapi.sun.io\n/v2/allpairs?ver=3\nParameters: \n \npage_size \n: int, size of each page, \nmax 500\npage_num: \nint, number \nof the page, \nstarting \nfrom 0\ntoken_address: optional; \nreturn \nonly the data containing \nthe specific \ntoken \naddress\norderBy: \noptional; \nreturn \nthe data ordered \nby the \nspecific \nitem (price, \nquote_volume \nor \nbase_volume)\ndesc: \noptional; \ntrue = decreasing \norder; \nfalse \n= increasing \norder\nReturn \nformat: \n{ \n\"data\": [{\n \n\"TNUC9Qb1rRpS5CbWLmNMxXBjyFoydXjWFR_TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6tf\":  \n//key:    ids of base_token \nand  quote_token \n { \n\"quote_id\": \"TNUC9Qb1rRpS5CbWLmNMxXBjyFoydXjWFR\",\n \n\"quote_decimal\": \"6\", //precision of quote_token\n \n\"quote_name\": \"Wrapped TRX\", //n\name of quote_token \n\"quote_symbol\": \"WTRX\", //symbol of quote_token\n \n\"base_id\": \"TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t\", //address of base_token\n \n\"base_decimal\": \"6\", //precision of base_token","metadata":{"loc":{"lines":{"from":146,"to":209}}}}],["1650",{"pageContent":"ame of quote_token \n\"quote_symbol\": \"WTRX\", //symbol of quote_token\n \n\"base_id\": \"TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t\", //address of base_token\n \n\"base_decimal\": \"6\", //precision of base_token\n \n\"base_name\": \"Tether USD\", //name of base_token\n \n\"base_symbol\": \"USDT\", //symbol of base_token \n\"price\": \"0.938196997790940827\", //price of quote_token, calculated in base_token\n \n\"quote_volume\": \"0\", //total amount of quote_token traded in the last 24 hours \n(minimum unit)\n \n\"base_volume\": \"0\" //total amount of ba\nse_token traded in the last 24 hours \n(minimum unit)\n \n} \n}], \n\"err_msg\": \"\",\n \n\"err_no\": 0,\n \n\"total_num\": 143 //total number of entries\n \n}","metadata":{"loc":{"lines":{"from":209,"to":236}}}}],["1651",{"pageContent":"II. S  mart Contract Interface\n2.1 Smart contract address \nName \nAddress\n \nNote \nfactory contract\n \nTKWJdrQkqHisa1X8HUdHEfREvTzw4pMAaY\n \nFactory contract is \ndesigned to create \ntrading pairs and \nmanage lists of trading \npairs. \n \nrouter contract\n \nTKzxdSv2FZKQrEqkKVgp5DcwEXBEKMg2Ax\n \npair contract \nTFGDbUyP8xez44C76fin3bn3Ss6jugoUwJ\n \nEach trading pair has a \npair contract and it is the \ncontract address for the \nUSDT/TRX pair.  \n \n2.2 List of contract interfaces \n2.2.1 TRC20 \ntoken \ninterface ITRC20 {\n \n  function transfer(address to, uint256 value) \nexternal returns (bool); \n  function approve(address spender, uint256 value) external returns (bool);\n \n  function transferFrom(address from, address to, uint256 value) external returns (bool);\n \n  function totalSupply() external view returns (uint256);\n \n  funct   ion balanceOf(address who) external view returns (uint256);\n \n  function allowance(address owner, address spender) external view returns (uint256);","metadata":{"loc":{"lines":{"from":239,"to":282}}}}],["1652",{"pageContent":"funct   ion balanceOf(address who) external view returns (uint256);\n \n  function allowance(address owner, address spender) external view returns (uint256);\n \n  event Transfer(address indexed from, address indexed to, uint256 value);\n \n  event Approval(address indexed ow\nner, address indexed spender, uint256 value);\n \n}","metadata":{"loc":{"lines":{"from":282,"to":291}}}}],["1653",{"pageContent":"2.2.2 Factory\n \n \n \ninterface I\nSun\nswapV2Factory {\n \n    \nevent PairCreated(address indexed token0, address indexed token1, address pair, uint);\n \n \n    \nfunction feeTo() external view returns (address);\n \n    \nfunction feeToSetter() external view returns (address);\n \n \n    \nfunction getPair(address tokenA, address tokenB) external view returns (address pair);\n \n    \nfunction allPairs(uint) external view returns (address pair);\n \n    \nfunction allPairsLength() external\n \nview returns (uint);\n \n \n    \nfunction createPair(address tokenA, address tokenB) external returns (address pair);\n \n \n    \nfunction setFeeTo(address) external;\n \n    \nfunction setFeeToSetter(address) external;\n \n}\n \n \n \n \n2.2.3 I\nSun\nswapV2Router\n \n \n \ninterface \nI\nSun\nswapV2Router01 {\n \n    \nfunction factory() external pure returns (address);\n \n    \nfunction WETH() external pure returns (address);\n \n \n    \nfunction addLiquidity(\n \n        \naddress tokenA,\n \n        \naddress tokenB,\n \n        \nuint amountADesired,","metadata":{"loc":{"lines":{"from":293,"to":367}}}}],["1654",{"pageContent":"function WETH() external pure returns (address);\n \n \n    \nfunction addLiquidity(\n \n        \naddress tokenA,\n \n        \naddress tokenB,\n \n        \nuint amountADesired,\n \n        \nuint \namountBDesired,\n \n        \nuint amountAMin,\n \n        \nuint amountBMin,\n \n        \naddress to,\n \n        \nuint deadline\n \n    \n) external returns (uint amountA, uint amountB, uint liquidity);\n \n    \nfunction addLiquidityETH(\n \n        \naddress token,\n \n        \nuint amountTokenDe\nsired,\n \n        \nuint amountTokenMin,\n \n        \nuint amountETHMin,\n \n        \naddress to,\n \n        \nuint deadline\n \n    \n) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n \n    \nfunction removeLiquidity(\n \n        \naddress tokenA,\n \n        \naddres\ns tokenB,\n \n        \nuint liquidity,\n \n        \nuint amountAMin,\n \n        \nuint amountBMin,\n \n        \naddress to,\n \n        \nuint deadline","metadata":{"loc":{"lines":{"from":367,"to":449}}}}],["1655",{"pageContent":") external returns (uint amountA, uint amountB);\n \n    \nfunction removeLiquidityETH(\n \n        \naddress token,\n \n        \nuint\n \nliquidity,\n \n        \nuint amountTokenMin,\n \n        \nuint amountETHMin,\n \n        \naddress to,\n \n        \nuint deadline\n \n    \n) external returns (uint amountToken, uint amountETH);\n \n    \nfunction removeLiquidityWithPermit(\n \n        \naddress tokenA,\n \n        \naddress tokenB,\n \n        \nuint liquidity,\n \n        \nuint amountAMin,\n \n        \nuint amountBMin,\n \n        \naddress to,\n \n        \nuint deadline,\n \n        \nbool approveMax, uint8 v, bytes32 r, bytes32 s\n \n    \n) external returns (uint amountA, uint amountB);\n \n    \nfunction removeLiquidityET\nHWithPermit(\n \n        \naddress token,\n \n        \nuint liquidity,\n \n        \nuint amountTokenMin,\n \n        \nuint amountETHMin,\n \n        \naddress to,\n \n        \nuint deadline,\n \n        \nbool approveMax, uint8 v, bytes32 r, bytes32 s\n \n    \n) external returns (uint \namountToken, uint amountETH);","metadata":{"loc":{"lines":{"from":453,"to":538}}}}],["1656",{"pageContent":"uint amountETHMin,\n \n        \naddress to,\n \n        \nuint deadline,\n \n        \nbool approveMax, uint8 v, bytes32 r, bytes32 s\n \n    \n) external returns (uint \namountToken, uint amountETH);\n \n    \nfunction swapExactTokensForTokens(\n \n        \nuint amountIn,\n \n        \nuint amountOutMin,\n \n        \naddress[] calldata path,\n \n        \naddress to,\n \n        \nuint deadline\n \n    \n) external returns (uint[] memory amounts);\n \n    \nfunction s\nwapTokensForExactTokens(\n \n        \nuint amountOut,\n \n        \nuint amountInMax,\n \n        \naddress[] calldata path,\n \n        \naddress to,\n \n        \nuint deadline\n \n    \n) external returns (uint[] memory amounts);\n \n    \nfunction swapExactETHForTokens(uint amountOutMin, addr\ness[] calldata path, address to, uint \ndeadline)\n \n        \nexternal\n \n        \npayable\n \n        \nreturns (uint[] memory amounts);\n \n    \nfunction swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, \naddress to, uint deadline)\n \n        \nexter\nnal","metadata":{"loc":{"lines":{"from":538,"to":616}}}}],["1657",{"pageContent":"payable\n \n        \nreturns (uint[] memory amounts);\n \n    \nfunction swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, \naddress to, uint deadline)\n \n        \nexter\nnal\n \n        \nreturns (uint[] memory amounts);\n \n    \nfunction swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, \naddress to, uint deadline)\n \n        \nexternal\n \n        \nreturns (uint[] memory amounts);\n \n    \nfunction \nswapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint \ndeadline)\n \n        \nexternal\n \n        \npayable","metadata":{"loc":{"lines":{"from":616,"to":651}}}}],["1658",{"pageContent":"returns (uint[] memory amounts);\n \n \n    \nfunction quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint \namountB);\n \n    \nfunction getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint \namountOut);\n \n    \nfunction getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint \namountIn);\n \n    \nfunction getAmo\nuntsOut(uint amountIn, address[] calldata path) external view returns (uint[] \nmemory amounts);\n \n    \nfunction getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] \nmemory amounts);\n \n}\n \n \n2.3 Description of contract interfaces\n \n2.3.\n1 Factory\n \n2.3.1.1 Query interface \n \n1. getPair\n \n \nfunction getPair(address tokenA, address tokenB) external view returns (address pair);\n \n \nFunction description: Use tokenA and tokenB\n \nto acquire the corresponding pair address. \nReturn the zero address (0x0000000000000000000000000000000000000000) if the pair","metadata":{"loc":{"lines":{"from":655,"to":698}}}}],["1659",{"pageContent":"Function description: Use tokenA and tokenB\n \nto acquire the corresponding pair address. \nReturn the zero address (0x0000000000000000000000000000000000000000) if the pair \naddress is not created. \n \n \nParameter description:\n \nParamete\nr\n \nType\n \nDescription\n \ntokenA\n \naddress\n \nTRC20 token \naddress\n \ntokenB\n \naddress\n \nTRC20 token \naddress\n \n \nReturns: \n \naddress\n \nTrading pair address","metadata":{"loc":{"lines":{"from":698,"to":733}}}}],["1660",{"pageContent":"2. allPairs\n \n \nfunction allPairs(uint) external view returns (address pair);\n \n \nFunction description: Return the address of the trading pair N (0\n-\nindexed) created by the \nfactory \ncontract. If the corresponding index has not been created, return the zero address \n(0x00000000000000000000000000000000000000000000000000000000000000000000).\n \n \nParameter description:\n \nParamete\nr\n \nType\n \nDescription\n \nindex\n \nuint256\n \nTRC20 token \naddress\n \n \nReturns:\n \naddress\n \nTrading pair address\n \n \n \n3. allPairsLength\n \n \nfunction allPairsLength() external view returns (uint);\n \n \nFunction description: Return the number of trading pairs created via the factory contract.\n \n \nReturns:\n \nuint\n \nTotal number of \ntrading pairs","metadata":{"loc":{"lines":{"from":738,"to":791}}}}],["1661",{"pageContent":"2.3.1.2 Modification interface\n \n1. createPair\n \nfunction createPair(address tokenA, address tokenB) external returns (address pair);\n \n \nFunction description: Create a pair address for tokenA and tokenB when their corresponding \ntrading pair does not exist.\n \n \nPa\nrameter description:\n \nParamete\nr\n \nType\n \nDescription\n \ntokenA\n \naddress\n \nTRC20 token \naddress\n \ntokenB\n \naddress\n \nTRC20 token \naddress\n \n \nReturns:\n \naddress\n \nTrading pair address\n \n \n \n2.3.1.3 Contract event\n \n1. PairCreated\n \n  \nevent PairCreated(\naddress indexed token0, address indexed token1, address pair, uint);\n \n \nFunction description: The interface sends an event when creating trading pair with \ncreatePair.\n \n \nParameter description:\n \nParameter\n \nType\n \nDescription\n \ntoken0\n \naddress\n \nTRC20 token \naddress\n \ntoken1\n \naddress\n \nTRC20 token address","metadata":{"loc":{"lines":{"from":797,"to":873}}}}],["1662",{"pageContent":"pair\n \naddress\n \nTRC20 token's corresponding exchange \naddress in JustSwap\n \nindex\n \nuint\n \nThe final uint\n \nlog value for the first trading \npair created is 1, the value for the second pair \nis 2, and so on.\n \n \n2.3.2 Router\n \n \n2.3.2.1 Query interface \n \n1. factory\n \n \n \nfunction factory() external pure returns (address);\n \n \nFunction description: Return the factory contract address. \n \n \nReturns:\n \naddress\n \n \nfactory contract address\n \n \n2. WETH\n \n \nfunction WETH() external pure returns (address);\n \n \nFunction description: Return the WTRX contract address. \n \n \nReturns:\n \naddress\n \n \nWTRX contract address","metadata":{"loc":{"lines":{"from":876,"to":931}}}}],["1663",{"pageContent":"2.3.2.2 Modification interface\n \n1. addLiquidity\n \n \n \nfunction addLiquidity(\n \n  \naddress tokenA,\n \n  \naddress tokenB,\n \n  \nuint amountADesired,\n \n  \nuint amountBDesired,\n \n  \nuint amountAMin,\n \n  \nuint amountBMin,\n \n  \naddress to,\n \n  \nuint deadline\n \n) \nexternal returns (uint amountA, uint amountB, uint liquidity);\n \n \n \nFunction description:\n \nAdd liquidity to the TRC\n-\n20 ⇄ TRC\n-\n20 pool, and then mint liquidity tokens as markers. \n \nApprove before adding liquidity. \n \n \nParameter description:\n \nParameter\n \nType\n \nDescripti\non\n \ntokenA\n \naddress\n \nTRC20 token address\n \ntokenB\n \naddress\n \nTRC20 token address\n \namountADesired\n \nuint256\n \nAdd this amount as the liquidity of tokenA if the \nprice of B/A is <= \namountBDesired/amountADesired (i.e. A \ndepreciates).\n \namountBDesired\n \nuint256\n \nAdd this amount as the liquidity of tokenB if the \nprice of A/B is <= \namountADesired/amountBDesired (i.e. B \ndepreciates).\n \namountAMin\n \nuint256\n \nThis limit value calculated from the slippage","metadata":{"loc":{"lines":{"from":936,"to":1027}}}}],["1664",{"pageContent":"Add this amount as the liquidity of tokenB if the \nprice of A/B is <= \namountADesired/amountBDesired (i.e. B \ndepreciates).\n \namountAMin\n \nuint256\n \nThis limit value calculated from the slippage \nmust be lower than amountADesired.","metadata":{"loc":{"lines":{"from":1027,"to":1037}}}}],["1665",{"pageContent":"amountBMin\n \nuint256\n \nThis limit value calculated from the slippage \nmust be lower than amountBDesired.\n \nto\n \naddress\n \nAddress receiving liquidity token\n \ndeadline\n \nuint256\n \nUnix timestamp; transaction will revert if \nexceeding this time limit\n \n \nReturns:\n \namountA\n \nuint256\n \nAmount of tokenA sent to the pool\n \namountB\n \nuint256\n \nAmount of tokenB sent to the pool\n \nliquidity\n \nuint256\n \nAdditional amount of liquidity token issued to the \ncaller\n \n \n2. addLiquidityETH\n \n \nfunction addLiquidityETH(\n \n  \naddress token,\n \n  \nuint \namountTokenDesired,\n \n  \nuint amountTokenMin,\n \n  \nuint amountETHMin,\n \n  \naddress to,\n \n  \nuint deadline\n \n) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n \n \n \nFunction description:\n \nAdd liquidity to the TRC\n-\n20 ⇄ WTRX pool with TRX, and then mint liquidity tokens as \nmarkers. \n \nApprove before adding liquidity. \n \n \nParameter description:\n \n \nParameter\n \nType\n \nDescription\n \ntoken\n \naddress\n \nTRC20 token address","metadata":{"loc":{"lines":{"from":1040,"to":1134}}}}],["1666",{"pageContent":"amountTokenDesir\ned\n \nuint256\n \nAdd this amount as the liquidity of token if the \nprice of WTRX/token is <= \nmsg.value/amountTokenDesired (i.e. token \ndepreciates)\n \nmsg.value\n \n(amountETHDesire\nd)\n \nuint256\n \nAdd this amount as the liquidity of WTRX if the \nprice of token/WTRX is<= \namountTokenDesir\ned/msg.value (i.e. WTRX \ndepreciates)\n \namountTokenMin\n \nuint256\n \nThis limit value calculated from the slippage \nmust be lower than amountTokenDesired\n \namountETHMin\n \nuint256\n \nThis limit value calculated from the slippage \nmust be lower than msg.value\n \nto\n \naddress\n \nAddress receiving liquidity token\n \ndeadline\n \nuint256\n \nUnix timestamp; transaction will revert if \nexceeding this time limit\n \n \n \nReturns:\n \namountToken\n \nuint256\n \nAmount of \ntoken sent to the pool\n \namountETH\n \nuint256\n \nAmount of TRX converted to WTRX and sent to the \npool\n \nliquidity\n \nuint256\n \nAdditional amount of liquidity token issued to the \ncaller\n \n \n3. removeLiquidity\n \n \nfunction removeLiquidity(","metadata":{"loc":{"lines":{"from":1137,"to":1216}}}}],["1667",{"pageContent":"Amount of TRX converted to WTRX and sent to the \npool\n \nliquidity\n \nuint256\n \nAdditional amount of liquidity token issued to the \ncaller\n \n \n3. removeLiquidity\n \n \nfunction removeLiquidity(\n \n  \naddress tokenA,\n \n  \naddress \ntokenB,\n \n  \nuint liquidity,\n \n  \nuint amountAMin,\n \n  \nuint amountBMin,\n \n  \naddress to,","metadata":{"loc":{"lines":{"from":1216,"to":1249}}}}],["1668",{"pageContent":"uint deadline\n \n) external returns (uint amountA, uint amountB);\n \n \nFunction description:\n \nRemove liquidity from the TRC\n-\n20 ⇄ TRC\n-\n20 pool. Approval is needed before the removal of \nliquidity. \n \n \nParameter description:\n \nParameter\n \nType\n \nDescription\n \ntokenA\n \naddress\n \nTRC20 token address\n \ntokenB\n \naddress\n \nTRC20 token address\n \nliquidity\n \nuint256\n \nAmount of \nthe liquidity token to be removed\n \namountAMin\n \nuint256\n \nMinimum amount of tokenA to be received; \ncalculated from the slippage\n \namountBMin\n \nuint256\n \nMinimum amount of tokenB to be received; \ncalculated from the slippage\n \nto\n \naddress\n \nAddress receiving tokenA/tokenB\n \ndeadline\n \nuint256\n \nUnix timestamp; transaction will revert if \nexceeding this time limit\n \n \nReturns:\n \namountA\n \nuint256\n \nAmount of tokenA received\n \namountB\n \nuint256\n \nAmount of tokenB received\n \n \n \n4. \nremoveLiquidityETH\n \n \nfunction removeLiquidityETH(\n \n  \naddress token,\n \n  \nuint liquidity,\n \n  \nuint amountTokenMin,","metadata":{"loc":{"lines":{"from":1253,"to":1352}}}}],["1669",{"pageContent":"amountB\n \nuint256\n \nAmount of tokenB received\n \n \n \n4. \nremoveLiquidityETH\n \n \nfunction removeLiquidityETH(\n \n  \naddress token,\n \n  \nuint liquidity,\n \n  \nuint amountTokenMin,\n \n  \nuint amountETHMin,","metadata":{"loc":{"lines":{"from":1352,"to":1376}}}}],["1670",{"pageContent":"address to,\n \n  \nuint deadline\n \n) external returns (uint amountToken, uint amountETH);\n \n \nFunction description:\n \nRemove liquidity from the TRC\n-\n20 ⇄ WTRX pool and convert WTRX into TRX. Approval is \nneeded before the removal of liquidity. \n \n \nParameter description:\n \nParameter\n \nType\n \nDescription\n \ntoken\n \naddress\n \nTRC20 token address\n \nliquidity\n \nuint256\n \nAmount of the \nliquidity token to be removed\n \namountTokenMin\n \nuint256\n \nMinimum amount of the token to be received; \ncalculated from the slippage\n \namountETHMin\n \nuint256\n \nMinimum amount of TRX to be received; \ncalculated from the slippage\n \nto\n \naddress\n \nAddress receiving token/TRX\n \ndeadline\n \nuint256\n \nUnix timestamp; transaction will revert if \nexceeding this time limit\n \n \nReturns:\n \namountToken\n \nuint256\n \nAmount of token received\n \namountETH\n \nuint256\n \nAmount of TRX received\n \n \n \n5. removeLiquidityWithPermit\n \n \nfunction \nremoveLiquidityWithPermit(\n \n  \naddress tokenA,\n \n  \naddress tokenB,","metadata":{"loc":{"lines":{"from":1380,"to":1471}}}}],["1671",{"pageContent":"Amount of token received\n \namountETH\n \nuint256\n \nAmount of TRX received\n \n \n \n5. removeLiquidityWithPermit\n \n \nfunction \nremoveLiquidityWithPermit(\n \n  \naddress tokenA,\n \n  \naddress tokenB,\n \n  \nuint liquidity,\n \n  \nuint amountAMin,\n \n  \nuint amountBMin,","metadata":{"loc":{"lines":{"from":1471,"to":1500}}}}],["1672",{"pageContent":"address to,\n \n  \nuint deadline,\n \n  \nbool approveMax, uint8 v, bytes32 r, bytes32 s\n \n) external returns (uint amountA, uint amountB);\n \n \nFunction description:\n \nRemove liquidity from the TRC\n-\n20 ⇄ TRC\n-\n20 pool. Approval is not needed when removing \nliquidity due to the existence of permit. \n \n \nParameter description:\n \nParameter\n \nType\n \nDescription\n \ntokenA\n \naddress\n \nTRC20 token address\n \ntokenB\n \naddress\n \nTRC20 token address\n \nliquidity\n \nuint256\n \nAmount of the liquidity token to be removed\n \namountAMin\n \nuint256\n \nMinimum amount of tokenA to be received; \ncalculated from the slippage\n \namountBMin\n \nuint256\n \nMinimum amount of tokenB to be received; \ncalculated fro\nm the slippage\n \nto\n \naddress\n \nAddress receiving tokenA/tokenB\n \ndeadline\n \nuint256\n \nUnix timestamp; transaction will revert if \nexceeding this time limit\n \napproveMax\n \nbool\n \nWhether the amount to be approved by the \nsignature is uint(\n-\n1) or liquidity\n \nv\n \nuint8\n \nv component in permit signature\n \nr","metadata":{"loc":{"lines":{"from":1504,"to":1594}}}}],["1673",{"pageContent":"exceeding this time limit\n \napproveMax\n \nbool\n \nWhether the amount to be approved by the \nsignature is uint(\n-\n1) or liquidity\n \nv\n \nuint8\n \nv component in permit signature\n \nr\n \nbytes32\n \nr component in permit signature\n \ns\n \nbytes32\n \ns component in permit signature\n \n \nReturns:\n \namountA\n \nuint256\n \nAmount of tokenA\n \nreceived","metadata":{"loc":{"lines":{"from":1594,"to":1632}}}}],["1674",{"pageContent":"amountB\n \nuint256\n \nAmount of tokenB received\n \n \n \n6. removeLiquidityETHWithPermit\n \n \nfunction removeLiquidityETHWithPermit(\n \n  \naddress token,\n \n  \nuint liquidity,\n \n  \nuint amountTokenMin,\n \n  \nuint amountETHMin,\n \n  \naddress to,\n \n  \nuint deadline,\n \n  \nbool \napproveMax, uint8 v, bytes32 r, bytes32 s\n \n) external returns (uint amountToken, uint amountETH);\n \n \nFunction description:\n \nRemove liquidity from the TRC\n-\n20 ⇄ WTRX pool and convert WTRX into TRX. Approval is \nnot needed when removing liquidity due to the existence of permit. \n \n \nParameter description:\n \nParameter\n \nType\n \nDescription\n \ntoken\n \naddress\n \nTRC20 token address\n \nliquidity\n \nuint256\n \nAmount of the liquidity token to be removed\n \namountTokenMin\n \nuint256\n \nMinimum amount of the token to be received; \ncalculated from the slippage\n \namountETHMin\n \nuint256\n \nMinimum amount of TRX to be received; \ncalculated from the slippage\n \nto\n \naddr\ness\n \nAddress receiving token/TRX\n \ndeadline\n \nuint256","metadata":{"loc":{"lines":{"from":1635,"to":1724}}}}],["1675",{"pageContent":"calculated from the slippage\n \namountETHMin\n \nuint256\n \nMinimum amount of TRX to be received; \ncalculated from the slippage\n \nto\n \naddr\ness\n \nAddress receiving token/TRX\n \ndeadline\n \nuint256\n \nUnix timestamp; transaction will revert if \nexceeding this time limit\n \napproveMax\n \nbool\n \nWhether the amount to be approved by the \nsignature is uint(\n-\n1) or liquidity","metadata":{"loc":{"lines":{"from":1724,"to":1754}}}}],["1676",{"pageContent":"v\n \nuint8\n \nv component in permit \nsignature\n \nr\n \nbytes32\n \nr component in permit signature\n \ns\n \nbytes32\n \ns component in permit signature\n \n \nReturns:\n \namountToken\n \nuint256\n \nAmount of tokens received\n \namountETH\n \nuint256\n \nAmount of TRX received\n \n \n \n7. \nremoveLiquidityETHSupportingFeeOnTransferTokens \n \n \nfunction removeLiquidityETHSupportingFeeOnTransferTokens(\n \n  \naddress token,\n \n  \nuint liquidity,\n \n  \nuint amountTokenMin,\n \n  \nuint amountETHMin,\n \n  \naddress to,\n \n  \nuint deadline\n \n) external returns (uint \namountETH);\n \n \nFunction description:\n \nRemove liquidity from the TRC\n-\n20 ⇄ WTRX pool and convert WTRX into TRX. This function \nis applicable to tokens that charge transfer fees (or deflationary tokens). Approval is needed \nbefore the removal of liquidity. \n \n \n \nParameter description:\n \nParameter\n \nType\n \nDescription\n \ntoken\n \naddress\n \nTRC20 token address\n \nliquidity\n \nuint256\n \nAmount of liquidity tokens to be removed\n \namountTokenMin\n \nuint256","metadata":{"loc":{"lines":{"from":1757,"to":1853}}}}],["1677",{"pageContent":"Parameter description:\n \nParameter\n \nType\n \nDescription\n \ntoken\n \naddress\n \nTRC20 token address\n \nliquidity\n \nuint256\n \nAmount of liquidity tokens to be removed\n \namountTokenMin\n \nuint256\n \nMinimum amount of the token needed; \ncalculated from the slippage","metadata":{"loc":{"lines":{"from":1853,"to":1878}}}}],["1678",{"pageContent":"amountETHMin\n \nuint256\n \nMinimum amount of TRX needed; calculated \nfrom the slippage\n \nto\n \naddress\n \nAddress receiving token/TRX\n \ndeadline\n \nuint256\n \nUnix timestamp; transaction will revert if \nexceeding this time limit\n \n \nReturns:\n \namountETH\n \nuint256\n \nAmount of TRX \nreceived\n \n \n \n8. removeLiquidityETHWithPermitSupportingFeeOnTransferTokens \n \n \nfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n \n  \naddress token,\n \n  \nuint liquidity,\n \n  \nuint amountTokenMin,\n \n  \nuint amountETHMin,\n \n  \naddress to,\n \n  \nuint\n \ndeadline,\n \n  \nbool approveMax, uint8 v, bytes32 r, bytes32 s\n \n) external returns (uint amountETH);\n \n \nFunction description:\n \nRemove liquidity from the TRC\n-\n20 ⇄ WTRX pool and convert WTRX into TRX. This function \nis applicable to tokens that charge transfer fees.\n \nApproval is not needed when removing \nliquidity due to the existence of permit. \n \n \nParameter description:\n \nParameter\n \nType\n \nDescription\n \ntoken\n \naddress\n \nTRC20 token address","metadata":{"loc":{"lines":{"from":1881,"to":1967}}}}],["1679",{"pageContent":"Approval is not needed when removing \nliquidity due to the existence of permit. \n \n \nParameter description:\n \nParameter\n \nType\n \nDescription\n \ntoken\n \naddress\n \nTRC20 token address\n \nliquidity\n \nuint256\n \nAmount of liquidity tokens to be removed\n \namountTokenMin\n \nuint256\n \nMinimum amount of the token needed; \ncalculated from the slippage","metadata":{"loc":{"lines":{"from":1967,"to":1996}}}}],["1680",{"pageContent":"amountETHMin\n \nuint256\n \nMinimum amount of TRX needed; calculated \nfrom the slippage\n \nto\n \naddress\n \nAddress receiving token/TRX\n \ndeadline\n \nuint256\n \nUnix timestamp; transaction will \nrevert if \nexceeding this time limit\n \napproveMax\n \nbool\n \nWhether the amount to be approved by the \nsignature is uint(\n-\n1) or liquidity\n \nv\n \nuint8\n \nv component in permit signature\n \nr\n \nbytes32\n \nr component in permit signature\n \ns\n \nbytes32\n \ns component in permit signature\n \n \nReturns:\n \namountETH\n \nuint256\n \nAmount of TRX received\n \n \n \n9. swapExactTokensForTokens \n \n \nfunction swapExactTokensForTokens(\n \n  \nuint amountIn,\n \n  \nuint amountOutMin,\n \n  \naddress[] calldata path,\n \n  \naddress to,\n \n  \nuint deadline\n \n) external returns (uint[] memory \namounts);\n \n \n \nFunction description:\n \nThis parameter is used to swap a specified amount of the input token into the maximum \namount of the output token possible. The first element of the parameter path is the address","metadata":{"loc":{"lines":{"from":1999,"to":2086}}}}],["1681",{"pageContent":"This parameter is used to swap a specified amount of the input token into the maximum \namount of the output token possible. The first element of the parameter path is the address \nof the input token and the last element is t\nhat of the output token. Any elements in between \nrepresent the trading pairs. Approval is needed before the swap. \n \n \nParameter description:","metadata":{"loc":{"lines":{"from":2086,"to":2093}}}}],["1682",{"pageContent":"Parameter\n \nType\n \nDescription\n \namountIn\n \nuint256\n \nAmount of the input token\n \namountOutMin\n \nuint256\n \nMinimum amount of \nthe output token needed; \ncalculated from the slippage\n \npath\n \naddress[] \ncalldata\n \nA group of token addresses with path.length \nequal to or larger than 2; all trading pools \nconsisting of adjacent tokens must exist and \nhave liquidity\n \nto\n \naddress\n \nAddress receivin\ng the output token\n \ndeadline\n \nuint256\n \nUnix timestamp; transaction will revert if \nexceeding this time limit\n \n \nReturns:\n \namounts\n \nuint256[] \nmemory\n \nAmount of the input token and all consequent output \ntoken\n \n \n \n10. swapExactETHForTokens \n \n \nfunction \nswapExactETHForTokens(\n \n  \nuint amountOutMin,\n \n  \naddress[] calldata path,\n \n  \naddress to,\n \n  \nuint deadline\n \n) external payable returns (uint[] memory amounts);\n \n \n \nFunction description:\n \nThis parameter is used to swap a specified amount of TRX into the maximum amoun\nt of the","metadata":{"loc":{"lines":{"from":2097,"to":2179}}}}],["1683",{"pageContent":"uint deadline\n \n) external payable returns (uint[] memory amounts);\n \n \n \nFunction description:\n \nThis parameter is used to swap a specified amount of TRX into the maximum amoun\nt of the \noutput token possible. The first element of the parameter path is the WTRX address and the \nlast element is that of the output token. Any elements in between represent the trading pairs. \n \nParameter description:","metadata":{"loc":{"lines":{"from":2179,"to":2192}}}}],["1684",{"pageContent":"Parameter\n \nType\n \nDescription\n \nmsg.value\n \nuint256\n \nAmount of TRX sent\n \namountOutMin\n \nuint256\n \nMinimum amount of the output token needed; \ncalculated from the slippage\n \npath\n \naddress[] \ncalldata\n \nA group of token addresses with path.length\n \nequal to or larger than 2; all trading pools \nconsisting of adjacent tokens must exist and \nhave liquidity\n \nto\n \naddress\n \nAddress receiving the output token\n \ndeadline\n \nuint256\n \nUnix timestamp; transaction will revert if \nexceeding this time limit\n \n \nReturns:\n \namounts\n \nuint256[] \nmemory\n \nAmount of the input token and all consequent output \ntoken\n \n \n \n11. swapTokensForExactETH\n \n \nfunction swapTokensForExactETH(\n \n  \nuint amountOut,\n \n  \nuint amountInMax,\n \n  \naddress[] calldata path,\n \n  \naddress to,\n \n  \nuint\n \ndeadline\n \n) external returns (uint[] memory amounts);\n \n \n \nFunction description:\n \nThis parameter is used to swap the minimum amount of input token possible into a specific","metadata":{"loc":{"lines":{"from":2196,"to":2280}}}}],["1685",{"pageContent":"address to,\n \n  \nuint\n \ndeadline\n \n) external returns (uint[] memory amounts);\n \n \n \nFunction description:\n \nThis parameter is used to swap the minimum amount of input token possible into a specific \namount of TRX. The first element of the parameter path is the address of the input token, \nand the last element the WTRX address. Any elements in between represent the\n \npairs to be","metadata":{"loc":{"lines":{"from":2280,"to":2297}}}}],["1686",{"pageContent":"traded. Approval is needed before the swap. If the to address is a smart contract, it has to be \nable to receive TRX. \n \n \nParameter description:\n \n \nParameter\n \nType\n \nDescription\n \namountOut\n \nuint256\n \nAmount of TRX to be received \n \namountInMax\n \nuint256\n \nMaximum amount of the input token needed; \ncalculated from the slippage\n \npath\n \naddress[] \ncalldata\n \nA group of token addresses with path.length \nequal to or larger than 2; all trading pools \nconsisting of adjacent tokens must exist and \nhave liquidity\n \nto\n \naddress\n \nAddress receiving TRX\n \ndeadline\n \nuint256\n \nUnix timestamp; transaction will revert if \nexceeding this time limit\n \n \nReturns:\n \namounts\n \nuint256[] \nmemory\n \nAmount of the input token and all consequent output \ntoken\n \n \n \n12. \nswapExactTokensForETH\n \n \nfunction swapExactTokensForETH(\n \n  \nuint amountIn,\n \n  \nuint amountOutMin,\n \n  \naddress[] calldata path,\n \n  \naddress to,\n \n  \nuint deadline\n \n) external returns (uint[] memory amounts);","metadata":{"loc":{"lines":{"from":2299,"to":2382}}}}],["1687",{"pageContent":"function swapExactTokensForETH(\n \n  \nuint amountIn,\n \n  \nuint amountOutMin,\n \n  \naddress[] calldata path,\n \n  \naddress to,\n \n  \nuint deadline\n \n) external returns (uint[] memory amounts);\n \n \n \nFunction description:","metadata":{"loc":{"lines":{"from":2382,"to":2403}}}}],["1688",{"pageContent":"This parameter is used to swap a specified amount of input token into the maximum amount \nof TRX possible. The first element of the parameter path is the address of the input token, \nand the last element the WTRX address. Any elements in between represent th\ne pairs to be \ntraded. If the to address is a smart contract, it has to be able to receive TRX. \n \n \nParameter description:\n \n \nParameter\n \nType\n \nDescription\n \namountIn\n \nuint256\n \nAmount of the input token\n \namountOutMin\n \nuint256\n \nMinimum amount of the output token \nneeded; \ncalculated from the slippage\n \npath\n \naddress[] \ncalldata\n \nA group of token addresses with path.length \nequal to or larger than 2; all trading pools \nconsisting of adjacent tokens must exist and \nhave liquidity\n \nto\n \naddress\n \nAddress receiving TRX\n \ndeadline\n \nu\nint256\n \nUnix timestamp; transaction will revert if \nexceeding this time limit\n \n \nReturns:\n \namounts\n \nuint256[] \nmemory\n \nAmount of the input token and all consequent output \ntoken","metadata":{"loc":{"lines":{"from":2406,"to":2469}}}}],["1689",{"pageContent":"u\nint256\n \nUnix timestamp; transaction will revert if \nexceeding this time limit\n \n \nReturns:\n \namounts\n \nuint256[] \nmemory\n \nAmount of the input token and all consequent output \ntoken\n \n \n \n13. swapETHForExactTokens\n \n \nfunction swapETHForExactTokens(\n \n  \nuint \namountOut,\n \n  \naddress[] calldata path,\n \n  \naddress to,\n \n  \nuint deadline\n \n) external payable returns (uint[] memory amounts);","metadata":{"loc":{"lines":{"from":2469,"to":2506}}}}],["1690",{"pageContent":"Function description:\n \nThis parameter is used to swap the minimum amount of input token possible into a specific \namount of TRX. The first element of the parameter path is the WTRX address and the last \nelement is that of the output token. Any elements in between represent the tra\nding pairs. If \nthe to address is a smart contract, it has to be able to receive TRX. \n \n \nParameter description:\n \n \nParameter\n \nType\n \nDescription\n \namountOut\n \nuint256\n \nAmount of output token to be received\n \nmsg.value \n(amountInMax)\n \nuint256\n \nMaximum amount of TRX to \nbe paid; calculated \nfrom the slippage\n \npath\n \naddress[] \ncalldata\n \nA group of token addresses with path.length \nequal to or larger than 2; all trading pools \nconsisting of adjacent tokens must exist and \nhave liquidity\n \nto\n \naddress\n \nAddress receiving the output tok\nen\n \ndeadline\n \nuint256\n \nUnix timestamp; transaction will revert if \nexceeding this time limit\n \n \nReturns:\n \namounts\n \nuint256[] \nmemory","metadata":{"loc":{"lines":{"from":2511,"to":2574}}}}],["1691",{"pageContent":"to\n \naddress\n \nAddress receiving the output tok\nen\n \ndeadline\n \nuint256\n \nUnix timestamp; transaction will revert if \nexceeding this time limit\n \n \nReturns:\n \namounts\n \nuint256[] \nmemory\n \nAmount of the input token and all consequent output \ntoken\n \n \n14. \nswapExactTokensForTokensSupportingFeeOnTransferTokens\n \n \nfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\n \n  \nuint amountIn,\n \n  \nuint amountOutMin,\n \n  \naddress[] calldata path,\n \n  \naddress to,\n \n  \nuint deadline\n \n) external;","metadata":{"loc":{"lines":{"from":2574,"to":2621}}}}],["1692",{"pageContent":"Parameter \ndescription:\n \nThis parameter is used to swap a specified amount of the input token into the maximum \namount of the output token possible. The first element of the parameter path is the address \nof the input token, and the last element that of the output token\n. Any elements in between \nrepresent the pairs to be traded. This function is applicable to tokens that charge transfer \nfees. Approval is needed before the swap. \n \n \nParameter description:\n \n \nParameter\n \nType\n \nDescription\n \namountIn\n \nuint256\n \nAmount of the input toke\nn\n \namountOutMin\n \nuint256\n \nMinimum amount of the output token needed; \ncalculated from the slippage\n \npath\n \naddress[] \ncalldata\n \nA group of token addresses with path.length\n \nequal to or larger than 2; all trading pools \nconsisting of adjacent tokens must exist and \nhave liquidity\n \nto\n \naddress\n \nAddress receiving the output token\n \ndeadline\n \nuint256\n \nUnix timestamp; transaction will revert if \nexceeding this time limit\n \n \n15.","metadata":{"loc":{"lines":{"from":2626,"to":2685}}}}],["1693",{"pageContent":"have liquidity\n \nto\n \naddress\n \nAddress receiving the output token\n \ndeadline\n \nuint256\n \nUnix timestamp; transaction will revert if \nexceeding this time limit\n \n \n15. \nswapExactETHForTokensSupportingFeeOnTransferTokens\n \n \nfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\n \n  \nuint amountOutMin,\n \n  \naddress[] calldata path,\n \n  \naddress to,\n \n  \nuint deadline\n \n) external payable;\n \n \nParameter description:","metadata":{"loc":{"lines":{"from":2685,"to":2722}}}}],["1694",{"pageContent":"This parameter is use\nd to swap a specified amount of TRX into the maximum amount of the \noutput token possible. The first element of the parameter path is the WTRX address, and the \nlast element that of the output token. Any elements in between represent the pairs to be \ntraded.T\nhis function is applicable to tokens that charge transfer fees (or deflationary tokens). \n \n \nParameter description:\n \n \nParameter\n \nType\n \nDescription\n \nmsg.value\n \n(amountIn)\n \nuint256\n \nAmount of TRX sent\n \namountOutMin\n \nuint256\n \nMinimum amount of the output token \nneeded; \ncalculated from the slippage\n \npath\n \naddress[] \ncalldata\n \nA group of token addresses with path.length\n \nequal to or larger than 2; all trading pools \nconsisting of adjacent tokens must exist and \nhave liquidity\n \nto\n \naddress\n \nAddress receiving the output token\n \ndeadline\n \nuint256\n \nUnix timestamp; transaction will revert if \nexceeding this time limit\n \n \n \n \n \n \n16. \nswapExactTokensForETHSupportingFeeOnTransferTokens","metadata":{"loc":{"lines":{"from":2725,"to":2788}}}}],["1695",{"pageContent":"Address receiving the output token\n \ndeadline\n \nuint256\n \nUnix timestamp; transaction will revert if \nexceeding this time limit\n \n \n \n \n \n \n16. \nswapExactTokensForETHSupportingFeeOnTransferTokens\n \n \nfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\n \n  \nuint amountIn,\n \n  \nuint amountOutMin,\n \n  \naddress[] calldata path,\n \n  \naddress to,\n \n  \nuint deadline\n \n) external;","metadata":{"loc":{"lines":{"from":2788,"to":2823}}}}],["1696",{"pageContent":"Parameter description:\n \nThis parame\nter is used to swap a specified amount of input token into the maximum amount \nof TRX possible. The first element of the parameter path is the address of the input token, \nand the last element the WTRX address. Any elements in between represent the pairs to \nbe \ntraded. This function is applicable to tokens that charge transfer fees (or deflationary \ntokens). If the to address is a smart contract, it has to be able to receive TRX. \n \n \nParameter description:\n \n \nParameter\n \nType\n \nDescription\n \namountIn\n \nuint256\n \nAmount of the input token\n \namountOutMin\n \nuint256\n \nMinimum amount of the output token needed; \ncalculated from the slippage\n \npath\n \naddress[] \ncalldata\n \nA group of token addresses with path.length\n \nequal to or larger than 2; all trading pools \nconsisting of adjacent tokens must exist and \nhave liquidity\n \nto\n \naddress\n \nAddress receiving TRX\n \ndeadline\n \nuint256\n \nUnix timestamp; transaction will revert if","metadata":{"loc":{"lines":{"from":2828,"to":2882}}}}],["1697",{"pageContent":"consisting of adjacent tokens must exist and \nhave liquidity\n \nto\n \naddress\n \nAddress receiving TRX\n \ndeadline\n \nuint256\n \nUnix timestamp; transaction will revert if \nexceeding this time limit","metadata":{"loc":{"lines":{"from":2882,"to":2896}}}}],["1698",{"pageContent":"SUN\nV2.0\nLast\nupdated:\nJune\n28,\n2023\n1\nIntroduction\nSUN.io\nwas\nfounded\nto\nfoster\nthe\ngrowth\nof\nTRON’s\nDeFi\necosystem.\nThanks\nto\nthe\ncommunity\nand\nopen-source\nsmart\ncontracts,\nSUN.io\nhas\nestablished\nties\nwith\nother\nDeFi\nprojects\non\nthe\nTRON\npublic\nchain\nthrough\ndecentralized\nliquidity\nmining.\nUp\nto\nnow,\nSUN.io\nhas\ngone\nthrough\nseveral\niterations\nand\nacquired\nJustSwap.\nThe\nupgraded\nSUN.io\nplatform\nintegrates\nsuch\nfunctions\nas\ntoken\nswaps,\nliquidity\nmining,\nstablecoin\nswaps\nand\ndecentralized\nautonomous\norganisation\n(DAO)\non\nthe\nTRON\npublic\nchain,\nfocusing\non\nbuilding\nTRON’s\nDeFi\necosystem\nwith\ndecentralized\nexchanges\n(DEX)\nat\nits\ncore.\nAs\nthe\nnative\ntoken\nof\nSUN.io,\nSUN\nplays\nan\nimportant\nrole\nin\nplatform\ngovernance,\nbuying\nback\nand\nburning\nrewards,\noffering\nrewards\nto\nliquidity\nproviders\nand\nother\nfeatures,\nand\naligns\nwith\nTRON’s\naspiration\nto\nbring\ncommon\nbenefits\nto\nall\nusers.\n1.1\nVision\nSUN.io\naims\nto\nbuild\nan\nintegrated\nDEX\necosystem\nwith\na\nhigh\nlevel\nof\nfunctionality,\nprofitability","metadata":{"loc":{"lines":{"from":1,"to":150}}}}],["1699",{"pageContent":"other\nfeatures,\nand\naligns\nwith\nTRON’s\naspiration\nto\nbring\ncommon\nbenefits\nto\nall\nusers.\n1.1\nVision\nSUN.io\naims\nto\nbuild\nan\nintegrated\nDEX\necosystem\nwith\na\nhigh\nlevel\nof\nfunctionality,\nprofitability\nand\nsecurity\nby\nleveraging\nmultiple\ntransaction\nprotocols.\nIt\nprovides\nvarious\nincentives\nfor\nparticipants,\nincluding\nrewards\nof\ntransaction\nfees\noffered\nto\nliquidity\nmarket\nmakers,\nliquidity\nmining\nof\nLP\nTokens\nand\nstaking\nrewards\nof\nthe\nSUN\ntoken.\nMeanwhile,\nthe\nburning\nmechanism\nof\nSUN\nand\nthe\nvoting\nrights\nof\nSUN\nholders\ntogether\nform\na\nclosed-loop\necosystem.\n1.2\nMarket\nProspects\nDeFi\nstarted\nto\nrise\nin\npopularity\nin\n2020\nand\ngradually\ntakes\nthe\nmain\nstage\nin\nblockchain.\nIt\nsaw\ncontinued\nrobust\ngrowth\nin\n2021\nand\nhas\nbecome\none\nof\nthe\nlargest\napplications\nof\nthis\nindustry.","metadata":{"loc":{"lines":{"from":150,"to":270}}}}],["1700",{"pageContent":"Figure\n1\nTVL\nof\nthe\nDeFi\nMarket\nThe\noverall\ntrend\nof\nthe\ntotal\nvalue\nlocked\n(TVL)\ndirectly\nreflects\nthe\ndevelopment\nof\nthe\nDeFi\nmarket.\nAccording\nto\nthe\nlatest\nstatistics\npublished\nby\nDeFi\nLlama\n(as\nof\nOctober\n25,\n2021),\nthe\nTVL\nof\nDeFi\nprojects\nwitnessed\nexponential\ngrowth\nsince\nthe\nbeginning\nof\n2021,\nreaching\n$240\nbillion\nat\nits\npeak.\nA\ngrowing\nnumber\nof\norganisations\nare\npromoting\ngreater\nTVL\ngrowth\nthrough\ndeveloping\nmature\nand\nsecure\nprotocols.\nIn\naddition,\nmassive\nearnings\ngenerated\nby\nthe\nDeFi\nsector\nare\nencouraging\nindividual\ninvestors\nto\nmigrate\nfrom\ncentralized\nplatforms\nto\nthe\nDeFi\nspace.\nDriven\nby\nincreased\nadoption\namong\nall\ninvestors,\nDeFi\nis\nentering\na\nnew\nstage\nof\ngrowth.\n1.3\nSolutions\nof\nSUN\nSUN.io,\nthe\nfirst\nplatform\nthat\nintegrates\non-chain\ntoken\nswaps,\nliquidity\nmining,\nstablecoin\nswaps\nand\nDAO\non\nthe\nTRON\npublic\nchain,\nprovides\nusers\nwith\ndiversified\none-stop\nservices:\n●\nEfficient\nand\nsecure\nswaps\namong\nany\ntokens\nwith\nthe\nbest\nprices—\nSunSwap\n●\nEfficient\nswaps","metadata":{"loc":{"lines":{"from":272,"to":427}}}}],["1701",{"pageContent":"stablecoin\nswaps\nand\nDAO\non\nthe\nTRON\npublic\nchain,\nprovides\nusers\nwith\ndiversified\none-stop\nservices:\n●\nEfficient\nand\nsecure\nswaps\namong\nany\ntokens\nwith\nthe\nbest\nprices—\nSunSwap\n●\nEfficient\nswaps\namong\nstablecoins\nwith\nlow\nslippage\nand\nfees—\nStablecoin\npool\n●\nUser-governed\nliquidity\nmining\nthat\ncan\nbe\nboosted—\nGovernance\nmining\n●\nSUN\ntoken\nstaking\nrewards—\nRewards\nfrom\nvoting\nrights\n(veSUN)\n2\nGovernance\nMechanism\n2.1\nEconomic\nModel","metadata":{"loc":{"lines":{"from":427,"to":492}}}}],["1702",{"pageContent":"Figure\n2\nDistribution\nof\nthe\nSUN\nToken\nThere\nare\nno\npre-mining,\ntokens\nreserved\nfor\nteams,\ncornerstone\ninvestment,\nor\nprivate\nplacement\nfor\nthe\nSUN\ntoken.\nInstead,\nvarious\nfunctions\nand\nmechanisms\nof\nthe\necosystem\nguarantee\nthat\nthe\nSUN\ntoken\ncan\nbe\ndistributed\nin\na\nfair\nand\nsustained\nway.\nThe\ndistribution\nof\nSUN\nhas\ngone\nthrough\ntwo\nphases—\nV1\nand\nV2—\nas\nfollows:\nDistribution\nof\nSUN\ntokens\n(V1):\n●\nGenesis\nMining\n9.3%\n●\nOfficial\nMining\n15.6%\n●\nJustLend\nMining\n1.2%\n●\nCentury\nMining\n2.4%\nDistribution\nof\nSUN\ntokens\n(V2):\n●\nGenesis\nMining\n4.2%\n●\nGovernance\nMining\n19.1%\n●\nveCRV\nAirdrop\n1.0%\nApart\nfrom\nthe\ntokens\ndistributed\nabove,\n47.2%\nof\nthe\nSUN\ntokens\nremain\nundistributed.\nGoing\nforward,\nthe\nSUN\nplatform\nwill\ntake\non\nmore\nfeatures\nas\nthe\necosystem\ngrows,\nand\nthe\nnumber\nof\nuse\ncases\nfor\nthe\nSUN\ntoken\nwill\nfurther\nincrease,\nincentivising\nusers\nto\nmake\na\nsustained\ncontribution\nto\nthe\ngrowth\nof\nthe\necosystem.\n2.2\nBurning","metadata":{"loc":{"lines":{"from":494,"to":646}}}}],["1703",{"pageContent":"The\nnewest\nprotocol\nof\nSunSwap\nsupports\nthe\nbuyback\nand\nburning\nof\na\ncertain\namount\nof\nrewards\nfrom\ntransaction\nfees\non\nDEX.\nBuyback\nMethod:\nThrough\nsmart\ncontracts,\na\nproportion\nof\nthe\ntransaction\nfees\n(accounting\nfor\n0.05%\nof\neach\ntransaction)\nis\nreserved\nas\nLP\nTokens,\nwhich\nare\nthen\nswapped\nfor\nSUN\nat\na\npre-determined\nexchange\nrate\nand\nstored\nin\na\ndesignated\naddress\nto\nbe\nburned.\nBurning\nMethod:\nThe\nSUN\ntokens\nstored\nin\nthe\nabove-mentioned\naddress\nwill\nbe\nburned,\nby\ntransferring\nthose\ntokens\nbought\nback\nwithin\na\nmonth\nto\nthe\nblackhole\naddress\nof\nTRON\n(T9yD14Nj9j7xAB4dbGeiX9h8unkKHxuWwb)\neach\nmonth.\n2.3\nIncentives\n2.3.1\nSUN\nGovernance\nMining\nIn\nthe\nmarket\nmaker\nmechanism\nof\nSunSwap,\nthe\ndepth\nof\nthe\ntransaction\npool\nmainly\ncomes\nfrom\nliquidity\nproviders\n(LPs).\nThe\nswap\nmechanism\nin\nthe\nstablecoin\npool\nalso\nrequires\nusers’\nefforts\nto\nprovide\nliquidity\nso\nas\nto\nmaintain\nstable\nprices\nfor\nswaps.\nAs\na\nresult,\nthe\ngovernance\nmining\nof\nthe\nSUN\nplatform\nnow\nsupports\nstaking\nLP\nTokens\nfor","metadata":{"loc":{"lines":{"from":648,"to":804}}}}],["1704",{"pageContent":"stablecoin\npool\nalso\nrequires\nusers’\nefforts\nto\nprovide\nliquidity\nso\nas\nto\nmaintain\nstable\nprices\nfor\nswaps.\nAs\na\nresult,\nthe\ngovernance\nmining\nof\nthe\nSUN\nplatform\nnow\nsupports\nstaking\nLP\nTokens\nfor\nmining\non\nSunSwap\nand\nin\nthe\nstablecoin\npool.\nIn\nthe\nmeantime,\nusers\ncan\nparticipate\nin\nvoting\nto\ndetermine\nthe\nweight\nof\na\nmining\npool,\nand\nstake\nSUN\nto\nget\nveSUN\nas\na\nboost\nmultiplier\nfor\nmining,\nwhich\ncan\nmotivate\nusers\nto\nhold\nSUN\nfor\na\nlonger\nterm.\nThe\nSUN\nplatform\nactively\npromotes\nmore\nusers\nto\nprovide\nliquidity\nthrough\na\nvariety\nof\nways.\n2.3.2\nSUN\nStaking\nRewards\nThe\nSUN\nplatform\nallows\nusers\nto\nstake\nSUN\nto\nobtain\nveSUN.\nBased\non\nthe\namount\nof\nveSUN\nusers\nhold,\nthe\nplatform\ndelivers\n50%\nof\nthe\ntransaction\nfees\ngenerated\nin\nthe\nstablecoin\npool\nto\nveSUN\nholders.\n3\nUnderlying\nTechnology\n3.1\nSunSwap\nAMM\nModel\nSunSwap\nadopts\nthe\nAMM\n(Automated\nMarket\nMaker)\nmodel,\nthe\nmost\nwidely-used\ntransaction\nmodel\nin\nDeFi.\nUnlike\nan\norder\nbook\nof\na\ntraditional\nexchange,\nthe\nAMM\nuses\na","metadata":{"loc":{"lines":{"from":804,"to":971}}}}],["1705",{"pageContent":"Technology\n3.1\nSunSwap\nAMM\nModel\nSunSwap\nadopts\nthe\nAMM\n(Automated\nMarket\nMaker)\nmodel,\nthe\nmost\nwidely-used\ntransaction\nmodel\nin\nDeFi.\nUnlike\nan\norder\nbook\nof\na\ntraditional\nexchange,\nthe\nAMM\nuses\na\nconstant-product\nmathematical\nformula\nto\ndetermine\nthe\nprices\nof\nassets,\nso\nthat\ntransactions\ncan\nbe\ndone\nin\nan\nautomatic\nway\nand\nthe\nliquidity\nof\ntrading\npairs\ncan\nbe\nsafeguarded.\nA\nfew\ndefinitions\nrelated\nto\nthe\nAMM\nmodel\nare\nclarified\nas\nfollows:","metadata":{"loc":{"lines":{"from":971,"to":1042}}}}],["1706",{"pageContent":"●\nLiquidity:\nthe\nsum\nof\nthe\ntwo\ntokens\nin\nthe\nsmart\ncontracts\nof\na\ntrading\npair.\nWe\ncan\nincrease\n(provide)\nliquidity\nby\nstaking\nthe\ntwo\ntokens\nat\nthe\nsame\ntime.\n●\nLiquidity\nPool:\nthe\npool\nof\nliquidity,\ni.e.\na\ncollection\nof\nassets\nin\nthe\nAMM.\nSunSwap\nis\nable\nto\nmatch\norders\nthrough\nAMM\nin\nthe\nliquidity\npool.\n●\nLiquidity\nProvider\n(LP):\nusers\nwho\nprovide\nliquidity\nto\nthe\npool.\n●\nLP\nToken:\nA\ntrading\npair\nitself\nis\na\nTRC-20\nsmart\ncontract,\nwhose\ntokens\nrepresent\nthe\nsupply\nof\nliquidity\nand\nare\nreferred\nto\nas\nLP\nTokens.\nWhen\nLPs\nare\noffering\nliquidity,\nSunSwap\nwill\nmint\ntokens\nand\ngrant\nthem\nto\nLPs;\nit\nwill\nburn\nLP\nTokens\nwhen\nLPs\nwithdraw\nliquidity.\n●\nLiquidity\nPool\nShare\n(LPS):\nthe\nproportion\nof\nLP\nTokens\nin\ncirculation\nheld\nby\neach\nLP,\nshowing\nthe\ncontribution\nrate\nof\neach\nLP\nto\nthe\ntotal\nliquidity.\n·\n3.1.1\nCreating\nLiquidity:\nWhen\na\nliquidity\npool\nis\nfirst\ncreated,\nthe\noriginal\namount\nof\nthe\ntwo\ntokens\nboth\nstands\nat\n0.\nIn\norder\nto\nmake\ntransactions\npossible,\nLPs\nhave\nto\nstake\na","metadata":{"loc":{"lines":{"from":1044,"to":1220}}}}],["1707",{"pageContent":"liquidity.\n·\n3.1.1\nCreating\nLiquidity:\nWhen\na\nliquidity\npool\nis\nfirst\ncreated,\nthe\noriginal\namount\nof\nthe\ntwo\ntokens\nboth\nstands\nat\n0.\nIn\norder\nto\nmake\ntransactions\npossible,\nLPs\nhave\nto\nstake\na\ncertain\namount\nof\nthe\ntwo\ntokens\nto\ninitiate\nthe\nliquidity\npool.\nThe\nfirst\nLP\nis\nthe\none\nwho\nsets\nthe\noriginal\nprice\nof\nliquidity\nand\ngains\nhis/her\nLPS.\nThe\nprices\nof\nthe\ntwo\ntokens\nin\nthe\npool\nare\ndetermined\nby\nthe\nrelative\namount\nof\none\ntoken\ncompared\nto\nthe\nother.\nThis\nmeans\nthat\nthe\ntotal\namount\nof\nthe\ntwo\nremains\nthe\nsame,\nbut\nthe\namount\nof\neach\ntoken\nwill\nchange\nafter\neach\ntransaction,\nleading\nto\nchanges\nin\nprices\nas\nwell.\nThe\nadjustments\nin\nprices\nare\nbased\non\nthe\nformula\nbelow:\n(k\nrepresents\na\nconstant)\n푥\n×\n푦\n=\n푘\n3.1.1.1\nSunSwap\nV1\n&\nV1.5\nand\nin\nthe\nformula\nabove\nrefer\nto\nthe\namount\nof\nthe\ntwo\ntokens\nrespectively.\nAccording\nto\nthe\n푥\n푦\nsmart\ncontracts\nof\nV1\nand\nV1.5,\none\nof\nthe\ntokens\nhas\nto\nbe\nTRX.\nThis\nis\nwhy,\nin\nthis\nsection\n(3.1),\ntoken\nX\nrefers\nto\nTRX.\nIf\nthe\nfirst\nLP\nprovides\nan","metadata":{"loc":{"lines":{"from":1220,"to":1408}}}}],["1708",{"pageContent":"two\ntokens\nrespectively.\nAccording\nto\nthe\n푥\n푦\nsmart\ncontracts\nof\nV1\nand\nV1.5,\none\nof\nthe\ntokens\nhas\nto\nbe\nTRX.\nThis\nis\nwhy,\nin\nthis\nsection\n(3.1),\ntoken\nX\nrefers\nto\nTRX.\nIf\nthe\nfirst\nLP\nprovides\nan\namount\nof\nand\nof\nthe\ntwo\ntokens,\nand\nthe\nLP\nTokens\nare\n,\nthen:\n푥\n0\n푦\n0\n푠\n0\n푠\n0\n=\n푥\n0\ne.g.\nIf\n=100,000,\n=1,000,\nthen\n=100,000,\nwhich\nmeans\nthat\nafter\nstaking\ntoken\nX\n(TRX)\nand\n푥\n0\n푦\n0\n푠\n0\ntoken\nY,\nusers\ncan\nget\n100,000\nLP\nTokens,\nand\nthe\ntotal\namount\nof\nLP\nTokens\nin\nthe\nliquidity\npool\nis\n100,000\nas\nwell.\nTherefore,\nthe\nfirst\nLP\nholds\na\n100%\nLPS.\nMeanwhile,\nin\nthe\nliquidity\npool,\nthe\nrelative\nprice\nof\ntoken\nY\nto\ntoken\nX\nis:\n1\nY=\n100,000/1,000=100\nX.\nFor\nexample,\nif\ntoken\nX\n푥\n0\n/\n푦\n0\n=\nis\nTRX\nand\nY\nis\nSUN,\nthen\n1\nSUN\n=\n100\nTRX.","metadata":{"loc":{"lines":{"from":1408,"to":1566}}}}],["1709",{"pageContent":"3.1.1.2\nSunSwap\nV2\nand\nrepresent\nthe\namount\nof\ntwo\ndifferent\ntokens.\nIf\nthe\nfirst\nLP\nprovides\nan\namount\nof\nand\n푥\n푦\n푥\n0\nof\nthe\ntwo\ntokens,\nand\nthe\nLP\nTokens\nobtained\nare\n,\nthen:\n푦\n0\n푠\n0\n푠\n0\n*\n=\n푥\n0\n*\n*\n푦\n0\n*\n−\n1000\nNotes:","metadata":{"loc":{"lines":{"from":1568,"to":1621}}}}],["1710",{"pageContent":"①\nThe\nmark\n*\nmeans\nthat\nthe\nvalue\nis\nthe\nreal\nvalue\nwithout\nomitting\ndecimal\nplaces.\nFor\nexample,\nif\n=10,\nand\nthe\ndecimal\nplaces\nof\nall\nLP\nTokens\nare\n18,\nthen\n=\n.\n푠\n0\n푠\n0\n*\n1\n0\n1\n9\n②\nTo\nprevent\nusers\nfrom\ncompletely\nremoving\nall\nliquidity,\nthe\ndeducted\n1,000\n(decimal\nplaces\nomitted.\nThe\nreal\nvalue\nis\n1000/\n)\nLP\nTokens\nwill\nbe\ndeposited\ninto\na\nblackhole\n10\n1\n8\n=\n10\n−\n1\n5\naddress.\ne.g.\nSuppose\n=10\n(decimal\nplaces:\n18),\n=10\n(decimal\nplaces:\n18),\nwe\nhave\n=10\n-\n,\nwhich\n푥\n0\n푦\n0\n푠\n0\n \n1\n0\n−\n1\n5\nmeans\nthat\nusers\ncan\nget\n10\n-\nLP\nTokens\nafter\nstaking\ntoken\nX\nand\nY.\nAlso,\nthe\ntotal\nliquidity\n \n1\n0\n−\n1\n5\nof\nthe\nliquidity\npool\nis\n10\nas\nwell,\nso\nthe\nfirst\nLP\nholds\na\n100%\nLPS\n(with\nfew\ntokens\ndeposited\ninto\nthe\nblackhole\naddress).\nMeanwhile,\nin\nthe\nliquidity\npool,\nthe\nrelative\nprice\nof\ntoken\nY\nto\ntoken\nX\nis:\n1\nY=\n100,000/1,000=100\nX.\nFor\nexample,\nif\ntoken\nX\nis\nTRX\nand\nY\nis\nSUN,\nthen\n1\nSUN\n=\n100\n푥\n0\n/\n푦\n0\n=\nTRX.\n3.1.1.3\nSunSwap\nV3\nSunSwap\nV3\nadopts\na\nconcentrated\nliquidity\nmodel\nbased\non\nconstant","metadata":{"loc":{"lines":{"from":1623,"to":1834}}}}],["1711",{"pageContent":"X\nis:\n1\nY=\n100,000/1,000=100\nX.\nFor\nexample,\nif\ntoken\nX\nis\nTRX\nand\nY\nis\nSUN,\nthen\n1\nSUN\n=\n100\n푥\n0\n/\n푦\n0\n=\nTRX.\n3.1.1.3\nSunSwap\nV3\nSunSwap\nV3\nadopts\na\nconcentrated\nliquidity\nmodel\nbased\non\nconstant\nproduct,\nintroducing\nthe\nidea\nof\nvirtual\nliquidity\nto\nSunSwap\nV2.\nThe\nformula\nfor\nthis\nmarket\nmaker\nmodel\nis\nthe\nfollowing:\n（\n푥\n+\n푥\n_\n푣\n푖\n푟\n푡\n푢\n푎\n푙\n）\n*\n(\n푦\n+\n푦\n_\n푣\n푖\n푟\n푡\n푢\n푎\n푙\n)\n=\n퐿\n2\nIt\nis\nclear\nfrom\nthe\nmechanism\nof\nconcentrated\nliquidity\nthat\nx_virtual\nand\ny_virtual\ncorrelate\nwith\np_upper\nand\np_lower\n.\nThe\nformula\nfor\nthe\nconcentrated\nliquidity\nmodel\ncan\nthen\nbe\nderived\nas\nthe\nfollowing:\n（\n푥\n+\n퐿\n푃\n푢\n푝\n푝\n푒\n푟\n）\n*\n(\n푦\n+\n퐿\n*\n푃\n푙\n표\n푤\n푒\n푟\n)\n=\n퐿\n2\nIt\ncan\nbe\ninferred\nfrom\nthe\nformula\nthat\nV3\nallows\nusers\nto\nprovide\nliquidity\nwithin\na\ncertain\nprice\nrange,\nas\nillustrated\nbelow:\nFigure\n3\nSimulation\nof\nreal\nliquidity","metadata":{"loc":{"lines":{"from":1834,"to":2013}}}}],["1712",{"pageContent":"SunSwap\nV3\ncalculates\nliquidity\nbased\non\nthe\nformula\nL=\n푥푦\nSunSwap\nV3\ncalculates\nprices\nbased\non\nthe\nformula\n푝\n=\n푦\n/\n푥\nIt\ncan\nbe\ninferred\nfrom\nthe\nabove\nformulas\nthat\n∆\n푥\n=\n（\n1\n푝\n푐\n−\n1\n푝\n푏\n）\n퐿\nNote:\nrepresents\nthe\namount\nof\ntoken0\nadded;\nand\nrepresent\nthe\nrespective\nprice\nof\nb\nand\n∆\n푥\n푝\n푏\n푝\n푐\nc\nin\nFigure\n3.\n∆\n푦\n=\n（\n푝\n푐\n−\n푝\n푎\n）\n퐿\nNote:\nrepresents\nthe\namount\nof\ntoken1\nadded;\nand\nrepresent\nthe\nrespective\nprice\nof\na\nand\n∆\n푦\n푝\n푎\n푝\n푐\nc\nin\nFigure\n3.\nTwo\nliquidity\nformulas\ncan\nbe\nthereby\nderived:\nL=\n∆\n푥\n푝\n푏\n푝\n푐\n푝\n푏\n−\n푝\n푐\nL=\n∆\n푦\n푝\n푐\n−\n푝\n푎\nTake\nthe\nminimum\nof\nthe\ntwo\nL\nvalues\nas\nthe\nliquidity\nobtained.\nExample:\nAdd\n1\nX\nand\n5,000\nY\nto\na\nspot\npool\nwhere\n1\nX\n=\n5,000\nY.\nSet\nthe\nlower\nlimit\nof\nthe\nprice\nrange\nto\n4,545\nY\nand\nthe\nupper\nlimit\nto\n5,500\nY.\nThe\nliquidity\nobtained\nis\ncalculated\nas\nfollows:\n,\n=\n,\n=\n.\n푝\n푐\n=\n5\n0\n0\n0\n/\n1\n≈\n7\n0\n.\n7\n1\n푝\n푏\n5\n5\n0\n0\n/\n1\n≈\n7\n4\n.\n1\n6\n푝\n푎\n4\n5\n4\n5\n/\n1\n≈\n6\n7\n.\n4\n2\n;\noutput\nL\nin\nQ64.96\nformat,\nL=1519437308014769733632.\n퐿\n=\n \nΔ\n푥\n푝\n푏\n푝\n푐\n푝\n푏\n−\n푝\n푐\n=\n1\n푋\n*\n7\n4\n.\n1\n6\n*\n7\n0","metadata":{"loc":{"lines":{"from":2015,"to":2282}}}}],["1713",{"pageContent":",\n=\n.\n푝\n푐\n=\n5\n0\n0\n0\n/\n1\n≈\n7\n0\n.\n7\n1\n푝\n푏\n5\n5\n0\n0\n/\n1\n≈\n7\n4\n.\n1\n6\n푝\n푎\n4\n5\n4\n5\n/\n1\n≈\n6\n7\n.\n4\n2\n;\noutput\nL\nin\nQ64.96\nformat,\nL=1519437308014769733632.\n퐿\n=\n \nΔ\n푥\n푝\n푏\n푝\n푐\n푝\n푏\n−\n푝\n푐\n=\n1\n푋\n*\n7\n4\n.\n1\n6\n*\n7\n0\n.\n7\n1\n7\n4\n.\n1\n6\n−\n7\n0\n.\n7\n1\n;\nthen\noutput\nL\nin\nQ64.96\nformat,\nL=1517882343751509868544.\nTake\n퐿\n=\n∆\n푦\n푝\n푐\n−\n푝\n푎\n=\n5\n0\n0\n0\n푌\n7\n0\n.\n7\n1\n−\n6\n7\n.\n4\n2\nthe\nminimum\nof\nthe\ntwo\nvalues,\nand\nthe\nliquidity\nis\n1517882343751509868544.\n3.1.2\nIncreasing\nLiquidity:\nWhen\nthere\nis\nexisting\nliquidity\nin\nthe\npool,\nadditional\nliquidity\ncan\nbe\nadded\naccording\nto\nthe\nratio\nof\nthe\namount\nof\ntoken\nX\nto\ntoken\nY,\nand\nLP\nTokens\nwill\nbe\nminted\nbased\non\nthis\nratio\nas\nwell.","metadata":{"loc":{"lines":{"from":2282,"to":2461}}}}],["1714",{"pageContent":"Suppose\nthe\ncurrent\namount\nof\ntoken\nX\nis\n,\nthat\nof\ntoken\nY\n,\nand\nthat\nof\nLP\nTokens\n푥\n푐\n푢\n푟\n푟\n푒\n푛\n푡\n푦\n푐\n푢\n푟\n푟\n푒\n푛\n푡\n;\nthe\nnewly-added\namount\nof\ntoken\nX\nis\nand\nY\n(under\ncommon\ncircumstances,\n푠\n푐\n푢\n푟\n푟\n푒\n푛\n푡\n푥\n푎\n푑\n푑\n푦\n푎\n푑\n푑\n/\n=\n/\n,\nso\nliquidity\nis\nadded\nbased\non\nthe\nsame\nratio),\nand\nthe\namount\nof\nnew\n푥\n푐\n푢\n푟\n푟\n푒\n푛\n푡\n푥\n푎\n푑\n푑\n푦\n푐\n푢\n푟\n푟\n푒\n푛\n푡\n푦\n푎\n푑\n푑\nLP\nTokens\nis\n,\nthen\nwe\nhave:\n푠\n푎\n푑\n푑\n푠\n푎\n푑\n푑\n=\n푚푖푛\n(\n푥\n푎푑푑\n푥\n푐푢푟푟푒푛푡\n,\n푦\n푎푑푑\n푦\n푐푢푟푟푒푛푡\n)\n×\n \n푠\n푐\n푢\n푟\n푟\n푒\n푛\n푡\nE.g.\nIf\nanother\nuser\nadds\n2000\nX\nand\n20\nY\nto\nthe\nliquidity\npool,\nhe/she\ncan\nget\n2000\nLP\nTokens.\n3.1.3\nWithdrawing\nLiquidity:\nWhen\na\nuser\nwithdraws\nliquidity,\nhe/she\ncan\nget\nX\nand\nY\naccording\nto\nthe\nsame\nratio.\nSuppose\nthe\ncurrent\namount\nof\ntoken\nX\nis\n,\nthat\nof\ntoken\nY\n,\nthat\nof\nLP\nTokens\n,\n푥\n푐\n푢\n푟\n푟\n푒\n푛\n푡\n푦\n푐\n푢\n푟\n푟\n푒\n푛\n푡\n푠\n푐\n푢\n푟\n푟\n푒\n푛\n푡\nand\nthe\namount\nof\nLP\nTokens\nto\nbe\nremoved\nis\n,\nthen\nthe\nuser\ncan\nget\nan\namount\nof\n푠\n푟\n푒\n푚\n표\n푣\n푒\n푥\n푤\n푖\n푡\nℎ\n푑\n푟\n푎\n푤\nand\nof\nthe\ntwo\ntokens\nrespectively,\nas\nshown:\n푦\n푤\n푖\n푡\nℎ\n푑\n푟\n푎\n푤\n,\n푥\n푤\n푖\n푡\nℎ\n푑\n푟\n푎\n푤\n=\n푠","metadata":{"loc":{"lines":{"from":2463,"to":2752}}}}],["1715",{"pageContent":"the\namount\nof\nLP\nTokens\nto\nbe\nremoved\nis\n,\nthen\nthe\nuser\ncan\nget\nan\namount\nof\n푠\n푟\n푒\n푚\n표\n푣\n푒\n푥\n푤\n푖\n푡\nℎ\n푑\n푟\n푎\n푤\nand\nof\nthe\ntwo\ntokens\nrespectively,\nas\nshown:\n푦\n푤\n푖\n푡\nℎ\n푑\n푟\n푎\n푤\n,\n푥\n푤\n푖\n푡\nℎ\n푑\n푟\n푎\n푤\n=\n푠\n푟푒푚표푣푒\n푠\n푐푢푟푟푒푛푡\n×\n \n푥\n푐\n푢\n푟\n푟\n푒\n푛\n푡\n푦\n푤\n푖\n푡\nℎ\n푑\n푟\n푎\n푤\n=\n푠\n푟푒푚표푣푒\n푠\n푐푢푟푟푒푛푡\n×\n \n푦\n푐\n푢\n푟\n푟\n푒\n푛\n푡\n3.1.4\nSwapping\nSwapping\nis\nalso\nbased\non\nthe\nconstant\nproduct\nformula,\nwith\nand\nrepresenting\nthe\namount\nof\n푥\n푦\ntoken\nX\nand\ntoken\nY:\n(k\nrepresents\na\nconstant)\n푥\n×\n푦\n=\n푘\nIf\nthe\nuser\nwants\nto\nswap\ntoken\nX\nfor\nY\nin\nthe\nliquidity\npool,\nsuppose\nthe\namount\nof\nX\nto\nbe\nswapped\nis\nand\nthe\namount\nof\nY\ngained\n,\nthen:\n∆\n푥\n∆\n푦\n（\n푥\n+\n∆\n푥\n)\n×\n(\n푦\n−\n∆\n푦\n)\n=\n푘\n∆\n푦\n=\n푦\n−\n푘\n푥\n+\n∆\n푥\n=\n∆\n푥\n \n×\n \n푦\n푥\n+\n∆\n푥\nAs\nis\nshown,\nthe\nproduct\nof\nthe\ntotal\namount\nof\nX\nand\nY\nalways\nremains\nthe\nsame\nbefore\nand\nafter\nthe\ntransaction.\nThis\nmeans\nthat\nthe\nprice\nof\nthis\ntransaction\ncan\nbe\nseen\nas\nthe\nratio\nof\nthe\namount","metadata":{"loc":{"lines":{"from":2752,"to":2994}}}}],["1716",{"pageContent":"of\ntoken\nX\nto\nthat\nof\nY,\ngiven\nthat\nthe\namount\nin\nthis\ntransaction\nis\nrelatively\nsmall\ncompared\nto\nthe\ntotal\ntokens\nof\nthe\nliquidity\npool.\n푝\n푟\n푖\n푐\n푒\n푦\n=\n∆\n푥\n∆\n푦\n=\n푥\n+\n∆\n푥\n푦\n \n≈\n푥\n푦\nDuring\nan\nactual\ntransaction,\n0.3%\nwill\nbe\ndeducted\nas\ntransaction\nfees,\nbefore\nthe\nfollowing\ncalculation\nis\ndone\nbased\non\nthe\nconstant-product\ninvariant.\nE.g.\nThere\nare\n100\nX\nand\n1\nY\nin\nthe\nliquidity\npool.\nIf\none\nwishes\nto\ntrade\n20\nX\nthrough\nthe\nswapping\nmechanism,\nthen\nthe\nactual\namount\nto\nbe\nswapped\nis\n19.94\nX\n(0.3%\ndeducted\nas\nfees).\nAccording\nto\nthe\nformula\n,\nwe\nhave:\n푥\n×\n푦\n=\n푘\n（\n1\n0\n0\n+\n1\n9\n.\n9\n4\n）\n×\n（\n1\n−\n∆\n푦\n）\n=\n1\n0\n0\n∆\n푦\n=\n0\n.\n1\n6\n6\n2\nThis\nmeans\none\ncan\nswap\n20\nX\nfor\n0.1662\nY.\n3.2\nSUN\nStableSwap\nModel\nThe\nswap\nfor\nstablecoins\non\nSUN\nadopts\na\ntotally\ndifferent\nmodel\nfrom\nSunSwap:\nStableSwap.\nWith\nthe\ndevelopment\nof\nstablecoins,\napart\nfrom\nthe\nmainstream\nUSDT,\nother\nstablecoins\ncan\nalso\nbe\ntraded\non\nthe\nTRON\npublic\nchain,\nlike\nUSDJ,\nTUSD\nand\nUSDC.\nThe\ngrowing\nmarket\nshare\nand\nvariety\nof\nstablecoins","metadata":{"loc":{"lines":{"from":2996,"to":3206}}}}],["1717",{"pageContent":"of\nstablecoins,\napart\nfrom\nthe\nmainstream\nUSDT,\nother\nstablecoins\ncan\nalso\nbe\ntraded\non\nthe\nTRON\npublic\nchain,\nlike\nUSDJ,\nTUSD\nand\nUSDC.\nThe\ngrowing\nmarket\nshare\nand\nvariety\nof\nstablecoins\nhave\ngiven\nrise\nto\nthe\nmassive\nand\nmultifarious\ndemand\nfrom\nusers\nfor\nswapping\nstablecoins.\nThe\nunique\nStableSwap\nmodel,\nthanks\nto\nits\nlow\nfees\nand\nlow\nprice\nslippage,\nbecomes\nthe\nbest\nchoice\nfor\nusers\nto\nswap\nstablecoins.\n3.2.1\nHow\nStableSwap\nWorks\n(two-token\ncase)\nThe\ncore\nof\nthe\nStableSwap\nmodel\nis\nto\nlower\nprice\nslippage\nwhile\nensuring\nthat\nthe\nliquidity\npool\ncan\nprovide\nliquidity\nat\nany\nprice.\nTo\nachieve\nthis\nend,\nwe\ncombined\nthe\nconstant\nsum\nwith\nthe\nconstant\nproduct\nformula.\nThough\nStableSwap\nsupports\nmultiple-token\nmarket\nmaking,\nwe\nwill\nexplain\nhow\nthis\nmodel\nworks\ntaking\ntwo-token\nmarket\nmaking\nas\nan\nexample\nbecause\nit\nis\neasier\nfor\nyou\nto\nunderstand.\nThe\nconstant\nsum\nformula\nis\nas\nfollows:\n.\n(const.\nrefers\nto\na\nconstant)\n푥\n+\n푦\n=\n푐\n표\n푛\n푠\n푡\nAs\nthe\nslope\nof\nthis\nlinear\nfunction\nis","metadata":{"loc":{"lines":{"from":3206,"to":3373}}}}],["1718",{"pageContent":"making\nas\nan\nexample\nbecause\nit\nis\neasier\nfor\nyou\nto\nunderstand.\nThe\nconstant\nsum\nformula\nis\nas\nfollows:\n.\n(const.\nrefers\nto\na\nconstant)\n푥\n+\n푦\n=\n푐\n표\n푛\n푠\n푡\nAs\nthe\nslope\nof\nthis\nlinear\nfunction\nis\ninvariable,\ntransactions\ncome\nwith\nzero\nslippage.\nIf\nyou\nhave\ntwo\ntokens\nX\nand\nY,\nselling\nof\ncoin\nX\nwill\nlead\nto\nbuying\n=\nof\ncoin\nY,\nwhich\nmeans\nthe\n푑\n푥\n−\n푑\n푦\n푑\n푥\nprice\ndetermined\nas\nis\nalways\nthe\nsame.\nHowever,\nthis\nmarket\nmaker\nmodel\nhas\nits\n−\n푑\n푥\n/\n푑\n푦\nproblem\n-\nthe\nexhaustion\nof\nliquidity.\nSuppose\nconst.\n=\n10,\nif\na\nuser\nsells\n10\nX,\nthen\nthere\nwould\nbe\nzero\nY\nin\nthe\nliquidity\npool.\nOn\nthe\nother\nhand,\nthe\nconstant\nproduct\nfunction\nis\n.\n푥\n×\n푦\n=\n푐\n표\n푛\n푠\n푡","metadata":{"loc":{"lines":{"from":3373,"to":3515}}}}],["1719",{"pageContent":"As\nthe\ncurve\nof\nthis\nfunction\nextends\nalong\nthe\ncoordinate\naxes\ninfinitely,\nthe\nliquidity\nof\nany\ntoken\ncan\nnever\nbe\nzero,\nwhich\nmeans\nusers\ncan\nalways\ntrade\none\nasset\nfor\nthe\nother\nasset.\nHowever,\nthe\nslope\nof\nthis\ncurve\nis\never-changing,\nleading\nto\nchanges\nin\nprices.\nIn\nthis\nway,\nusers\ncan\nnever\ncomplete\nall\nswaps\nat\na\nconstant\nprice,\nsuffering\nfrom\nslippage\ninstead.\nWe\ncan\ntake\na\nlook\nat\nthe\nfigure\nbelow\nto\nbetter\ncompare\nthe\nfeatures\nof\nthe\ntwo\nformulas.\nFigure\n4\nConstant\nsum\nand\nconstant\nproduct\nmodels\nTo\nbetter\nleverage\nthe\nadvantages\nof\nboth,\nStableSwap\nintegrates\nthe\ntwo\nformulas.\nThus,\nwe\nintroduced\nthe\nsum\nof\nthe\nconstant\nsum\nand\nconstant\nproduct:\nAs\nis\nα\n（\n푥\n+\n푦\n）\n+\nβ\n(\n푥\n푦\n)\n=\n푐\n표\n푛\n푠\n푡\n.\nshown\nin\nFigure\n4,\nthis\ncurve\nstands\nbetween\nthe\nconstant\nsum\nand\nthe\nconstant\nproduct\nfunction,\nlike\na\npan\nmapped\nto\nthe\ntwo-dimensional\nsurface.","metadata":{"loc":{"lines":{"from":3517,"to":3674}}}}],["1720",{"pageContent":"Figure\n5\nHybrid\nconstant\nfunction\nmodel\nWhen\ntrading\nwithin\nthe\nrange\nof\nthe\n“bottom\nof\nthe\npan”,\nusers\nget\nto\nenjoy\nrelatively\nstable\nprices\nand\nthus\navoid\nslippage.\nThis\nalso\nmeans\nthat\nthe\nmarket\nmaker\nmodel\nis\nnot\nsuitable\nfor\nassets\nwith\nvolatile\nprices,\nbut\nonly\nfor\nthe\nswap\nof\nstablecoins.\nFor\nliquidity\nproviders,\nStableSwap\ndramatically\nreduces\nthe\nrisk\nof\nimpermanent\nloss,\nwhich\nis\ngreatly\nlower\nthan\nthe\nconstant\nproduct\nmodel\nas\nlong\nas\nthe\nprices\nare\nwithin\nthe\n“bottom\nof\nthe\npan”.\nEven\nif\nthe\nprices\nmove\nto\nthe\ntwo\nsides\nof\nthe\n“pan”,\narbitrageurs\nwill\nquickly\nengage\nin\narbitrage\nto\npull\nthe\nprices\nback\nto\nthe\n“bottom”.\nMeanwhile,\nthe\ntwo\nsides\nof\nthe\n“pan”\nextend\nalong\nthe\ntwo\naxes\ninfinitely,\navoiding\nthe\nexhaustion\nof\nliquidity.\nAt\nany\nprice,\nno\nasset\nwill\nbe\nzero,\nthough\nthere\nmay\nbe\nhigh\nslippage.\n3.2.2\nHow\nStableSwap\nWorks\n(multiple-token\ncase)\nIn\nthis\nsection,\nwe\nwill\nintroduce\nthe\nmodel\nmore\ndetailedly\non\nhow\nexactly\nStableSwap\nworks\nin\nthe\ncase\nof\nmultiple","metadata":{"loc":{"lines":{"from":3676,"to":3842}}}}],["1721",{"pageContent":"there\nmay\nbe\nhigh\nslippage.\n3.2.2\nHow\nStableSwap\nWorks\n(multiple-token\ncase)\nIn\nthis\nsection,\nwe\nwill\nintroduce\nthe\nmodel\nmore\ndetailedly\non\nhow\nexactly\nStableSwap\nworks\nin\nthe\ncase\nof\nmultiple\ntokens.\nThe\nconstant\nsum\nfunction\ncan\nbe\ngeneralized\nfor\nany\nnumber\nof\ntokens\nhaving\na\nlinear\ninvariant:\n푥\n푖\n=\n푐\n표\n푛\n푠\n푡\nThe\ngeneralization\nalso\ngoes\nfor\nthe\nconstant\nproduct\ninvariant:\n푖\n=\n1\n푛\n∏\n푥\n푖\n푤\n푖\n=\n푐\n표\n푛\n푠\n푡\n.","metadata":{"loc":{"lines":{"from":3842,"to":3922}}}}],["1722",{"pageContent":"refers\nto\nthe\nreserve\nof\neach\nasset,\nthe\nweight\nof\neach\nasset\nand\n.\na\nconstant\n.\n푥\n푖\n푤\n푖\n푐\n표\n푛\n푠\n푡\nIn\nactual\nuse\ncases,\nthe\nformulas\nare\nsimplified\nas\nthe\ntwo\nfundamental\nones:\n&\n푖\n=\n1\n푛\n∑\n푥\n푖\n=\n퐷\n푖\n=\n1\n푛\n \n∏\n푥\n푖\n=\n(\n퐷\n푛\n)\n푛\nrepresents\nthe\ntotal\nsupply\nof\ntokens\nin\nthe\nliquidity\npool\nwhen\nthe\nprice\n(or\namount)\nof\nall\n퐷\ntokens\nis\nthe\nsame;\nrefers\nto\nhow\nmany\ntypes\nof\ntokens\nthere\nare\nin\nthe\npool.\n푛\nBased\non\nthe\ntwo\nformulas,\nwe\nintroduced\n,\nthe\nweight\nof\nthe\nconstant\nsum\ninvariant.\nWhen\nχ\n,\nthe\nformula\nis\nthe\nconstant\nproduct\none;\nwhen\n,\nit\nis\nthe\nconstant\nsum\ninvariant;\nwhen\nχ\n=\n0\nχ\n→\n∞\nassumes\na\nvalue\nin\nbetween,\nit\nis\nthe\ncombination\nof\nthe\ntwo.\nχ\nIn\naddition,\nconsidering\nthe\nnumber\nof\ndifferent\ntokens\nmay\nvary,\nwe\nmultiply\nthe\ntwo\nsides\nof\n푛\nthe\nequation\nby\n,\nthen\nadd\nthe\nconstant\nproduct\nfunction\nand\nget\nthe\nfollowing:\nχ\n퐷\n푛\n−\n1\nχ\n퐷\n푛\n−\n1\n∑\n푥\n푖\n+\n∏\n푥\n푖\n=\nχ\n퐷\n푛\n+\n(\n퐷\n푛\n)\n푛\nIn\naddition,\nto\nallow\nto\nbe\nadjusted\nwhen\nthe\nprice\ndeviates\nfrom\n1\nby\na\nlarge\nmargin,\nwe\nχ\nintroduced\nthe","metadata":{"loc":{"lines":{"from":3924,"to":4153}}}}],["1723",{"pageContent":"function\nand\nget\nthe\nfollowing:\nχ\n퐷\n푛\n−\n1\nχ\n퐷\n푛\n−\n1\n∑\n푥\n푖\n+\n∏\n푥\n푖\n=\nχ\n퐷\n푛\n+\n(\n퐷\n푛\n)\n푛\nIn\naddition,\nto\nallow\nto\nbe\nadjusted\nwhen\nthe\nprice\ndeviates\nfrom\n1\nby\na\nlarge\nmargin,\nwe\nχ\nintroduced\nthe\nconstant\n퐴\nand\nvariable\n.\nWe\ncan\nget\n,\nby\nmultiplying\n퐴\nand\n,\nwith\n∏\n푥\n푖\n(\n퐷\n푛\n)\n푛\nχ\n=\n퐴\n∏\n푥\n푖\n(\n퐷\n푛\n)\n푛\n \n∏\n푥\n푖\n(\n퐷\n푛\n)\n푛\nbeing\nthe\nbalance\nlevel\nof\nliquidity\nin\nthe\npool.\n∏\n푥\n푖\n(\n퐷\n푛\n)\n푛\nWhen\nthe\ndistribution\nof\ntokens\nin\nthe\nliquidity\npool\nis\ncompletely\nbalanced,\n;\n∏\n푥\n푖\n(\n퐷\n푛\n)\n푛\n=\n1\n,\n \nχ\n=\n퐴\nwhile\nand\nboth\nare\nclose\nto\nzero\nwhen\nthe\ndistribution\nis\nextremely\nunbalanced,\nso\nthe\n \n∏\n푥\n푖\n(\n퐷\n푛\n)\n푛\nχ\nfunction\nbecomes\nthe\nconstant\nproduct\none.\nAs\nthe\nconstant\nsum\nfunction\nonly\napplies\nto\nthe\ncase\nwhen\nthe\nrelative\nprice\nhas\nno\nvolatility\nand\nstands\nat\n1,\nit\ndoes\nnot\nsuit\nthe\nscenario\nof\nextreme\nunbalanced\ndistribution\nof\ntokens\nin\nthe\npool\nwith\nthe\nprice\ndeviating\nfrom\n1\nby\na\nsharp\nmargin.\nSubstitute\ninto\nthe\nequation,\nand\nwe\ncan\nget\nthe\nmarket\nmaker\nfunction\nin\nthe\nend:\nχ\n퐴\n푛\n푛\n∑\n푥\n푖\n+\n퐷\n=\n퐴\n퐷","metadata":{"loc":{"lines":{"from":4153,"to":4397}}}}],["1724",{"pageContent":"distribution\nof\ntokens\nin\nthe\npool\nwith\nthe\nprice\ndeviating\nfrom\n1\nby\na\nsharp\nmargin.\nSubstitute\ninto\nthe\nequation,\nand\nwe\ncan\nget\nthe\nmarket\nmaker\nfunction\nin\nthe\nend:\nχ\n퐴\n푛\n푛\n∑\n푥\n푖\n+\n퐷\n=\n퐴\n퐷\n푛\n푛\n+\n퐷\n푛\n+\n1\n푛\n푛\n∏\n푥\n푖","metadata":{"loc":{"lines":{"from":4397,"to":4451}}}}],["1725",{"pageContent":"Based\non\nthe\nfunction,\nthe\nswap\nof\ntokens\ncan\nimpact\non\nthe\nvalue\nof\n.\nTake\nUSDT,\nUSDJ\nand\n푥\n푖\nTUSD\nin\n3pool\nfor\nexample.\nLet’s\nsuppose\nthe\nsupply\nof\nthe\nthree\ntokens\nis\nrespectively.\n푥\n1\n,\n \n푥\n2\n \n,\n \n푥\n3\nThe\nvalue\nof\nwill\nbecome\nwhen\nwe\nsell\n)\nUSDT\nto\nget\nUSDJ.\nIf\nwe\nsubstitute\ninto\n푥\n1\n푥\n1\n，\n(\n푥\n1\n，\n−\n푥\n1\n푥\n1\n，\nthe\nequation\nabove,\nwe\ncan\ncalculate\nand\nis\nthe\nnumber\nof\nUSDJ\ntokens\nobtained.\n푥\n2\n，\n,\n푥\n2\n−\n푥\n2\n，\nDuring\nthis\nprocess,\n퐴\nand\n퐷\nboth\nremain\nthe\nsame.\nBut\nthis\ndoes\nnot\nmean\n퐴\nand\n퐷\nare\nalways\ninvariable.\nWhen\nLPs\nincrease\nor\nreduce\nliquidity\nof\nthe\npool,\n퐷\nwill\nchange\naccordingly.\nBased\non\nthe\nformula\nabove,\nthe\nnew\n푥\nwill\nbe\nused\nto\ncalculate\nthe\nnew\n퐷\n.\n퐷\nwill\nbe\ngreater\nif\nliquidity\nrises,\nand\nsmaller\nif\nliquidity\nnarrows.\nAs\nis\nshown\nin\nFigure\n5,\nwith\n퐴\nunchanged,\nhigher\n퐷\nwill\nmove\nthe\ncurve\nupwards,\nwith\nthe\n“bottom\nof\nthe\npan”\nlarger\nthan\nbefore,\nvice\nversa.\nFigure\n6\nChanges\nof\n퐷\n퐴\nis\nan\nadjustable\nparameter.\nWhen\n퐷\nremains\nthe\nsame,\nwe\ncan\nsee\nfrom\nFigure\n6\nhow\nthe","metadata":{"loc":{"lines":{"from":4453,"to":4668}}}}],["1726",{"pageContent":"will\nmove\nthe\ncurve\nupwards,\nwith\nthe\n“bottom\nof\nthe\npan”\nlarger\nthan\nbefore,\nvice\nversa.\nFigure\n6\nChanges\nof\n퐷\n퐴\nis\nan\nadjustable\nparameter.\nWhen\n퐷\nremains\nthe\nsame,\nwe\ncan\nsee\nfrom\nFigure\n6\nhow\nthe\nchange\nof\n퐴\ninfluences\nthe\nmarket\nmaking\ncurve.\nThe\ngreater\n퐴\nis,\nthe\nmore\nthe\ncurve\napproaches\nthe\nconstant\nsum\ncurve,\nand\nthe\nlarger\nthe\narea\nof\nthe\n“bottom\nof\nthe\npan”,\notherwise,\nthe\ncloser\nthe\ncurve\nis\nto\nthe\nconstant\nproduct\ncurve,\nthe\nsmaller\nthe\n\"bottom\nof\nthe\npan\"\narea.","metadata":{"loc":{"lines":{"from":4668,"to":4757}}}}],["1727",{"pageContent":"Figure\n7\nChanges\nof\n퐴\n3.3\nBenefits\nfor\nveSUN\nHolders\nAt\npresent,\nthe\nSUN\nplatform\nallows\nusers\nto\nstake\nSUN\nin\nexchange\nfor\nveSUN.\nUsers\nwho\nhold\nveSUN\nenjoy\nthe\nfollowing\nbenefits:\n●\nget\nrewards\nfrom\ntransaction\nfees\nin\nthe\nstablecoin\npool\n●\nboost\nliquidity\npool\nmining\n●\nvote\nfor\nthe\nweights\nof\nliquidity\npools\n3.3.1\nHow\nto\nGet\nveSUN\nUsers\ncan\nget\nveSUN\nby\nstaking\nSUN.\nThe\ndetails\nare\nas\nfollows:\nIf\nSUN\nis\nstaked\nfor\na\nduration\nof\n(\n=4\nyears),\nthen\nwe\nhave\n푡\n1\n푡\n1\n≤\n푡\n푚\n푎\n푥\n퐴\n푚\n표\n푢\n푛\n푡\n푣\n푒\n푆\n푈\n푁\n=\n퐴\n푚\n표\n푢\n푛\n푡\n푆\n푈\n푁\n푡\n1\n푡\n푚\n푎\n푥\nThis\nmeans\nthat\nveSUN\n(voting\nrights)\nshares\na\nlinear\nrelationship\nwith\nthe\namount\nof\nSUN\nand\nthe\nstaking\nduration\n(\n).\nis\na\nreal-time\nvalue,\nwhich\nmeans\nthat\nas\ntime\npasses,\nwill\ndecrease,\nso\n푡\n1\n푡\n1\n푡\n1\nthe\namount\nof\nveSUN\nwill\nbe\nsmaller\naccordingly.\nveSUN\nwill\nbecome\nzero\nif\nSUN\nis\nunstaked.","metadata":{"loc":{"lines":{"from":4759,"to":4936}}}}],["1728",{"pageContent":"3.3.2\nGet\nRewards\nfrom\nTransaction\nFees\nThe\nplatform\ngrants\n50%\nof\nthe\ntransaction\nfees\nin\nall\nstablecoin\npools\nto\nveSUN\nholders\nin\nthe\nform\nof\nTUSD.\nAt\npresent,\nwe\ntake\nmultiple\nsnapshots\nof\nthe\namount\nof\nveSUN\nheld\nby\nusers\nwithin\neach\nround\n(from\nThursday\n00:00\nto\nTuesday\n00:00\nnext\nweek).\nAfter\nthe\nround\nends,\nthe\nweighted\nTUSD\nrewards\nwill\nbe\ncalculated\nand\nrewarded\nto\nusers\nin\nproportion\nto\ntheir\nveSUN\nholdings\nby\ntriggering\nsmart\ncontracts.\n3.3.3\nBoost\nLiquidity\nPool\nMining\nUnlike\nordinary\nliquidity\nmining,\nthe\ngovernance\nmining\nof\nSUN\ntakes\ninto\nconsideration\nveSUN\nand\nintroduces\na\nnew\nconcept,\nvirtual\nbalance\n,\nto\nthe\ncalculation\nof\nthe\ninput\nof\nusers.\n푏\n푢\n*\nThe\nvalue\nof\nis\nrelated\nto\nthe\nuser’s\nreal\nbalance\n,\nthe\ntotal\nliquidity\nin\nthe\nliquidity\npool\n,\nthe\n푏\n푢\n*\n푏\n푢\n푆\namount\nof\nveSUN\nheld\nby\nthe\nuser\nand\nthe\namount\nof\nveSUN\non\nthe\nwhole\nplatform\n퐴\n푚\n표\n푢\n푛\n푡\n푢\n,\nas\nshown:\n퐴\n푀\n푂\n푈\n푁\n푇\n푏\n푢\n*\n=\n푚\n푖\n푛\n(\n0\n.\n4\n푏\n푢\n+\n0\n.\n6\n푆\n퐴\n푚\n표\n푢\n푛\n푡\n푢\n퐴\n푀\n푂\n푈\n푁\n푇\n,\n \n푏\n푢\n)\nBased\non\nthis","metadata":{"loc":{"lines":{"from":4938,"to":5147}}}}],["1729",{"pageContent":"of\nveSUN\nheld\nby\nthe\nuser\nand\nthe\namount\nof\nveSUN\non\nthe\nwhole\nplatform\n퐴\n푚\n표\n푢\n푛\n푡\n푢\n,\nas\nshown:\n퐴\n푀\n푂\n푈\n푁\n푇\n푏\n푢\n*\n=\n푚\n푖\n푛\n(\n0\n.\n4\n푏\n푢\n+\n0\n.\n6\n푆\n퐴\n푚\n표\n푢\n푛\n푡\n푢\n퐴\n푀\n푂\n푈\n푁\n푇\n,\n \n푏\n푢\n)\nBased\non\nthis\nformula,\nthe\nvirtual\nbalance\nonly\nrepresents\n0.4\ntimes\nthe\nactual\nbalance\nif\na\n푏\n푢\n*\n푏\n푢\nuser\ndoes\nnot\nhold\nany\nveSUN,\nbut\nif\nthe\nuser\nholds\nenough\nveSUN,\n,\nat\nits\nmaximum\ncan\nbe\n푏\n푢\n*\nequal\nto\n.\n푏\n푢\nAs\nthe\nmining\nrewards\nare\ndistributed\nbased\non\nthe\nvirtual\nbalance,\nwith\nthe\nsame\nactual\nbalance,\nveSUN\nholders\ncan\nboost\ntheir\nmining\nspeed\nup\nto\n2.5\ntimes\nthat\nof\nnon-veSUN\nholders.\nIn\naddition,\nthe\nvalue\nof\nthe\namount\nof\nveSUN\nis\nstored\nin\nsmart\ncontracts\nand\nis\nonly\nchanged\nwhen\nusers\ndeposit\nor\nwithdraw\ntokens,\nor\nclaim\nrewards.\n3.3.4\nVote\nfor\nthe\nWeights\nof\nLiquidity\nPools\nUsers\ncan\nleverage\nveSUN\nto\nvote\nfor\nmining\nof\ndifferent\nliquidity\npools.\nSnapshots\nof\nthe\nvotes\nwill\nbe\ntaken\neach\nweek\nto\ndetermine\nthe\nweights\nof\npools\nfor\nthe\nnext\nweek.\nWith\nthe\nvalue\nof\nveSUN\ndecreasing\nall\nthe","metadata":{"loc":{"lines":{"from":5147,"to":5366}}}}],["1730",{"pageContent":"veSUN\nto\nvote\nfor\nmining\nof\ndifferent\nliquidity\npools.\nSnapshots\nof\nthe\nvotes\nwill\nbe\ntaken\neach\nweek\nto\ndetermine\nthe\nweights\nof\npools\nfor\nthe\nnext\nweek.\nWith\nthe\nvalue\nof\nveSUN\ndecreasing\nall\nthe\ntime,\nusers\ncan\nvote\naccording\nto\nthe\npercentage\nof\nveSUN\nthey\nhold.\nTo\nprevent\nusers\nfrom\nchanging\ntheir\nvotes\ntoo\nfrequently,\nthey\nare\nonly\nallowed\nto\nchange\ntheir\nvotes\n10\ndays\nafter\nvoting\nin\na\nmining\npool.\nAs\nthis\nfeature\nonly\nrequires\nthe\nvalue\nfrom\nthe\nveSUN\nsmart\ncontracts,\nother\nuse\ncases\nfor\nveSUN\nwill\nnot\nbe\naffected.","metadata":{"loc":{"lines":{"from":5366,"to":5459}}}}],["1731",{"pageContent":"4\nMilestones\n4.1\nSUN\n1.0\n4.1.1\nGenesis\nMining\nIn\nSeptember\n2020,\nGenesis\nMining\nwas\ninitiated,\nallowing\nusers\nto\nstake\nTRX\nin\nsmart\ncontracts\nto\nget\nSUNOLD.\nAfter\nthis\nmining\nstage\nended,\nSUNOLD\nwas\ndelivered\nto\nusers\nautomatically\nthrough\nsmart\ncontracts.\n4.1.2\nOfficial\nMining\nIn\nthe\nmiddle\nof\nSeptember\n2020,\nofficial\nmining\noffered\nmultiple\nmining\npools\nincluding\nTRX,\nJST,\nUSDT,\nSUNOLD,\nUSDJ,\nWIN,\nBTT,\nquality\ncommunity\nprojects\nand\nliquidity\nmining\npools,\nwhere\nusers\ncould\nengage\nin\nmining\nthrough\nstaking.\n4.1.3\nJustLend\nMining\nIn\nDecember\n2020,\nthe\nSUN\nplatform\nsupported\nmining\nby\ndepositing\nTRX,\nJST,\nUSDT,\nSUNOLD,\nUSDJ,\nWIN,\nBTC,\nETH\nand\nWBTT.\n4.1.4\nCentury\nMining\nIn\nMarch\n2021,\nthe\nCentury\nMining\nwas\ninitiated,\nsupporting\nthe\nmining\nof\nSUNOLD,\nTRX,\nJST,\nBTT\nand\nWIN\nby\nstaking\nLP\nTokens\non\nJustSwap\nand\ndepositing\njTokens\non\nJustLend.\n4.2\nSUN\n2.0\n4.2.1\nSUN\nRedenomination\nPlan\nIn\nMay\n2021,\nto\nlower\nthe\nthreshold\nfor\nusers\nto\nhold\ntokens\nand\npromote\nthe\nSUN\necosystem,\nthe\nSUN","metadata":{"loc":{"lines":{"from":5461,"to":5619}}}}],["1732",{"pageContent":"LP\nTokens\non\nJustSwap\nand\ndepositing\njTokens\non\nJustLend.\n4.2\nSUN\n2.0\n4.2.1\nSUN\nRedenomination\nPlan\nIn\nMay\n2021,\nto\nlower\nthe\nthreshold\nfor\nusers\nto\nhold\ntokens\nand\npromote\nthe\nSUN\necosystem,\nthe\nSUN\ntokens\nwere\nredenominated\nat\na\nratio\nof\n1:1000\nand\nthe\ntotal\nsupply\nchanged\nfrom\n19,900,730\nto\n19,900,730,000,\nwhile\nthe\nmarket\ncap\nof\nSUN\nis\nmaintained.\nTo\nbetter\ndifferentiate\nthe\nold\nand\nnew\ntokens,\nwe\nrefer\nto\nthe\nold\nSUN\ntokens\nas\nSUNOLD\nand\nrename\nthe\nnew\ntokens\nas\nSUN,\nassuming\na\nbrand\nnew\nlogo.\n4.2.2\nPlatform\nUpgrading\nIn\nMay\n2021,\nthe\nSUN\nplatform\nwas\nupgraded\nto\nthe\nfirst\nintegrated\nplatform\nof\nstablecoin\nswapping,\ntoken\nmining\nand\nDAO.","metadata":{"loc":{"lines":{"from":5619,"to":5730}}}}],["1733",{"pageContent":"At\nthe\npreliminary\nstage\nof\nits\ninitiation,\nSUN\nintroduced\nthe\n3pool\nswap\npool,\nsupporting\nthe\nswap\namong\nUSDT,\nUSDJ\nand\nTUSD.\nThe\nlater\nupgraded\nplatform\nenjoys\nadvantages\nof\nlow\ntransaction\nfees,\nslippage\nand\nimpermanent\nloss,\nwith\nhigher\nefficiency\nand\nsecurity.\n4.2.3\nBrand-New\nMining\nModel\nIn\nJune\n2021,\nSUN\n2.0\nintroduced\nnew\nmining\nmodels\nof\n3pool\nLP,\nSUN-TRX\nLP,\nSUN\nStake\nand\nSUN\nStake\n&\nLock,\nwith\ntwo\nphases:\nGenesis\nMining\nand\nGovernance\nMining.\nDuring\nGovernance\nMining,\nusers\ncould\nstake\nSUN\nto\nget\nvoting\nrights\n(veSUN),\nand\nvote\nto\ndecide\nthe\nweights\nof\ndifferent\nliquidity\npools\nin\nmining.\n4.2.4\nNew\nStablecoin\nPool\n-\nUSDC\nPool\nIn\nAugust\n2021,\nthe\nplatform\nlaunched\na\nnew\nstablecoin\npool:\nUSDC\nPool\n(USDC+3SUN).\nThe\nliquidity\nmining\npool\nof\nUSDC\nLP\narrived\nat\nthe\nsame\ntime,\nwhere\nusers\ncould\nstake\ntokens\nto\nparticipate\nin\ngovernance\nmining\nand\ngain\nrewards.\n4.2.5\nSecond\nPhase\nof\nGovernance\nMining\nOn\nSeptember\n15,\n2021,\nthe\nsecond\nphase\nof\nSUN\nGovernance\nMining\nwent\nlive,","metadata":{"loc":{"lines":{"from":5732,"to":5892}}}}],["1734",{"pageContent":"users\ncould\nstake\ntokens\nto\nparticipate\nin\ngovernance\nmining\nand\ngain\nrewards.\n4.2.5\nSecond\nPhase\nof\nGovernance\nMining\nOn\nSeptember\n15,\n2021,\nthe\nsecond\nphase\nof\nSUN\nGovernance\nMining\nwent\nlive,\nduring\nwhich\nthe\nrole\nof\nveSUN\n(voting\nrights\nusers\nobtained\nby\nlocking\nSUN)\nwas\nfurther\nexploited\non\nthe\nSUN\nplatform.\nThe\nmain\nuse\ncases\nfor\nveSUN\nare:\nobtaining\nTUSD\nrewards,\nboosting\nliquidity\npool\nmining\nand\nvoting\nto\ndetermine\nthe\nweights\nof\nliquidity\npools\nin\nmining.\n4.2.6\nAcquisition\nof\nJustSwap\nIn\nOctober\n2021,\nSUN\ncompleted\nthe\nacquisition\nof\nJustSwap,\nwhich\nmarks\nour\nbrand\nupgrade\nand\nefforts\nto\nbuild\nthe\nlargest\ndecentralized\nexchange\non\nTRON.\n5\nFuture\nPlans\n5.1\nOptimize\nUser\nExperience\n5.1.1\nImprove\nAsset\nUtilization\nEfficiency\nThe\nSUN\nplatform\nwill\noptimize\nour\ncurrent\nAMM\nprogram\nand\nStableSwap\nmodels,\nenhancing\nfeatures\nsuch\nas\nliquidity\npooling,\norders\nwithin\ncertain\nprice\nranges,\nlimit\norders\nand\nproviding\nliquidity\nfor\na\nspecific\ntoken.\nThrough\ntechnological\nupgrading\nand","metadata":{"loc":{"lines":{"from":5892,"to":6043}}}}],["1735",{"pageContent":"and\nStableSwap\nmodels,\nenhancing\nfeatures\nsuch\nas\nliquidity\npooling,\norders\nwithin\ncertain\nprice\nranges,\nlimit\norders\nand\nproviding\nliquidity\nfor\na\nspecific\ntoken.\nThrough\ntechnological\nupgrading\nand\nbusiness\nmodel\ninnovation,\nwe\ncan\nhelp\nusers\nreduce\ntheir\nimpermanent\nloss.\n5.1.2\nFacilitate\nTrading\nAcross\nChains","metadata":{"loc":{"lines":{"from":6043,"to":6085}}}}],["1736",{"pageContent":"Going\nforward,\nSUN\nwill\nconnect\nmultiple\nheterogeneous\nblockchain\nnetworks\nand\nrealize\nthe\ncross-chain\nswap\nof\nassets.\nWe\nwill\noffer\nusers\na\nmore\nconvenient,\ncost-effective\nand\nsecure\nway\nto\ntrade\nassets\nacross\nvarious\nblockchains.\n5.1.3\nOptimize\nUser\nExperience\nTo\ncater\nto\nusers’\npreferences\nand\nenhance\ninteractions,\nSUN\nwill\nboost\nuser\nexperience\nby\nupgrading\nour\nproduct\nportfolio\nin\nterms\nof\ntheir\navailability,\noperability\nand\nsecurity.\n5.2\nExpand\nProduct\nEcosystem\n5.2.1\nProvide\nDiverse\nDEX\nProducts\nBased\non\ncurrent\nproducts\nand\nuser\nprofiles,\nwe\nwill\nintroduce\nother\nDEX\nproducts\nlike\nsmart\nroutes,\norders\nwithin\ncertain\nprice\nranges,\nlimit\norders,\nmarket\nmaking\nfor\na\nspecific\ntoken,\nmargin\ntrading\nand\nfutures\ntrading\nto\nprovide\nthe\nplatform\nwith\nmore\ndiverse\nuse\ncase\nscenarios\nand\nimprove\nthe\nutilization\nratio\nof\nusers’\nassets.\n5.2.2\nBuild\na\nOne-Stop\nDeFi\nPlatform\nBased\non\ncurrent\nDEX\nproducts,\nthe\nSUN\nplatform\nwill\nprovide\nour\nusers,\nincluding\nmarket\nmakers,\ntraders\nand","metadata":{"loc":{"lines":{"from":6087,"to":6233}}}}],["1737",{"pageContent":"and\nimprove\nthe\nutilization\nratio\nof\nusers’\nassets.\n5.2.2\nBuild\na\nOne-Stop\nDeFi\nPlatform\nBased\non\ncurrent\nDEX\nproducts,\nthe\nSUN\nplatform\nwill\nprovide\nour\nusers,\nincluding\nmarket\nmakers,\ntraders\nand\narbitrageurs,\nwith\nmore\nchoices,\nhigher\nprofitability\nand\nmore\nconvenient\none-stop\nservices\nby\nway\nof\nsmart\nroutes,\ninvestment\nplan\nrecommendation\nand\nintegration\nof\nmultiple\nmodels,\ncombined\nwith\nother\nlending\nand\ninsurance\nproducts.\n5.2.3\nJoin\nHands\nto\nMake\nDeFi\nProsper\nApart\nfrom\ndeveloping\nproprietary\nproducts,\nwe\nalso\nhope\nto\nwork\nwith\nmore\ndevelopers\nand\npartners\nto\nbuild\na\nbetter\necosystem\nof\nSUN.\nThrough\nIDO,\nfund\ninvestment\nand\nproject\nincubators,\nwe\ncan\njointly\ncontribute\nto\nthe\nprosperity\nof\nDeFi\nwith\nall-round\nsupport\nof\nfunds,\ntechnology\nand\nother\nresources.\n5.3\nGrant\nValue\nto\nUsers\n5.3.1\nLong-Term\nMining\nProgram\nTo\nincentivize\nusers\nparticipating\nin\nthe\nSUN\necosystem,\nwe\nwill\ncontinue\nto\nlaunch\nmining\nprograms,\nincluding\nbut\nnot\nlimited\nto\nliquidity\nmining,\nSUN-staked\nmining,","metadata":{"loc":{"lines":{"from":6233,"to":6381}}}}],["1738",{"pageContent":"5.3.1\nLong-Term\nMining\nProgram\nTo\nincentivize\nusers\nparticipating\nin\nthe\nSUN\necosystem,\nwe\nwill\ncontinue\nto\nlaunch\nmining\nprograms,\nincluding\nbut\nnot\nlimited\nto\nliquidity\nmining,\nSUN-staked\nmining,\netc.\n5.3.2\nPromote\nDAO\nProgram","metadata":{"loc":{"lines":{"from":6381,"to":6413}}}}],["1739",{"pageContent":"The\nSUN\nplatform\nwill\nadvance\nits\ndecentralized\nautonomous\norganization\n(DAO)\nprogram.\nWith\nSUN\nas\nthe\nsole\ngovernance\ntoken,\nthe\nplatform\ngrants\nusers\nthe\nright\nto\ndetermine\nfuture\ndevelopment\npaths\nof\nall\nproducts.\n5.3.3\nMaintain\nToken\nValue\nIn\nthe\nfuture,\ntransaction\nfees\nwill\nonly\naccount\nfor\na\nfraction\nof\nthe\nrevenue\nof\nthe\nSUN\nplatform,\nwhile\nrevenue\nfrom\nother\nproducts\nwill\nbe\nbought\nback,\nburned\nand\nredistributed,\nalong\nwith\nfuture\nR&D,\nto\nmaintain\nthe\nvalue\nof\nthe\nSUN\ntoken,\nbringing\nbenefits\nto\nusers\nin\na\nsustained\nway.","metadata":{"loc":{"lines":{"from":6415,"to":6500}}}}],["1740",{"pageContent":"How is price determined?\nNot yet followed by anyone\nPrice is determined by the number of tokens in each pool.The smart contract maintains a constant function: x*y=k, in which x = token1, y = token2, k = a constant number. Each swap takes place by replacing some of the tokens with a certain number of the other token. As k remains unchanged, balances of the tokens will be updated accordingly, which leads to changes in prices.\n\nWhat tokens are supported for swap?\nNot yet followed by anyone\nBoth conversion between two TRC20 tokens and between TRX and TRC20 token are supported.\n\nWhat is SunSwap?\nNot yet followed by anyone\nSunSwap is an exchange protocol on TRON for exchanges between TRC20 tokens.\n\nConversion can happen easily between any 2 TRC20 tokens based on system price. All trading  fees collected will directly go to liquidity providers of the protocol, rather than the protocol itself.\n\nThis ensures full decentralization and security.","metadata":{"loc":{"lines":{"from":1,"to":15}}}}],["1741",{"pageContent":"This ensures full decentralization and security.\n\nHow to calculate the ratio of tokens to be added to/removed from the pool?\nNot yet followed by anyone\nAdding/removing pool liquidity is based on the proportion of token and TRX amount in the current pool.If the ratio of token to TRX in the fund pool currently stands at 1:100, then the ratio of token to TRX that you want to add or remove also has to be 1:100.\n\nWhat's the initial price for creating a fund pool?\nNot yet followed by anyone\nThe initial price is determined by the first person that creates the pool and adds liquidity to it. If the price set is not reasonable, users doing external arbitrage trading will make the price converge to a reasonable range.\n\nWhy does my exchange fail?\nNot yet followed by anyone\nInsufficient Energy or bandwidth and small slippage percentage when exchanging will lead to failed exchange.","metadata":{"loc":{"lines":{"from":15,"to":27}}}}],["1742",{"pageContent":"Why does my exchange fail?\nNot yet followed by anyone\nInsufficient Energy or bandwidth and small slippage percentage when exchanging will lead to failed exchange. \n\nWhen making an exchange, you can click on the advanced setting, select a larger slippage percentage, and make sure you have sufficient Energy and bandwidth to secure your exchange. \n\n\nWhat tokens are supported for exchange?\nNot yet followed by anyone\nBoth conversion between two TRC20 tokens and between TRX and TRC20 token are supported.\n\nHow does SunSwap work?\nNot yet followed by anyone\nSunSwap is a protocol for automated liquidity provision.There’s no need for making offers or matching orders, and there’s no intervention of any centralized institutions or facilities in transaction.Managed by smart contracts, each transaction pool supports token exchanges, adding liquidity etc.,and essentially maintains the function x*y=k to ensure the legitimacy of transactions.","metadata":{"loc":{"lines":{"from":27,"to":40}}}}],["1743",{"pageContent":"TRANSIT SWAP DOCS\n\nThe brand new way you can experience decentralized exchanges, better liquidity and better return, all chains in one single Transit Swap\n\nTransit Swap integrates the most popular DEXs of public chains, selects and combines their advantages intelligently to provide better depth for your transactions and return more target tokens. With Transit Swap, you don't need to worry about what DEX can be traded and what DEX has a better depth. Transit Swap is your preference for trading.\n\nSave the trouble of choice through multi-chain transactionsGather the advantages together, make the depth deeper, and make the price better.Make cross-chain transactions safer and easierApprove once and use multiple to make transactions safer\nTransit Swap selects transaction routes intelligently with a variety of strategies, offering the best transaction prices after comparing other prices.","metadata":{"loc":{"lines":{"from":1,"to":8}}}}],["1744",{"pageContent":"Your assets can be easily transferred between multiple chains by aggregating multiple cross-chain routes, so that cross-chains will no longer be your troubles.\n\nStart Trading Now\nTransit Swap@2021, All Rights Reserved\n\nIntroduction to Transit Swap","metadata":{"loc":{"lines":{"from":10,"to":15}}}}],["1745",{"pageContent":"Welcome to Transit’s Developer Documentation. This documentation is for learning to develop applications for Transit.\nTransit Swap is a cross-chain swap platform that integrates DEXs, aggregate transactions and one-stop cross-chain. Without certification, users can complete decentralized transactions real time and instantly swap assets across networks supported by TokenPocket.\nThe Transit Swap API currently provides real-time price quotes for swaps between arbitrary tokens on these networks, as well as Application Binary Interface (ABI) data that can be used to interact with smart contracts on these networks.\nEthereum Mainnet (ETH)\nBinance Smart Chain (BSC)\nHuobi ECO Chain (HECO)\nOKExChain (OEC)\nHoo Smart Chain (HSC)\nPolygon (MATIC)\nFantom (FTM)\nArbitrum One (ARB)\nKlaytn (KLAY)\nAvalanche (AVAX)\nTronprotocol (TRON)\nKuCoin Community Chain (KCC)\nConflux (CFX)\nMoonbeam (GLMR)\nSolana (SOL)\nAptos (APT)\nYou can use the latest version of Transit Swap on our .","metadata":{"loc":{"lines":{"from":17,"to":36}}}}],["1746",{"pageContent":"Klaytn (KLAY)\nAvalanche (AVAX)\nTronprotocol (TRON)\nKuCoin Community Chain (KCC)\nConflux (CFX)\nMoonbeam (GLMR)\nSolana (SOL)\nAptos (APT)\nYou can use the latest version of Transit Swap on our .\nFor up to the minute news, follow our .\nYou can new issue on our .\nLiquidity Sources\nThe full list of liquidity sources that the Transit Swap API currently uses from are as follows:\nEthereum Mainnet: Uniswap v2, Uniswap v3, Sushi, SHIBASWAP, DooarSwap, DODO, Pancake, Curve\nBSC: Pancake v1, Pancake v2, MDEX, Sushi, Ape, Thugs, Panther, Bakery, Biswap, BabySwap, DODO, Fstswap, WOOFi, W3Swap, Belt, Ellipsis\nHECO: MDEX, BXH, Pippi, LAVA, Doge, RPONE, Sushi, Hswap\nOEC: Sushi, SakeSwap, Aiswap, Panda, Cherry, KSwap, MySwap, Kyswap, JSwap, COCO\nPolygon: Quick, Polyzap, Smartdex, Sushi, Wault, Ape, Dfyn, Cometh,DODO, Honey, WOOFi, Uniswap v3, Curve\nFantom: Sushi, Spirit, Waka, Spooky, WOOFi, Curve\nArbitrum One: Balancer v2, DODO v2, Sushi, WOOFi, Uniswap v3, Camelot, ZyberSwap\nKlaytn: KLAYswap, Definix","metadata":{"loc":{"lines":{"from":36,"to":56}}}}],["1747",{"pageContent":"Fantom: Sushi, Spirit, Waka, Spooky, WOOFi, Curve\nArbitrum One: Balancer v2, DODO v2, Sushi, WOOFi, Uniswap v3, Camelot, ZyberSwap\nKlaytn: KLAYswap, Definix\nAvalanche: TraderJoe, Baguette, Complus, Pangolin, Sushi, WOOFi\nTron: JustSwap, SunSwap\nKCC: KuSwap,MojitoSwap\nCFX: Swappi\nGLMR: BeamSwap,StellaSwap\nSolana: Orca, Raydium\nAptos: AptoSwap, LiquidSwap, AnimeSwap, PancakeSwap, AuxSwap, CetusSwap\nThe Transit Cross API currently uses from are as follows:\nMETAPATH\nCBRIDGE","metadata":{"loc":{"lines":{"from":56,"to":68}}}}],["1748",{"pageContent":"About Token Swap\nTransit swap's built-in decentralized exchange (DEX) allows users to swap tokens in the most efficient way.\nRead to learn the basics of swap, or move towards the swap page for instructions on how to use Transit Swap.\n\nWhat is aggregate transaction\nTransit Swap integrates the top DEXs of all chains, including Pancake, MDEX, UniswapV2, UniswapV3, Sushi, LiquidSwap, Aux and Raydium. \nIt not only selects and combines DEX data to provide users with the richest trading pairs and the most depth which ensures sufficient transaction liquidity, but employs the optimal algorithm to automatically finds the optimal price for token swap, helping users to get the maximum output tokens, truly pursue a vision of \" convenient and worry-free, fast and efficient, one account, trading across the world\", which also caters to the exchange needs of most players from the other hand.","metadata":{"loc":{"lines":{"from":70,"to":76}}}}],["1749",{"pageContent":"About slippage\nNote: a higher slippage can help your transactions succeed, but not favorable for price, please use carefully.\nWhile token swaps execute very quickly on the blockchain, there can still be a (usually small) discrepancy between the price you see when you submit a transaction and the price that applies when the transaction is recorded on the blockchain. This price difference is called \"slippage\".\nWhen you submit a trade on Transit Swap, you can choose the \"slippage tolerance\", which is the difference in price you are willing to accept when the trade is executed. The default slippage tolerance is 0.1%, and you can adjust it to 0.1%, 0.5%, or any amount you set for yourself. if the execution price exceeds the set value, the order will fail.\n\nAbout price impact\nPrice impact refers to the difference between the market price and the estimated price due to the size of the transaction.","metadata":{"loc":{"lines":{"from":78,"to":84}}}}],["1750",{"pageContent":"About price impact\nPrice impact refers to the difference between the market price and the estimated price due to the size of the transaction.\n\nWhat is cross chain\nTransit Swap supports more than 95% of public chains and is compatible with EVM series including but not limited to ETH, BSC, HECO, OEC, Matic, FTM, AVAX, ARB, KLAY, KCC, GLMR, Solana, TRON, Aptos. \nTransit Swap enables users to quickly exchange any tokens on the chain, such as ERC20, TRC20 and BEP20. It also supports multi-token cross-chain swap, and aggregates multiple cross-chain service providers to help users complete cross-chain exchanges with optimal price and speed.\n\nFee discounts\nTransit Swap has launched the aggregate transaction fee discount function which gives discounts with the rate corresponding to the sum of the TPT and xTPT held by the user's account address. \nThe current discount is divided into 4 tiers, and in the future, more tiers will be applied according to the actual situation.","metadata":{"loc":{"lines":{"from":84,"to":93}}}}],["1751",{"pageContent":"About receiving address\nYou can customize your receiving address in Settings - Receiving Address, and the receiving address is default for aggregated swap transactions, but you must fill in your receiving address for cross-chain transactions.","metadata":{"loc":{"lines":{"from":95,"to":96}}}}],["1752",{"pageContent":"About liquidity provider\nComplete list of liquidity sources currently used by the Transit Swap API Ethereum Mainnet：\nUniswap v2、Uniswap v3、Sushi、SHIBASWAP、Balancer v2、DODO v2 \nBSC： Pancake v1、Pancake v2、MDEX、Sushi、Wault、Ape、Thugs、Panther、Bakery、Biswap、BabySwap、DODO v2、Fstswap \nHECO：MDEX、BXH、Pippi、LAVA、Doge、RPONE、MDIS、Sushi、Hswap \nOEC： Sushi、SakeSwap、Aiswap、Panda、Cherry、KSwap、MySwap、Kyswap、JSwap、COCO\nHSC： Heshi、Pudding \nPolygon： Balancer v2、Quick、Polyzap、Smartdex、Sushi、Wault、Ape、Dfyn、Cometh、CremePie、Honey \nFantom: Sushi、Spirit、Waka、Spooky Arbitrum One: Balancer v2、DODO v2、Sushi \nKlaytn： KLAYswap、Definix Avalanche: TraderJoe、 Baguette、Complus、Pangolin、Sushi \nTron: JustSwap \nKCC：KuSwap、MojitoSwap \nCFX: Swappi\nSolana: Orca, Raydium\nAptos: AptoSwap, LiquidSwap, AnimeSwap, PancakeSwap, AuxSwap, CetusSwap","metadata":{"loc":{"lines":{"from":98,"to":112}}}}],["1753",{"pageContent":"About fees\n\"Gas\" was first applied to the Ethereum blockchain as a measure of calculation of information consumption and storage resources. Other public chain projects follow the example of Ethereum and set a gas fee in a native token so as to ensure the normal operation of transactions between miners and users.\n\nWhich wallets does Transit Swap support?\nTransit Swap supports all the decentralized wallets, including TokenPocket, MetaMask, Scatter, Tronlink, iWallet, Phantom,Martian and Petra.\n\nHow to connect Transit Swap to your wallet?\nOpen Transit swap (https://swap.transit.finance/#/) on your browser and click “Connect Wallet” where you can select a wallet to connect.\n\nHow to use Transit swap on mobile devices?\nYou can download TokenPocket, \"Create\" or \"Import\" a wallet, click \"Market\" and find Transit Swap to trade.\nOr you can open the link of Transit swap (link is provided here) to trade on the dapp browser.","metadata":{"loc":{"lines":{"from":114,"to":125}}}}],["1754",{"pageContent":"Why are my swaps not credited?\nFirst check whether the tokens are successfully transferred out. If the tokens are not transferred out due to problems such as out of gas, the swap will definitely not be credited.\nIf the tokens are successfully transferred, please check the swap details. The swap always follows the order as address 1--contract address--address 2, but there may be delays in this process. If it hasn't arrived for a long time, please contact our customer service or contact the exchange agent by yourself and provide the hash value or order number.\nIf users using the old Transit swap version do not enter the cross-chain receiving address, the system will use the origin address by default. This is a protection mechanism. In the new version, the receiving address is a required field, so if you encounter such problems, you can try to synchronize the wallet to the origin address to retrieve your assets.","metadata":{"loc":{"lines":{"from":127,"to":130}}}}],["1755",{"pageContent":"How to contact Transit Swap customer service?\nEmail: service@transit.finance\ncontact through Transit Swap’s official Telegram community: https://t.me/Transit_Finance \nPlease note, anyone who dm you is a scammer, just block and report them directly!\n\nThe number of tokens obtained through aggregate swap is incorrect\nTransit Swap integrates the popular DEXs, and all execution records during the swap will be displayed on the blockchain. \nYou can click the “Record” and open the hash value link to view it. Some tokens with special restrictions or rules on issuance mechanisms are extremely likely to encounter such problems.\n\nWhat fees are there in the swap process?\nIn one swap service, Users have to pay such fees as:\n1、gas fees that may be consumed when transferring from public chain.\n2、Fees incurred by the system during the exchange process.\n3、The required fees when withdrawing from an off-chain contract.","metadata":{"loc":{"lines":{"from":132,"to":145}}}}],["1756",{"pageContent":"Does aggregate swap support custom receiving addresses\nYes. You can open Transit Swap, press the settings icon in the upper right corner, check the receiving address, then you can customize the receiving address.\n\nDoesn't receive tokens using the exchange receiving address?\nSome exchanges do not support the transfer of contract addresses, so when you use an exchange's address as a receiving address, you will not be able to receive the token. \nThe solution is to find the hash link of the swap and submit it to the exchange's customer service staff to deal with.\nThere will be a new prompt for receiving address in the new version of Transit swap, please take note.","metadata":{"loc":{"lines":{"from":147,"to":153}}}}],["1757",{"pageContent":"Why can't I find my token in the Transit Swap listing\nTransit Swap automatically aggregates available liquidity from leading DEXs and professional market makers. \nIf you can’t find your tokens, you can enter the token's contract address to search and add. If there is still nothing, then your token may lack sufficient liquidity.\n\nWhy did my swap fail\nTransactions can fail due to various reasons. The most common reason is \"gas fee is insufficient\". \nAn \"insufficient gas\" error occurs when the gas allocated for a transaction is consumed before the swap completes. To prevent transactions from failing due to \"out of gas\", we recommend the default network fee set by Transit Swap. When the swap fails, the network may consume some gas fee, but the assets you want to exchange are still safe and available in your wallet. If your swap fails several times, please contact us (TG link) and we will investigate the cause.","metadata":{"loc":{"lines":{"from":155,"to":161}}}}],["1758",{"pageContent":"Transit Swap aggregation swap tutorial\nAggregate swap means it can choose the optimal trading channel automatically and offers the best transaction price.\n1、Open Transit Swap, and select the type and amount of the tokens to be exchanged. In “swap parameters”, you can view the slippage, ratio, fee and other parameters, and click “Swap Path” to view the relevant data.\n2、Slippage in aggregate swap is more important. You have to set matching slippages to buy and sell tokens normally. You can check “Receiving Address” in the “Settings” menu at the top right to customize the receiving address. (The default receiving address is the source address)\nClick “fees discount” for details\n3、It should be noted that approval is required for the first swap other than the main net token. In the authorization interface, you can flexibly set the preferred amount. It is recommended to set a slightly higher fee when swapping on the Ethereum chain, so that the transaction can be successful and fast.","metadata":{"loc":{"lines":{"from":163,"to":168}}}}],["1759",{"pageContent":"4、There are only limited tokens shown on the list of Transit Swap, and how to swap other tokens? Click “choose the source token” or “choose the destination token”, and add the contract address to see the needed token.","metadata":{"loc":{"lines":{"from":169,"to":169}}}}],["1760",{"pageContent":"Transit Swap Cross-Chain Transfer Tutorial\nIncubated by TokenPocket, Transit Swap is a cross-chain swap platform that integrates DEXs, aggregate transactions and one-stop cross-chain. Without certification, users can complete decentralized transactions real time and instantly swap assets across networks supported by TokenPocket.\nTransit Swap's cross-chain aggregation swap platform will open cross-chain liquidity channels for mainstream public-chain assets, and provide users and projects with one-stop cross-chain services. It aims to create a cross-chain traffic gathering place for leading public chains.\n​","metadata":{"loc":{"lines":{"from":171,"to":174}}}}],["1761",{"pageContent":"​\n1、Open TokenPocket, and you can access Transit by clicking “Swap” on the upper right side of the main page or selecting “Market” on the bottom menu. Then choose the type and amount of source token and destination token that you wish to transfer. You must choose or fill in them correctly, or your assets will be lost (If you choose an exchange address as the destination, it is recommended to consult the exchange platform customer service to see if it can be deposited)\n2、If the source and destination network is same, then swap within the same network default and if not, cross-chain default. (While doing a cross-chain swap, users may need to satisfy the min and max criteria).\n3、You can quickly set the price slippage by clicking “Settings” on the upper right. Generally, the default slippage can be used for mainstream tokens cross-chain swap (The receiving address here is mainly for users to aggregate swap).","metadata":{"loc":{"lines":{"from":174,"to":177}}}}],["1762",{"pageContent":"Click “Menu” in the upper right corner to view your current wallet address, and click “Governance”, “Fees”, “History”, “Documents “and “Help” to view and learn more about Transit Swap.\n4、Choose the swap tokens and amount, click “Swap” to see “Swap Details” where you can view the transfer and receiving addresses, fees and other information. After confirming and entering the password, you can check the swap status in “Swap Record”. Here take the SWFT service in the screenshot for example. If you have not received tokens, you can copy the “order number” and click on the bottom of the “have questions” to get feedback.\nThe services supported by Transit Swap:\nSWFT Community Links: https://t.me/swftswap_CN\nMultichain (former anyswap) Community Links: https://t.me/multi_cn\nPlease note: when you join groups, anyone who dm you is a scammer, don’t contact them and just block and report.","metadata":{"loc":{"lines":{"from":178,"to":183}}}}],["1763",{"pageContent":"How to check your order status through Transit explorer\nHow to enter ​\nTransit explorer link: ​\nOpen TokenPocket wallet, and tap “discover”, then enter the link in the search bar to enter the .\nDirectly click on the  at the top of the  website to enter.\nIntroduction to the  function\nSwap: you can jump directly to the \"\" page.\nBuy token: you can go to the \"  \" entrance directly.\nToken security: You can check whether the token is safe by entering the token contract address. The security test is based on the data analysis on the chain, which is only for reference and it is not investment advice.","metadata":{"loc":{"lines":{"from":185,"to":193}}}}],["1764",{"pageContent":"Search: When users conduct trade or swap tokens across chains in , they can copy the transaction hash value and check their order status in the Transit explorer, including transaction date, destination chain, original address, receiving address and amount. You can also see the liquidity provider of the transaction. For cross-chain transactions, you can find which cross-chain merchant provides service.\nNote:  just supports scanning transactions on EVM and TRON networks which are only related to  contracts, and cannot check the ordinary transfers on public chains.\nCheck your order status through the ​\nCopy your hash value on the  transaction page, and open the Transi explorer, then paste the hash value and click \"Search\".\nThere will appear the transaction status on the left side of the Transit explorer page. The following page shows the status of the successful cross-chain.","metadata":{"loc":{"lines":{"from":194,"to":198}}}}],["1765",{"pageContent":"There will appear the transaction status on the left side of the Transit explorer page. The following page shows the status of the successful cross-chain.\nIf the following \"Failed\" page appears, it indicates that the transaction has failed. Please return to the wallet to view your assets. The assets will not be transferred out if the transaction fails.\nIf the transaction fails, your funds will always be safely in your wallet. If your swap fails multiple times, please contact us and we will find the cause.\nAt present, 's cross-chain service integrates SWFT, Cbridge and Multichain (former AnySwap) service providers, so you can see the logos of these three services in our cross-chain operation records. You can join the corresponding community of these providers to communicate with the hash value, so that dealing with the problem will be prompt and efficient.\nHow to find a corresponding exchange agent to solve swap problems quickly: ​","metadata":{"loc":{"lines":{"from":198,"to":202}}}}],["1766",{"pageContent":"Solutions for Cross-Chain Swap Failure\nTransit Swap's cross-chain service integrates SWFT, and Multichain (former Anyswap), MetaPath, Celer cBridge four service providers, so we can see the logos of these four service providers in our cross-chain transaction records. You can join the corresponding community and provide the transaction hash to conduct effective conversions, which will be timely and efficient in dealing with swap problems. \nThe following tells how to find and contact the corresponding service provider.\n1. SWFT logo and contact details \nOpen the exchange record, and you can distinguish the service provider through the logo in the upper right corner. For example, here is the logo of SWFT, which is unique.\nClick > on the right side of the logo to open the order details. Copy the order ID and join the official telegram community: , then provide the order ID for feedback. \nPlease note, anyone who DMs you first is a scammer on telegram, just report and block directly.","metadata":{"loc":{"lines":{"from":204,"to":210}}}}],["1767",{"pageContent":"Please note, anyone who DMs you first is a scammer on telegram, just report and block directly.\n2. Multichain logo and contact details\n2.1 Open the exchange record, and you can distinguish the service provider through the logo in the upper right corner. For example, here is the logo of Multichain (formerly Anyswap), which is unique.\n2.2 Click > on the right side of the logo to find the transaction hash, here is the hash for swap out, then join the official telegram community:  and provide the hash for feedback. \nPlease note, anyone who DMs you first is a scammer on telegram, just report and block directly.\n2.3 If the order of Multichain (formerly Anyswap) is not credited, in addition to asking for help in the community, you can also submit a request through their official browser (because there may be omissions in the process of calling swap orders). The method is as follows: \nOpen the Multichain browser link: . Click “Explorer” and enter the transaction hash in the search bar.","metadata":{"loc":{"lines":{"from":210,"to":216}}}}],["1768",{"pageContent":"Open the Multichain browser link: . Click “Explorer” and enter the transaction hash in the search bar.\nThen you can select the corresponding origin chain and target chain and click “Send” to submit the request.\nOnce submitted, you will see the relevant data in the data display board. Generally, the swap can be completed within a few minutes after the request is submitted.\n2.4、Multichain (formerly Anyswap) is a special one among the service providers. When the tokens you need to swap in its exchange pool are insufficient (such as USDT), it will automatically send AnyUSDT token to you. When you get this token, you can swap to native token by yourself through Multichain’s DApp (anyUSDT is 1:1 exchanged for USDT).\n3. MetaPath logo and contact details\nOpen the exchange record, and you can distinguish the service provider through the logo in the upper right corner. For example, here is the logo of MetaPath, which is unique.","metadata":{"loc":{"lines":{"from":216,"to":221}}}}],["1769",{"pageContent":"Open the exchange record, and you can distinguish the service provider through the logo in the upper right corner. For example, here is the logo of MetaPath, which is unique.\nClick on the MetaPath logo to jump to the  to view the details of your trading order.\nIf you have any questions, you can join the official MetaPath telegram: and contact customer service for feedback.\nPlease note, anyone who DMs you first is a scammer on telegram, just report and block directly.\n4. Celer cBridge logo and contact details\nOpen the exchange record, and you can distinguish the service provider through the logo in the upper right corner. For example, here is the logo of Celer cBridge, which is unique.\nClick on Celer cBridge the  logo to jump to the  to view the details of your trading order.\nIf you have any questions, you can join the official Celer cBridge telegram:  and contact customer service for feedback.","metadata":{"loc":{"lines":{"from":221,"to":228}}}}],["1770",{"pageContent":"If you have any questions, you can join the official Celer cBridge telegram:  and contact customer service for feedback.\nPlease note, anyone who DMs you first is a scammer on telegram, just report and block directly.","metadata":{"loc":{"lines":{"from":228,"to":229}}}}],["1771",{"pageContent":"How to set custom slippage\nNote: a higher slippage can help your transactions succeed, but not favorable for price, please use carefully.\nOperation steps: enter the transaction page -click Settings on the upper right corner – choose advanced Settings - Customize slippage.\n​\nHow to set custom receiving address\nOpen Transit Swap, click the settings icon in the upper right corner, check the receiving address, and then you can customize your receiving address.","metadata":{"loc":{"lines":{"from":231,"to":236}}}}],["1772",{"pageContent":"How to swap/bridge $DOGE on Transit Swap?\nTransit Swap now supports Dogecoin, users can cross-chain swap and bridge $DOGE on Transit Swap.\nHow to buy or sell $DOGE on Transit Swap?\nTransit Swap now supports cross-chain buy or sell $DOGE. First, connect your wallet and choose the payment network and token, take BNB Chain as an example here. You can enter the payment amount, then you can see the estimated receiving amount. Don't forget to enter the receiving address on Dogecoin.\nHow to bridge $DOGE on Transit Swap? (BSC>>Dogecoin)\nConnect your wallet, enter the amount you want to bridge from BSC to Dogecoin, and then enter the receiving address. Click [Confirm Swap], you can see the pop-up window and view the transaction details, click [Confirm Payment].\nYou can see the \"Success\" reminder and the History below. All the process of this transaction is clear. It will take 5 mins or more to complete this transaction. You need to have enough Gas Fee to pay the miner fee.\n > Ongoing","metadata":{"loc":{"lines":{"from":238,"to":245}}}}],["1773",{"pageContent":"> Ongoing\n > Withdrawing\n > Success\nAt this point, you have successfully completed the bridge and you can check the $DOGE on Dogecoin.\nNot Financial Advice. DYOR!","metadata":{"loc":{"lines":{"from":245,"to":249}}}}],["1774",{"pageContent":"Transit Swap TRON\nTransit Swap For TRON V2\nTRON V2\nhttps://aggserver.transit.finance/v3/transit/swap\nQuery Swap Info and Build Tron Transaction Contract data\ntoken0*\nstring\ncontract address of a token to sell\ntoken1*\nstring\ncontract address of a token to buy\ndecimal0*\ninteger\nDecimals of a token to sell\ndecimal1*\ninteger\nDecimals of a token to buy\nimpact*\ninteger\nSlippage Tolerance. 0 - 10000\npart*\ninteger\nThe scale of amountIn. 1 - 100\namountIn*\ninteger\nAmount of a token to sell\namountOutMin*\ninteger\nMinimum received\nto*\nstring\nRecipient of desToken\nissuer*\nstring\nSender of transaction push\nchain*\nstring\nchain flag\nchannel\nstring\n\"default\"、\"web\"、\"android\"、\"ios\"、\n\"extension\"","metadata":{"loc":{"lines":{"from":253,"to":294}}}}],["1775",{"pageContent":"{\n    \"result\": 0,\n    \"message\": \"success\",\n    \"data\": {\n        \"srcToken\": \"T9yD14Nj9j7xAB4dbGeiX9h8unkKHxuWwb\",\n        \"dstToken\": \"TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t\",\n        \"to\": \"TGdHpDYJFZXmmQMTRskp54MzjTvWwrUobQ\",\n        \"amountIn\": \"100000000\",\n        \"totalAmountOut\": \"6177355\",\n        \"totalAmountOutMin\": \"5559619\",\n        \"dexPath\": [\n            \"JustSwap:100\"\n        ],\n        \"impact\": \"0.003000\",\n        \"channel\": \"web\",\n        \"dexs\": [],\n        \"amounts\": [\n            {\n                \"exchange\": \"SunSwapV1\",\n                \"amountOut\": \"6177355\",\n                \"icon_url\": \"https://tp-statics.tokenpocket.pro/logo/dapp/sunswap.png\"\n            }\n        ],\n        \"aggregator\": \"TKqQ7zuL7yKp1NWuhGpoXTDiE3j2qiAbRE\",\n        \"data\": {\n            \"contract\": \"TKqQ7zuL7yKp1NWuhGpoXTDiE3j2qiAbRE\",\n            \"fun\": \"swap((uint8,address,address,address,address,uint256,uint256,string,uint256,address),(uint8,address,bytes))\",\n            \"options\": {","metadata":{"loc":{"lines":{"from":296,"to":323}}}}],["1776",{"pageContent":"\"fun\": \"swap((uint8,address,address,address,address,uint256,uint256,string,uint256,address),(uint8,address,bytes))\",\n            \"options\": {\n                \"callValue\": \"100000000\",\n                \"feeLimit\": 100000000\n            },\n            \"parameter\": [\n                {\n                    \"type\": \"tuple(uint8,address,address,address,address,uint256,uint256,string,uint256,address)\",\n                    \"value\": [\n                        0,\n                        \"0x0000000000000000000000000000000000000000\",\n                        \"0xa614f803b6fd780986a42c78ec9c7f77e6ded13c\",\n                        \"0x87d5ef4c42a78f85dd1ca399fa0c99f9ab0875d9\",\n                        \"0x490494393fb90599365c1303e486afe52bbab866\",\n                        \"100000000\",\n                        \"5559619\",\n                        \"web\",\n                        0,\n                        \"0x891cdb91d149f23b1a45d9c5ca78a88d0cb44c18\"\n                    ]\n                },","metadata":{"loc":{"lines":{"from":323,"to":343}}}}],["1777",{"pageContent":"\"web\",\n                        0,\n                        \"0x891cdb91d149f23b1a45d9c5ca78a88d0cb44c18\"\n                    ]\n                },\n                {\n                    \"type\": \"tuple(uint8,address,bytes)\",\n                    \"value\": [\n                        0,\n                        \"0x0000000000000000000000000000000000000000\",","metadata":{"loc":{"lines":{"from":343,"to":352}}}}],["1778",{"pageContent":"\"0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000a614f803b6fd780986a42c78ec9c7f77e6ded13c000000000000000000000000490494393fb90599365c1303e486afe52bbab86600000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000005f14d20000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a2726afbecbd8e936000ed684cef5e2f5cf430080000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000","metadata":{"loc":{"lines":{"from":353,"to":353}}}}],["1779",{"pageContent":"000000000000000000000000000000000001000000000000000000000000a2726afbecbd8e936000ed684cef5e2f5cf4300800000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000064ce22f858000000000000000000000000000000000000000000000000000000000054d5430000000000000000000000000000000000000000000000000000000063627e88000000000000000000000000490494393fb90599365c1303e486afe52bbab86600000000000000000000000000000000000000000000000000000000\"","metadata":{"loc":{"lines":{"from":353,"to":353}}}}],["1780",{"pageContent":"]\n                }\n            ],\n            \"issuer\": \"TGdHpDYJFZXmmQMTRskp54MzjTvWwrUobQ\"\n        },\n        \"feeRate\": 0.003,\n        \"fee\": \"300000\",\n        \"normalFee\": \"300000\",\n        \"upgradeAmountOutMin\": false,\n        \"usedAmountIn\": \"99700000\"\n    }\n}","metadata":{"loc":{"lines":{"from":354,"to":365}}}}],["1781",{"pageContent":"TransitSwap Contracts\n                \"TRON\": \"TKqQ7zuL7yKp1NWuhGpoXTDiE3j2qiAbRE\"","metadata":{"loc":{"lines":{"from":371,"to":372}}}}],["1782",{"pageContent":"Swap API\nTransit Swap API for Cross\n                {\n    \"result\": 0,\n    \"message\": \"success\",\n    \"data\": {\n        \"token0\": \"TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t\",\n        \"token1\": \"0x55d398326f99059ff775485246999027b3197955\",\n        \"chainID\": \"95500\",\n        \"destChainID\": \"56\",\n        \"amountIn\": \"31000000\",\n        \"to\": \"\",\n        \"price\": \"-\",\n        \"fee\": \"0.44252000\",\n        \"relayerFee\":\"\",\n        \"feeRate\": \"-\",\n        \"amountOut\": \"30557480427023319814\",\n        \"crossPool\": \"-\",\n        \"router\": \"TFHc9qsQCiepyyUQynnVVrQwMxZ37Fi15N\",\n        \"exchange\": \"iswap\",\n        \"data\": {\n            \"contract\": \"TFHc9qsQCiepyyUQynnVVrQwMxZ37Fi15N\",\n            \"fun\": \"otherswap(uint256,(address,address,address,uint256,uint256,uint256,bool,string,uint256),bytes)\",\n            \"options\": {\n                \"callValue\": \"0\",\n                \"feeLimit\": 100000000\n            },\n            \"parameter\": [\n                {\n                    \"type\": \"uint256\",","metadata":{"loc":{"lines":{"from":374,"to":403}}}}],["1783",{"pageContent":"\"options\": {\n                \"callValue\": \"0\",\n                \"feeLimit\": 100000000\n            },\n            \"parameter\": [\n                {\n                    \"type\": \"uint256\",\n                    \"value\": \"1\"\n                },\n                {\n                    \"type\": \"tuple(address,address,address,uint256,uint256,uint256,bool,string,uint256)\",\n                    \"value\": [\n                        \"TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t\",\n                        \"0x55d398326f99059ff775485246999027b3197955\",\n                        \"\",\n                        \"31000000\",\n                        1,\n                        4,\n                        true,\n                        \"ios\",\n                        \"56\"\n                    ]\n                },\n                {\n                    \"type\": \"bytes\",\n                    \"value\": \"0x00...00\"\n                }\n            ],\n            \"issuer\": \"\"\n        }\n    }\n}","metadata":{"loc":{"lines":{"from":403,"to":434}}}}],["1784",{"pageContent":"Smart Contracts\nThe Transit Swap&Cross smart contracts address info.\nThe full list of smart contracts on these networks:\nTransit Swap & Cross Router v4\n\nTKqQ7zuL7yKp1NWuhGpoXTDiE3j2qiAbRE","metadata":{"loc":{"lines":{"from":436,"to":441}}}}],["1785",{"pageContent":"TronGrid\nSuggest Edits\nTronGrid provides an API interface into the TRON Network.\n\nSimilar to Infura on the Ethereum platform, Tron Grid provides Tron clients running in the cloud, so you don't have to run one yourself to work with Tron. Tron Grid allows developers to access important tools to develop decentralized applications on the Tron protocol.\n\nIntegrating TronGrid\nTronGrid Mainnet\nTo start using TronGrid in TronWeb or TronBox, just point at these URLs for all your API calls.\n\nMainnet\n\nFullNode HTTP API -\nhttps://api.trongrid.io\n\nSolidityNode HTTP API - \nhttps://api.trongrid.io\n\nEvent Server -\nhttps://api.trongrid.io\n\n\nFullNode GRPC -\ngrpc.trongrid.io:50051\n\nSolidityNode GRPC -\ngrpc.trongrid.io:50052\nShasta Testnet\n\nAdditionally, TronGrid offers its own testnet, the \"Shasta\" network.\nShasta Explorer: https://shasta.tronscan.io\n\nYou can get test coins for Shasta Testnet Here.\n\nTo start using Shasta in TronWeb or TronBox, just point at these URLs for all your API calls.\n\nText","metadata":{"loc":{"lines":{"from":1,"to":37}}}}],["1786",{"pageContent":"You can get test coins for Shasta Testnet Here.\n\nTo start using Shasta in TronWeb or TronBox, just point at these URLs for all your API calls.\n\nText\n\nFullNode HTTP API -\nhttps://api.shasta.trongrid.io\n\nSolidityNode HTTP API - \nhttps://api.shasta.trongrid.io\n\nEvent Server - \nhttps://api.shasta.trongrid.io\n\n\nFullNode GRPC -\ngrpc.shasta.trongrid.io:50051\n\nSolidityNode GRPC -\ngrpc.shasta.trongrid.io:50052\nTronGrid API\nTronGrid provides all full-node HTTP APIs and extended user-friendly APIs of the TRON network. APIs are working on Mainnet and Shasta testnet.\n\nTronGrid API please refer to APIs\n\nTronBox\nTronBox is Tron's smart contract development, testing and deployment tool\n\nSuggest Edits\nInstallation\nOS requirement\n\nNodeJS 5.0+\nLinux, or Mac OS X\nShell\n\nnpm install -g tronbox\n📘\nInstallation permissions issue","metadata":{"loc":{"lines":{"from":37,"to":76}}}}],["1787",{"pageContent":"Suggest Edits\nInstallation\nOS requirement\n\nNodeJS 5.0+\nLinux, or Mac OS X\nShell\n\nnpm install -g tronbox\n📘\nInstallation permissions issue\n\n\nIf the command in the shell fails due to a permission issue, please follow this command to install again: sudo npm install -g tronbox --unsafe-perm=true --allow-root --save-dev grunt\nIf you still have permission issues, you can try to use nvm to manage nmp and node and install again.\n\nTronbox npm Package Security Validation\nPrepare, you need to install the npm pkgsign for verifying.\n\nFirst, get the version of tronbox dist.tarball\n\nShell\n\n$ npm view tronbox dist.tarball\nhttps://registry.npmjs.org/tronbox/-/tronbox-2.7.17.tgz\nSecond, get the tarball\n\nShell\n\nwget https://registry.npmjs.org/tronbox/-/tronbox-2.7.17.tgz\nFinally, verify the tarball\n\nShell","metadata":{"loc":{"lines":{"from":76,"to":108}}}}],["1788",{"pageContent":"Shell\n\nwget https://registry.npmjs.org/tronbox/-/tronbox-2.7.17.tgz\nFinally, verify the tarball\n\nShell\n\n$ pkgsign verify tronbox-2.7.17.tgz --package-name tronbox\nextracting unsigned tarball...\nbuilding file list...\nverifying package...\npackage is trusted\nThe public key address used for signing is here.\n\nInitialize a Tron-Box Project\nEnter the following command under an empty folder\n\nShell\n\ntronbox init\nls\n.gitignore\t\tcontracts\t\tmigrations\t\ttest\t\t\ttronbox-config.js\ttronbox.js\nFile/Folder\tDescription\n./contract\tThe directory storing all smart contract files.\n./migrations\tThe directory storing all javascript files for migration.\n./test\tThe directory storing all test scripts for testing the smart contract.\n./tronbox.js\tThe configuration file of the project. Declare your Full Node address and Event Server in this file.\nBasic Commands\nCommand\tUsage\ntronbox compile\tCompiles all the smart contracts. The compiled result is stored into ./build/contracts.","metadata":{"loc":{"lines":{"from":108,"to":137}}}}],["1789",{"pageContent":"This command only compiles files that have been modified since the last compile.\ntronbox compile --compile-all\tRe-compiles all the smart contracts.\ntronbox migrate\tDeploys the contract. This command only migrates changes since the last successful migration.\ntronbox migrate --reset\tRe-migrates all the smart contracts.\ntronbox test [test_script_path]\tRuns all test scripts. Test file name definition is optional. It also can be run with --reset flag.\ntronbox console\tThe console supports the tronbox command. For example, you can invoke migrate --reset in the console. The result is the same as invoking tronbox migrate --reset in the command.\nSmart Contract Deployment using Tronbox\nTo deploy a smart contract using a tronbox, you need to write a smart contract file, compile the smart contract, and finally migrate and deploy the smart contract. After that you can then use the script to test.\n\nSmart Contract Development","metadata":{"loc":{"lines":{"from":139,"to":148}}}}],["1790",{"pageContent":"Smart Contract Development\n\nAll smart contract files need to be placed in the ./contracts directory. By default, there will be a contract file with a suffix of .sol. But if you need to write a smart contract, you need to create a new .sol.\nTronbox requires the smart contract name to be the same as the file name. For example, if the file name is Test.sol, we can write the contract as follows:\n\nSolidity\n\npragma solidity >=0.4.23 <0.6.0;\ncontract Test{\n    function f() public pure returns (string memory){\n        return \"method f()\";\n    }\n    function g() public pure returns (string memory){\n        return \"method g()\";\n    }\n}\nConfiguring migration scripts\n\nConfiguring migrations/2_deploy_contracts.js as follows:\n\n2_deploy_contracts.js\n\nvar Test = artifacts.require(\"./Test.sol\");\nvar Migrations = artifacts.require(\"./Migrations.sol\");","metadata":{"loc":{"lines":{"from":148,"to":171}}}}],["1791",{"pageContent":"Configuring migrations/2_deploy_contracts.js as follows:\n\n2_deploy_contracts.js\n\nvar Test = artifacts.require(\"./Test.sol\");\nvar Migrations = artifacts.require(\"./Migrations.sol\");\n\nmodule.exports = function(deployer) {\n  deployer.deploy(Test);\n  deployer.deploy(Migrations);\n};\nThe deploy function in this file also supports the contract constructor arguments.\n\nConfiguring compilation and deployment parameters\n\nThe tronbox.js file holds configurations the contract will deploy to. To specify the network, use --network NETWORK_NAME when migrating or testing.\n\ntronbox.js\n\nmodule.exports = {\n  networks: {\n      development: {","metadata":{"loc":{"lines":{"from":171,"to":192}}}}],["1792",{"pageContent":"tronbox.js\n\nmodule.exports = {\n  networks: {\n      development: {\n\n          from: 'some address',\n          privateKey: 'some private key',\n          consume_user_resource_percent: 30,\n          fee_limit: 100000000,\n          fullNode: \"https://api.trongrid.io\",\n          solidityNode: \"https://api.trongrid.io\",\n          eventServer:  \"it is optional\",\n          network_id: \"*\" // Match any network id\n      },\n      production: {\n          from: 'some other address',\n          privateKey: 'some other private key',\n          consume_user_resource_percent: 30,\n          fee_limit: 100000000,\n          fullNode: \"https://api.trongrid.io\",\n          solidityNode: \"https://api.trongrid.io\",\n          eventServer:  \"it is optional\",\n          network_id: \"*\" // Match any network id\n      },\n    ..... you can define other network configuration as well\n  }\n};\nNote: Solidity Support\nTo set up a specific compiler version, using the networks.compilers.solc.version property. For example:","metadata":{"loc":{"lines":{"from":192,"to":221}}}}],["1793",{"pageContent":"JSON\n\nmodule.exports = {\n  networks: {\n    // ...\n    compilers: {\n      solc: {\n        version: '0.5.15' // for compiler version\n      }\n    }\n  },\n\n  // solc compiler optimize\n  solc: {\n    optimizer: {\n      enabled: false, // default: false, true: enable solc optimize\n      runs: 200\n    },\n    evmVersion: 'istanbul'\n  }\n}\nSolidity compiler versions supported by TronBox, please refer to TronBox Github.\n\nCompiling smart contract\n\nTo compile the contract, use:\n\nShell\n\ntronbox compile\nBy default, tronbox compiler only compiles modified contracts since last compile, to reduce unnecessary compiling. If you wish to compile the entire file, you can use --compile-all.\n\nShell\n\ntronbox compile --compile-all\nThe compile output is in ./build/contracts directory. If the directory doesn't exist, it will be auto-generated.\n\nContract Deployment","metadata":{"loc":{"lines":{"from":223,"to":260}}}}],["1794",{"pageContent":"Shell\n\ntronbox compile --compile-all\nThe compile output is in ./build/contracts directory. If the directory doesn't exist, it will be auto-generated.\n\nContract Deployment\n\nScript migration is with a JavaScript file composed to broadcast onto Tron network. The script migration caches your broadcast responsibility. Its existence is based on your broadcast needs and will adjust accordingly. When your work incurs significant change, the migration script you created will propagate the changes through the blockchain. Previous migration history records will undergo a unique Migrations contract to be recorded on the blockchain. Below is a detailed instruction.\n\nTo initiate the migration, use the following command:\n\nShell\n\ntronbox migrate\nThis command will initiate all migration scripts within the migration directory. If your previous migration was successful, tronbox migrate will initiate a new migration and use the development network by default.","metadata":{"loc":{"lines":{"from":260,"to":274}}}}],["1795",{"pageContent":"If there is no new migration script, this command will have no operation. Instead, you can use --reset to re-deploy. You can also use --network NETWORK_NAME to specify a network. Eg. tronbox migrate --reset --network production\n\nShell\n\nPS  C:\\**\\bare-box> tronbox migrate --reset --network production\nUsing network 'production'.\nRunning migration: 1_initial_migration.js\n  Deploying Migrations...\n  Migrations: 41271233ac2eea178ec52f1aea64627630403c67ce\n  Deploying Test...\n  Test: 41477f693ae6f691daf7d399ee61c32832c0314871\nSaving successful migration to network...\nSaving artifacts...\nTest\n\nThe testing scripts are in the ./tests directory. TronBox will ignore all other extensions except for .js, .es, .es6, and .jsx\nBelow is an example testing script for test.js:\n\ntest.js","metadata":{"loc":{"lines":{"from":276,"to":294}}}}],["1796",{"pageContent":"The testing scripts are in the ./tests directory. TronBox will ignore all other extensions except for .js, .es, .es6, and .jsx\nBelow is an example testing script for test.js:\n\ntest.js\n\nvar Test = artifacts.require(\"./Test.sol\");\ncontract('Test', function(accounts) {\n        it(\"call method g\", function() {\n            Test.deployed().then(function(instance) {\n                  return instance.call('g');\n                }).then(function(result) {\n                  assert.equal(\"method g()\", result, \"is not call method g\");\n            });\n        });\n        it(\"call method f\", function() {\n            Test.deployed().then(function(instance) {\n                  return instance.call('f');\n                }).then(function(result) {\n                  assert.equal(\"method f()\", result, \"is not call method f\");\n                });\n        });\n});\nRunning Testing Script\n\nShell","metadata":{"loc":{"lines":{"from":294,"to":318}}}}],["1797",{"pageContent":"Shell\n\nPS C:\\**\\bare-box> tronbox test ./test/test.js \nUsing network 'production'.\n  Contract: Test\n    √ call method g\n    √ call method f\n  2 passing (23ms)\nExample Dapp\nIt can be obtained by the following command.\nIt can also be found at here.\n\nShell\n\ntronbox unbox metacoin\n\nTron-IDE\nSuggest Edits\nTron-IDE is an online editor that helps developers develop smart contracts. It has the characteristics of modularity, and provides editing, compiling, deploying, and debugging smart contracts in the form of plug-ins. If you have experience using remix, then using Tron-IDE will be more familiar and convenient. If you are a beginner, please read the following.\n\nEnvironment\nChrome\nNo matter what system your computer is, you need to install Chrome browser first. Chrome browser is the carrier of Tron-IDE.","metadata":{"loc":{"lines":{"from":318,"to":340}}}}],["1798",{"pageContent":"Environment\nChrome\nNo matter what system your computer is, you need to install Chrome browser first. Chrome browser is the carrier of Tron-IDE.\n\nTronLink\nTron-IDE needs to configure account and node through the TronLink wallet. Search for the keyword 'TronLink', you can install it. If you don’t know about TronLink, here is how to use it\n\nURL\nhttp://www.tronide.io\n\n📘\nNote\n\n\nPlease be patient, it will take a few seconds for the first load.\n\nHome page\n2786\nThe main interface of Tron-IDE is mainly composed of the above sections 1-4:\nLeft 1 position, plug-in selection menu\nLeft 2 position, plug-in function menu\nRight 3 position, Home page and plugin function menu page\nRight 4 position, log and terminal\n\nDeploy smart contracts and call the function.\nLogin account and select network\nBefore deploying a smart contract, you need to log in to TronLink with the account which you want to deploy the smart contract.\n\n720\nAnd select the node.\n\n714\n📘\nNote","metadata":{"loc":{"lines":{"from":340,"to":373}}}}],["1799",{"pageContent":"720\nAnd select the node.\n\n714\n📘\nNote\n\n\nIf you are using a new account of the shasta, you can get test coin here.\n\nEdit a smart contract\nTo deploy a smart contract, you need to use the Plugin Manager to load the corresponding plug-ins. File Explorers are loaded by default. In the function menu of this plug-in, we can create a new file through the button to edit a smart contract .\n\n2542\n2350\nCompile Smart Contract\nUse the SOLIDITY compiler plug-in (Solidity compiler), select the appropriate version, and compile the edited smart contract. After the compiling is successful, it will return the compiling result information, including ABI, Bytecode, etc .; if the compilation fails, the specific information in red will be returned in the lower left .\n\n2786\nDeploy Smart Contracts\nAfter successful compilation, use the deployment plugin (DEPLOYMENT). After successful deployment, the terminal will return transaction information.","metadata":{"loc":{"lines":{"from":373,"to":393}}}}],["1800",{"pageContent":"2786\nDeploy Smart Contracts\nAfter successful compilation, use the deployment plugin (DEPLOYMENT). After successful deployment, the terminal will return transaction information.\n\n2786\nCall the function\nAfter successful deployment, the smart contract address is automatically loaded, and the function can be called in the drop-down menu; the existing smart contract address can also be loaded through the button 'At Address'.\n\n2784\nTronWeb\nSuggest Edits\nTronWeb aims to deliver a unified, seamless development experience influenced by Ethereum's Web3 implementation. We have taken the core ideas and expanded upon it to unlock the functionality of TRON's unique feature set along with offering new tools for integrating DApps in the browser, Node.js and IoT devices. At the same time, TronWeb can service for Tron Network and Sun Network. Developers can use methods in tronWeb.sidechain to contact between the main chain and the side chain.\n\nInstallation\nNode.js\n\nnpm install tronweb\nor","metadata":{"loc":{"lines":{"from":393,"to":410}}}}],["1801",{"pageContent":"Installation\nNode.js\n\nnpm install tronweb\nor\n\n\nyarn add tronweb\nBrowser\nFirst, don't use the release section of this repo, it has not updated in a long time.\n\nThen easiest way to use TronWeb in a browser is to install it as above and copy the dist file to your working folder. For example:\n\n\ncp node_modules/tronweb/dist/TronWeb.js ./js/tronweb.js\nso that you can call it in your HTML page as\n\n\n<script src=\"./js/tronweb.js\"><script>\nCreate TronWeb Instance\nIn order to use tronWeb in your application, you need to create a tronWeb instance like the following.\n\nCreate a tronWeb instance without sidechain options\nJavaScript\n\nconst TronWeb = require('tronweb')\nconst HttpProvider = TronWeb.providers.HttpProvider;\nlet fullNode = '';\nlet solidityNode = '';\nlet eventServer = '';\nconst privateKey = '';\nconst tronWeb = new TronWeb(fullNode,solidityNode,eventServer,privateKey);\nCreate a tronWeb instance with sidechain options\nJavaScript","metadata":{"loc":{"lines":{"from":410,"to":443}}}}],["1802",{"pageContent":"const TronWeb = require('tronweb');\nlet fullNode = '';\nlet solidityNode = '';\nlet eventServer = '';\nlet sideOptions = {\n  fullNode: '',\n  solidityNode: '',\n  eventServer: '',\n  mainGatewayAddress: '',\n  sideGatewayAddress: '',\n  sideChainId: ''\n}\nconst privateKey = '';\nconst tronWeb = new TronWeb(fullNode,solidityNode,eventServer,sideOptions,privateKey);\nIf you want to use shasta testnet, you can create an TronWeb instance as follows:\n\n\nconst TronWeb = require('tronweb');\nconst fullNode = 'https://api.shasta.trongrid.io';\nconst solidityNode = 'https://api.shasta.trongrid.io';\nconst eventServer = 'https://api.shasta.trongrid.io';\nconst privateKey = 'xxx';\nconst tronWeb = new TronWeb(fullNode,solidityNode,eventServer,privateKey);\nAnd if you prefer to use our tronex testnet with a sidechain, you can create an TronWeb instance as follows:\n\nJavaScript","metadata":{"loc":{"lines":{"from":445,"to":470}}}}],["1803",{"pageContent":"JavaScript\n\nconst fullNode = 'https://testhttpapi.tronex.io';\nconst solidityNode = 'https://testhttpapi.tronex.io';\nconst eventServer = 'https://testhttpapi.tronex.io';\nconst sideOptions = {\n  fullNode: 'https://suntest.tronex.io',\n  solidityNode: 'https://suntest.tronex.io',\n  eventServer: 'https://suntest.tronex.io',\n  mainGatewayAddress: 'TFLtPoEtVJBMcj6kZPrQrwEdM3W3shxsBU',\n  sideGatewayAddress: 'TRDepx5KoQ8oNbFVZ5sogwUxtdYmATDRgX',\n  sideChainId: '413AF23F37DA0D48234FDD43D89931E98E1144481B'\n}\nconst tronWeb = new TronWeb(\n  fullNode,\n  solidityNode,\n  eventServer,\n  {\n    fullNode: sideOptions.fullNode,\n    solidityNode: sideOptions.solidityNode,\n    eventServer: sideOptions.eventServer,\n    mainGatewayAddress: sideOptions.mainGatewayAddress,\n    sideGatewayAddress: sideOptions.sideGatewayAddress,\n    sideChainId: sideOptions.sideChainId\n  }\n);","metadata":{"loc":{"lines":{"from":470,"to":495}}}}],["1804",{"pageContent":"Getting Started\nSuggest Edits\nTRON is an open-source public blockchain platform that supports smart contracts. TRON is compatible with Ethereum, which means that you can migrate smart contracts on Ethereum to TRON directly or with minor modifications. TRON relies on a unique consensus mechanism to realize the high TPS of the TRON network that is far beyond Ethereum, bringing developers a good experience of faster transactions.\n\nTRON is different from Ethereum, mainly in the following aspects:","metadata":{"loc":{"lines":{"from":1,"to":5}}}}],["1805",{"pageContent":"Consensus Mechanism\nCurrently, the Ethereum network adopts the POW consensus and will adopt the POS consensus in the future. TRON's consensus mechanism is DPOS. For more information about the TRON consensus mechanism, please refer to TRON consensus mechanism.\nResource Model\nEthereum transactions need to pay gas fees, and the TRON network transactions need to pay bandwidth and energy fees, where bandwidth is a unit to measure the size of a transaction in bytes. The larger the transaction, the more bandwidth resources will be consumed. Energy is a unit that measures the amount of computation required for TVM to perform specific operations on the TRON network. Energy is calculated in the same way as Ethereum. The more instructions a transaction executes, the more energy it consumes, and the amount of energy consumed by different instructions are different. For more information about bandwidth and energy, please refer to TRON Resource Model.\nTVM","metadata":{"loc":{"lines":{"from":7,"to":11}}}}],["1806",{"pageContent":"TVM\nTRON TVM and Ethereum EVM are compatible but differ in some details, please refer to Differences between TVM and EVM\nAPI\nEthereum supports JSON-RPC 2.0 specification APIs, TRON supports Http and gRPC APIs, and TRON also provides Ethereum-compatible JSON-RPC 2.0 APIs.\nOverview\nThis document is designed to help you build Web3 applications on TRON, including the introduction of TRON's basic concepts and core modules, development tools, and various examples. You can choose a theme according to your needs:","metadata":{"loc":{"lines":{"from":11,"to":16}}}}],["1807",{"pageContent":"For DApp Developers\nFor Super Representatives and Voters\nExchange/Wallet integrate with the TRON network\nFor DApp Developers\nIf you have Ethereum development experience, then you will easily master TRON development. TRON's smart contract development language is Solidity. The development tools are similar to the tools you are familiar with on Ethereum (such as Truffle, Remix, and Web3js), you can use them proficiently in very little time.\n\nTools\nBelow, you may find tools for developing and deploying smart contracts in TRON,\n\nTronBox: CLI tool used to compile and deploy smart contracts, is similar to Ethereum Truffle\nTron-IDE: GUI tool used to compile and deploy smart contracts, is similar to Ethereum Remix\nTronWeb: Javascript SDK supporting TRON, is similar to Ethereum Web3.js\nWallet\nLike MetaMask, you can connect your DApp with Tronlink, which supports Chrome, Android, and IOS.","metadata":{"loc":{"lines":{"from":18,"to":31}}}}],["1808",{"pageContent":"DApp integrate with TronLink\nTutorial\nIf you have zero experience developing DApp in TRON, you may find the tutorial below that is friendly and helpful. It includes a complete set of processes from compiling contracts and UI interaction to deploying and launching. By learning to build a decentralized library, developers can easily master how to deploy their own DApps on the TRON network.\n\nBuild a WEB3 App\nTestnet\nYou may deploy your DApp to Shasta and Nile testnet as well as the TRON mainnet. To learn more, please check\nNetwork.\n\nFor Super Representatives and Voters\nThe super representative is a participant in the network, running a fullnode for block production, 27 in total. They are elected by voting and are responsible for the block verification and generation of the TRON network. In addition, the super representatives are also responsible for the governance of the network, which plays a vital role in the healthy operation of the network.","metadata":{"loc":{"lines":{"from":33,"to":43}}}}],["1809",{"pageContent":"Voters stake TRX to obtain voting rights and resources (energy or bandwidth), and the obtained voting rights can vote for super representatives and receive rewards at the same time.\n\nBecome an SR\nRun a Fullnode\nReward\nBrokerage Ratio\nCommittee and Proposals\nExchange/Wallet integrate with the TRON network\nIf you run an exchange or provide a wallet service, you may refer to here for integration with TRON.\n\n\n\nAccount\nSuggest Edits\nTRON uses an account model. The address is the unique identifier of an account, and a private key signature is required to operate an account. An account has many attributes, including TRX & TRC10 token balances, bandwidth, energy, Etc. An account can send transactions to increase or reduce its TRX or TRC10 token balances, deploy smart contracts, and trigger the smart contracts released by itself or others. All TRON accounts can apply to be Super Representatives or vote for the elected Super Representatives. Accounts are the basis of all activities on TRON.","metadata":{"loc":{"lines":{"from":45,"to":59}}}}],["1810",{"pageContent":"Account Type\nTRON has two account types::\n\nGeneral account - that is to say, externally-owned account, controlled by anyone with the private key\nContract account - a smart contract deployed on the TRON network and controlled by code. No one owns the private key of the contract accounts.\nBoth account types have the ability to::\n\nReceive, hold, and send TRX or tokens\nInteract with deployed smart contracts\nAccount & Key Pair\nAn account consists of a cryptographic pair of keys: a public key and a private key. The public key can be mapped to an address, while the private key is used to sign transactions. This key pair help prove that a transaction was actually signed by the sender and prevents forgeries.\n\nThis prevents malicious actors from broadcasting fake transactions because you can always verify the sender of a transaction.","metadata":{"loc":{"lines":{"from":61,"to":73}}}}],["1811",{"pageContent":"This prevents malicious actors from broadcasting fake transactions because you can always verify the sender of a transaction.\n\nFor example, when Alice wants to send TRX from her account to Bob's, she needs to create a transaction and send it to the TRON network for verification. With the key pair, Alice can prove that she originally initiated the transaction request. Without the encryption mechanism, malicious actor Eve might be able to publicly broadcast a similar request, \"send 5 TRX from Alice's account to Eve's account\", while no one can validate whether or not the transaction is requested by Alice herself.","metadata":{"loc":{"lines":{"from":73,"to":75}}}}],["1812",{"pageContent":"External Account Creation\nTRON’s key pair generation algorithm is exactly the same as that of Ethereum, which uses the elliptic curve digital signature algorithm ECDSA-secp256k1. The process of key pair generation is: First, generate a random private key, which consists of 64 hexadecimal characters. Then, a public key is generated from the private key according to the Elliptic Curve Digital Signature Algorithm. Finally, take the last 20 bytes of the Keccak-256 result of the public key and add 41 in front of the Hex format address.\n\nAccount Address Format\nIn addition to the Hex format, the TRON network account address also has a Base58 format.\n\nHex\nCompared with the TRON address in Hex format generated by the same private key and the Ethereum address, except for the first 41, everything else is exactly the same.\n\n\n418840E6C55B9ADA326D211D818C34A994AECED808\nNote: The TRON address in Hex format removes the leading 41 to get the Ethereum address.","metadata":{"loc":{"lines":{"from":77,"to":88}}}}],["1813",{"pageContent":"418840E6C55B9ADA326D211D818C34A994AECED808\nNote: The TRON address in Hex format removes the leading 41 to get the Ethereum address.\n\nBase58\nA Base58 address can be obtained from the base check calculation of a Hex address. All Base58 addresses begin with T. For example:\n\n\nTNPeeaaFB7K9cmo4uQpcU32zGK8G1NYqeL\nExample of Hex and Base58 format conversion using tronweb:\n\nJavaScript\n\ntronWeb.address.toHex(\"TNPeeaaFB7K9cmo4uQpcU32zGK8G1NYqeL\")\n> \"418840E6C55B9ADA326D211D818C34A994AECED808\"\n\ntronWeb.address.fromHex(\"418840E6C55B9ADA326D211D818C34A994AECED808\")\n> \"TNPeeaaFB7K9cmo4uQpcU32zGK8G1NYqeL\"\nWays to Create Accounts\nUsers can create an account in the following ways. That is to generate a private key and the corresponding address.\n\nCreate an account offline using the command line wallet wallet-cli\n\nJSON","metadata":{"loc":{"lines":{"from":88,"to":110}}}}],["1814",{"pageContent":"Create an account offline using the command line wallet wallet-cli\n\nJSON\n\nwallet> GenerateAddress\n{\n    \"address\": \"TU6JdEDQGPus64LTMksvnxF2cv4FQrXPCa\",\n    \"privateKey\": \"b1ba1db577a36421924a87026cda27523851c6e88123d0a0a1def9a974376176\"\n}\nCreate an account offline using the SDK, take TronWeb as an example:\n\nJavaScript\n\ntronWeb.createAccount()\n> address:\n{\n    base58: \"TDpBe64DqirkKWj6HWuR1pWgmnhw2wDacE\"\n    hex: \"412A2B9F7641D0750C1E822D0E49EF765C8106524B\"\n    privateKey: \"427139B43028A492E2705BCC9C64172392B8DB59F3BA1AEDAE41C88924960091\"\n    publicKey:\"0404B604296010A55D40000B798EE8454ECCC1F8900E70B1ADF47C9887625D8BAE3866351A6FA0B5370623268410D33D345F63344121455849C9C28F9389ED9731\"\n}\nCreate a private key and an address using the wallet application\n\nAccount Activation\nNewly created accounts do not exist on the chain and need to be activated before they can be found via API queries or on the chain explorer. Accounts can be activated in the following two ways:","metadata":{"loc":{"lines":{"from":110,"to":134}}}}],["1815",{"pageContent":"Send any amount of TRX or TRC-10 tokens from an existing account to the new account;\nCall Java-tron's wallet/createaccountAPI to create a transaction from an existing account, then sign the transaction and broadcast it to the TRON network.\nAn account creation fee of 1 TRX is charged to activate a new account. Besides that, If the sender of the above two transactions has enough Bandwidth obtained by staking TRX, then creating an account will only consume bandwidth, otherwise, 0.1 TRX will be burned to pay for the bandwidth.\n\nAlternatively, transferring TRX or TRC-10 tokens to an inactive account address in a smart contract can also complete the activation of the account. In addition to the bandwidth and energy consumed by normal contract calls, this way will only consume an additional 25,000 energy, and will not consume the 1 TRX account creation fee and the 0.1 TRX bandwidth fee.","metadata":{"loc":{"lines":{"from":136,"to":140}}}}],["1816",{"pageContent":"Contract Account\nWhen the smart contract is deployed to the TRON network, the corresponding contract account address is returned, which is calculated from the ID of the deployed contract transaction and the sender's account address. The format of the contract account address is the same as that of external accounts: hex or Base58. For example,\n\n\nBase58: TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t\nHex:    41A614F803B6FD780986A42C78EC9C7F77E6DED13C","metadata":{"loc":{"lines":{"from":142,"to":147}}}}],["1817",{"pageContent":"Base58: TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t\nHex:    41A614F803B6FD780986A42C78EC9C7F77E6DED13C\n\nResource Model\nSuggest Edits\nVoting Right, bandwidth and energy are important system resources of the TRON network. Among them, voting rights are used to vote for super representatives; Bandwidth is the unit that measures the size of the transaction bytes stored in the blockchain database. The larger the transaction, the more bandwidth resources will be consumed. Energy is the unit that measures the amount of computation required by the TRON virtual machine to perform specific operations on the TRON network. Since smart contract transactions require computing resources to execute, each smart contract transaction requires to pay for the energy fee.","metadata":{"loc":{"lines":{"from":147,"to":152}}}}],["1818",{"pageContent":"Voting Right\nBefore any account can vote for super representatives, it needs to obtain voting rights, that is, TRON Power (TP). Voting rights can be obtained by staking TRX. In addition to obtaining bandwidth or energy, staking TRX will also obtain voting rights at the same time. Voters who stake 1TRX will receive 1TP. For how to stake, please refer to the Staking on TRON Network chapter.\n\nVoters can stake multiple times, and the voting rights obtained by multiple stake will be added to the voter's account. Voters can query the total number of voting rights owned by the account and the number of used voting rights through the wallet/getaccountresource interface.\n\nBandwidth\nAll types of transactions need to consume Bandwidth Points. Transactions are transmitted and stored in the TRON network in the form of byte arrays. One byte requires one Bandwidth Point, so the Bandwidth Points that a transaction needs to consume is equal to the number of transaction bytes.","metadata":{"loc":{"lines":{"from":154,"to":160}}}}],["1819",{"pageContent":"When the available bandwidth is insufficient, TRX needs to be burned to pay for Bandwidth Points:\n\n\nBurned TRX =  the amount of bandwidth consumed * the unit price of bandwidth\nCurrently, the unit price of bandwidth is 1000sun.\n\nHow to Get Bandwidth Points\nEach external account has 600 free bandwidth per day, and more bandwidth can be obtained by staking TRX. All users share the fixed amount of bandwidth according to the number of staked TRX. The total fixed bandwidth supply for the entire network is 43,200,000,000 per day. The following formula can be used to calculate how much bandwidth can be obtained by staking a certain amount of TRX:","metadata":{"loc":{"lines":{"from":162,"to":169}}}}],["1820",{"pageContent":"The amount of bandwidth obtained = the amount of TRX staked for obtaining bandwidth / the total amount of TRX staked for obtaining bandwidth in the whole network  * 43_200_000_000\nYou can send a FreezeBalanceV2Contract type of transaction to stake TRX to obtain bandwidth. The following will use wallet-cli as an example to create a FreezeBalanceContract type of transaction:\n\n\nwallet> freezeBalanceV2 1000000 0\nBandwidth Points Consumption\nIn addition to query operations, any transaction needs to consume bandwidth. The bandwidth points consumption rules are: first, check whether the transaction initiator's bandwidth obtained by staking TRX is sufficient, if it is sufficient, consume the bandwidth obtained by staking TRX; Otherwise, check whether the free bandwidth of the transaction initiator is sufficient, and if so, consume the free bandwidth, otherwise, TRX will be burned to pay for the bandwidth of the transaction according to the unit price of 0.001TRX per bandwidth.","metadata":{"loc":{"lines":{"from":172,"to":178}}}}],["1821",{"pageContent":"Bandwidth Points Recovery\nAfter the account's free bandwidth and the bandwidth obtained by staking TRX are consumed, they will gradually recover within 24 hours.\n\nAccount Bandwidth Balance Query\nFirst, call the node HTTP interface wallet/getaccountresource to obtain the current resource status of the account, and then calculate the bandwidth balance by the following formula:\n\n\nFree bandwidth balance = freeNetLimit - freeNetUsed\n\nBandwidth balance obtained by staking TRX = NetLimit - NetUsed\nNote: If the result returned by the interface does not contain the parameters in the above formula, it means that the parameter value is 0.","metadata":{"loc":{"lines":{"from":180,"to":190}}}}],["1822",{"pageContent":"Energy\nThe execution of each instruction of smart contract consume a certain amount of energy while running. so contracts of different complexity consume different amounts of energy. When the contract is executed, Energy is calculated and deducted according to instruction one by one. When the available energy of the account is insufficient, TRX needs to be burned to pay for the corresponding energy.\n\n\nBurned TRX = Energy quantity * the unit price of Energy\nCurrently, the unit price of Energy is 420sun.\n\nHow to Get Energy\nEnergy can only be obtained by staking TRX. All users share the fixed amount of energy according to the number of staked TRX. The daily fixed total energy supply of the entire network is 90,000,000,000. Please use the following formula to calculate how much energy can be obtained by staking a certain amount of TRX:","metadata":{"loc":{"lines":{"from":192,"to":200}}}}],["1823",{"pageContent":"The amount of energy obtained = the amount of TRX staked for obtaining energy / the total amount of TRX staked for obtaining energy in the whole network * 90_000_000_000\nYou can send a FreezeBalanceV2Contract type of transaction to stake TRX to obtain energy. The following will use wallet-cli as an example to create a FreezeBalanceContract type of transaction:\n\n\nwallet> freezeBalanceV2 1000000 1\nEnergy Consumption\nWhen the contract is executed, Energy is calculated and deducted according to instruction one by one. The priority of account energy consumption is as follows:\n\nEnergy obtained by staking TRX\nBurn TRX\nFirst, the energy obtained by staking TRX will be consumed. If this part of energy is not enough, the account's TRX will continue to be burned to pay for the energy resources required for the transaction, according to the unit price of 0.00042TRX per energy.","metadata":{"loc":{"lines":{"from":203,"to":213}}}}],["1824",{"pageContent":"If the contract exits due to throwing a revert exception while execution, only the energy consumed by instructions that have already been executed will be deducted. But for abnormal contracts, such as contract execution timeout, or abnormal exit due to bug, the maximum available energy of this transaction will be deducted. You can limit the maximum energy cost of this transaction by setting the fee_limit parameter of the transaction.\n\nEnergy Recovery\nAfter the energy resource of the account is consumed, it will gradually recover within 24 hours.\n\nAccount Energy Balance Query\nFirst call the node HTTP interface wallet/getaccountresource to obtain the current resource status of the account, and then calculate the energy balance by the following formula:\n\n\nEnergy Balance = EnergyLimit - EnergyUsed\nNote: If the result returned by the interface does not contain the parameters in the above formula, it means that the parameter value is 0.","metadata":{"loc":{"lines":{"from":215,"to":225}}}}],["1825",{"pageContent":"Energy Balance = EnergyLimit - EnergyUsed\nNote: If the result returned by the interface does not contain the parameters in the above formula, it means that the parameter value is 0.\n\nDynamic Energy Model\nThe dynamic energy model is a resource balancing mechanism of the TRON network, which can dynamically adjust the energy consumption of each contract according to the resource occupancy of the contract, so as to make the allocation of energy resources on the chain more reasonable and prevent excessive concentration of network resources on a few popular contracts. For more details, please refer to Introduction to Dynamic Energy Model.","metadata":{"loc":{"lines":{"from":225,"to":229}}}}],["1826",{"pageContent":"Principle\nIf a contract uses too many resources in one maintenance cycle, then in the next maintenance cycle, a certain percentage of punitive consumption will be added, and users who send the same transaction to this contract will cost more energy than before. When the contract uses resources reasonably, the energy consumption generated by the user calling the contract will gradually return to normal.","metadata":{"loc":{"lines":{"from":231,"to":232}}}}],["1827",{"pageContent":"Each contract has an energy_factor field, which indicates the increase ratio of the energy consumption of the smart contract transaction relative to the base energy consumption and the initial value is 0. When the energy_factor of the contract is 0, it means that the contract is using resources reasonably, and there will be no additional energy consumption for calling the contract. When the energy_factor is greater than 0, it means that the contract is already a popular contract, and additional energy will be consumed when calling the contract. The energy_factor of a contract can be queried through the getcontractinfo API.\n\nThe calculation formula for the final energy consumed by the contract invocation transaction is as follows:","metadata":{"loc":{"lines":{"from":234,"to":236}}}}],["1828",{"pageContent":"The calculation formula for the final energy consumed by the contract invocation transaction is as follows:\n\n\nenergy consumption by a contract invocation transaction  = the basic energy consumption generated by the transaction * （1 +  energy_factor）\nThe dynamic energy model introduces the following three parameters of the TRON network , which jointly control the energy_factor field of the contract:","metadata":{"loc":{"lines":{"from":236,"to":240}}}}],["1829",{"pageContent":"threshold: The threshold of contract basic energy consumption. In a maintenance cycle, if the basic energy consumption of the contract exceeds this threshold, the energy consumption of the contract will increase at the next maintenance cycle.\nincrease_factor: If the basic energy consumption of the contract exceeds the threshold during a certain maintenance cycle, the energy_factor will increase by a certain percentage according to the increase_factor in the next maintenance cycle.\nmax_factor: the maximum value of energy_factor.\nThere is also a variable decrease_factor used to reduce the energy_factor of the contract:","metadata":{"loc":{"lines":{"from":242,"to":245}}}}],["1830",{"pageContent":"decrease_factor: 1/4 of increase_factor. After the basic energy consumption of the contract falls below the threshold, energy_factor will be reduced by a certain percentage according to decrease_factor.\nWhen the basic energy consumption of the contract exceeds threshold during a maintenance cycle, its energy_factor will increase in the next maintenance cycle, but the maximum will not be Exceeding max_factor, the calculation formula is:\n\n\nenergy_factor = min((1 + energy_factor) * (1 + increaese_factor)-1, max_factor)\nWhen the basic energy consumption of the contract drops below the threshold in a maintenance cycle, the energy_factor will decrease in the next maintenance cycle, but the minimum value will not be lower than 0. The calculation formula is as follows:\n\n\nenergy_factor = max((1 + energy_factor) * (1 - decrease_factor)- 1, 0)\nThe dynamic energy model has been enabled on the main network, and the relevant parameters are set as follows:","metadata":{"loc":{"lines":{"from":247,"to":256}}}}],["1831",{"pageContent":"energy_factor = max((1 + energy_factor) * (1 - decrease_factor)- 1, 0)\nThe dynamic energy model has been enabled on the main network, and the relevant parameters are set as follows:\n\nthreshold：3,000,000,000\nincrease_factor：0.2\nmax_factor：1.2\nSince the energy consumption of popular contracts is different in different maintenance cycles, it is necessary to set the appropriate feelimit parameter for the transaction when calling the contract. For more information, please refer to set transaction feelimit.\n\nAPI\nThe following table shows the relevant interfaces of the dynamic energy model and their descriptions:","metadata":{"loc":{"lines":{"from":256,"to":265}}}}],["1832",{"pageContent":"API\tDescription\tReturn value related to dynamic energy model\ngetcontractinfo\tQuery contract information\tcontract_state.energy_usage: indicates the total amount of basic energy usage of the contract in the current maintenance cycle; contract_state.energy_factor: the energy factor of the contract, 0 means non-popular contract, bigger than zero means a popular contract; contract_state.update_cycle: the number of the current maintenance cycle\ntriggerconstantcontract\tQuery contract data or estimate energy\tenergy_penalty indicates the penalty energy ; energy_used indicates the total energy (the sum of the base energy and the penalty energy)\ngettransactioninfobyid\tQuery transaction information\treceipt.energy_penalty_total indicates the penalty energy\ngettransactionreceiptbyid\tQuery transaction execution results, fees and other information\treceipt.energy_penalty_total indicates the penalty energy\n\nStaking on TRON network\nSuggest Edits\nThe TRON network has three system resources:","metadata":{"loc":{"lines":{"from":267,"to":275}}}}],["1833",{"pageContent":"Staking on TRON network\nSuggest Edits\nThe TRON network has three system resources:\n\nEnergy\nBandwidth\nVoting right\nHow to stake to obtain system resources\nEnergy and bandwidth resources are obtained by the account owner through staking, please refer to wallet/freezebalancev2 to learn how to complete the stake operation through HTTP API, refer to Stake2.0 Solidity API to learn how to complete the stake operation through the contract.\n\nTRON allocates resources through the staking mechanism. In addition to obtaining bandwidth or energy resources, staking TRX will also obtain voting rights (TRON Power, TP for short) equal to the amount staked. Staking 1 TRX, you will get 1TP. The energy or bandwidth resources obtained by staking are used to pay transaction fees, and the obtained voting rights are used to vote for super representatives to obtain voting rewards.\n\nThe unstaking operation will release the corresponding resources.","metadata":{"loc":{"lines":{"from":275,"to":287}}}}],["1834",{"pageContent":"The unstaking operation will release the corresponding resources.\n\nHow to delegate resources\nAfter the account obtains energy or bandwidth resources through staking, it can delegate resources to other addresses through delegation operation, and can also take back allocated resources through cancel delegation operation. Please pay attention to the following situations when delegating resource:","metadata":{"loc":{"lines":{"from":287,"to":290}}}}],["1835",{"pageContent":"Only energy and bandwidth can be delegated to other addresses, voting rights cannot be delegated\nOnly unused resources obtained by staking through Stake2.0 can be delegated to other addresses\nEnergy/Bandwidth can only be delegated to an activated external account address, not to a contract address\nYou can use the wallet/getcandelegatedmaxsize interface to query the available delegation share of a certain resource type in the account. A timelockand lock_period can be used when delegating resources. If time lock is true, after the resource delegating is completed, the resource delegation for the address only can be canceled after the locking period specified by lock_period passed. During the locking period, if the user performs same type of resource delegating for the same address again, the lock time will be set to the newly set value. If the time lock is not used, the delegation can be canceled immediately after the resource is delegated.","metadata":{"loc":{"lines":{"from":292,"to":295}}}}],["1836",{"pageContent":"How to unstake TRX\nAfter completing the TRX staking, you can unstake at any time. After unstaking, you need to wait for 14 days before you can withdraw the unstaked TRX into your account. 14 days is the No.70 parameter of TRON network which can be voted on by network governance proposals. Please refer to unfreezebalancev2 to learn how to complete unfreeze balance through HTTP API.\n\nThe staked TRX can be partially unstaked multiple times, but only a maximum of 32 unstaking operations are allowed at the same time. That is to say, when a user initiates the first unstake operation, before the TRX of the first unstaking arrives and is ready to be withdrawn to his or her account, he or she can only initiate another 31 unstake operations. The remaining counts of unfreeze can be queried through the getavailableunfreezecount interface.","metadata":{"loc":{"lines":{"from":297,"to":300}}}}],["1837",{"pageContent":"The TRX that have been delegated cannot be unstaked. In addition to losing the same amount of resource shares, the unstaking will also lose the same amount of TP resources.\n\nWhen unstaking, if there are unclaimed voting rewards, the voting rewards will be automatically withdrawn to the account. If there is a previously unstaked principal that has passed the lock-up period, then this unstake operation will also withdraw the unstaked principal that has passed the lock-up period to the account at the same time. You can use the gettransactioninfobyid API to query the voting reward extracted in this transaction in withdraw_amount field and the withdrawn amount of unstaked TRX that has expired the lock-up period in withdraw_expire_amount field.","metadata":{"loc":{"lines":{"from":302,"to":304}}}}],["1838",{"pageContent":"TRON Power Reclaim\nAfter unstaking the TRX staked in the Stake2.0 stage, the same amount of voting rights will be lost. The system will first reclaim the idle voting rights in the account. If the idle TP is insufficient, it will continue to reclaim the used TP. If the user has voted for multiple super representatives, a certain number of votes will be withdrawn in proportion from each super representative, and the corresponding voting rights will be recovered. The calculation formula for withdrawing votes for each SR is,","metadata":{"loc":{"lines":{"from":306,"to":307}}}}],["1839",{"pageContent":"The number of votes withdrawn from the current super representative = total number of votes to be withdrawn  * (number of votes for the current super representative / total number of votes of this account)\nFor example, Suppose A staked 2,000TRX and obtained 2,000 TRON Power, of which 1,000 TRON Power voted for 2 super representatives, 600 votes and 400 votes respectively, and 1,000 TRON Power remained in the account. At this time, A unstakes 1,500TRX, which means that 1,500 TRON Power needs to be reclaimed from A’ account. In this case, the idle 1,000 TP in A’s account will be withdrawn first, and the spared 500 TP will be withdrawn from the voted TP,\nwhich is 300 TP and 200 TP respectively from the two super representatives. Here's how the votes are calculated:","metadata":{"loc":{"lines":{"from":310,"to":312}}}}],["1840",{"pageContent":"Number of votes withdrawn by Super Representative 1 = 500 * (600 / 1,000) = 300\nNumber of votes withdrawn by Super Representative 2 = 500 * (400 / 1,000) = 200\nAt present, the TRON network uses the Stake2.0 stake mechanism, but the resources and votes obtained by Stake1.0 are still valid. The TRX staked at Stake1.0 can still be withdrawal through Stake1.0 API, but it should be noted that if the TRX staked in Stake 1.0 is unstaked, all votes in the account will be revoked.\n\nHow to cancel unstaking\nStake2.0 supports canceling all unstakes after the user unstakes TRX, which will make the assets be used for stake again to obtain corresponding resources, without having to wait for the unstaked funds to pass the lock-up period before withdrawing the funds to the account , and then stake them again. Please refer to cancelallunfreezev2 to learn how to cancel all unstaking operations through the HTTP API.","metadata":{"loc":{"lines":{"from":314,"to":319}}}}],["1841",{"pageContent":"When canceling unstakings, all unstaked funds still in the waiting period will be re-staked, and the resource obtained through the re-staking remains the same as before. Unstakings that exceeded the 14-day waiting period cannot be canceled, and this part of the unstaked funds will be automatically withdrawn to the owner’s account. Users can query the canceled unstaked principal amount cancel_unfreezeV2_amount, and the withdrawn principal amount that has expired the lock-up period withdraw_expire_amount through the gettransactioninfobyid interface.\n\nAPI\nThe following table shows the relevant interfaces of the stake model and their descriptions:","metadata":{"loc":{"lines":{"from":321,"to":324}}}}],["1842",{"pageContent":"API\tDescription\nfreezebalancev2\tStake TRX\nunfreezebalancev2\tUnstake TRX\nunfreezebalance\tUnstake the TRX staked during Stake1.0\ndelegateresource\tDelegate resources\nundelegateresource\tUndelegate resources\nwithdrawexpireunfreeze\tWithdraw unfrozen balance\ngetavailableunfreezecount\tQuery the remaining times of executing unstake operation\ngetcanwithdrawunfreezeamount\tQuery the withdrawable balance\ngetcandelegatedmaxsize\tQuery the amount of delegatable resources share of the specified resource Type\ngetdelegatedresourcev2\tQuery the amount of resource delegated by fromAddress to toAddress\ngetdelegatedresourceaccountindexv2\tQuery the resource delegation index by an account\ngetaccount\tQuery the account stake status, resource share, unstake status, and voting status\ngetaccountresource\tQuery the total amount of resources, the amount of used, and the amount of available\ncancelallunfreezev2\tCancel unstaking","metadata":{"loc":{"lines":{"from":326,"to":340}}}}],["1843",{"pageContent":"Super Representatives\nSuggest Edits\nBlock producers in the TRON network, also called super representatives, are elected by voting. Any account can apply to become a super representative candidate by paying 9999 TRX and then participate in the super representative election. Any account can vote for super representative candidates, and the top 27 candidates with the most votes become super representatives. Super representative needs to run a TRON node to participate in block production, and will also receive block rewards and voting rewards. Voters who vote to super representatives will receive voting rewards.\n\nThe super representative candidates ranked 28th to 127th are also called super representative partners. Super representative partners do not participate in block production and packaging transactions, but will receive voting rewards. Voters who vote to super representative partners will also receive voting rewards.","metadata":{"loc":{"lines":{"from":342,"to":346}}}}],["1844",{"pageContent":"Voting Right\nBefore voting for the super representative, any account needs to obtain voting rights, namely TRON Power (TP). Voting rights can be obtained by staking TRX. In addition to obtaining bandwidth or energy, staking TRX will also obtain voting rights at the same time. Voters who stake 1TRX will receive 1TP.\n\nAn account loses the corresponding amount of TP after unstaking the staked TRX, and the ongoing voting will also be invalid. Votes are counted every 6 hours, and super representatives and super representative partners will be changed every 6 hours. If an account has voted multiple times before counting the votes, the TRON network only records the latest vote of the account, and the previous votes will be overwritten.\n\nRewards\nThe production of each block in the TRON network will reward a certain amount of TRX to the super representative and super representative partners. The reward is divided into below two parts:","metadata":{"loc":{"lines":{"from":348,"to":354}}}}],["1845",{"pageContent":"Block Reward：With each block’s production, the TRON network will reward 16 TRX to the super representative who produces the block, and the super representative will also distribute the remaining part to the voters according to the voter's voting ratio after deducting their commission ratio.\nVote Reward：With each block’s production, the TRON network will reward 160 TRX to super representatives and super representative partners who will share 160 TRX in proportion to their votes. The voting rewards obtained by super representatives and super representative partners will also be distributed to voters according to their voting ratio after deducting their own commissions.\nSuper Representative Brokerage","metadata":{"loc":{"lines":{"from":356,"to":358}}}}],["1846",{"pageContent":"Super Representative Brokerage\nThe brokerage ratio is a ratio deducted from rewards by super representatives and super representative partners. The default ratio is 20%, that is, all rewards generated by voter voting, of which 20% is paid to super representatives or super representative partners as commission compensation. Super representatives and super representative partners can query the brokerage ratio through the wallet/getBrokerage interface, and can also modify the brokerage ratio through the wallet/updateBrokerage interface.","metadata":{"loc":{"lines":{"from":358,"to":359}}}}],["1847",{"pageContent":"Block Reward Calculation\nSuper Representatives can get 16 TRX for each block they produce. The TRON network generates a block every 3 seconds, so a total of 460,800 TRX is generated one day. 27 super representatives take turns to produce blocks. Assuming that the brokerage ratio of super representatives is 20%, the daily block reward that a super representative can get is 3,413 TRX. The calculation formula is as follows:\n\n\n    Reward = 460,800 / 27 * 20%  \nThe rewards for super representative voters for one day are:\n\n\n    Reward = 460,800 / 27 * 80% *（votes / votes obtained by this SR） \nVote Reward Calculation\nTRON will generate a voting reward of 160 TRX for each block’s production, for a total of 4,608,000 TRX one day. Assuming that the brokerage rate of a super representative is 20%, the voting reward a super representative(SR) or a super representative partner(SRP) gets for one day is:","metadata":{"loc":{"lines":{"from":361,"to":371}}}}],["1848",{"pageContent":"Reward = 4,608,000 * votes obtained by the SR or SRP / the total votes of all the SR and SRP  * 20%\nThe voting rewards for the voters of super representative and super representative partner for one day are:\n\n\n    Reward = 4,608,000 * votes obtained by the SR or SRP / the total votes of all the SR and SRP  * 80% *（ votes /  votes obtained by the SR or SRP ） =  4,608,000 * votes / the total votes of all the SR and SRP  * 80%\nExamples of Rewards Calculation\nThe following takes a super representative and a super representative partner as examples to illustrate the approximate rewards a user can get in one day. Assuming that the number of votes by the voter is 10,000,000, the total number of votes of the top 127 candidates at the time of document writing is 28,978,895,254.\n\nExample of reward calculation for voting for a super representative\n\nThe following Super Representative obtained: 1,233,278,454 votes, and the brokerage ratio is 10%.","metadata":{"loc":{"lines":{"from":374,"to":384}}}}],["1849",{"pageContent":"Example of reward calculation for voting for a super representative\n\nThe following Super Representative obtained: 1,233,278,454 votes, and the brokerage ratio is 10%.\n\n\n\nThen, the rewards that super representative and his voter can get are:\n\nuser\tblock reward\tvote reward\ttotal\nSuper Representative\t460,800 / 27 * 10% = 1706 TRX\t4,608,000 * 1,233,278,454 / 28,978,895,254 * 10% = 19610 TRX\t21316 TRX\nVoter\t460,800 / 27 * 90% * 10,000,000/1,233,278,454 = 124 TRX\t4,608,000 * 10,000,000 / 28,978,895,254 * 90% = 1431 TRX\t1555 TRX\nExample of reward calculation for voting for a super representative parter\n\nThe following super representative parter obtained: 82,830,160 votes, and the brokerage ratio is 20%.\n\n\n\nThen, the rewards that super representative partner and his voter can get are:","metadata":{"loc":{"lines":{"from":384,"to":401}}}}],["1850",{"pageContent":"The following super representative parter obtained: 82,830,160 votes, and the brokerage ratio is 20%.\n\n\n\nThen, the rewards that super representative partner and his voter can get are:\n\nuser\tblock reward\tvote reward\ttotal\nSuper Representative Partner\t0 TRX\t4,608,000 * 82,830,160 / 28,978,895,254 * 20% = 2634 TRX\t2634 TRX\nVoter\t0 TRX\t4,608,000 * 10,000,000 / 28,978,895,254 * 80% = 1272 TRX\t1272 TRX\nCommittee And Proposal\nThe TRON committee consists of the current 27 super representatives, responsible for maintaining and modifying the dynamic parameters of the TRON network, such as block rewards, transaction fees, and so on. Each super representative, super representative partner and super representative candidate has the right to initiate proposals to modify TRON network parameters, but only super representative has the right to vote.","metadata":{"loc":{"lines":{"from":401,"to":411}}}}],["1851",{"pageContent":"Proposals only support voting for yes, super representatives do not vote means they do not agree with the proposal. Proposals are valid for three days from the time when the proposal was created. During the validity period of the proposal, the super representative can vote on the proposal or cancel the previous vote. If the proposal receives 18 or more super representative votes during the validity period, the proposal will pass. If the proposal has passed the expiration date and has not received enough votes, the proposal will become invalid.\n\nTRON Network Parameters\nThe dynamic parameters that the TRON network can modify through proposals are as follows:","metadata":{"loc":{"lines":{"from":413,"to":416}}}}],["1852",{"pageContent":"Number\tParameter\tCurrent Value\n# 0\tPropose to modify the maintenance interval of SR\t6 Hour\n# 1\tPropose to modify the cost of applying for SR account\t9999 TRX\n# 2\tPropose to modify the account creation fee\t0.1 TRX\n# 3\tPropose to modify the fee of 1 unit of Bandwidth\t0.001 TRX\n# 4\tPropose to modify asset issuance fee\t1024 TRX\n# 5\tPropose to modify SR block generation reward\t16 TRX\n# 6\tPropose to modify the rewards given to the top 27 SRs and the following 100 partners\t115200 TRX\n# 7\tPropose to modify the cost of account creation in the system contract\t1 TRX\n# 9\tPropose to activate the Virtual Machine (VM)\tActivated\n# 10\tPropose to remove the GR Genesis votes\tFinished\n# 11\tPropose to modify the fee of 1 unit of Energy\t0.00042 TRX\n# 12\tPropose to modify the cost of trading pair creation\t1024 TRX\n# 13\tPropose to modify the maximum execution time of one transaction\t80 ms\n# 14\tPropose to allow duplicate account name\tNot allowed\n# 15\tPropose to allow duplicate token name\tAllowed","metadata":{"loc":{"lines":{"from":418,"to":433}}}}],["1853",{"pageContent":"# 13\tPropose to modify the maximum execution time of one transaction\t80 ms\n# 14\tPropose to allow duplicate account name\tNot allowed\n# 15\tPropose to allow duplicate token name\tAllowed\n# 16\tPropose to allow resource delegation\tAllowed\n# 18\tPropose to allow the TRC-10 token transfer in smart contracts\tAllowed\n# 19\tPropose to modify the total Energy limit\t90000000000 ENERGY\n# 20\tPropose to allow the initiation of multi-signature\tAllowed\n# 21\tPropose to allow adaptive adjustment for total Energy\tNot allowed\n# 22\tPropose to modify the fee for updating account permission\t100 TRX\n# 23\tPropose to modify the fee for updating multi-signature\t1 TRX\n# 24\tPropose to enable protocol optimization\tNot activated\n# 26\tPropose to support Constantinople Upgrade for TVM\tAllowed\n# 29\tPropose to modify the adaptive Energy limit\t1000\n# 30\tPropose to support the decentralized vote dividend\tActivated\n# 31\tPropose to modify the block voting rewards given to the top 27 SRs and the following 100 partner\t160 TRX","metadata":{"loc":{"lines":{"from":433,"to":447}}}}],["1854",{"pageContent":"# 30\tPropose to support the decentralized vote dividend\tActivated\n# 31\tPropose to modify the block voting rewards given to the top 27 SRs and the following 100 partner\t160 TRX\n# 32\tPropose to allow TVM to support Solidity 0.5.9\tAllowed\n# 33\tPropose to modify the adaptive Energy limit target\t10\n# 35\tPropose to ban transferring TRX and TRC10 tokens to smart contracts via TransferContract or TransferAssetContract\tNot ban\n# 39\tPropose to enable the function of verifying zero-knowledge proof in TVM\tActivated\n# 40\tPropose to enable PBFT consensus\tNot activated\n# 41\tPropose to enable TVM Istanbul instruction\tActivated\n# 44\tPropose to allow enabling DEX\tNot allowed\n# 45\tPropose to modify fees for creating orders on DEX\t0 TRX\n# 46\tPropose to modify fees for canceling orders on DEX\t0 TRX\n# 47\tProposal to modify the upper limit of the fee of a smart contract\t15000 TRX\n# 48\tProposal to open reward pool for transaction fee\tNot activated\n# 49\tProposal to optimize black hole accounts\tActivated","metadata":{"loc":{"lines":{"from":447,"to":460}}}}],["1855",{"pageContent":"# 48\tProposal to open reward pool for transaction fee\tNot activated\n# 49\tProposal to optimize black hole accounts\tActivated\n# 51\tPropose to enable the new resource model\tNot activated\n# 52\tPropose to enable the function to stake/unstake balance in virtual machine contracts\tNot activated\n# 53\tPropose to enable the optimization of account assets\tNot activated\n# 59\tPropose to enable TVM contract voting\tActivated\n# 60\tPropose to initiate EVM-compatible mode for TVM\tNot activated\n# 61\tPropose to modify the upper limit of free Bandwidth for each account\t600 Bandwidth\n# 62\tPropose to modify the upper limit of total Bandwidth frozen\t43200000000 Bandwidth\n# 63\tPropose to support London Upgrade for TVM\tActivated\n# 65\tPropose to allow raising the maximum of MaxCpuTimeOfOneTx net parameters to 400\tActivated\n# 66\tPropose to enable account asset optimization\tActivated\n# 67\tPropose to open a new reward algorithm\tActivated\n# 68\tPropose to modify the memo charges\t1 TRX","metadata":{"loc":{"lines":{"from":460,"to":473}}}}],["1856",{"pageContent":"# 66\tPropose to enable account asset optimization\tActivated\n# 67\tPropose to open a new reward algorithm\tActivated\n# 68\tPropose to modify the memo charges\t1 TRX\n# 69\tPropose to open the proxy storage optimization\tActivated\n# 70\tPropose to enable the new staking mechanism that allows specifying the lock-up days of staked assets\t14\n# 71\tPropose to allow optimizing the return value of the chainid command\tActivated\n# 72\tPropose to allow enabling the dynamic energy model\tActivated\n# 73\tPropose to modify the threshold of the dynamic energy model\t3000000000\n# 74\tPropose to modify the increase factor (in basis points) of the dynamic energy model\t2000\n# 75\tPropose to modify the maximum increase factor (in basis points) of the dynamic energy model\t12000\n# 76\tPropose to allow TVM to support Shanghai upgrade\t1\n# 77\tPropose to allow cancellation of all unstakings\t1\n# 78\tPropose to allow optimization of delegating resource lock and set the maximum lock period (number of blocks)\t864000","metadata":{"loc":{"lines":{"from":473,"to":485}}}}],["1857",{"pageContent":"# 77\tPropose to allow cancellation of all unstakings\t1\n# 78\tPropose to allow optimization of delegating resource lock and set the maximum lock period (number of blocks)\t864000\nApply To Be A Super Representative Candidate\nSteps To Become A Candidate\nOpen TRON Blockchain explorer：https://tronscan.org, Click the “Connect Wallet” button, After connecting the wallet, enter the wallet.","metadata":{"loc":{"lines":{"from":485,"to":489}}}}],["1858",{"pageContent":"Click \"Super Representative\" -> \"Apply To Be a Super Representative Candidate\"\n\n\nEnter your personal website address and check the information below the website address.\n\n\n\nNote: 9999 TRX will be paid when users apply to be an SR candidate.\nClick \"Submit\", finish the apply by signing the transaction\nNow, the \"Super Representative\" page in the wallet will display the relevant information of the super representative candidate, including the ranking, the number of votes and so on. Applicants can modify the brokerage ratio and set team information. Team information helps users better understand Super Representatives and increases community activity.\n\n\nUpdate Team Information\nThe setting of the team information of the super representative candidate needs to be done through Github. The candidate builds a static page according to the template on Github, and then sets the page link to tronscan, so that the candidate's team information can be seen on tronscan.","metadata":{"loc":{"lines":{"from":492,"to":505}}}}],["1859",{"pageContent":"Fork the template repository: https://github.com/tronscan/tronsr-template , then you should be navigated to your own tronsr-template version of the repository where you can make changes. \n\nFill in the Template\nEditing files on Github can now modify the template.\n\nClick the file you want to edit \n\nOpen edit mode \n\nAdd some information to the file , then click \"Commit Changes\" to save the information. \nFiles are written in markdown format. The markdown basic format syntax please refer to：markdown syntax\n\nUpdate logo.png and banner.png \nThen click on \"upload files\" and make sure the logo or banner you want to upload is named logo.png or banner.jpg to overwrite the placeholder images.\n\nThe url can be published on https://tronscan.org after you finish filling the template.\n\nPublish to Tronscan","metadata":{"loc":{"lines":{"from":507,"to":524}}}}],["1860",{"pageContent":"The url can be published on https://tronscan.org after you finish filling the template.\n\nPublish to Tronscan\n\nGo to https://tronscan.org and connect to wallet\nGo to the \"Super Representative Page\", set the team details, and then enter the GitHub link of team information\nSave, complete the setting of super representative candidate team information\nAPI\nThe APIs related to super representatives, proposals and voting are as follows:","metadata":{"loc":{"lines":{"from":524,"to":532}}}}],["1861",{"pageContent":"Description\tAPI\t\nApply to be a Super Representative Candidate\twallet/createwitness\t\nEdit the URL of the witness's official website\twallet/updatewitness\t\nList all Super Representatives\twallet/listwitnesses\t\nVote for witnesses\twallet/votewitnessaccount\t\nGet SR brokerage ratio\twallet/getBrokerage\t\nUpdate the witness's brokerage ratio\twallet/updateBrokerage\t\nGet the rewards that a witness or a user has not yet withdrawn\twallet/getReward\t\nWithdraw rewards\twallet/withdrawbalance\t\nGet next voting time\twallet/getnextmaintenancetime\t\nCreate proposal\twallet/proposalcreate\t\nApprove proposal\twallet/proposalapprove\t\nDelete proposal\twallet/proposaldelete\t\nList all proposals\twallet/listproposals\t\nQueries proposal based on ID\twallet/getproposalbyid\n\nTransaction\nSuggest Edits\nTransactions are cryptographically signed instructions from accounts. An account will initiate a transaction to update the state of the TRON network. The simplest transaction is transferring TRX from one account to another.","metadata":{"loc":{"lines":{"from":534,"to":552}}}}],["1862",{"pageContent":"Transactions, which change the state of the chain, need to be broadcast to the whole network. Any node can broadcast a request for a transaction. After the super node receives the transaction, it executes the transaction and includes it in a block, then propagates the block to the whole network.\n\nOnly after the transaction is packed into a block by the super node, and the block is confirmed, the transaction is finally confirmed.\n\nThe format of a transaction is as below:\n\nJavaScript\n\n{\n    \"raw_data\": \n    {\n        \"contract\": [{<-->}],\n        \"ref_block_bytes\": \"c145\",\n        \"ref_block_hash\": \"c56bd8a3b3341d9d\",\n        \"expiration\": 1646796363000,\n        \"data\": \"74657374\",\n        \"timestamp\": 1646796304152,\n        \"fee_limit\":10000000000\n    },\n    \"signature\":[\"47b1f77b3e30cfbbfa41d795dd34475865240617dd1c5a7bad526f5fd89e52cd057c80b665cc2431efab53520e2b1b92a0425033baee915df858ca1c588b0a1800\" ] \n}\nA submitted transaction mainly includes the following fields:","metadata":{"loc":{"lines":{"from":554,"to":575}}}}],["1863",{"pageContent":"raw_data.contract - The main content of the transaction,contract is a list, but only one element is used at present. Different types of transactions have different contract contents. For example, for a TRX transfer type transaction, the contract will include the transfer amount, receiver address and other information. TRON supports multiple types of contracts, please refer to the Types of Transaction section below for details.\nraw_data.ref_block_bytes - The height of the transaction reference block, using the 6th to 8th (exclusive) bytes of the reference block height, a total of 2 bytes. The reference block is used in the TRON TAPOS mechanism, which can prevent a replay of a transaction on forks that do not include the referenced block. Generally, the latest solidified block is used as the reference block.","metadata":{"loc":{"lines":{"from":577,"to":578}}}}],["1864",{"pageContent":"raw_data.ref_block_hash - The hash of the transaction reference block, using the 8th to 16th (exclusive) bytes of the reference block hash, a total of 8 bytes. The reference block is used in the TRON TAPOS mechanism, which can prevent a replay of a transaction on forks that do not include the referenced block. Generally, the latest solidified block is used as the reference block.\nraw_data.expiration - Transaction expiration time, beyond which the transaction will no longer be packed. If the transaction is created by calling the java-tron API, its expiration time will be automatically set by the node to the value of adding 60 seconds to the timestamp of the node's latest block. The expiration time interval can be modified in the node's configuration file, the maximum value cannot exceed 24 hours.\nraw_data.data - Transaction memo.\nraw_data.timestamp - Transaction timestamp, set as the transaction creation time.","metadata":{"loc":{"lines":{"from":579,"to":582}}}}],["1865",{"pageContent":"raw_data.data - Transaction memo.\nraw_data.timestamp - Transaction timestamp, set as the transaction creation time.\nraw_data.fee_limit - The maximum energy cost allowed for the execution of smart contract transactions. Only deploying and triggering smart contract transactions need to be set, others not.\nsignature - The sender's signature for the transaction. This proves that the transaction could only have come from the sender and was not sent fraudulently.\nTypes of Transaction\nOn TRON there are many different types of transactions, such as TRX transfer transactions, TRC10 transfer transactions, deploying smart contract transactions, triggering smart contract transactions, staking TRX transactions, and so on.","metadata":{"loc":{"lines":{"from":582,"to":587}}}}],["1866",{"pageContent":"To create different types of transactions, you need to call different APIs. For example, the type of smart contract deployment transaction is CreateSmartContract, you need to call the wallet/deploycontract API to create a transaction, and the type of the staking TRX transaction is FreezeBalanceV2Contract, you need to call wallet/freezebalancev2 API to create transactions.\n\nJSON","metadata":{"loc":{"lines":{"from":589,"to":591}}}}],["1867",{"pageContent":"$ curl -X POST https://api.shasta.trongrid.io/wallet/freezebalancev2 -d '{\"owner_address\":\"TCrkRWJuHP4VgQF3xwLNBAjVVXvxRRGpbA\",\"frozen_balance\": 2100000,\"resource\" : \"BANDWIDTH\",\"visible\":true}' | jq\n{\n  \"visible\": true,\n  \"txID\": \"e54bab34838a59e85d5684e46a2e8e512cd11dfb07b35a9728adeaf3d2666fa6\",\n  \"raw_data\": {\n    \"contract\": [\n      {\n        \"parameter\": {\n          \"value\": {\n            \"frozen_balance\": 2100000,\n            \"owner_address\": \"TCrkRWJuHP4VgQF3xwLNBAjVVXvxRRGpbA\"\n          },\n          \"type_url\": \"type.googleapis.com/protocol.FreezeBalanceV2Contract\"\n        },\n        \"type\": \"FreezeBalanceV2Contract\"\n      }\n    ],\n    \"ref_block_bytes\": \"7139\",\n    \"ref_block_hash\": \"d291dee525445093\",\n    \"expiration\": 1646902209000,\n    \"timestamp\": 1646902151591\n  },","metadata":{"loc":{"lines":{"from":593,"to":614}}}}],["1868",{"pageContent":"\"type\": \"FreezeBalanceV2Contract\"\n      }\n    ],\n    \"ref_block_bytes\": \"7139\",\n    \"ref_block_hash\": \"d291dee525445093\",\n    \"expiration\": 1646902209000,\n    \"timestamp\": 1646902151591\n  },\n  \"raw_data_hex\": \"0a0271392208d291dee52544509340e8d39598f72f5a58080b12540a32747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e467265657a6542616c616e6365436f6e7472616374121e0a15411fafb1e96dfe4f609e2259bfaf8c77b60c535b9310a0968001180370a7939298f72f\"\n}\nFor more transaction types, please refer to：Types of transactions on TRON，For more HTTP APIs, please refer to：HTTP API","metadata":{"loc":{"lines":{"from":614,"to":624}}}}],["1869",{"pageContent":"Transaction Lifecycle\nA transaction goes through the following stages in its life cycle:\n\nTransaction's creation and signature.\nThe transaction is broadcast to the TRON network, it will be included in a transaction pool after passing the verification and execution by node.\nThe block-producing node takes the transaction from the transaction pool, includes it in a new block, and then broadcasts the block to the TRON network.\nThe transaction will be \"confirmed\". Whether a transaction is confirmed depends on whether the block in which the transaction is included is confirmed. TRON's block confirmation mechanism is that after a block is produced, 19 different super nodes produce subsequent blocks based on this block, then the block is confirmed.\nCreate Transaction\nA variety of libraries and tools are available to create transactions. The following takes tronweb to create a TRX transfer transaction as an example to illustrate how to create a transaction:\n\nJavaScript","metadata":{"loc":{"lines":{"from":626,"to":636}}}}],["1870",{"pageContent":"const unsignedTxn = await tronWeb.transactionBuilder.sendTrx(\"TVDGpn4hCSzJ5nkHPLetk8KQBtwaTppnkr\", 100, \"TNPeeaaFB7K9cmo4uQpcU32zGK8G1NYqeL\");\n >{\n    \"visible\": false,\n    \"txID\": \"9f62a65d0616c749643c4e2620b7877efd0f04dd5b2b4cd14004570d39858d7e\",\n    \"raw_data\": {\n        \"contract\": [\n            {\n                \"parameter\": {\n                    \"value\": {\n                        \"amount\": 100,\n                        \"owner_address\": \"418840e6c55b9ada326d211d818c34a994aeced808\",\n                        \"to_address\": \"41d3136787e667d1e055d2cd5db4b5f6c880563049\"\n                    },\n                    \"type_url\": \"type.googleapis.com/protocol.TransferContract\"\n                },\n                \"type\": \"TransferContract\"\n            }\n        ],\n        \"ref_block_bytes\": \"0add\",\n        \"ref_block_hash\": \"6c2763abadf9ed29\",\n        \"expiration\": 1581308685000,\n        \"timestamp\": 1581308626092\n    },","metadata":{"loc":{"lines":{"from":638,"to":660}}}}],["1871",{"pageContent":"}\n        ],\n        \"ref_block_bytes\": \"0add\",\n        \"ref_block_hash\": \"6c2763abadf9ed29\",\n        \"expiration\": 1581308685000,\n        \"timestamp\": 1581308626092\n    },\n    \"raw_data_hex\": \"0a020add22086c2763abadf9ed2940c8d5deea822e5a65080112610a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412300a15418840e6c55b9ada326d211d818c34a994aeced808121541d3136787e667d1e055d2cd5db4b5f6c880563049186470ac89dbea822e\"\n}\nSign Transaction\nA transaction needs to be signed using the sender's private key before sending it.","metadata":{"loc":{"lines":{"from":660,"to":670}}}}],["1872",{"pageContent":"Transaction signature generating process\n\nCalculate the hash of the transaction.\nSign the transaction hash with the sender's private key.\nAdd the generated signature to the transaction instance.\nMost SDKs implement the above transaction signature-generating process and encapsulate them into an interface for developers to call. Taking tronweb as an example, users can directly call the sign method to complete the transaction signature.\n\nExample of signature using tronweb\nUse tronweb to sign the transaction created above:\n\nJavaScript","metadata":{"loc":{"lines":{"from":672,"to":682}}}}],["1873",{"pageContent":"const signedTxn = await tronWeb.trx.sign(unsignedTxn, privateKey);\n>{\n    \"visible\": false,\n    \"txID\":\"9f62a65d0616c749643c4e2620b7877efd0f04dd5b2b4cd14004570d39858d7e\",\n    \"raw_data\":\n    {\n        \"contract\": [{<-->}],\n        \"ref_block_bytes\": \"0add\",\n        \"ref_block_hash\": \"6c2763abadf9ed29\",\n        \"expiration\": 1581308685000,\n        \"timestamp\": 1581308626092 \n    },\n    \"raw_data_hex\": \"0a020add22086c2763abadf9ed2940c8d5deea822e5a65080112610a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412300a15418840e6c55b9ada326d211d818c34a994aeced808121541d3136787e667d1e055d2cd5db4b5f6c880563049186470ac89dbea822e\",\n    \"signature\": [ \"47b1f77b3e30cfbbfa41d795dd34475865240617dd1c5a7bad526f5fd89e52cd057c80b665cc2431efab53520e2b1b92a0425033baee915df858ca1c588b0a1800\" ] \n }\nBroadcast Transaction","metadata":{"loc":{"lines":{"from":684,"to":699}}}}],["1874",{"pageContent":"\"signature\": [ \"47b1f77b3e30cfbbfa41d795dd34475865240617dd1c5a7bad526f5fd89e52cd057c80b665cc2431efab53520e2b1b92a0425033baee915df858ca1c588b0a1800\" ] \n }\nBroadcast Transaction\nAfter the node receives a transaction sent by a user, it will try to verify and execute the transaction locally, and broadcasts valid transactions to other nodes, discards invalid transactions, which will effectively prevent spam transactions from invalid broadcast in the network.","metadata":{"loc":{"lines":{"from":699,"to":702}}}}],["1875",{"pageContent":"To broadcast a signed transaction using tronweb:\n\nJavaScript","metadata":{"loc":{"lines":{"from":704,"to":706}}}}],["1876",{"pageContent":"const receipt = await tronWeb.trx.sendRawTransaction(signedTxn);\n>{ \n    \"result\": true,\n    \"transaction\":\n    { \n        \"visible\": false,\n        \"txID\": \"9f62a65d0616c749643c4e2620b7877efd0f04dd5b2b4cd14004570d39858d7e\",\n        \"raw_data\":\n        {\n            \"contract\": [{<-->}],\n            \"ref_block_bytes\": \"0add\",\n            \"ref_block_hash\": \"6c2763abadf9ed29\",\n            \"expiration\": 1581308685000,\n            \"timestamp\": 1581308626092 \n        },\n        \"raw_data_hex\": \"0a020add22086c2763abadf9ed2940c8d5deea822e5a65080112610a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412300a15418840e6c55b9ada326d211d818c34a994aeced808121541d3136787e667d1e055d2cd5db4b5f6c880563049186470ac89dbea822e\",\n        \"signature\": [ \"47b1f77b3e30cfbbfa41d795dd34475865240617dd1c5a7bad526f5fd89e52cd057c80b665cc2431efab53520e2b1b92a0425033baee915df858ca1c588b0a1800\" ] \n    } \n }\nTransaction confirmation","metadata":{"loc":{"lines":{"from":708,"to":727}}}}],["1877",{"pageContent":"\"signature\": [ \"47b1f77b3e30cfbbfa41d795dd34475865240617dd1c5a7bad526f5fd89e52cd057c80b665cc2431efab53520e2b1b92a0425033baee915df858ca1c588b0a1800\" ] \n    } \n }\nTransaction confirmation\nWhether a transaction is confirmed depends on whether the block in which the transaction is included is confirmed. TRON's block confirmation mechanism is that after a block is produced, 19 different super nodes produce subsequent blocks based on this block, then the block is confirmed.","metadata":{"loc":{"lines":{"from":727,"to":731}}}}],["1878",{"pageContent":"java-tron node provides /walletsolidty/* API, which is convenient for users to query confirmed transactions. The difference between /walletsolidty/* and /wallet/* is that the transaction queried by /wallet/* indicates that it has been on the chain but not necessarily confirmed. The transaction was queried by /walletsolidty/* indicates that it has been on the chain and solidified, that is, the transaction has been confirmed.\n\nFor different transactions, there are different ways to determine whether it is confirmed:","metadata":{"loc":{"lines":{"from":733,"to":735}}}}],["1879",{"pageContent":"System Contract Transaction\nAll types of transactions other than creating smart contract types and triggering smart contract types are system contract transactions. System contract transaction confirmation method:\nAs long as the transaction can be queried through /walletsolidity/gettransactioninfobyid or /walletsolidity/gettransactionbyid API, it is confirmed.\nSmart Contract Transaction\nIncluding creating smart contracts and triggering smart contract transactions. Because they need to be executed in TRON virtual machine, some exceptions may be thrown during the execution. These transactions are on the chain, but it does not mean that the transactions are successfully executed. And there are two ways to determine whether the smart contract transaction is successfully executed:\nFind transactionInfo.receipt.result equals success via calling the /walletsolidity/gettransactioninfobyid API\nFind transaction.ret.contractRet equalssuccess via calling /walletsolidity/gettransactionbyidAPI","metadata":{"loc":{"lines":{"from":737,"to":743}}}}],["1880",{"pageContent":"Find transaction.ret.contractRet equalssuccess via calling /walletsolidity/gettransactionbyidAPI\nInternal Transaction\nAn internal transaction is a transaction that transfers tokens to other external addresses or contract addresses in a contract. First, the internal transactions can be queried through /walletsolidity/gettransactioninfobyid API, and the rejected field in the internal transaction is used to determine whether the internal transaction is confirmed, but differs for HTTP and GRPC API:\nHTTP API: for successful transactions, the rejected field is not returned by default. For failed transactions, rejected equals true.\nGRPC API: for successful transactions, rejected equals false, indicating that the current internalTransaction has not been discarded; for failed transactions, rejected equals true.\nTransaction Fee","metadata":{"loc":{"lines":{"from":743,"to":748}}}}],["1881",{"pageContent":"GRPC API: for successful transactions, rejected equals false, indicating that the current internalTransaction has not been discarded; for failed transactions, rejected equals true.\nTransaction Fee\nIn addition to query operations, any on-chain transaction will consume system resources. All types of transactions need to consume bandwidth. In addition to consuming bandwidth, smart contract deployment and calling transactions also consume energy. When the available bandwidth or energy in the account is insufficient, TRX needs to be burned to pay for the corresponding resource fee. In addition to resource fees, some special transactions require additional fees.","metadata":{"loc":{"lines":{"from":748,"to":750}}}}],["1882",{"pageContent":"Bandwidth Fee\nThe amount of bandwidth consumed by a transaction is equal to the number of bytes occupied by the on-chain transaction, which includes three parts: the raw_data of the transaction, the transaction signature, and the transaction result. The number of bytes occupied by these three parts after protobuf serialization encoding is the amount of bandwidth consumed by the transaction.\n\nWhen both the bandwidth obtained through staking and the daily free bandwidth in the account are insufficient, TRX needs to be burned to pay for the bandwidth:\n\n\nTRX burned to pay for bandwidth = Total bandwidth consumed by the transaction * Bandwidth unit price\nThe current bandwidth unit price is 1000 sun.\n\nWhen the receiver address of TRX and TRC10 transfer transaction is an inactivated address, the transaction will activate the receiver address. In this case, if the caller address does not have enough bandwidth obtained through staking, the transaction will consume 0.1TRX as Bandwidth fee.","metadata":{"loc":{"lines":{"from":752,"to":761}}}}],["1883",{"pageContent":"For how to estimate the bandwidth consumption of a transaction, please refer to here.\n\nEnergy Fee\nIn addition to consuming bandwidth, smart contract deployment and invocation transactions also consume energy. When the contract is executed, Energy is calculated and deducted according to instruction one by one. The energy obtained by staking will be consumed first. If this part of the energy is not enough, the account's TRX will continue to be burned to pay for the energy resources required for the transaction.\n\n\nTRX burned to pay for energy fee = (Total amount of energy consumed by the transaction - Amount of energy available in the caller's account) * Energy unit price\nThe current energy unit price is 420 sun. For how to estimate energy consumption, please refer to here.","metadata":{"loc":{"lines":{"from":763,"to":770}}}}],["1884",{"pageContent":"Other Fee\nFor some special transactions, in addition to resource fees, additional fees need to be paid. If the transaction initiator adds notes to the transaction, an additional transaction note fee of 1TRX needs to be paid. If the transaction uses multiple signatures, that is, the number of signatures in the transaction is greater than 1, the transaction initiator needs to pay an additional multi-signature fee of 1TRX. In addition, there are transaction fees for the following specific types of transactions:","metadata":{"loc":{"lines":{"from":772,"to":773}}}}],["1885",{"pageContent":"Transaction Type\tDescription\tFee\nWitnessCreateContract\tApply to become a super representative candidate\t9999 TRX\nAssetIssueContract\tIssue an TRC10 token\t1024 TRX\nAccountCreateContract\tCreate a new account, that is, activate an account\t1 TRX\nAccountUpdateContract\tUpdate account permissions\t100 TRX\nExchangeCreateContract\tCreate a exchange pair\t1024 TRX\nNote that for TransferContract or TransferAssetContract type transactions, that is, TRX transfer, TRC10 token transfer, if the target address is not activated, the transaction will also trigger the creation of a new account, and a new account creation fee of 1TRX will be deducted. At the same time, if the bandwidth obtained through staking in the transaction initiator's account is insufficient, 0.1TRX needs to be paid as bandwidth fee.","metadata":{"loc":{"lines":{"from":775,"to":781}}}}],["1886",{"pageContent":"Internal Transactions\nThe so-called transactions generally refer to transactions triggered by external accounts, such as smart contract call transactions. But during the execution of smart contract transactions, the contract may trigger other contract method invocation, or transfer TRX/TRC10 tokens to external accounts, or it may also perform operations such as staking, voting, resource delegating, etc. Such transactions that occur during a smart contract execution are called internal transactions. Therefore internal transactions are transactions triggered in TVM by contract accounts.\n\nThe generation of internal transactions\nThis article takes the exchange of USDT for TRX in a decentralized exchange as an example to illustrate the generation of internal transactions.\n\nThe following is the tokenToTrxSwapInput method of TRX-USDT trading pair contract, which can exchange TRX for the user according to the amount of USDT sold by the user:","metadata":{"loc":{"lines":{"from":783,"to":789}}}}],["1887",{"pageContent":"The following is the tokenToTrxSwapInput method of TRX-USDT trading pair contract, which can exchange TRX for the user according to the amount of USDT sold by the user:\n\n\nfunction tokenToTrxSwapInput(uint256 tokens_sold, uint256 min_trx, uint256 deadline) public returns (uint256) {\n    return tokenToTrxInput(tokens_sold, min_trx, deadline, msg.sender, msg.sender);\n  }\n  \nfunction tokenToTrxInput(uint256 tokens_sold, uint256 min_trx, uint256 deadline, address buyer, address payable recipient) private nonReentrant returns (uint256) {\n    require(deadline >= block.timestamp && tokens_sold > 0 && min_trx > 0);\n    uint256 token_reserve = token.balanceOf(address(this));\n    uint256 trx_bought = getInputPrice(tokens_sold, token_reserve, address(this).balance);\n    uint256 wei_bought = trx_bought;\n    require(wei_bought >= min_trx);\n    recipient.transfer(wei_bought);","metadata":{"loc":{"lines":{"from":789,"to":802}}}}],["1888",{"pageContent":"require(address(token).safeTransferFrom(buyer, address(this), tokens_sold));\n    emit TrxPurchase(buyer, tokens_sold, wei_bought);\n    emit Snapshot(buyer,address(this).balance,token.balanceOf(address(this)));\n\n    return wei_bought;\n  }\nWe can see that there are four codes in this contract function that involve triggering other contracts or transferring tokens to external accounts, which are:\n\nLine 7: token.balanceOf(address(this)), used to query the USDT balance of this contract\nLine 11: recipient.transfer(wei_bought), used to transfer TRX to the invocation account\nLine 13: address(token).safeTransferFrom(buyer, address(this), tokens_sold)), used to transfer USDT from the invocation account to this contract\nLine 15: token.balanceOf(address(this)), used to query the USDT balance of this contract\nThe above four codes respectively correspond to the internal transactions queried through TRONSCAN or through the API interface.","metadata":{"loc":{"lines":{"from":804,"to":816}}}}],["1889",{"pageContent":"Use-Cases\nInternal transactions can provide some vital information for your users. Here are a few use cases where internal transaction information can be used inside a dApp:","metadata":{"loc":{"lines":{"from":818,"to":819}}}}],["1890",{"pageContent":"Failed Transactions Notifications -The entire transaction will fail if an internal transaction fails. The purpose of notifying users of the exact location of the fault point can be achieved through internal transactions, which helps to quickly locate and solve problems\nSmart Contract Monitoring - Your deployed smart contract can interact with other contracts via internal transactions. To know when and which contracts it interacts with, you can monitor your smart contract address for any internal transactions.\nSmart Contract Analytics - Since internal transactions can be complex, getting insights is helpful. By looking at the number of internal transactions performed by a smart contract, you can understand the performance of that contract.\nBatch Transactions - If you send a batch of transactions to different sender addresses, you can use internal transactions to more conveniently and securely ensure they reach the right addresses.\nThe preservation of internal transactions","metadata":{"loc":{"lines":{"from":821,"to":825}}}}],["1891",{"pageContent":"The preservation of internal transactions\nThere are many use cases for internal transactions, which can guide and inform users about the execution of transactions, but the TRON node does not save internal transaction information by default, and needs to be manually enabled through the node configuration file:","metadata":{"loc":{"lines":{"from":825,"to":826}}}}],["1892",{"pageContent":"vm = {\n    ...\n  saveInternalTx = true\n  saveFeaturedInternalTx = true\n    ...\n}\nsaveInternalTx: Whether to save internal transactions\nsaveFeaturedInternalTx: When saveInternalTx is enabled, whether to save Stake2.0-related internal transactions\nAfter the internal transaction storage configuration item is enabled, restart the node. From the moment of the restart, the node will save its internal transactions. Users can view their internal transactions according to the transaction ID of the outer transaction. It is not supported to view internal transactions directly through the hash of internal transactions. The API is gettransactioninfobyid.\n\nThe examples of internal transactions\nThe internal transaction saved by the node contains the following information:","metadata":{"loc":{"lines":{"from":829,"to":840}}}}],["1893",{"pageContent":"The examples of internal transactions\nThe internal transaction saved by the node contains the following information:\n\nhash: the hash value of the internal transaction\ncaller_address: caller address\ntransferTo_address: the calling contract address or the account address receiving TRX/TRC10 tokens\ncallValueInfo.callValue: the amount of TRX/TRC10 tokens transferred\ncallValueInfo.tokenId: TRC10 name or id of the transfer; when transferring TRX, this field is empty.\nnote: instruction type, such as call, create, suicide, freezeBalanceV2ForEnergy, freezeBalanceV2ForBandwidth, unfreezeBalanceV2ForBandwidth, etc.\nrejected: Whether the internal transaction is executed failed, true means the execution failed.\nextra: At present, it is mainly used to save voting information and record the voting SR and its number of votes in JSON format\nLet's look at the information contained in internal transactions based on various examples:","metadata":{"loc":{"lines":{"from":840,"to":851}}}}],["1894",{"pageContent":"1. Smart contract calls other smart contract methods\nHere is an example, the transaction is an external address calling the \"TQn9Y....\" contract, in \"TQn9Y....\" contract, it calls the \"TR7NHq....\" contract:\n\n\n{\n    \"id\": \"50e6dd05c37b8666cf4a689fe6c0d52053b76b53d8649b256e6b9dca8c9df098\",\n    ......\n    \"internal_transactions\": [\n        {\n            \"hash\": \"380f4d87271b83afcf5e867271ee2d30b36c19d3eeb15a043477bce7fd5b2079\",\n            \"caller_address\": \"TQn9Y2khEsLJW1ChVWFMSMeRDow5KcbLSE\",\n            \"transferTo_address\": \"TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t\",\n            \"callValueInfo\": [\n                {}\n            ],\n            \"note\": \"63616c6c\"\n        },\n        .......\n    ]\n}\nThe information contained in the above internal transactions is as follows:","metadata":{"loc":{"lines":{"from":853,"to":873}}}}],["1895",{"pageContent":"internal_transactions.caller_address is the address of the caller, that is, the contract address directly called by the external address\ninternal_transactions.transferTo_address is the address of another contract called in the contract\ninternal_transactions.callValueInfo In this example, the contract did not pass TRX/TRC10 token using value when calling other contracts, so the value of this field is empty. If value information is attached when the contract calls other contract functions, it will be reflected through this field.\ninternal_transactions.note is the instruction description, in Hex format, after converting it to a string, you can get the operation information in plain text, in this example it iscall\n2. Smart contract transfers TRX to external accounts\nHere is an example, the transaction is an external address calling the \"TQn9Y....\" contract, in \"TQn9Y....\" contract, it transfers TRX to the \"TQnpn....\" address:","metadata":{"loc":{"lines":{"from":875,"to":880}}}}],["1896",{"pageContent":"{\n    \"id\": \"50e6dd05c37b8666cf4a689fe6c0d52053b76b53d8649b256e6b9dca8c9df098\",\n     ......\n    \"internal_transactions\": [\n        ......\n        {\n            \"hash\": \"f47fede2a45e722e6406421d0df16142e159ae7404525de5a595f4fc0c357e26\",\n            \"caller_address\": \"TQn9Y2khEsLJW1ChVWFMSMeRDow5KcbLSE\",\n            \"transferTo_address\": \"TQnpnLZJYMzH5xku535rAiYTnqYXTDTEHQ\",\n            \"callValueInfo\": [\n                {\n                    \"callValue\": 4514968563\n                }\n            ],\n            \"note\": \"63616c6c\"\n        },\n        ......\n    ]\n}\ninternal_transactions.caller_addressis the address of the caller, that is, the address of the contract directly called by the external address\ninternal_transactions.transferTo_address is the target address for transferring TRX\ninternal_transactions.callValueInfo[0].callValue is the transfer amount of TRX, the unit is sun","metadata":{"loc":{"lines":{"from":883,"to":904}}}}],["1897",{"pageContent":"internal_transactions.transferTo_address is the target address for transferring TRX\ninternal_transactions.callValueInfo[0].callValue is the transfer amount of TRX, the unit is sun\ninternal_transactions.note is the instruction description, in Hex format, after converting it to a string, you can get the operation information in plain text, this example is call\n3. Smart contract transfers TRC10 tokens to external accounts\nTRC10 transfer is basically the same as TRX transfer, except for the following two fields:","metadata":{"loc":{"lines":{"from":904,"to":908}}}}],["1898",{"pageContent":"internal_transactions.callValueInfo[0].callValue is the amount of TRC10 tokens transferred\ninternal_transactions.callValueInfo[0].tokenId is the TRC10 name or id. Since No. 14 Committee Proposal allows the same token name, so before this proposal takes effect (blocks before 5537806), this field indicates the TRC10 token name, after the proposal takes effect (block 5537806 and later), this field indicates the TRC10 token ID.\n4. Smart contract stakes TRX\nHere is an example, the transaction is an external address calling the \"TU8Mb....\" contract, in \"TU8Mb....\", the contract stakes 1000TRX to obtain energy:","metadata":{"loc":{"lines":{"from":910,"to":913}}}}],["1899",{"pageContent":"{\n    \"id\": \"9d25a4fe417e0c7540cc5c5841e1d8c9215aec556d9b06e18910ed8b5088f0d8\",\n    ......\n    \"internal_transactions\": [\n        {\n            \"hash\": \"a3a4d666e7bf0729bbd8b5e5ad7afb7f8dd20191e7298ea9dbd17af345c96ed5\",\n            \"caller_address\": \"TU8MbhYhurKv4T3xAHQKZCeP4DtFCmWLMt\",\n            \"transferTo_address\": \"TU8MbhYhurKv4T3xAHQKZCeP4DtFCmWLMt\",\n            \"callValueInfo\": [\n                {\n                    \"callValue\": 1000000000\n                }\n            ],\n            \"note\": \"667265657a6542616c616e63655632466f72456e65726779\"\n        }\n    ]\n}\ninternal_transactions.caller_address is the address of the stake initiator, that is, the address of the contract directly called by the external address\ninternal_transactions.transferTo_address is the resource receiving address, that is, the stake initiator address, that is, the address of the contract directly called by the external address","metadata":{"loc":{"lines":{"from":916,"to":934}}}}],["1900",{"pageContent":"internal_transactions.transferTo_address is the resource receiving address, that is, the stake initiator address, that is, the address of the contract directly called by the external address\ninternal_transactions.callValueInfo[0].callValue is the staked TRX amount (in sun)\ninternal_transactions.note is the instruction description in Hex format, and the instruction information in plain text can be obtained after converting it into a string. In this example, it is freezeBalanceV2ForEnergy, which means that the contract stakes TRX to obtain energy. If the contract stakes TRX to obtain bandwidth, the value of this field is freezeBalanceV2ForBandwidth\n5. Smart contract unstakes TRX\nHere is an example, the transaction is an external address calling the \"TU8Mb....\" contract, \"TU8Mb....\" contract performs the unstaking operation to unstake the 100TRX staked to obtain bandwidth:","metadata":{"loc":{"lines":{"from":934,"to":938}}}}],["1901",{"pageContent":"{\n    \"id\": \"dc110091fbd1568f8b264f287c7e0896d1afaf47b906a9e684fd17d57c7a1151\",\n    ......\n    \"internal_transactions\": [\n        {\n            \"hash\": \"16f73bdad5e9f984e082909b1028fff0b9865952131e681ca887446f8ec89918\",\n            \"caller_address\": \"TU8MbhYhurKv4T3xAHQKZCeP4DtFCmWLMt\",\n            \"transferTo_address\": \"TU8MbhYhurKv4T3xAHQKZCeP4DtFCmWLMt\",\n            \"callValueInfo\": [\n                {\n                    \"callValue\": 100000000\n                }\n            ],\n            \"note\": \"756e667265657a6542616c616e63655632466f7242616e647769647468\"\n        }\n    ]\n}\ninternal_transactions.caller_address is the address of the unstaking initiator, that is, the address of the contract directly called by the external address\ninternal_transactions.transferTo_address is the TRX receiving address, that is, the contract address directly called by the external address\ninternal_transactions.callValueInfo[0].callValue is the amount of TRX unstaked (in sun)","metadata":{"loc":{"lines":{"from":941,"to":960}}}}],["1902",{"pageContent":"internal_transactions.callValueInfo[0].callValue is the amount of TRX unstaked (in sun)\ninternal_transactions.note is the instruction description, in this example it is unfreezeBalanceV2ForBandwidth, which means that the contract unstakes the TRX staked for obtaining bandwidth. If the contract unstakes the TRX staked for obtaining energy, the value of this field is unfreezeBalanceV2ForEnergy\n6. Smart contracts delegate resources to other accounts\nHere is an example, the transaction is an external address calling the \"TU8Mb....\" contract, \"TU8Mb....\" contract delegated the energy share of 500000000sun to the \"TUznH....\" address:","metadata":{"loc":{"lines":{"from":960,"to":963}}}}],["1903",{"pageContent":"{\n    \"id\": \"342daa21f8865786295c45bb80e2f257740091e4e1a3a546b90daa51bcbcbd18\",\n    ......\n    \"internal_transactions\": [\n        {\n            \"hash\": \"58382a79c3af68c472383580309a81a9322e7520a48b6463917ba9219ca32a7d\",\n            \"caller_address\": \"TU8MbhYhurKv4T3xAHQKZCeP4DtFCmWLMt\",\n            \"transferTo_address\": \"TUznHJfHe6gdYY7gvWmf6bNZHuPHDZtowf\",\n            \"callValueInfo\": [\n                {\n                    \"callValue\": 500000000\n                }\n            ],\n            \"note\": \"64656c65676174655265736f757263654f66456e65726779\"\n        }\n    ]\n}\ninternal_transactions.caller_address is the resource delegate address, that is, the contract address directly called by the external address\ninternal_transactions.transferTo_address is the resource receiving address\ninternal_transactions.callValueInfo[0].callValue is the delegated resource share(unit is sun)","metadata":{"loc":{"lines":{"from":966,"to":985}}}}],["1904",{"pageContent":"internal_transactions.transferTo_address is the resource receiving address\ninternal_transactions.callValueInfo[0].callValue is the delegated resource share(unit is sun)\ninternal_transactions.note is the instruction description, in this example it is delegateResourceOfEnergy, which means the contract delegates energy resources. If it is a contract delegating bandwidth, the field value is delegateResourceOfBandwidth\n7. The smart contract cancels the resource delegation for other accounts\nHere is an example, the transaction is an external address calling the \"TU8Mb....\" contract, \"TU8Mb....\" contract cancels the delegation of 200000000 sun energy shares for the \"TUznH....\" address:","metadata":{"loc":{"lines":{"from":985,"to":989}}}}],["1905",{"pageContent":"{\n    \"id\": \"aa3961ffb0781d8b66d5e22368e92708135dac9c81eac1e2adcaa8546d729bc8\",\n    ......\n    \"internal_transactions\": [\n        {\n            \"hash\": \"1a8524704098770d9c6535e1112d1fb91855363c8366c93810f3cb56e8ee12bf\",\n            \"caller_address\": \"TU8MbhYhurKv4T3xAHQKZCeP4DtFCmWLMt\",\n            \"transferTo_address\": \"TUznHJfHe6gdYY7gvWmf6bNZHuPHDZtowf\",\n            \"callValueInfo\": [\n                {\n                    \"callValue\": 200000000\n                }\n            ],\n            \"note\": \"756e44656c65676174655265736f757263654f66456e65726779\"\n        }\n    ]\n}\ninternal_transactions.caller_address is the resource delegate address, that is, the contract address directly called by the external address\ninternal_transactions.transferTo_address is the resource receiving address, that is, to cancel the resource delegation of this address\ninternal_transactions.callValueInfo[0].callValue is the amount of TRX to undelegate (unit is sun)","metadata":{"loc":{"lines":{"from":992,"to":1011}}}}],["1906",{"pageContent":"internal_transactions.callValueInfo[0].callValue is the amount of TRX to undelegate (unit is sun)\ninternal_transactions.note is the instruction description, in this example it is unDelegateResourceOfEnergy, which means canceling the energy resource delegation. If the contract cancels the bandwidth resource delegation, the value of this field is unDelegateResourceOfBandwidth\n8. Smart contract votes for super representatives\nHere is an example, the transaction is an external address calling the \"TNaDY....\" contract, \"TNaDY....\" contract votes 200 and 400 for the super representatives \"TUoHa....\" and \"TUznH....\" respectively:","metadata":{"loc":{"lines":{"from":1011,"to":1014}}}}],["1907",{"pageContent":"{\n    \"id\": \"58506325f692eee0bd730d97a0086f8b0c50e8aa5392b9e4b0edd5fb0916a718\",\n    ......\n    \"internal_transactions\": [\n        {\n            \"hash\": \"792b26cb6fbd1c92030721c62f7fd14522a94f412e04b05442d78e1ce743c9f4\",\n            \"caller_address\": \"TNaDYZaXEpL1LY8Uk4LtGTwwQrGzXTwss9\",\n            \"callValueInfo\": [\n                {}\n            ],\n            \"note\": \"766f74655769746e657373\",\n            \"extra\": \"{\\\"votes\\\":[{\\\"vote_address\\\":\\\"TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM\\\",\\\"vote_count\\\":200},{\\\"vote_address\\\":\\\"TUznHJfHe6gdYY7gvWmf6bNZHuPHDZtowf\\\",\\\"vote_count\\\":400}]}\"\n        }\n    ],\n    ......\n}\ninternal_transactions.caller_address: this is the address voting for the super representative, that is, the contract address directly called by the external address\ninternal_transactions.transferTo_address: for contract voting transactions, the value of this field is empty, so this field is not displayed in the returned result","metadata":{"loc":{"lines":{"from":1017,"to":1034}}}}],["1908",{"pageContent":"internal_transactions.transferTo_address: for contract voting transactions, the value of this field is empty, so this field is not displayed in the returned result\ninternal_transactions.callValueInfo: for contract voting transactions, the value of this field is an empty array\ninternal_transactions.note: this is the instruction description, in this case, it is voteWitness, which means the super representative voting operation\ninternal_transactions.extra: voting details, record the voting SR and its votes in JSON format: votes[i].vote_address is the SR address, votes[i].vote_count is the number of votes\n9. Smart Contract Withdrawals Rewards\nHere is an example, the transaction is an external address calling the \"TNaDY....\" contract, \"TNaDY....\" contract withdraws the reward of 443803418sun:","metadata":{"loc":{"lines":{"from":1034,"to":1039}}}}],["1909",{"pageContent":"{\n    \"id\": \"8dc24b5ce1399b553cd173529e77b22172d9abf31e9f50dd32c473bcc5234b71\",\n    ......\n    \"internal_transactions\": [\n        {\n            \"hash\": \"e5b047a4a3d64407c93a9e667a083fe52c52b24e859e3a44488249436e79c8d4\",\n            \"caller_address\": \"TNaDYZaXEpL1LY8Uk4LtGTwwQrGzXTwss9\",\n            \"transferTo_address\": \"TNaDYZaXEpL1LY8Uk4LtGTwwQrGzXTwss9\",\n            \"callValueInfo\": [\n                {\n                    \"callValue\": 443803418\n                }\n            ],\n            \"note\": \"7769746864726177526577617264\"\n        }\n    ]\n}\ninternal_transactions.caller_address is the address for withdrawing rewards, that is, the contract address directly called by the external address\ninternal_transactions.transferTo_address is the address to receive the reward, that is, the contract address directly called by the external address\ninternal_transactions.callValueInfo[0].callValue is the withdrawn TRX reward amount, the unit is sun","metadata":{"loc":{"lines":{"from":1042,"to":1061}}}}],["1910",{"pageContent":"internal_transactions.callValueInfo[0].callValue is the withdrawn TRX reward amount, the unit is sun\ninternal_transactions.note is the instruction description, in this example it is withdrawReward, which means withdrawing the reward","metadata":{"loc":{"lines":{"from":1061,"to":1062}}}}],["1911",{"pageContent":"Block\nSuggest Edits\nBlocks are batches of transactions with a hash of the previous block in the chain. This link blocks together in a chain. Each additional block strengthens the verification of the previous block and hence the entire blockchain. The block hash value is calculated based on the block content through the hash algorithm, which makes the block content difficult to tamper with because one change in any block in history would invalidate all the following blocks as all subsequent hashes would change and everyone running the blockchain would notice.\n\nWhy Blocks\nTo ensure that all participants on the TRON network maintain a synchronized state and agree on the precise history of transactions, we batch transactions into blocks. This means hundreds of transactions are committed, agreed on, and synchronized all at once.","metadata":{"loc":{"lines":{"from":1064,"to":1069}}}}],["1912",{"pageContent":"How Blocks Work\nTo preserve the transaction history, blocks are strictly ordered. Every new block created contains the hash of its parent block. At any given time, almost all participants on the network are in agreement on the exact number and history of blocks.\n\nOnce a super representative produces a block, it will broadcast the newly produced block to the network, and all nodes in the network will add the received block to the end of their blockchain. The exact block consensus process is specified by the \"Proof of Stake\" protocol of the TRON network.\n\nWhat's in a Block\nThe block object will look a little like this:\n\nJavaScript","metadata":{"loc":{"lines":{"from":1071,"to":1079}}}}],["1913",{"pageContent":"What's in a Block\nThe block object will look a little like this:\n\nJavaScript\n\n{\n    \"block_header\":\n    {\n        \"raw_data\": \n        {\n            \"number\": 23345280,\n            \"txTrieRoot\": \"b04e2c9fcbc26bff7173968a198f23b8a1e2875b3f24c02f186c70c3e7a3041e\",\n            \"witness_address\": \"410765bed97bbd836f6e489265fd0d9ca1c888e606\",\n            \"parentHash\": \"000000000164387f439d804494b10e099751748f0a555ce0e7860fee4e1dc6c6\",\n            \"version\": 23,\n            \"timestamp\": 1648717482000\n        },\n        \"witness_signature\":\"47b1f77b3e30cfbbfa41d795dd34475865240617dd1c5a7bad526f5fd89e52cd057c80b665cc2431efab53520e2b1b92a0425033baee915df858ca1c588b0a1800\"\n    },\n    \"transactions\":[{<->},...,{<->}]\n}\nA block consists of two parts: the block header and the transaction list. The block header includes the following fields:","metadata":{"loc":{"lines":{"from":1079,"to":1100}}}}],["1914",{"pageContent":"raw_data.number - The block number, that is, the height of the block on the chain\nraw_data.txTrieRoot - The hash of the root node of the Merkle tree of transactions in the block\nraw_data.witness_address - The super representative account address which produces this block\nraw_data.parentHash - The block ID of the previous block. The block ID is the unique identifier of the block, which consists of the block height and the hash of the raw_data of the block header. parentHash links blocks together in a chain\nraw_data.version - Version number, is used to identify the version of the chain\nraw_data.timestamp - Timestamp when the block was created\nwitness_signature - Super representative's signature on the block\ntransactions is a list of transactions that are packaged into the block. For the content of each transaction, please refer to the transaction chapter.\n\nBlock Interval\nIn the TRON network, the block interval is 3 seconds, that is, a block is generated every 3 seconds.","metadata":{"loc":{"lines":{"from":1102,"to":1112}}}}],["1915",{"pageContent":"Block Interval\nIn the TRON network, the block interval is 3 seconds, that is, a block is generated every 3 seconds.\n\nBlock Size\nBlocks themselves are bounded in size, and the maximum size of a block will not exceed 2,000,000 bytes (about 1.9M).\n\nTRON Virtual Machine (TVM)\nSuggest Edits\nTVM is the runtime environment for TRON smart contracts, and each node in the network maintains a TVM entity.The TRON protocol keeps the continuous, uninterrupted, and immutable operation of this state machine. At any given block in the chain, TRON has one and only one 'canonical' state, and the TVM is what defines the rules for computing a new valid state from block to block.","metadata":{"loc":{"lines":{"from":1112,"to":1120}}}}],["1916",{"pageContent":"From Ledger To State Machine\nThe analogy of a 'distributed ledger' is often used to describe blockchains like Bitcoin, which enable a decentralized currency using fundamental tools of cryptography. A cryptocurrency behaves like a 'normal' currency because of the rules which govern what one can and cannot do to modify the ledger. For example, a Bitcoin address cannot spend more Bitcoin than it has previously received. These rules underpin all transactions on Bitcoin.\n\nWhile TRON has its own native cryptocurrency TRX that follows almost exactly the same intuitive rules, it also enables a much more powerful function: smart contracts. For this more complex feature, instead of a simple distributed ledger, TRON is a distributed state machine. TRON's state is a large data structure which holds not only all accounts information, but a machine state, which can change from block to block according to a pre-defined set of rules, and which can execute arbitrary machine code.","metadata":{"loc":{"lines":{"from":1122,"to":1125}}}}],["1917",{"pageContent":"The State Transition Function\nThe TVM behaves as a mathematical function would: Given an input, it produces a deterministic output. It therefore is quite helpful to more formally describe TRON as having a state transition function:\n\n\nY(S, T) = S'\nGiven an old valid state (S) and a new set of valid transactions (T), the TRON state transition function Y(S, T) produces a new valid output state S'.\n\nState\nIn the TRON network, the state is an enormous data structure called Merkle Trie, which keeps all accounts linked by hashes and reducible to a single root hash stored on the blockchain.\n\nTransaction\nTransactions are cryptographically signed instructions from accounts. They are divided into two categories, system contract transactions and smart contract transactions, in which smart contract transactions include those which result in contract message calls and those which result in contract creation.","metadata":{"loc":{"lines":{"from":1127,"to":1138}}}}],["1918",{"pageContent":"Contract creation results in the creation of a new contract account containing compiled smart contract bytecode. Whenever another account makes a message call to that contract, it executes its bytecode in TVM.\n\nTVM Instructions\nThe EVM executes as a stack machine with a depth of 1024 items. Each item is a 256-bit word, which was chosen for the ease of use with 256-bit cryptography (such as Keccak-256 hashes or secp256k1 signatures).\n\nCompiled smart contract bytecode executes as a number of EVM opcodes, which perform standard stack operations like XOR, AND, ADD, SUB, etc. The EVM also implements a number of blockchain-specific stack operations, such as ADDRESS, BALANCE, BLOCKHASH, etc. More opcodes please refer to TRON opcodes\n\nThe below flowchart shows how TVM works:\n\nThe flow is as follows：","metadata":{"loc":{"lines":{"from":1140,"to":1149}}}}],["1919",{"pageContent":"The below flowchart shows how TVM works:\n\nThe flow is as follows：\n\nThe compiler compiles the smart contract into bytecode readable and executable on TVM.\nTVM processes data through opcode.\nTVM accesses blockchain data and invokes external data interfaces through the Interoperation layer.\nWhen TVM finishes execution , the status is written into the block, and the user can query the execution result and status through the API.\nDifferences from EVM\nTVM is basically compatible with EVM with some differences in details\n\nTVM uses energy instead of gas. The energy price is currently 420 sun, GASPRICE, BASEFEE returns energy unit price in TVM\n\nDIFFICULTY and GASLIMIT return zero in TVM\n\nMost opcodes in TVM have the equivalent energy consumption as in the EVM, some of them are lower(e.g., SLOAD, CALL)\n\nContract address prefix created by CREATE2 is different from EVM: TVM chooses 0x41 as the prefix, the formula is keccak256( 0x41 ++ address ++ salt ++ keccak256(init_code))[12:]","metadata":{"loc":{"lines":{"from":1149,"to":1166}}}}],["1920",{"pageContent":"Contract address prefix created by CREATE2 is different from EVM: TVM chooses 0x41 as the prefix, the formula is keccak256( 0x41 ++ address ++ salt ++ keccak256(init_code))[12:]\n\nPre-compiled contract Ripemd160(0x03): TVM calculates SHA-256 twice on the input. There will be a new pre-compiled contract to implement the standard Ripemd160\n\nPre-compiled contract 0x09: EVM has Blake2F on this address; on TVM it is BatchValidateSign. See TIP-43\n\nThere are two ways to send TRX to contracts: Transfer and TriggerSmartContract with a callValue. Transfer will not call fallback functions in the contracts\n\nTVM has new features bases on TRON's characteristics\n\nTRC-10 related opcodes: CALLTOKEN(0xd0), TOKENBALANCE(0xd1), CALLTOKENVALUE(0xd2) and CALLTOKENID(0xd3)\n\nJudging whether an address belongs to a contract: ISCONTRACT(0xd4) TIP-44\n\nBatch validations for normal and multiple signatures: BatchValidateSign(0x09)TIP-43, ValidateMultiSign(0x0a)TIP-60","metadata":{"loc":{"lines":{"from":1166,"to":1180}}}}],["1921",{"pageContent":"Judging whether an address belongs to a contract: ISCONTRACT(0xd4) TIP-44\n\nBatch validations for normal and multiple signatures: BatchValidateSign(0x09)TIP-43, ValidateMultiSign(0x0a)TIP-60\n\nAnonymous contract and Librustzcash related pre-compile contracts: verifyMintProof(0x1000001), verifyMintProof(0x1000002), verifyMintProof(0x1000003) and merkleHash(0x1000004). See TIP-135, TIP-137 and TIP-138.\n\nFreeze / Unfreeze functions: FREEZE(0xd5), UNFREEZE(0xd6) and FREEZEEXPIRETIME(0xd7). See TIP-157.\n\nContract voting related opcodes and pre-compiled contracts: VOTEWITNESS(0xd8), WITHDRAWREWARD(0xd9), RewardBalance(0x1000006), IsSrCandidate(0x1000006), VoteCount(0x1000007), UsedVoteCount(0x1000008), ReceivedVoteCount(0x1000009) and TotalVoteCount(0x100000a). See TIP-271.","metadata":{"loc":{"lines":{"from":1180,"to":1188}}}}],["1922",{"pageContent":"Stake 2.0 related Freeze / Unfreeze / Delegate / UnDelegate functions: FREEZEBALANCEV2(0xda), UNFREEZEBALANCEV2(0xdb), CANCELALLUNFREEZEV2(0xdc), WITHDRAWEXPIREUNFREEZE(0xdd), DELEGATERESOURCE(0xde), UNDELEGATERESOURCE(0xdf), and GetChainParameter(0x100000b), AvailableUnfreezeV2Size(0x100000c), UnfreezableBalanceV2(0x100000d), ExpireUnfreezeBalanceV2(0x100000e), DelegatableResource(0x100000f), ResourceV2(0x1000010), CheckUnDelegateResource(0x1000011), ResourceUsage(0x1000012), TotalResource(0x1000013), TotalDelegatedResource(0x1000014), TotalAcquiredResource(0x1000015). See TIP-467.\n\nCompatible solutions are currently under discussion, if you are interested, please move to the GitHub ISSUE to participate in the discussion.","metadata":{"loc":{"lines":{"from":1190,"to":1192}}}}],["1923",{"pageContent":"Compatible solutions are currently under discussion, if you are interested, please move to the GitHub ISSUE to participate in the discussion.\n\nEvent Log\nSuggest Edits\nEvent Log is one of the most important features of TRON virtual machine, which is used to output specific binary data and record it in TransactionInfo while TVM is running a contract. The Event Log can help developers confirm, check, and quickly retrieve specific states of a smart contract. This article introduces the basics of the Event mechanism and how to decode the Event Log.\n\nHow To Define And Trigger Event In Contract\nIn Solidity contract, you can define an Event with the event keyword, and trigger an Event with the emit keyword. When defining an Event, you can specify not only the event name, but also several parameters to output specific data. Take the Transfer event of the TRC20 contract as an example:\n\nsolidity=","metadata":{"loc":{"lines":{"from":1192,"to":1201}}}}],["1924",{"pageContent":"solidity=\n\ncontract ExampleContractWithEvent {\n    event Transfer(address indexed from，address indexed to, uint256 value);\n    constructor() payable public{}\n    function contractTransfer(address toAddress, uint256 amount){\n        toAddress.transfer(amount);\n        emit Transfer(msg.sender，toAddress, amount);\n    }\n}\nevent Transfer(address indexed from，address indexed to, uint256 value) defines a Transfer event containing three parameters, the first is from indicating the sender address, the second is to indicating the receiver address, and the third one is value indicating the transfer amount\nemit Transfer(msg.sender，toAddress, amount) Specifies to trigger the corresponding Event after the transfer is completed. The Event contains the sender address, the receiver address and the amount.\nNote：The Solidity specification generally requires that the Event name be capitalized to distinguish it from the corresponding function. For example, the event Transfer and functions transfer.","metadata":{"loc":{"lines":{"from":1201,"to":1213}}}}],["1925",{"pageContent":"LOG\nSolidity uses LOG instruction to record event information in TransactionInfo. The event information is in the log field of TransactionInfo. The following uses a TransactionInfo obtained through the gettransactioninfobyid API to illustrate the structure of a event:\n\njson=\n\n{\n    \"id\": \"88c66d08f15b983183c7f7d23e3fafec0320bcc837d67957a8bda58d04ca53e1\",\n    \n    ......\n    \n    \"log\": [\n        {\n            \"address\": \"a614f803b6fd780986a42c78ec9c7f77e6ded13c\",\n            \"topics\": [\n                \"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",\n                \"00000000000000000000000079309abcff2cf531070ca9222a1f72c4a5136874\",\n                \"00000000000000000000000081b64b1c09d448d25c9eeb3ee3b8f3348a694c96\"\n            ],\n            \"data\": \"00000000000000000000000000000000000000000000000000000000b2d05e00\"\n        }\n    ]\n}\nlog ： The list of Events triggered in the transaction. For each Event, it contains the following three parts:","metadata":{"loc":{"lines":{"from":1215,"to":1237}}}}],["1926",{"pageContent":"address ： Contract address。In order to be compatible with EVM, the address in TVM is a hex format address without the prefix 0x41, so if you want to parse the address in the log, you need to add 41 to the beginning of the log address , and then convert it to Base58 format .\ntopics ：The topic of the event, including the event itself and parameters marked as indexed. The reason for using topics to save the indexed parameter is that blockchain uses a key-value storage engine such as LevelDB or RockDB. These engines generally support the prefix-scan operation. So putting the indexed parameter into topics can quickly retrieve the Transfer event and the Transfer event with a specific toAddress.\ndata ： Non-indexed parameters of events, such as amount.\nLOG Decoding\nFor the events in the above LOG chapter, if you want to decode them, you must first know the ABI of the event. The following is the ABI of the above Transfer Event:\n\njson=","metadata":{"loc":{"lines":{"from":1239,"to":1245}}}}],["1927",{"pageContent":"json=\n\n{\n    \"anonymous\":false,\n    \"inputs\":\n    [\n        {\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},\n        {\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},\n        {\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}\n    ],\n    \"name\":\"Transfer\",\n    \"type\":\"event\"\n}\nCheck the Event log along the ABI to decode the data:","metadata":{"loc":{"lines":{"from":1245,"to":1258}}}}],["1928",{"pageContent":"topics[0]：ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef is the event itself, the value is the calculation result of keccak256('Transfer(address,address,uint256)'), so the event is a Transfer event. The keccak256 hash value of the event can be calculated by tronweb.sha3(). Note: The parameter of keccak256 is a string without any spaces, otherwise, the calculated hash value will be different.\ntopics[1]：00000000000000000000000079309abcff2cf531070ca9222a1f72c4a5136874 is the first indexed parameter from. The address here is the 20-byte address with the prefix 0x41 removed, so for this parameter, get the last 40 bits of data, and add 41 in front to get the TRON HEX format address.\ntopics[2]：00000000000000000000000081b64b1c09d448d25c9eeb3ee3b8f3348a694c96 is the second indexed parameter to, the recipient account address, the parsing is the same as above.","metadata":{"loc":{"lines":{"from":1260,"to":1262}}}}],["1929",{"pageContent":"topics[2]：00000000000000000000000081b64b1c09d448d25c9eeb3ee3b8f3348a694c96 is the second indexed parameter to, the recipient account address, the parsing is the same as above.\ndata ： 00000000000000000000000000000000000000000000000000000000b2d05e00 is the value of a non-indexed parameter. If there are multiple non-indexed parameters, they are listed in order according to the ABI coding rules. For details, please refer to ABI coding rules. For this example, there is only one non-indexed parameter, namely value, the transfer amount. Just convert hexadecimal data to decimal.","metadata":{"loc":{"lines":{"from":1262,"to":1263}}}}],["1930",{"pageContent":"VM Exception Handling\nSuggest Edits\nException Types\nThere are four types of exceptions that may be incurred during contract execution:\n\nAsset-style Exception\nRequire-style Exception\nValidation-style Exception\nVMillegal-style Exception\nAssert-style Exception\nThe following generates an assert-style exception that throws an invalid opcode error, consuming all Energy (including consumed and unconsumed Energy so far):","metadata":{"loc":{"lines":{"from":1265,"to":1275}}}}],["1931",{"pageContent":"If the array index you are accessing is too large or negative (for example x[i] where i >= x.length or i < 0).\nIf you access a fixed length of bytesN the index is too large or negative.\nIf you use zero as a divisor for division or modulo operations (for example 5 / 0 or 23 % 0 ).\nIf you shift the negative digit.\nIf you convert a too large or negative value to an enumerated type.\nIf you call an uninitialized internal function type variable.\nIf you call the argument of the assert (expression), and the final result is false.\nTimeout during contract execution.\nIf a JVMStackOverFlowException occurs.\nIf an OutofMem exception occurs, that is, memory exceeded 3M.\nDuring contract operation, an overflow occurs, such as addition.\nRequire-style Exception\nThe following conditions generate a require-style exception, which throws a revert error, and only consume the already consumed energy, excluding the unconsumed energy.","metadata":{"loc":{"lines":{"from":1277,"to":1289}}}}],["1932",{"pageContent":"Call throw\nIf you call the require parameter (expression) the final result is false.\nIf you call a function via a message, but the function does not end correctly (for example, the function runs out of Energy, or throws an exception itself). If Energy is not specified when the function is called, all Energy will be passed in and consumed. Only the Energy value is set to see the difference. This function does not include the low-level operations call, send, delegatecall, or callcode. Low-level operations do not throw an exception, but return false to indicate failure.\nIf you create a contract with the new keyword, but the contract is not created correctly (because you can't specify Energy during contract creation, all Energy is passed in and consumed).\nIf your contract receives TRX via a public function without a payable modifier (including constructors, fallback functions, and generic public functions).\ntransfer() fails\nCall revert()\nReach the maximum function stack depth 64.\n📘\nNote","metadata":{"loc":{"lines":{"from":1291,"to":1300}}}}],["1933",{"pageContent":"Both the assert-style and require-style cases cause the TVM to roll back. The reason for the fallback is that it cannot continue to be performed safely because the expected effect is not achieved. Since we want to preserve the atomicity of the transaction, the safest thing to do is roll back all changes. However, a deduction will be made.\n\nValidation-style Exception\nThe following conditions will result in a validation-style exception. The transaction will not be chained and will not consume any Energy.","metadata":{"loc":{"lines":{"from":1303,"to":1306}}}}],["1934",{"pageContent":"Validation-style Exception\nThe following conditions will result in a validation-style exception. The transaction will not be chained and will not consume any Energy.\n\nThe current version does not support Virtual Machines.\nWhen creating a contract, the contract name exceeds 32 bytes.\nWhen creating a contract, the proportion of caller resources consumed is not between [0, 100]\nWhen the contract is created, a hash conflict occurs in the newly generated contract address, that is, the contract address has been generated.\nCall value is not 0 if there is an insufficient balance.\nFee Limit is not within the legal range.\nSend a constant request to a node that does not support constant.\nThe triggered contract does not exist in the database.\nVMillegal-style Exception\nA VMillegal-style exception occurs in the following cases. This type of exception transaction will not be chained, but the node that sent the transaction will be penalized at the network layer for a period of time.","metadata":{"loc":{"lines":{"from":1306,"to":1318}}}}],["1935",{"pageContent":"OwnerAddress and OriginAddress are not equal when creating a contract.\nBroadcast a constant request.\nException Handling Process\nThe entry is a go() exception that will be caught and processed in go() and will not be passed outside of go().\nJavaScript\n\npublic void go() {\n\n    try {\n      vm.play(program);\n\n      result = program.getResult();\n\n      // If there is Exception or Revert\n      // Important：\n      // Exception is thrown in the program settings. \n      // Revert is a Virtual Machine compiler written into bytecode in advance, arriving by jump. \n      if (result.getException() != null || result.isRevert()) {","metadata":{"loc":{"lines":{"from":1320,"to":1337}}}}],["1936",{"pageContent":"if (result.getException() != null) {\n          // If Exception，will consume all Energy\n          program.spendAllEnergy();\n          // Set runtimeError to indicate the field of the error content\n          runtimeError = result.getException().getMessage();\n          // Throw an exception\n          throw result.getException();\n        } else {\n          // If it is Revert and there is no Exception, just set the runtimeError field to indicate the error content. \n          runtimeError = \"REVERT opcode executed\";\n        }\n\n        // As long as Exception or Revert occurs, it will not commit. All state changes in the virtual machine execution process will not fall.","metadata":{"loc":{"lines":{"from":1339,"to":1351}}}}],["1937",{"pageContent":"} else {\n        // Without Exception and Revert, commit, all state changes during virtual machine execution will fall. \n        deposit.commit();\n      }\n    }\n    catch (JVMStackOverFlowException e) {\n        // TVM or JVM, JVMStackOverFlowException, flags exception. \n        // The JVMStackOverFLowException will only be caught in go(), which uses JVMStackOverFlowException that occurs in the contract called by call. Or the JVMStackOverFlowException that is called repeatedly. It won't catch up in play(), and will only be caught here. \n        result.setException(e);\n        runtimeError = result.getException().getMessage();\n    }\n    // Catch all the content that can be thrown\n    catch (Throwable e) {\n      // Mark if the exception is unknown. \n      if (Objects.isNull(result.getException())) {\n        result.setException(new RuntimeException(\"Unknown Throwable\"));\n      }\n      // Ensures the runtimeError has a value\n      if (StringUtils.isEmpty(runtimeError)) {","metadata":{"loc":{"lines":{"from":1353,"to":1371}}}}],["1938",{"pageContent":"result.setException(new RuntimeException(\"Unknown Throwable\"));\n      }\n      // Ensures the runtimeError has a value\n      if (StringUtils.isEmpty(runtimeError)) {\n        runtimeError = result.getException().getMessage();\n      }","metadata":{"loc":{"lines":{"from":1371,"to":1376}}}}],["1939",{"pageContent":"}\n  }\n  // After the go() function, result.getException() will not be used, and runtimeError will be filled in the transactionInfo.\nThe play() function is where the virtual machine actually executes. There are three places that call play(), go() (described above), callToAddress() (the CALL instruction is called, which is called in the contract), and createContract() (CREATE directive, which is when the contract is created in the contract). The latter two will not handle catching exceptions, and the exceptions thrown out of play will continue to be thrown out in the latter two.\nJavaScript","metadata":{"loc":{"lines":{"from":1378,"to":1382}}}}],["1940",{"pageContent":"// Play will catch all RuntimeException, and throw a JVMStackOverFlowException (including StackOverflowError)\n  public void play(Program program) {\n    try {\n      // An op virtual execution virtual machine\n      while (!program.isStopped()) {\n        // Step will first catch the RuntimeException, deduct the Energy, and then throw. \n        // At this time, it will stop the step and catch the RuntimeException first, then deduct the Energy ring. \n        this.step(program);\n      }\n    }\n    catch (JVMStackOverFlowException e) {\n      // Throw a JVMStackOverFlowException exception\n      throw new JVMStackOverFlowException();\n    } catch (RuntimeException e) {\n      if (StringUtils.isEmpty(e.getMessage())) {\n        // Put the RuntimeException thrown by the step() function into program.result.exception instead of throwing it out. \n        program.setRuntimeFailure(new RuntimeException(\"Unknown Exception\"));\n      } else {\n        program.setRuntimeFailure(e);\n      }","metadata":{"loc":{"lines":{"from":1384,"to":1403}}}}],["1941",{"pageContent":"program.setRuntimeFailure(new RuntimeException(\"Unknown Exception\"));\n      } else {\n        program.setRuntimeFailure(e);\n      }\n    } catch (StackOverflowError soe) {\n      // Throw a JVMStackOverFLowException exception\n      throw new JVMStackOverFlowException();\n    } finally {\n    }\n  }\nstep() function\nJavaScript","metadata":{"loc":{"lines":{"from":1403,"to":1414}}}}],["1942",{"pageContent":"// Step first catches the RuntimeException, deducts the Energy, and then throws\n// Note, the exceptions thrown here are all RuntimeException\npublic void step(Program program) {\n  try {\n    // If the op is illegal, an IllegalOperationException is thrown. In fact, the Invalid is written in advance in the bytecode, and the assert-style operation jumps to invalid. \n    OpCode op = OpCode.code(program.getCurrentOp());\n    if (op == null) {\n      throw Program.Exception.invalidOpCode(program.getCurrentOp());\n    }\n    switch (op) {\n      // 1. Calculate the energy required for the op\n\n      // 2. If deduction is not enough, throw an OutOfEnergyException\n      program.spendEnergy(energyCost, op.name());\n \n      // 3. Detect CPU time, timeout, then throw OutOfResourceException\n      program.checkCPUTimeLimit(op.name());","metadata":{"loc":{"lines":{"from":1416,"to":1432}}}}],["1943",{"pageContent":"// 4. Actual execution of OP\n      // The focus here is on the CREATE instruction and the CALL instruction. \n      // The steps inside are all similar: \n      // 4.1 When the depth is up，it will push 0 to stack，then return\n      // 4.2 If there is value, the balance is insufficient, then push 0 to stack, and return\n      // 4.3 If there is value, transfer failes, throwing an exception of type RuntimeException. \n      // 4.4 (Requires execution) to execute the virtual machine\n      // 4.5 The result of executing the virtual machine, there is an exception. No exception will be thrown, only all Energy will be deducted and push 0 to stack. \n      // 4.6 The result of executing the virtual machine, if there is a revert, it will return Energy, and push 0 to stack. \n      // 4.7 Successful execution will return Energy and push 1 to stack.","metadata":{"loc":{"lines":{"from":1434,"to":1443}}}}],["1944",{"pageContent":"// Note：\n      // Revert operation, and after exception, how to deal with, is determined by the virtual machine bytecode. Some will revert and some will be invalid. \n      // callToPrecompile fails, it will directly throw an exception of RuntimeException type\n   }\n } catch (RuntimeException e) {\n   // step will first catch the RuntimeException, deduct the Energy, and then throw\n   program.spendAllEnergy();\n   // Stop loop\n   program.stop();\n    // Throw an exception\n    throw e;\n  } finally {\n  }\n}\n\n\nNodes and Clients\nSuggest Edits\nTRON is a distributed network of computers running software (known as nodes) that can verify blocks and transaction data. You need an application, known as a client, on your computer to \"run\" a node.\n\nWhat Are Nodes And Clients？\n\"Node\" refers to a running piece of client software. A client is an implementation of TRON protocol that verifies all transactions in each block, keeping the network secure and the data accurate.","metadata":{"loc":{"lines":{"from":1445,"to":1466}}}}],["1945",{"pageContent":"At present, the TRON client is implemented by Java language, which follows the TRON protocol and realizes the functions of the TRON blockchain.\n\nNode Types\nThere are different types of nodes in the TRON network as follows:\n\nFullnode\nFullnode stores and synchronizes full blockchain data, verifies all blocks and states, provides HTTP API and Grpc API for external query. Please note: Super Representatives need to run a fullNode to generate blocks and package transactions.Grpc API.","metadata":{"loc":{"lines":{"from":1468,"to":1474}}}}],["1946",{"pageContent":"Lite Fullnode","metadata":{"loc":{"lines":{"from":1476,"to":1476}}}}],["1947",{"pageContent":"Lite FullNode runs the same code with FullNode, the difference is that Lite FullNode only starts based on state data snapshot, which only contains all account state data and historical data of the latest 65536 blocks. The state data snapshot is small, only about 3% of the FullNode data. Therefore, Lite Fullnode has the advantages of occupying less disk space and startting up fast, but it does not provide historical block and transaction data query by default, and only provides part of HTTP API and GRPC API of FullNode. For APIs that are not supported by Lite Fullnode, please refer to HTTP, GRPC. But these APIs can be opened by configuring openHistoryQueryWhenLiteFN = true in the configuration file, because after the Lite Fullnode startup, the saved data by the Lite Fullnode is exactly the same as that of the FullNode, so after this configuration item is turned on, the Lite Fullnode supports querying the block data synchronized after the node startup, but still does not support","metadata":{"loc":{"lines":{"from":1477,"to":1477}}}}],["1948",{"pageContent":"the same as that of the FullNode, so after this configuration item is turned on, the Lite Fullnode supports querying the block data synchronized after the node startup, but still does not support querying the block data before the node startup.","metadata":{"loc":{"lines":{"from":1477,"to":1477}}}}],["1949",{"pageContent":"Therefore, if developers only need to use nodes for block synchronization, processing and broadcasting transactions, Or only need to query the blocks and transactions synchronized after the node started, then Lite FullNode will be a better choice.\n\nWhy Should I Run A TRON Node?\nRunning a node allows you to trustlessly and privately use the TRON network while supporting the ecosystem. Your node verifies all the transactions and blocks against consensus rules by itself. This means you don’t have to rely on any other nodes in the network or fully trust them. And you can program your own custom RPC endpoints.\n\nRunning A Node\nRunning your own node offers you various benefits, opens up new possibilities, and helps support the TRON ecosystem. This page will guide you to run your own node and participate in validating TRON network transactions.\n\nIf you want to run your own TRON client, please refer to How to deploy a fullnode.","metadata":{"loc":{"lines":{"from":1479,"to":1487}}}}],["1950",{"pageContent":"If you want to run your own TRON client, please refer to How to deploy a fullnode.\n\nHardware Requirements\nBefore installing any client, please ensure your computer has enough resources to run it. The recommended specifications are as belows:\n\nFullnode：\nCPU：16 cores\nRAM：32G\nBandwidth：100M\nSSD：2.5T+\nFullnode running by Super Representative：\nCPU：32 cores\nRAM：64G\nBandwidth：100M\nSSD：2.5T+\nGetting the client software\nYou can get client software by compiling the source code or from a released version.\n\nStarting the client\nBefore starting TRON client software, perform a last check that your environment is ready. For example, make sure:\n\nThere is enough disk space.\nMemory and CPU are not halted by other programs.\nOperating system is updated to the latest version.\nSystem has the correct time and date.\nWhen everything is ready, please refer to guide to run a TRON Node. Current blockchain data will be available once the client is successfully synced to the current state.","metadata":{"loc":{"lines":{"from":1487,"to":1512}}}}],["1951",{"pageContent":"Using the client\nClients offer HTTP & RPC API that you can use to interact with the TRON network, For details, please refer to API doc.\n\nKeeping node online\nYour node doesn't have to be online non-stop but you should keep it online as much as possible to keep it in sync with the network. You can shut it down to restart it but keep in mind that:\n\nForced shutdowns can damage the database. Once the database is damaged, it needs to be resynchronized with the latest backup database.\nYour client will go out of sync with the network and will need to resync when you restart it.\nUpdating client\nYou need to keep your client software up-to-date with the latest version. Especially before hard forks, make sure you are running the correct client version.\n\nAlternatives\nRunning your own node can be difficult and you don’t always need to run your own instance. In this case, you can use a third party API provider like Trongrid service. For an overview of using it, please check out Trongrid Guide.","metadata":{"loc":{"lines":{"from":1514,"to":1526}}}}],["1952",{"pageContent":"Networks\nSuggest Edits\nSince TRON is a protocol, this means there can be multiple independent \"networks\" conforming to this protocol that do not interact with each other.\n\nNetworks are different TRON environments you can access for development, testing, or production use cases. Your TRON account will work across the different networks but your account balance and transaction history won't carry over from the main TRON network. For testing purposes, it's useful to know which networks are available and how to get testnet TRX so you can play around with it.\n\nPublic Network\nPublic networks are accessible to anyone in the world with an internet connection. Anyone can read or create transactions on a public blockchain and validate the transactions being executed.\n\nMainnet\nMainnet is the primary public TRON production blockchain, where actual-value transactions occur on the distributed ledger. When people and exchanges discuss TRX prices, they're talking about Mainnet TRX.","metadata":{"loc":{"lines":{"from":1528,"to":1538}}}}],["1953",{"pageContent":"Browser：https://tronscan.org\nTronGrid API：https://api.trongrid.io\nTronGrid json-rpc API: https://api.trongrid.io/jsonrpc\nTronGrid gRPC fullnode API: grpc.trongrid.io:50051\nTronGrid gRPC solidity API: grpc.trongrid.io:50052\nDatabase backup：Data backup\nMainnet Infrastructure Providers\nIn addition to TRON Grid's RPC services, you can also use other infrastructure providers' RPC services:\n\nAnkr\nGetBlock\nQuickNode\nNOWNodes\nPublic Node\nThe public nodes are stable online mainnet nodes, which can be used as seed nodes in the TRON network for node discovery:\n\n3.225.171.164\n52.53.189.99\n18.196.99.16\n34.253.187.192\n18.133.82.227\n35.180.51.163\n54.252.224.209\n52.15.93.92\n34.220.77.106\n15.207.144.3\n13.124.62.58\n15.222.19.181\n18.209.42.127\n3.218.137.187\n34.237.210.82\n13.228.119.63\n18.139.193.235\n18.141.79.38\n18.139.248.26\nThe ports of public node：","metadata":{"loc":{"lines":{"from":1540,"to":1575}}}}],["1954",{"pageContent":"HTTP port : 8090\nHTTP solidity port : 8091\nGRPC port: 50051\nGRPC solidity port : 50061\nP2P network port: 18888\nTestnet\nIn addition to Mainnet, there are public testnets. These are networks used by protocol developers or smart contract developers to test both protocol upgrades as well as potential smart contracts before deployment to Mainnet.\n\nIt’s generally important to test any contract code you write on a testnet before deploying to the Mainnet. TRX on testnets has no real value; therefore, there are no markets for testnet TRX. Anyone can get testnet TRX from faucets.\n\nShasta Testnet\nThe parameters of the Shasta testnet are consistent with the mainnet. Currently, the Shasta test network does not support adding new nodes running by anyone.","metadata":{"loc":{"lines":{"from":1577,"to":1588}}}}],["1955",{"pageContent":"Shasta Testnet\nThe parameters of the Shasta testnet are consistent with the mainnet. Currently, the Shasta test network does not support adding new nodes running by anyone.\n\nWebsite:https://www.trongrid.io/shasta\nFaucet:https://www.trongrid.io/faucet\nBrowser:https://shasta.tronscan.org\nhttp API: https://api.shasta.trongrid.io\ngrpc fullnode API: grpc.shasta.trongrid.io:50051\ngrpc solidity API: grpc.shasta.trongrid.io:50052\njson-rpc API: https://api.shasta.trongrid.io/jsonrpc\nNile Testnet\nThe Nile testnet is used to test new features of TRON, and the code version is generally ahead of the mainnet.","metadata":{"loc":{"lines":{"from":1588,"to":1599}}}}],["1956",{"pageContent":"Website：http://nileex.io\nFaucet: http://nileex.io/join/getJoinPage\nBrowser: https://nile.tronscan.org\nStatus: http://nileex.io/status/getStatusPage\nhttp API: https://api.nileex.io/\nTrongrid http AP: https://nile.trongrid.io/\ngrpc API: grpc.nile.trongrid.io:50051\ngrpc fullnode API: grpc.nile.trongrid.io:50051\ngrpc solidity API: grpc.nile.trongrid.io:50061\nDatabase backup：http://47.90.243.177\nTronex Testnet\nTronex is mainly used for sun-network testing.\n\nWebsite: http://testnet.tronex.io\nFaucet:http://testnet.tronex.io/join/getJoinPage\nBrowser:http://3.14.14.175:9000\nStatus:http://testnet.tronex.io/status/getStatusPage\nFull Node API: https://testhttpapi.tronex.io\nEvent API: https://testapi.tronex.io\nPublic Fullnode：\n47.252.87.28\n47.252.85.13\nDatabase backup: http://47.252.81.247\nPrivate Chain network\nIf the nodes are not connected to the public network (mainnet or testnet), then it is a private network, please refer to the How to build a private chain。","metadata":{"loc":{"lines":{"from":1601,"to":1625}}}}],["1957",{"pageContent":"Before deploying your TRON Dapp to the mainnet, you can develop and test it on a private network. Similar to deploying a web development environment locally, you can also deploy a private chain locally to test the DAPP. Compared with the public test network , the local private network will provide faster interaction speed.\n\nThe related DAPP development tools, please refer to DAPP development tools。\n\nMulti-Signature\nSuggest Edits\nIntroduction\nMultiple signature functions allow for permission grading, and each permission can correspond to multiple private keys. This makes it possible to achieve multi-person joint control of accounts. This guide walks the user through TRON's multi-signature implementation and design.\n\nhttps://github.com/tronprotocol/TIPs/blob/master/tip-16.md","metadata":{"loc":{"lines":{"from":1627,"to":1636}}}}],["1958",{"pageContent":"https://github.com/tronprotocol/TIPs/blob/master/tip-16.md\n\nDesign\nThe scheme includes the three privilege levels of owner, duration, and active privilege. Owner privilege has the authority to execute all contracts, duration privilege is used for super delegates, and active is a custom privilege (can be combined with permission sets).\n\nStructure Description\n1. Account Modification\n\n\nmessage Account { \n   ... \n   Permission owner_permission = 31;\n   Permission witness_permission = 32;\n   repeated Permission active_permission = 33;\n }\nThree permission attributes are added to the account structure, namely owner_permission, witness_permission, and active_permission, where active_permission is a list and can be specified up to 8.\n\n2. Contract Type Modification","metadata":{"loc":{"lines":{"from":1636,"to":1653}}}}],["1959",{"pageContent":"2. Contract Type Modification\n\n\nmessage Transaction {\n   message Contract {\n     enum ContractType { \n       AccountCreateContract = 0; \n       ... \n       AccountPermissionUpdateContract = 46; \n       }\n     }  \n   }\n }\nAdded a transaction type AccountPermissionUpdateContract to update account permissions.\n\n3. AccountPermissionUpdateContract\n\n\nmessage AccountPermissionUpdateContract {\n   bytes owner_address = 1;\n   Permission owner = 2;   \n   Permission witness = 3; \n   repeated Permission actives = 4; \n }\nParameter\tDescription\nowner_address\tThe address of the account to be modified\nowner\tModified owner permission\nwitness\tModified witness permission (if it is a witness)\nactives\tModified actives permission\nThis interface overrides the original account permissions, so if you only want to modify the owner permissions, the witness (if it is a witness account) and actives also need to be set.\n\n4. Permission","metadata":{"loc":{"lines":{"from":1653,"to":1684}}}}],["1960",{"pageContent":"message Permission {\n   enum PermissionType {\n     Owner = 0;\n     Witness = 1;\n     Active = 2;\n   }\n   PermissionType type = 1; \n   int32 id = 2;     \n   string permission_name = 3;\n   int64 threshold = 4;\n   int32 parent_id = 5; \n   bytes operations = 6;  \n   repeated Key keys = 7;// \n }\nParameter\tDescription\nPermissionType\tPermission type, currently only supports three permissions.\nid\tThe value is automatically set by the system, with Owner id=0 and Witness id=1. Active id is incremented from 2 onwards. When the contract is executed, the id is used to specify which permission to use. For example, if the owner permission is used, the id is set to 0.\npermission_name\tPermission name, set by the user, limited to 32 bytes in length.\nthreshold\tThreshold, the corresponding operation is allowed only when the sum of the weights of the participating signatures exceeds the domain value. Requires a maximum value less than the Long type.\nparent_id\tCurrently only 0","metadata":{"loc":{"lines":{"from":1687,"to":1706}}}}],["1961",{"pageContent":"parent_id\tCurrently only 0\noperations\tA total of 32 bytes (256 bits), each representing the authority of a contract, a 1 means the authority to own the contract.\nPlease refer to below detailed example: \"Example of operations in active permissions\"\nkeys\tThe address and weight that jointly own the permission can be up to 5 keys.\n5. Key","metadata":{"loc":{"lines":{"from":1706,"to":1710}}}}],["1962",{"pageContent":"message Key {\n   bytes address = 1;\n   int64 weight = 2;\n }\nParameter\tDescription\naddress\tAddress with this privilege\nweight\tThis address has weight for this permission\n6. Transaction Modification\n\n\nmessage Transaction {\n      ...\n     int32 Permission_id = 5;\n }\nAdd a Permission_id field to the transaction, corresponding to Permission.id, which specifies which permission to use. The default is 0, which is the owner permission. It is not allowed to be 1, because the witness permission is only used for block creation and is not used to sign the transaction.\n\nOwner Permission\nOwnerPermission is the highest privilege of the account, used to control the ownership of the user, adjust the privilege structure, and the Owner privilege can also execute all contracts.\n\nThe Owner privilege has the following characteristics:","metadata":{"loc":{"lines":{"from":1713,"to":1732}}}}],["1963",{"pageContent":"The Owner privilege has the following characteristics:\n\nThe OwnerPermission address can be modified by OwnerPermission.\nWhen OwnerPermission is empty, the account address is assumed to have owner permission by default.\nWhen the account is newly created, the address of the account is automatically filled in the OwnerPermission, and the default domain value is 1, the only address in the keys is included and the weight is 1.\nWhen the permissionId is not specified when the contract is executed, OwnerPermission is used by default.\nWitness Permission\nThe super representative can use this privilege to manage the block nodes. Non-witness accounts do not have this permission.","metadata":{"loc":{"lines":{"from":1732,"to":1739}}}}],["1964",{"pageContent":"Example of usage scenario: A super representative deploys a block program on the cloud server. For account security, you can assign the block permission to another address. Since the address only has the outbound permission, there is no TRX rollout permission, and even if the private key on the server is compromised, TRX will not be lost.\n\nWitness block production node configuration:\n\nNo special configuration is required when the witness permissions are not modified.\nThe block node modified to witness permission needs to be reconfigured. The configuration items are as follows:\n\n#config.conf","metadata":{"loc":{"lines":{"from":1741,"to":1748}}}}],["1965",{"pageContent":"#config.conf\n\n// Optional.The default is empty.\n// It is used when the witness account has set the witnessPermission.\n// When it is not empty, the localWitnessAccountAddress represents the address of the witness account,\n// and the localwitness is configured with the private key of the witnessPermissionAddress in the witness account.\n// When it is empty,the localwitness is configured with the private key of the witness account.\n// Optional, default is empty.\n// Used to set the durationPermission when the witness account is set.\n// When the value is not empty, localWitnessAccountAddress represents the address of the witness account, and localwitness is the private key of the address in the durationPermission.\n// When the value is empty, localwitness is configured as the private key of the witness account.\n\n//localWitnessAccountAddress =","metadata":{"loc":{"lines":{"from":1748,"to":1760}}}}],["1966",{"pageContent":"//localWitnessAccountAddress =\n\nlocalwitness = [\n  f4df789d3210ac881cb900464dd30409453044d2777060a0c391cbdf4c6a4f57\n]\nActive Permissions\nActive permission is used to provide a combination of permissions, such as providing a permission to perform only the creation of accounts and transfer functions.\n\nActive permissions have the following features:","metadata":{"loc":{"lines":{"from":1760,"to":1768}}}}],["1967",{"pageContent":"Active permissions have the following features:\n\nWith the address of OwnerPermission can modify Active permissions\nThe address with the permission to execute AccountPermissionUpdateContract can also modify Active permissions\nSupport up to 8 combinations.\nThe id of the permission is automatically incremented from 2.\nWhen the account is newly created, an Active permission is automatically created, and the address of the account is filled in. The default domain value is 1, and only the account address is included in the keys and the weight is 1.\nCost\nWhen using the account update permission, that is, the AccountPermissionUpdate contract, 100TRX is charged.\nWhen using a multi-signature transaction, that is, a transaction that includes two or more signatures in the transaction, in addition to the transaction fee, 1TRX is charged.\nThe above fees can be revised by the proposal.\nAPI\nModify Permissions\nAccountPermissionUpdateContract, modify the permissions steps are as follows:","metadata":{"loc":{"lines":{"from":1768,"to":1781}}}}],["1968",{"pageContent":"Use the interface getaccount to query the account and get the original permissions\nModify the permission\nCreate a contract, signature\nSend a transaction\nhttp-demo\n\n\nhttp://{{host}}:{{port}}/wallet/accountpermissionupdate","metadata":{"loc":{"lines":{"from":1783,"to":1790}}}}],["1969",{"pageContent":"{\n  \"owner_address\": \"41ffa9466d5bf6bb6b7e4ab6ef2b1cb9f1f41f9700\",\n  \"owner\": {\n    \"type\": 0,\n    \"permission_name\": \"owner\",\n    \"threshold\": 2,\n    \"keys\": [{\n        \"address\": \"41F08012B4881C320EB40B80F1228731898824E09D\",\n        \"weight\": 1\n      },\n      {\n        \"address\": \"41DF309FEF25B311E7895562BD9E11AAB2A58816D2\",\n        \"weight\": 1\n      },\n      {\n        \"address\": \"41BB7322198D273E39B940A5A4C955CB7199A0CDEE\",\n        \"weight\": 1\n      }\n    ]\n  },\n  \"actives\": [{\n    \"type\": 2,\n    \"permission_name\": \"active0\",\n    \"threshold\": 3,\n    \"operations\": \"7fff1fc0037e0000000000000000000000000000000000000000000000000000\",\n    \"keys\": [{\n        \"address\": \"41F08012B4881C320EB40B80F1228731898824E09D\",\n        \"weight\": 1\n      },\n      {\n        \"address\": \"41DF309FEF25B311E7895562BD9E11AAB2A58816D2\",\n        \"weight\": 1\n      },\n      {\n        \"address\": \"41BB7322198D273E39B940A5A4C955CB7199A0CDEE\",\n        \"weight\": 1\n      }\n    ]\n  }]\n}","metadata":{"loc":{"lines":{"from":1793,"to":1832}}}}],["1970",{"pageContent":"For the definition and limitations of the parameter fields, please see Structure Description.\nExample of operations in active permissions\n\n\"operations\" is a hexadecimal coded sequence (little-endian byte order), 32 bytes (256 bits), and each bit represents the authority of a system contract type. The nth bit indicates the authority of the system contract type with ID n, its value 1 means that it has the authority to execute the type of system contract, its value 0 means it has not the authority. Please refer to the table below for the ID values of different system contract types:","metadata":{"loc":{"lines":{"from":1834,"to":1837}}}}],["1971",{"pageContent":"System Contract Type\tID\tDescription\nAccountCreateContract\t0\tcreate Account\nTransferContract\t1\tTRX transfer\nTransferAssetContract\t2\tTRC-10 token transfer\nVoteAssetContract\t3\tunused\nVoteWitnessContract\t4\tVote for Super Representatives\nWitnessCreateContract\t5\tApply to be a Super Representative Candidate\nAssetIssueContract\t6\tIssue TRC-10 Tokens\nWitnessUpdateContract\t8\tUpdate website URLs for Super Representative candidates\nParticipateAssetIssueContract\t9\tBuy TRC-10 Tokens\nAccountUpdateContract\t10\tupdate account name\nFreezeBalanceContract\t11\tStake1.0 stake\nUnfreezeBalanceContract\t12\tUnstake TRX staked in Stake1.0 phase\nWithdrawBalanceContract\t13\tWithdraw rewards\nUnfreezeAssetContract\t14\tUnfreeze issued TRC10 tokens\nUpdateAssetContract\t15\tUpdate TRC10 token parameters\nProposalCreateContract\t16\tCreate proposal\nProposalApproveContract\t17\tApprove proposal\nProposalDeleteContract\t18\tDelete propossal\nSetAccountIdContract\t19\tSet account ID\nCreateSmartContract\t30\tCreate a smart contract","metadata":{"loc":{"lines":{"from":1839,"to":1859}}}}],["1972",{"pageContent":"ProposalApproveContract\t17\tApprove proposal\nProposalDeleteContract\t18\tDelete propossal\nSetAccountIdContract\t19\tSet account ID\nCreateSmartContract\t30\tCreate a smart contract\nTriggerSmartContract\t31\tTrigger smart contract\nUpdateSettingContract\t33\tUpdate consume_user_resource_percent\nExchangeCreateContract\t41\tCreate an exchange\nExchangeInjectContract\t42\tExchange Inject\nExchangeWithdrawContract\t43\tExchange Withdraw\nExchangeTransactionContract\t44\tBancor Transaction\nUpdateEnergyLimitContract\t45\tAdjust the energy limit provided by the smart contract deployer\nAccountPermissionUpdateContract\t46\tUpdate account permissions\nClearABIContract\t48\tClear contract ABI\nUpdateBrokerageContract\t49\tUpdate SR Brokerage\nShieldedTransferContract\t51\tShielded transactions\nFreezeBalanceV2Contract\t54\tStake TRX\nUnfreezeBalanceV2Contract\t55\tUnstake TRX\nWithdrawExpireUnfreezeContract\t56\tWithdraw the unstaked principal that has passed the lock-up period\nDelegateResourceContract\t57\tResource delegate","metadata":{"loc":{"lines":{"from":1859,"to":1877}}}}],["1973",{"pageContent":"UnfreezeBalanceV2Contract\t55\tUnstake TRX\nWithdrawExpireUnfreezeContract\t56\tWithdraw the unstaked principal that has passed the lock-up period\nDelegateResourceContract\t57\tResource delegate\nUnDelegateResourceContract\t58\tCancel resource delegate\nCancelAllUnfreezeV2Contract\t59\tCancel all unstakes\nTo make it easier for users to read, take the binary big-endian byte order as an example to illustrate how to calculate the value of operations: The number of digits starts from 0, and corresponds to the ID of the system contract type from left to right. Convert a binary big-endian byte sequence to a hexadecimal little-endian byte sequence, that will be the value of operations, please refer to below examples:","metadata":{"loc":{"lines":{"from":1877,"to":1882}}}}],["1974",{"pageContent":"Operations Allowed\tBinary Code(big-endian)\tBinary Code(little-endian)\tHex Code(little-endian)\nTransferContract(1) & VoteWitnessContract(4)\t01001000 00000000 00000000 ...\t00010010 00000000 00000000 ...\t12 00 00 ...\nTransferContract(1) & UpdateAssetContract(15)\t01000000 00000001 00000000 ...\t000000010 10000000 00000000 ...\t02 80 00 ...\nAll system contracts\t11111110 11111111 11111000 ...\t01111111 11111111 00011111 ...\t7F FF 1F ...\nExample of calculation of operations in active authority\n\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport org.bouncycastle.util.encoders.Hex;","metadata":{"loc":{"lines":{"from":1884,"to":1894}}}}],["1975",{"pageContent":"enum ContractType {\n  UndefinedType(-1),\n  AccountCreateContract(0),\n  TransferContract(1),\n  TransferAssetContract(2),\n  VoteAssetContract(3),\n  VoteWitnessContract(4),\n  WitnessCreateContract(5),\n  AssetIssueContract(6),\n  WitnessUpdateContract(8),\n  ParticipateAssetIssueContract(9),\n  AccountUpdateContract(10),\n  FreezeBalanceContract(11),\n  UnfreezeBalanceContract(12),\n  WithdrawBalanceContract(13),\n  UnfreezeAssetContract(14),\n  UpdateAssetContract(15),\n  ProposalCreateContract(16),\n  ProposalApproveContract(17),\n  ProposalDeleteContract(18),\n  SetAccountIdContract(19),\n  CustomContract(20),\n  CreateSmartContract(30),\n  TriggerSmartContract(31),\n  GetContract(32),\n  UpdateSettingContract(33),\n  ExchangeCreateContract(41),\n  ExchangeInjectContract(42),\n  ExchangeWithdrawContract(43),\n  ExchangeTransactionContract(44),\n  UpdateEnergyLimitContract(45),\n  AccountPermissionUpdateContract(46),\n  ClearABIContract(48),\n  UpdateBrokerageContract(49),\n  ShieldedTransferContract(51),","metadata":{"loc":{"lines":{"from":1896,"to":1930}}}}],["1976",{"pageContent":"ExchangeTransactionContract(44),\n  UpdateEnergyLimitContract(45),\n  AccountPermissionUpdateContract(46),\n  ClearABIContract(48),\n  UpdateBrokerageContract(49),\n  ShieldedTransferContract(51),\n  MarketSellAssetContract(52),\n  MarketCancelOrderContract(53),\n  FreezeBalanceV2Contract(54),\n  UnfreezeBalanceV2Contract(55),\n  WithdrawExpireUnfreezeContract(56),\n  DelegateResourceContract(57),\n  UnDelegateResourceContract(58),\n  CancelAllUnfreezeV2Contract(59);","metadata":{"loc":{"lines":{"from":1930,"to":1943}}}}],["1977",{"pageContent":"private int num;\n\n  ContractType(int num) { this.num = num; }\n\n  public static ContractType getContractTypeByNum(int num) {\n    for(ContractType type : ContractType.values()){\n      if(type.getNum() == num)\n        return type;\n    }\n    return ContractType.UndefinedType;\n  }\n  public int getNum() {\n    return num;\n  }\n}\n\npublic class  operationsEncoderAndDecoder{\n\n  // Description: get operations code according to the input contract types\n  public static String operationsEncoder(ContractType[] contractId){\n\n    List<ContractType> list = new ArrayList<ContractType>(Arrays.asList(contractId));\n    byte[] operations = new byte[32];\n    list.forEach(e -> {\n      int num = e.getNum();\n      operations[num / 8] |= (1 << num % 8);\n    });\n\n    return Hex.toHexString(operations);\n  }\n\n  // Description: get all allowable contract types according to the operations code\n  public static List<String> operationsDecoder(String operations){","metadata":{"loc":{"lines":{"from":1945,"to":1977}}}}],["1978",{"pageContent":"return Hex.toHexString(operations);\n  }\n\n  // Description: get all allowable contract types according to the operations code\n  public static List<String> operationsDecoder(String operations){\n\n    List<String> contractIDs = new ArrayList<>();\n    byte[] opArray = Hex.decode(operations);\n    for(int i=0;i<32;i++) // 32 bytes\n    {\n      for(int j=0;j<8;j++)\n      {\n        if((opArray[i]>>j & 0x1) ==1) {\n          contractIDs.add(ContractType.getContractTypeByNum(i*8+j).name());\n        }\n      }\n    }\n    return contractIDs;\n  }\n\n  public static void main(String[] args) {\n    ContractType[] contractID = {ContractType.TransferContract, ContractType.VoteWitnessContract, ContractType.FreezeBalanceV2Contract };\n    String operations = operationsEncoder(contractID);\n    System.out.println(operations);\n    // output: 1200000000004000000000000000000000000000000000000000000000000000","metadata":{"loc":{"lines":{"from":1977,"to":2001}}}}],["1979",{"pageContent":"List<String> contractIDs = operationsDecoder(operations);\n    contractIDs.forEach(e ->{\n      System.out.print(e + \" \");\n    });\n    // output: TransferContract VoteWitnessContract FreezeBalanceV2Contract\n  }\n}\nConstruct and execute multi-signature transactions\nCreate a transaction, the same as the construction process of a non-multiple signature transaction\n2, specify the Permission_id, the default is 0, indicating the owner-permission\nThe user A signs the post-signature transaction to B through other means.\nUser B signs, and the signed transaction is sent to C by other means.\n...\nn. The last user who completed the signature broadcasts the transaction to the node.\nN+1, verify that the sum of the weights of the multi-signature is greater than the domain value, accept the transaction, otherwise reject the transaction\nCode example:\n\nhttps://github.com/tronprotocol/wallet-cli/blob/develop/src/main/java/org/tron/demo/MultiSignDemo.java","metadata":{"loc":{"lines":{"from":2003,"to":2020}}}}],["1980",{"pageContent":"https://github.com/tronprotocol/wallet-cli/blob/develop/src/main/java/org/tron/demo/MultiSignDemo.java\n\nOther multi-sign related Interfaces\nQuery API related to multi-sign transaction:\n\nQuery Signed Address\n\ncurl -X POST  http://127.0.0.1:8090/wallet/getapprovedlist -d '{\"transaction\"}'\n \nrpc GetTransactionApprovedList(Transaction) returns (TransactionApprovedList) { }\nQuery Transaction Signature Weight","metadata":{"loc":{"lines":{"from":2020,"to":2030}}}}],["1981",{"pageContent":"curl -X POST  http://127.0.0.1:8090/wallet/getapprovedlist -d '{\"transaction\"}'\n \nrpc GetTransactionApprovedList(Transaction) returns (TransactionApprovedList) { }\nQuery Transaction Signature Weight\n\ncurl -X POST  http://127.0.0.1:8090/wallet/getsignweight -d '{\"transaction\"}'\n \nrpc GetTransactionSignWeight (Transaction) returns (TransactionSignWeight) {}\nThe owner-permission and an active-permission are automatically generated during account creation. The owner-permission contains one key, with the permissions and thresholds both set as 1. The active-permission also contains a key with permissions and thresholds set at 1. The operations are \"7fff1fc0033efb07000000000000000000000000000000000000000000000000\", which means all operations except AccountPermissionUpdateContract are supported.\n\n\nMulti-Signature Example Process Flow\nSuggest Edits\nTronWeb allows developers to easily perform multi-signing with the tronWeb.trx.multiSign method. The is an example of the workflow.","metadata":{"loc":{"lines":{"from":2030,"to":2043}}}}],["1982",{"pageContent":"Multi-Signature Example Process Flow\nSuggest Edits\nTronWeb allows developers to easily perform multi-signing with the tronWeb.trx.multiSign method. The is an example of the workflow.\n\n1. Create transaction\nJavaScript\n\nconst originalTransaction = await tronWeb.transactionBuilder.sendTrx('41e0d5217904dcb2d5453c2359b86df9673046c4ce', 100000, '4164eb61f763d3374a998989f06929c1bad87175ba');\n2. Perform the Multi-Signing\nJavaScript\n\nlet signedTransaction = await tronWeb.trx.multiSign(originalTransaction, '47e5e1a590a44e7e6f4349a4e3ea6a4f9a791e3fccb115ffbddffdbf6d0588e6', 2);\n\nsignedTransaction = await tronWeb.trx.multiSign(signedTransaction, 'd5f244307d3ab6dc5739b83ec913b662a24f87e873190e9c1a2d9709f579540c', 2);\n\nsignedTransaction = await tronWeb.trx.multiSign(signedTransaction, '9944b7010db0d44a861bca112e40365a934727c5c17f8dfd3b9cc7b31e8aeaf1', 2);\nSignature result:\n\nJSON","metadata":{"loc":{"lines":{"from":2043,"to":2061}}}}],["1983",{"pageContent":"{\n  \"signature\": [\n    \"2c25a81333fd83edec33ebae16cb3dfb979cfc4ce035665953c2b61179b06cb9f0625c660947404c5a1e17331cc375579bed7295ebe6635eb30ab79e73c16e6a01\",\n    \"86cfad6c7bc086c04c27267ef4a3c5ae3ea394e05e8402713b0b7e624546b76e30518ebf897c7495b29bbb372ba94d65ba927bd48a4fa9c36e439c975b7f88f500\",\n    \"4d980f85de1a1bcc0c45fa118276a3a6319a6cf404ee68f5d460fb075bd41f6a8702e0448db2eb55cd74c4dd85d53909597eb05401a48aaa44bdb3a327e47d5001\"\n  ],\n  \"txID\": \"7034c0a26ffc1010c2cba113d9685cbe464793abe0a1d0d21c2e593df7990a84\",\n  \"raw_data\": {\n    \"contract\": [\n      {\n        \"parameter\": {\n          \"value\": {\n            \"amount\": 100000,\n            \"owner_address\": \"4164eb61f763d3374a998989f06929c1bad87175ba\",\n            \"to_address\": \"41e0d5217904dcb2d5453c2359b86df9673046c4ce\"\n          },\n          \"type_url\": \"type.googleapis.com/protocol.TransferContract\"\n        },\n        \"type\": \"TransferContract\",\n        \"Permission_id\": 2\n      }\n    ],\n    \"ref_block_bytes\": \"02d6\",","metadata":{"loc":{"lines":{"from":2063,"to":2085}}}}],["1984",{"pageContent":"\"type_url\": \"type.googleapis.com/protocol.TransferContract\"\n        },\n        \"type\": \"TransferContract\",\n        \"Permission_id\": 2\n      }\n    ],\n    \"ref_block_bytes\": \"02d6\",\n    \"ref_block_hash\": \"cf96636fd7767b20\",\n    \"expiration\": 1555454166000,\n    \"timestamp\": 1555454106555\n  },\n  \"raw_data_hex\": \"0a0202d62208cf96636fd7767b2040f087acc2a22d5a69080112630a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412320a154164eb61f763d3374a998989f06929c1bad87175ba121541e0d5217904dcb2d5453c2359b86df9673046c4ce18a08d06280270bbb7a8c2a22d\"\n}\nThe method requires passing the original transaction, the private key for signing, and the permission ID. The permission ID should be generated when you update the account permission. You can overview your account permission and check the permission ID by calling the getAccount method.","metadata":{"loc":{"lines":{"from":2085,"to":2098}}}}],["1985",{"pageContent":"Notes: If you use active permission, we will re-calculate the transaction ID, which differs from the original transaction after tronWeb.transactionBuilder.sendTrx or other methods.\n\n3. Check Transaction's Sign Weight\nThe function tronweb.trx.getSignWeightallows you to check how many addresses have signed the transaction and the current weight. This function can be run either during the multi-signing process or after its completion.\n\nJavaScript\n\nconst signWeight = await tronWeb.trx.getSignWeight(signedTransaction, 2);\nResult:\n\nJSON","metadata":{"loc":{"lines":{"from":2100,"to":2110}}}}],["1986",{"pageContent":"{\n  \"result\": {\n    \n  },\n  \"approved_list\": [\n    \"4164eb61f763d3374a998989f06929c1bad87175ba\",\n    \"41e0d5217904dcb2d5453c2359b86df9673046c4ce\",\n    \"41e3222fff601087f76ee803c0e09596b21282f10d\"\n  ],\n  \"permission\": {\n    \"operations\": \"7fff1fc0037e0000000000000000000000000000000000000000000000000000\",\n    \"keys\": [\n      {\n        \"address\": \"4164eb61f763d3374a998989f06929c1bad87175ba\",\n        \"weight\": 1\n      },\n      {\n        \"address\": \"41e0d5217904dcb2d5453c2359b86df9673046c4ce\",\n        \"weight\": 1\n      },\n      {\n        \"address\": \"41e3222fff601087f76ee803c0e09596b21282f10d\",\n        \"weight\": 1\n      }\n    ],\n    \"threshold\": 3,\n    \"id\": 2,\n    \"type\": \"Active\",\n    \"permission_name\": \"active0\"\n  },\n  \"current_weight\": 3,\n  \"transaction\": {\n    \"result\": {\n      \"result\": true\n    },\n    \"txid\": \"7100eddcc788b0956e0224470111bffaa99b465781a2abe75cbd2a29c82ade42\",\n    \"transaction\": {\n      \"signature\": [","metadata":{"loc":{"lines":{"from":2112,"to":2149}}}}],["1987",{"pageContent":"\"transaction\": {\n    \"result\": {\n      \"result\": true\n    },\n    \"txid\": \"7100eddcc788b0956e0224470111bffaa99b465781a2abe75cbd2a29c82ade42\",\n    \"transaction\": {\n      \"signature\": [\n        \"bfc89f7a49fa233cfb2484c5e1fdb3c687815c68f198fc81b0cccbc1ccbb09c611d0f3d90a32d7e8dc1d85fde43c10b7cb586edde1833f7974fda42e951b94ed00\",\n        \"8c167cd077d82f5b36e1d2bbc831711523dcc71494830cee6181b1435c44b22b751d6a72b425948db8aac3fb5f736bd2f9e689e18941002cafab1ff3caeb354d01\",\n        \"64921a4760fd2b2fb8f76bb7feab50d49d6298774f120164c050f4e154d624445e9a620b051116ec674f62640adb5ff2d6b0934ba9187db1197d65f368fd5ebc00\"\n      ],\n      \"txID\": \"7100eddcc788b0956e0224470111bffaa99b465781a2abe75cbd2a29c82ade42\",\n      \"raw_data\": {\n        \"contract\": [\n          {\n            \"parameter\": {\n              \"value\": {\n                \"amount\": 100000,\n                \"owner_address\": \"4164eb61f763d3374a998989f06929c1bad87175ba\",\n                \"to_address\": \"41e0d5217904dcb2d5453c2359b86df9673046c4ce\"","metadata":{"loc":{"lines":{"from":2149,"to":2168}}}}],["1988",{"pageContent":"\"amount\": 100000,\n                \"owner_address\": \"4164eb61f763d3374a998989f06929c1bad87175ba\",\n                \"to_address\": \"41e0d5217904dcb2d5453c2359b86df9673046c4ce\"\n              },\n              \"type_url\": \"type.googleapis.com/protocol.TransferContract\"\n            },\n            \"type\": \"TransferContract\"\n          }\n        ],\n        \"ref_block_bytes\": \"03a9\",\n        \"ref_block_hash\": \"f04705dfcc42a285\",\n        \"expiration\": 1555454799000,\n        \"timestamp\": 1555454740761\n      },\n      \"raw_data_hex\": \"0a0203a92208f04705dfcc42a2854098d9d2c2a22d5a69080112630a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412320a154164eb61f763d3374a998989f06929c1bad87175ba121541e0d5217904dcb2d5453c2359b86df9673046c4ce18a08d062802709992cfc2a22d\"\n    }\n  }\n}\n4. Check Approved List\nThe function tronWeb.trx.getApprovedList allows you to check how many addresses have already signed (approved) the transaction.","metadata":{"loc":{"lines":{"from":2168,"to":2187}}}}],["1989",{"pageContent":"JavaScript\n\nconst approvedList = await tronWeb.trx.getApprovedList(signedTransaction);\nResult:\n\nJSON","metadata":{"loc":{"lines":{"from":2189,"to":2194}}}}],["1990",{"pageContent":"{\n  \"result\": {\n    \n  },\n  \"approved_list\": [\n    \"4164eb61f763d3374a998989f06929c1bad87175ba\",\n    \"41e0d5217904dcb2d5453c2359b86df9673046c4ce\",\n    \"41e3222fff601087f76ee803c0e09596b21282f10d\"\n  ],\n  \"transaction\": {\n    \"result\": {\n      \"result\": true\n    },\n    \"txid\": \"479d294569f9d16bb9db643383eae40d4d6df0fa081b6918cf5d831f6fcac1bc\",\n    \"transaction\": {\n      \"signature\": [\n        \"fe5eaa06536e431143612d7b967059480ade185c70ad3c7529ed72c91b74b5c705cc231a857247e5cec31cb1aceb2d9016d2fb2bf57124ec5314b2b1688d060701\",\n        \"6951c7e651fdf79102d655acd6ed57e9c2ba8d4e9b7c1486b54c7d9912bf9e58bb5a4876593532f889858e819b41bb9ae60da7693a008fff7d335da34b9088e401\",\n        \"9960d832d5d71556124ea04e783e7e15d4437c27933b90d834670d58f590a3a255d3081d12b7ddccd8a84060ad1294b0c19f9ee63fa12fd5c602695ff32f8b6300\"\n      ],\n      \"txID\": \"479d294569f9d16bb9db643383eae40d4d6df0fa081b6918cf5d831f6fcac1bc\",\n      \"raw_data\": {\n        \"contract\": [\n          {\n            \"parameter\": {","metadata":{"loc":{"lines":{"from":2196,"to":2220}}}}],["1991",{"pageContent":"],\n      \"txID\": \"479d294569f9d16bb9db643383eae40d4d6df0fa081b6918cf5d831f6fcac1bc\",\n      \"raw_data\": {\n        \"contract\": [\n          {\n            \"parameter\": {\n              \"value\": {\n                \"amount\": 100000,\n                \"owner_address\": \"4164eb61f763d3374a998989f06929c1bad87175ba\",\n                \"to_address\": \"41e0d5217904dcb2d5453c2359b86df9673046c4ce\"\n              },\n              \"type_url\": \"type.googleapis.com/protocol.TransferContract\"\n            },\n            \"type\": \"TransferContract\"\n          }\n        ],\n        \"ref_block_bytes\": \"03e5\",\n        \"ref_block_hash\": \"3dfe142fc7c242bf\",\n        \"expiration\": 1555454979000,\n        \"timestamp\": 1555454919646\n      },","metadata":{"loc":{"lines":{"from":2220,"to":2240}}}}],["1992",{"pageContent":"}\n        ],\n        \"ref_block_bytes\": \"03e5\",\n        \"ref_block_hash\": \"3dfe142fc7c242bf\",\n        \"expiration\": 1555454979000,\n        \"timestamp\": 1555454919646\n      },\n      \"raw_data_hex\": \"0a0203e522083dfe142fc7c242bf40b8d7ddc2a22d5a69080112630a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412320a154164eb61f763d3374a998989f06929c1bad87175ba121541e0d5217904dcb2d5453c2359b86df9673046c4ce18a08d06280270de87dac2a22d\"\n    }\n  }\n}\n5. Broadcast Transaction\nOnce multi-signing completes, you can broadcast the signed transaction directly and check the transaction by using getTransactionById later.","metadata":{"loc":{"lines":{"from":2240,"to":2252}}}}],["1993",{"pageContent":"JavaScript\n\nconst result = await tronWeb.trx.broadcast(signedTransaction);\nResult:\n\nJSON","metadata":{"loc":{"lines":{"from":2254,"to":2259}}}}],["1994",{"pageContent":"{\n  \"result\": true,\n  \"transaction\": {\n    \"signature\": [\n      \"9ea568d070de64ce674d9db0d1c0dddbdf83435b4e60b27860fd7a017c071f9858062671ff938600b5cbd8b3475b2ab16df4c2076654f18a928e972ce3fe5e3600\",\n      \"202db297c8b31d51e1ad9406aaad030b602af865810a58d19910858bba3825ef0143b3013b33ad15aa6680b6b735efd1b8d5a913f42ed7d04792b9200f69097401\",\n      \"5c143c98ff4f9a7837eacd8ed26320b4a5544954241ca7985d73e6d099b1f8df0667d686e9e6ab5a2ae6be62e6795523b2cf423b3fc3a88523faf2408dac753001\"\n    ],\n    \"txID\": \"b25f3449384b0ea6b8c201596ed6998fb5581f4a68c5d467a268a4e60499ff1b\",\n    \"raw_data\": {\n      \"contract\": [\n        {\n          \"parameter\": {\n            \"value\": {\n              \"amount\": 100000,\n              \"owner_address\": \"4164eb61f763d3374a998989f06929c1bad87175ba\",\n              \"to_address\": \"41e0d5217904dcb2d5453c2359b86df9673046c4ce\"\n            },\n            \"type_url\": \"type.googleapis.com/protocol.TransferContract\"\n          },\n          \"type\": \"TransferContract\",","metadata":{"loc":{"lines":{"from":2261,"to":2281}}}}],["1995",{"pageContent":"},\n            \"type_url\": \"type.googleapis.com/protocol.TransferContract\"\n          },\n          \"type\": \"TransferContract\",\n          \"Permission_id\": 2\n        }\n      ],\n      \"ref_block_bytes\": \"0412\",\n      \"ref_block_hash\": \"614e7424dfcf96fb\",\n      \"expiration\": 1555455114000,\n      \"timestamp\": 1555455056464\n    },\n    \"raw_data_hex\": \"0a0204122208614e7424dfcf96fb4090f6e5c2a22d5a69080112630a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412320a154164eb61f763d3374a998989f06929c1bad87175ba121541e0d5217904dcb2d5453c2359b86df9673046c4ce18a08d06280270d0b4e2c2a22d\"\n  }\n}","metadata":{"loc":{"lines":{"from":2281,"to":2295}}}}],["1996",{"pageContent":"Consensus\nSuggest Edits\nOverview","metadata":{"loc":{"lines":{"from":2297,"to":2299}}}}],["1997",{"pageContent":"Blockchain is a distributed accounting system. There can be thousands of nodes in a blockchain system, each independently storing the same ledger. If new transaction data is to be written into the ledger, approvals from these nodes are needed. Achieving this goal in an untrusted distributed environment is a complicated systematic quest. The blockchain system operates normally means each node in the blockchain can always keep the same ledger, provided that most nodes in the system are honest and reliable. In order to ensure that honest and reliable nodes can jointly supervise the transaction data written into the ledgers, each blockchain system needs to build its consensus, which is equivalent to the constitution of the blockchain. As long as the vast majority of nodes comply with the consensus requirements, it can guarantee that the results will undoubtedly be credible, even in an untrusted distributed environment. Therefore, the consensus is an agreement that honest nodes achieve to","metadata":{"loc":{"lines":{"from":2300,"to":2300}}}}],["1998",{"pageContent":"requirements, it can guarantee that the results will undoubtedly be credible, even in an untrusted distributed environment. Therefore, the consensus is an agreement that honest nodes achieve to maintain the stability of the blockchain.","metadata":{"loc":{"lines":{"from":2300,"to":2300}}}}],["1999",{"pageContent":"Different blockchain systems will have a unique way of implementation. There are several types of consensus, and the most commonly used are POW, POS, and DPoS. This article will mainly introduce the DPoS consensus on which TRON based. We will also explain the essential components and mechanisms of DPoS.\n\nBlock Producing Process\nThe witnesses of the blockchain network collect the newly generated transactions in the blockchain network and verify the legality of these transactions, then package the transactions in a block, record them as a new page on the ledger, and broadcast the page to the entire blockchain network. Next, other nodes will receive the new page and verify the legality of the transaction data on the page and add it to their ledger. Finally, the witnesses will repeat this process so all new transaction data in the blockchain system can be recorded in the ledger.","metadata":{"loc":{"lines":{"from":2302,"to":2305}}}}],["2000",{"pageContent":"DPoS Overview\nThe role of consensus is to select the witnesses in the blockchain system. The witnesses verify the transaction data, keep the account to broadcast new accounts to other nodes in the network, and obtain the approval of the new accounts from other nodes. As a specific implementation of consensus, DPoS works in the following way:","metadata":{"loc":{"lines":{"from":2307,"to":2308}}}}],["2001",{"pageContent":"The DPoS consensus selects some nodes as witnesses in the blockchain system based on the number of votes they receive. First, when the blockchain system starts to operate, a certain number of tokens will be issued, and then the tokens will be given to nodes in the blockchain system. Then, a node can apply to be a witness candidate in the blockchain system with a portion of the tokens. Any token-holding node in the blockchain system can vote for these candidates. Every t period, the votes for all the candidates will be counted. Top N candidate nodes with the most votes will become witnesses for the following t period. After t period, the votes will be counted again to elect the new witnesses, and the cycle continues.\n\nLet us see how it's realized in the context of TRON:\n\nDefinition\nTRON: refers to the TRON network. The document does not distinguish between TRON, TRON blockchain, TRON blockchain system, etc.","metadata":{"loc":{"lines":{"from":2310,"to":2315}}}}],["2002",{"pageContent":"Let us see how it's realized in the context of TRON:\n\nDefinition\nTRON: refers to the TRON network. The document does not distinguish between TRON, TRON blockchain, TRON blockchain system, etc.\n\nTRON token: refers to the equity token issued by and circulating in TRON, known as TRX.\n\nWitnesses candidates: nodes eligible for becoming witnesses in TRON.\n\nWitnesses: nodes in TRON qualified for book-keeping. They are usually called witnesses in DPoS. There will be 27 witnesses in TRON, which are also called super nodes (or SR). Here, we will not distinguish between a bookkeeper, witness, supernode, SR, Etc.\n\nBookkeeping: The process of verifying transactions and recording them in a ledger. Because blocks carry ledgers in TRON, the bookkeeping process is also called block generation. We will not distinguish between bookkeeping and block generation in the document.\n\nBookkeeping order: block generation order. The descending order of the 27 witnesses based on the number of votes they receive.","metadata":{"loc":{"lines":{"from":2315,"to":2328}}}}],["2003",{"pageContent":"Bookkeeping order: block generation order. The descending order of the 27 witnesses based on the number of votes they receive.\n\nBlock time: TRON sets block time to be 3 seconds. This means a block is generated every 3 seconds.\n\nSlot: after each block is generated, it can be put into a slot, and each block will take up a slot. For example, there are 20 slots for every minute. When a block is generated during the block time, the corresponding slot will be filled. However, if a block is not generated, then the corresponding slot will be empty. The next block generated will fill in a new corresponding slot.\n\nEpoch: TRON sets an Epoch to be 6 hours. The last two block time of an Epoch is the maintenance period, during which the block generating orders for the next Epoch will be decided.","metadata":{"loc":{"lines":{"from":2328,"to":2334}}}}],["2004",{"pageContent":"Epoch: TRON sets an Epoch to be 6 hours. The last two block time of an Epoch is the maintenance period, during which the block generating orders for the next Epoch will be decided.\n\nMaintenance period: TRON sets the period to be two block time, which is 6 seconds. This period is used to count the votes for candidates. There are 4 Epochs in 24 hours, and naturally, four maintenance periods. Witnesses pause to produce block during the maintenance period. The block generation order for the next epoch will be decided in the maintenance period.\n\n904\nElection Mechanism\nVotes\nIn TRON, 1 TRX equals one vote.\n\nVoting process\nIn TRON, voting for candidates is a special transaction. Nodes can vote for candidates by generating a voting transaction.\n\nVote counting\nDuring each maintenance period, the votes for candidates will be counted. The top 27 candidates with the most votes will be the witnesses for the next Epoch.","metadata":{"loc":{"lines":{"from":2334,"to":2347}}}}],["2005",{"pageContent":"Vote counting\nDuring each maintenance period, the votes for candidates will be counted. The top 27 candidates with the most votes will be the witnesses for the next Epoch.\n\nBlock generation mechanism\nDuring each Epoch, the 27 witnesses will take turns to generate blocks according to the bookkeeping order. Each witness can only generate blocks when it is their turn. Witnesses package the data of multiple verified transactions into each block. The witness will sign the data of this block with their private key and fill witness_signature, address of the witness, the block height, the time that block is generated, Etc into the block. The hash of the previous block will be included in each new block as the parent Hash.\n\nThrough storing the hash of the previous block, blocks are logically connected. Eventually, they form a chain. A typical blockchain structure is shown in the following picture:","metadata":{"loc":{"lines":{"from":2347,"to":2353}}}}],["2006",{"pageContent":"Through storing the hash of the previous block, blocks are logically connected. Eventually, they form a chain. A typical blockchain structure is shown in the following picture:\n\n904\nIn ideal circumstances, the bookkeeping process in a DPoS consensus-based blockchain system proceeds according to the bookkeeping order calculated in advance. Witnesses generate blocks in turn (see figure a). However, the blockchain network is a distributed and untrusted complex system in the following three ways.\n\nDue to a poor network environment, blocks generated by some witnesses cannot be received by other witnesses at an invalid time (see figure b1 and b2).\n\nThe normal operation of a certain witness cannot always be guaranteed (see figure c).\n\nSome malicious witnesses will generate fork blocks in order to fork the chain (see figure d).","metadata":{"loc":{"lines":{"from":2353,"to":2362}}}}],["2007",{"pageContent":"The normal operation of a certain witness cannot always be guaranteed (see figure c).\n\nSome malicious witnesses will generate fork blocks in order to fork the chain (see figure d).\n\n904\n904\nAs mentioned above, the basis for the blockchain system to operate normally is that most of the nodes in the system are honest and reliable. Furthermore, the primary guarantee for the security of the blockchain system is the ledger's security, meaning that illegal data cannot be written into the ledger maliciously, and ledger copies saved on each node should be consistent. Based on the DPoS consensus, the bookkeeping process is carried out by witnesses. Therefore, the safety of TRON depends on the reliability of the majority of the witnesses. TRON has put confirmed blocks in the system which are irreversible. At the same time, to resist the malicious behaviours of a small number of witness nodes, TRON recognizes the longest chain as the main chain based on \"the longest chain principle\".","metadata":{"loc":{"lines":{"from":2362,"to":2368}}}}],["2008",{"pageContent":"The confirmed block principle\n\nThe newly produced blocks are unconfirmed. Only those blocks that are \"approved\" by more than 70% (i.e. 27 * 70% = 19, rounded up) of the 27 Witnesses are considered irreversible blocks, commonly referred to as solidified blocks. The entire blockchain network has confirmed the transactions contained in the solidified blocks. The way to \"approve\" the unconfirmed state block is that witness producing subsequent blocks after it. The point to be emphasized here is that the Witnesses producing these 18 blocks must be different from each other and the Witnesses producing the 103rd block.\n\nThe longest chain principle\n\nWhen a fork occurs, an honest witness would always choose to produce blocks on the longest chain.","metadata":{"loc":{"lines":{"from":2370,"to":2376}}}}],["2009",{"pageContent":"The longest chain principle\n\nWhen a fork occurs, an honest witness would always choose to produce blocks on the longest chain.\n\nIncentive Model\nTRON sets up an incentive model to encourage node participation and network expansion to ensure the safe and efficient operation of the blockchain system. Witnesses who complete block production tasks will be rewarded with TRX. The model also specifies that for every confirmed block produced by a witness, the witness will receive 32 TRX. In addition, the first 127th witnesses (including witness candidates) with the most votes will receive proportional rewards during the maintenance period of each Epoch.","metadata":{"loc":{"lines":{"from":2376,"to":2381}}}}],["2010",{"pageContent":"Proposal-based Parameter Adjustment\nA notable characteristic of DPoS is that any parameter adjustment can be proposed on the chain, and witnesses will decide whether to approve the proposal by starting a vote. The advantage of this method is that it avoids hard fork upgrades when adding new features. Currently, The TRON network parameter please refer to here or Tronscan.\n\nAppendix: Reference Documentations\nDelegated Proof of Stake (DPoS) – Total Beginners Guide\nConsensus Algorithms: Proof-of-Stake & Cryptoeconomics\nRole of Delegates\nWhat is Delegated Proof of Stake?\n\nOverview\nSuggest Edits\nTRX\nTRX is the primary currency used in the TRON network. TRX can be used to vote for super representatives and obtain bandwidth. Staking the TRX balance in a wallet gives the user TRON Power (TP), which is used to vote for Super Representatives (SRs).","metadata":{"loc":{"lines":{"from":2383,"to":2395}}}}],["2011",{"pageContent":"TRC10\nTRC-10 tokens are issued by system contract. TRC-10 is a technical token standard supported by the TRON blockchain natively without the TRON Virtual Machine (TVM). Every account is capable of issuing tokens at the expense of 1024 TRX. Users can lock their tokens in separately. To issue tokens, the issuer needs to specify a token name, total capitalization, the exchange rate to TRX, circulation duration, description, website, maximum bandwidth points consumption per account, total bandwidth points consumption, and token stake.\n\nTRC20\nTRC‌-20 is a technical standard used for smart contracts on the TRON blockchain for implementing tokens with the TRON Virtual Machine (TVM). It is fully compatible with ERC‌-20.\n\nTRC721\nTRC-721 is a set of standard interfaces, for issuing non-fungible tokens(NFT) on the TRON network. TRC-721 is fully compatible with ERC-721.","metadata":{"loc":{"lines":{"from":2397,"to":2404}}}}],["2012",{"pageContent":"TRC721\nTRC-721 is a set of standard interfaces, for issuing non-fungible tokens(NFT) on the TRON network. TRC-721 is fully compatible with ERC-721.\n\nTRX\nSuggest Edits\nTRX is the most important cryptocurrency on the TRON network and has a wide range of application scenarios. The rewards on the TRON network are issued in the form of TRX. Users can obtain resources and voting rights by staking TRX. TRX is also used as primary form of collateral in the DeFi lending market, as a unit of account in NFT marketplaces, and so on.\n\nThe TRON network allows developers to create decentralized applications, also called DAPPs, which share limited TRON network resources, so TRON needs a mechanism to prevent DAPPs from accidentally or maliciously occupying all network resources.","metadata":{"loc":{"lines":{"from":2404,"to":2411}}}}],["2013",{"pageContent":"How much TRON network resources consume is measured by bandwidth and energy, where bandwidth is a unit that measures the size of transactions in bytes stored in the blockchain database, and energy is a unit that measures the amount of computing power required by the TRON virtual machine to execute a specific operation. When users make a transaction, they have to pay for the bandwidth and energy required to execute the transaction, and TRON supports paying for bandwidth and energy by burning TRX.\n\nTherefore, even if a malicious dapp submitted an infinite loop, the transaction would eventually run out of TRX and terminate, allowing the network to return to normal.\n\nMining TRX\nMinting is the process in which new TRX gets created on the TRON network. The underlying TRON protocol creates the new TRX, and it is not possible for a user to create TRX.","metadata":{"loc":{"lines":{"from":2413,"to":2418}}}}],["2014",{"pageContent":"Mining TRX\nMinting is the process in which new TRX gets created on the TRON network. The underlying TRON protocol creates the new TRX, and it is not possible for a user to create TRX.\n\nTRX is minted when a Super Representative produces a block on the TRON network. Currently for each new block, the TRON protocol will generate a block reward of 16TRX and a voting reward of 160TRX. Block rewards and voting rewards are dynamic parameters of the TRON network and can be modified through committee proposals.\n\nBurning TRX\nTRX can get destroyed by a process called 'burning'. When TRX gets burned, it gets removed from circulation permanently.\n\nEvery transaction on TRON consumes bandwidth or energy. When a user's bandwidth or energy is insufficient, they need to burn TRX to pay for the resources required for the transaction. The burning of TRX can not only help reduce the inflation of TRX, but also prevent accidental or malicious transactions from occupying all TRON network resources.","metadata":{"loc":{"lines":{"from":2418,"to":2426}}}}],["2015",{"pageContent":"Denominations of TRX\nSince many transactions on TRON are small, TRON has introduced a currency denomination, sun, which can be referenced for smaller amounts. The technical implementation of many applications is calculated based on sun. The conversion formula between TRX and sun is as below:\n\n\n1 TRX = 1000000 sun\nTransferring TRX\nTransferring TRX is a TransferContract type of TRON network transaction which transfers TRX from one account to another account. Here are examples of transferring TRX using the HTTP API and the tronweb SDK:\n\nHTTP API\nThe following creates an unsigned TRX transfer transaction through the fullnode HTTP interface wallet/createtransaction:\n\njavascript=","metadata":{"loc":{"lines":{"from":2428,"to":2439}}}}],["2016",{"pageContent":"HTTP API\nThe following creates an unsigned TRX transfer transaction through the fullnode HTTP interface wallet/createtransaction:\n\njavascript=\n\ncurl -X POST  https://api.shasta.trongrid.io/wallet/createtransaction -d \n    '{\n        \"to_address\": \"TVDGpn4hCSzJ5nkHPLetk8KQBtwaTppnkr\", \n        \"owner_address\": \"TM2TmqauSEiRf16CyFgzHV2BVxBejY9iyR\", \n        \"amount\": 10000000,\n        \"visible\":true\n    }'\nAfter creating the unsigned transaction through the above interface, you need to sign and broadcast the transaction to finally complete the TRX transfer.\n\ntronweb SDK\nLet's create a TRX transfer transaction through tronweb:\n\njavascript=","metadata":{"loc":{"lines":{"from":2439,"to":2456}}}}],["2017",{"pageContent":"tronweb SDK\nLet's create a TRX transfer transaction through tronweb:\n\njavascript=\n\nconst privateKey = \"...\"; \nvar fromAddress = \"TM2TmqauSEiRf16CyFgzHV2BVxBejY9iyR\"; //address _from\nvar toAddress = \"TVDGpn4hCSzJ5nkHPLetk8KQBtwaTppnkr\"; //address _to\nvar amount = 10000000; //amount，in sun\n// Create an unsigned TRX transfer transaction\nconst tradeobj = await tronWeb.transactionBuilder.sendTrx(\n      toAddress,\n      amount,\n      fromAddress\n);\n// Sign\nconst signedtxn = await tronWeb.trx.sign(\n      tradeobj,\n      privateKey\n);\n// Broadcast\nconst receipt = await tronWeb.trx.sendRawTransaction(\n      signedtxn\n).then(output => {\n  console.log('- Output:', output, '\\n');\n  return output;\n});\nQuerying TRX\nHTTP API\nYou can query an account's TRX balance through the fullnode HTTP API wallet/getaccount. The balance field of the returned value is the TRX balance, in sun:\njavascript=","metadata":{"loc":{"lines":{"from":2456,"to":2486}}}}],["2018",{"pageContent":"curl -X POST  https://api.shasta.trongrid.io/wallet/getaccount -d \n      '{\"address\": \"TM2TmqauSEiRf16CyFgzHV2BVxBejY9iyR\",\n        \"visible\": true\n        }'\ntronweb SDK\nLet's query the TRX balance of a account through tronweb:\njavascript=\n\nconst privateKey = \"...\"; \nvar address = \"TM2TmqauSEiRf16CyFgzHV2BVxBejY9iyR\"; \n// Query the information of an account, and get the balance through the 'balance' in the return value.\nvar tradeobj = await tronWeb.trx.getAccount(\n      address,\n).then(output => {console.log('- Output:', output, '\\n');});\n\n\n\n\n\n\nBuild a Web3 App\nSuggest Edits\nThis article covers the entire process of developing a DApp from scratch, from contract writing to deployment and launch. By learning how to build a decentralized library, developers may easily grasp the process of deploying their own decentralized applications on the TRON network.\n\nPreparations\nInstall\nNodej v10+\nShell\n\n# node -v\nv10.24.1\nTronLink\nInstall Tronlink’s Chrome extension.","metadata":{"loc":{"lines":{"from":2488,"to":2520}}}}],["2019",{"pageContent":"Preparations\nInstall\nNodej v10+\nShell\n\n# node -v\nv10.24.1\nTronLink\nInstall Tronlink’s Chrome extension.\n\nWhat Are We Doing\nWe are building a decentralized library that contains the following functions:\n\nBook Borrowing\nBook Browsing\nBook Adding\nDownload the complete project code from here, and run npm install to install dependencies.\n\nData Structure\nTypically, borrowers are concerned with the title, content, availability, and price of the book. On this basis, we design a structure in the contract called Book, which comprises the following properties:\n\nsolidity\n\nstruct Book {\n       string name;\n       string description;\n       bool valid;      // false if been borrowed\n       uint256 price;   // TRX per day\n       address owner;   // owner of the book\n}\nWe hope that the library will be able to have an easy way to find every book. To do this, we build a bookId attribute and a mapping relationship between bookId and Book, named books.\n\nsolidity\n\nuint256 public bookId;","metadata":{"loc":{"lines":{"from":2520,"to":2554}}}}],["2020",{"pageContent":"solidity\n\nuint256 public bookId;\n\nmapping (uint256 => Book) public books;\nAdditionally, we must keep track of each book's rental information, including the borrower and the start and end dates.\n\nAs with Book, construct a structure called Tracking to keep track of this data. This structure possesses the following fields:\n\nsolidity\n\nstruct Tracking {\n       uint256 bookId;\n       uint256 startTime; // start time, in timestamp\n       uint256 endTime; // end time, in timestamp\n       address borrower; // borrower's address\n}\nSimilarly, a mapping relationship must be established to manage each rental record:\n\nsolidity\n\nuint256 public trackingId;\n\nmapping(uint256 => Tracking) public trackings;\nFunctions and Events\nWe are adding fundamental functions to our library, including:\n\nAdd a book to the library - addBook\nBorrow a book - borrowBook\nRemove a book from the library - deleteBook\naddBook\nsolidity","metadata":{"loc":{"lines":{"from":2554,"to":2585}}}}],["2021",{"pageContent":"Add a book to the library - addBook\nBorrow a book - borrowBook\nRemove a book from the library - deleteBook\naddBook\nsolidity\n\n/**\n* @dev Add a Book with predefined `name`, `description` and `price`\n* to the library.\n*\n* Returns a boolean value indicating whether the operation succeeded.\n*\n* Emits a {NewBook} event.\n*/\nfunction addBook(string memory name, string memory description, uint256 price) public returns (bool) {\n       Book memory book = Book(name, description, true, price, _msgSender());\n\n       books[bookId] = book;\n\n       emit NewBook(bookId++);\n\n       return true;\n}\n\n/**\n* @dev Emitted when a new book is added to the library.\n* Note bookId starts from 0.\n*/\nevent NewBook(uint256 bookId);\nborrowBook\nsolidity","metadata":{"loc":{"lines":{"from":2585,"to":2615}}}}],["2022",{"pageContent":"emit NewBook(bookId++);\n\n       return true;\n}\n\n/**\n* @dev Emitted when a new book is added to the library.\n* Note bookId starts from 0.\n*/\nevent NewBook(uint256 bookId);\nborrowBook\nsolidity\n\n/**\n* @dev Borrow a book has `_bookId`. The rental period starts from\n* `startTime` ends with `endTime`.\n*\n* Returns a boolean value indicating whether the operation succeeded.\n*\n* Emits a `NewRental` event.\n*/\nfunction borrowBook(uint256 _bookId, uint256 startTime, uint256 endTime) public payable returns(bool) {\n       Book storage book = books[_bookId];\n\n       require(book.valid == true, \"The book is currently on loan\");\n\n       require(_msgValue() == book.price * _days(startTime, endTime), \"Incorrect fund sent.\");\n\n       _sendTRX(book.owner, _msgValue());\n\n       _createTracking(_bookId, startTime, endTime);\n\n       emit NewRental(_bookId, trackingId++);\n}\ndeleteBook\nsolidity","metadata":{"loc":{"lines":{"from":2615,"to":2650}}}}],["2023",{"pageContent":"_sendTRX(book.owner, _msgValue());\n\n       _createTracking(_bookId, startTime, endTime);\n\n       emit NewRental(_bookId, trackingId++);\n}\ndeleteBook\nsolidity\n\n/**\n* @dev Delete a book from the library. Only the book's owner or the\n* library's owner is authorised for this operation.\n*\n* Returns a boolean value indicating whether the operation succeeded.\n*\n* Emits a `DeleteBook` event.\n*/\nfunction deleteBook(uint256 _bookId) public returns(bool) {\n       require(_msgSender() == books[_bookId].owner || isOwner(),\n               \"You are not authorised to delete this book.\");\n      \n       delete books[_bookId];\n\n       emit DeleteBook(_bookId);\n\n       return true;\n}\nWe use two tool methods in the borrowBook method: _sendTRX and _createTracking. We do not wish for users to invoke these APIs. As a result, in accordance with Solidity's standards, we identify them as internal, which means they can be accessed only within the contract.\n\n_sendTRX\nsolidity","metadata":{"loc":{"lines":{"from":2650,"to":2680}}}}],["2024",{"pageContent":"_sendTRX\nsolidity\n\n/**\n* @dev Send TRX to the book's owner.\n*/\nfunction _sendTRX(address receiver, uint256 value) internal {\n       payable(address(uint160(receiver))).transfer(value);\n}\n_createTracking\nsolidity\n\n/**\n* @dev Create a new rental tracking.\n*/\nfunction _createTracking(uint256 _bookId, uint256 startTime, uint256 endTime) internal {\n         trackings[trackingId] = Tracking(_bookId, startTime, endTime, _msgSender());\n\n         Book storage book = books[_bookId];\n\n         book.valid = false;\n }\nThe contract is done, it’s time to deploy it.\n\nDeployment and Testing\nWe compile and deploy contracts using TronIDE. For easier testing, it is advised that the initial deployment utilize TRON's Nile test network.\n\n📘\nNile Test Net\n\n\nNile is TRON's pilot test network. Nile will be the first to launch new features that will later be launched on the main network. Please visit the Nile's official website for additional information.","metadata":{"loc":{"lines":{"from":2680,"to":2711}}}}],["2025",{"pageContent":"Nile is TRON's pilot test network. Nile will be the first to launch new features that will later be launched on the main network. Please visit the Nile's official website for additional information.\n\nTRX must be staked or burned to pay for energy in the deployment contract. Here you can obtain some test coins, and each address is only valid once.\n\nThe logged-in TronLink will automatically connect to TronIDE; however, please ensure that the correct network is selected:\n\n\n\nIf this is your first time using TronIDE, you must first enable two modules: Solidity Compiler and DEPLOYMENT.\n\n\n\nFollowing activation, the leftmost menu bar should appear as follows:\n\n\n\nCreate a new contract file, Library.sol, in which you will paste the entire contract code.\n\n\n\nThe sample contract contained in this article must be compiled by selecting 0.8.0+commit7c2e641 from the Compiler drop-down menu.","metadata":{"loc":{"lines":{"from":2711,"to":2731}}}}],["2026",{"pageContent":"The sample contract contained in this article must be compiled by selecting 0.8.0+commit7c2e641 from the Compiler drop-down menu.\n\nThe contract that has been successfully compiled is now ready for deployment. To ensure proper deployment, you must enter the relevant feelimit in the location indicated in the figure. Here, enter 1000000000 as the feelimit. Please refer to this page for additional details on feelimit.\n\n\n\nClick Accept in the pop-up window to sign for this deployment.\n\n\n\nWhen the contract is successfully deployed, the position indicated in the figure will indicate the methods that this contract is capable of calling.\n\n\n\nBuild the DApp\nTo begin, copy the contract address that was previously deployed into the libraryContractAddress variable in utils.js.\n\nLink the UI to TronLink\nThe following step is to link the UI to the TronLink Chrome wallet. TronLink injects the TronWeb object into each browser page, allowing the DApp to communicate with the TRON network.","metadata":{"loc":{"lines":{"from":2731,"to":2749}}}}],["2027",{"pageContent":"Functions\nAfter connecting our user interface to TronLink, we need to analyze how the user interface interacts with smart contracts. As a result, a contract object must be created to represent the decentralized library smart contract.\n\nCreate the following code in dapp-ui/plugins/utils.js to retrieve the smart contract object and save it to the global variable. Then you can directly interact with the contract via the global variable.\n\nJavaScript\n\nexport async function setLibraryContract() {\n     bookRentContract = await        \n     window.tronWeb.contract().at('TMH1jAzAjCp2GdWm7hXSmhYyD3iKdpExoZ');\n}\nThe library should have three fundamental functions：\n\nAdd a book\nBrowse available books\nBorrow a book\nIn index.vue, call setLibraryContract() to initialize the contract object.\n\nJavaScript","metadata":{"loc":{"lines":{"from":2751,"to":2769}}}}],["2028",{"pageContent":"Add a book\nBrowse available books\nBorrow a book\nIn index.vue, call setLibraryContract() to initialize the contract object.\n\nJavaScript\n\nasync mounted() {\n   // init contract object\n   await setLibraryContract();\n   // fetch all books\n   const books = await fetchAllBooks();\n   this.posts = books;\n },\nAdd a Book\nTo begin, construct an add book form for users to submit information about book rentals. On the back end, it will communicate with the library contract's addBook function.\n\nAdd the following code to dapp-ui/components/postAd() bookForm.vue's function:\n\nJavaScript\n\npostAd() {\n     // convert price from TRX to SUN\n     postBookInfo(this.title,this.description,tronWeb.toSun(this.price));\n }\nAdd the following code to postBookInfo() of dapp-ui/plugins/utils.js:\n\nJavaScript","metadata":{"loc":{"lines":{"from":2769,"to":2796}}}}],["2029",{"pageContent":"JavaScript\n\nconst result = await bookRentContract.addBook(name,description,price).send({\n   feeLimit:100_000_000,\n   callValue:0,\n   shouldPollResponse:true\n });\nBrowse All Available Books\nThe fetchAllBooks() function returns the book list, which contains a list of all available books.\n\nAdd the following code to dapp-ui/plugins/fetchAllBooks() utils.js's function:\n\nJavaScript\n\nconst books = [];\n\n const bookId  = await bookRentContract.bookId().call();\n //iterate from 0 till bookId\n for (let i = 0; i < bookId; i++){\n   const book = await bookRentContract.books(i).call()\n   if(book.name!=\"\") // filter the deleted books\n   {\n     books.push(\n       {id: i,name: book.name,description: book.description,price: tronWeb.fromSun(book.price)}\n     )\n   } \n }\nreturn books\nIn index.vue, call fetchAllBooks() to retrieve book information and show it on the homepage.","metadata":{"loc":{"lines":{"from":2796,"to":2824}}}}],["2030",{"pageContent":"Borrow a Book\nThe user may borrow the book after viewing the book's information.\nIn the book() function of dapp-ui/components/detailsModal.vue, add the following code:\n\nJavaScript\n\n// get Start date\n     const startDay = this.getDayOfYear(this.startDate)\n     // get End date\n     const endDay = this.getDayOfYear(this.endDate)\n     // price calculation\n     const totalPrice =tronWeb.toSun(this.propData.price) * (endDay - startDay)\n     // call metamask.bookProperty\n     borrowBook(this.propData.id, startDay, endDay, totalPrice)\ndapp-ui/plugins/utils.js, add the following code to the borrowBook() function:\n\nJavaScript\n\nconst result = await bookRentContract.borrowBook(spaceId,checkInDate,checkOutDate).send({\n   feeLimit:100_000_000,\n   callValue:totalPrice,\n   shouldPollResponse:true\n });\nThe development of the library Dapp is done.\n\nRun the DApp\nAscertain that tronLink is logged in before running the following command to start the service:\n\nShell","metadata":{"loc":{"lines":{"from":2826,"to":2854}}}}],["2031",{"pageContent":"Run the DApp\nAscertain that tronLink is logged in before running the following command to start the service:\n\nShell\n\nnpm run dev\nTo view the front-end page, type localhost:3000 into the browser's address bar.\n\n\n\nTo post book rental information, click the \"Rent Your Books\" button in the upper right corner. The title of the book, a brief description of the book, and the cost of the book for one day are all included in the material.\n\n\n\nAfter you've completed the form, click the \"Submit\" button. The information will be passed to the library contract's addBook function, which will generate a transaction that triggers the contract. Then, as illustrated below, a TronLink pop-up box will open, requesting confirmation and signature:\n\n\n\n\n\nAfter successfully connecting the transaction to the chain, the following leasing information will be displayed on the page:","metadata":{"loc":{"lines":{"from":2854,"to":2874}}}}],["2032",{"pageContent":"After successfully connecting the transaction to the chain, the following leasing information will be displayed on the page:\n\n\n\nClick \"View\" to view the book's comprehensive details and select the rental period. To initiate a lease request, click \"Lent Now\", then the library contract function borrowBook will be called. Additionally, the leasing transaction must be signed and broadcasted to finish it.\n\n\nTRC-10\nSuggest Edits\nTRC-10 is a token standard in TRON Ecosystem, which is based on chain rather than TVM. By paying 1024 TRX, every account in TRON network is allowed to issue TRC-10 token.\n\nIssue\nBy utilizingAssetIssueContract, a particular type of transaction in TRON, each account is able to issue TRC-10 after paying 1024 TRX.\n\nHTTP API\nTrough FullNode wallet/createassetissue to create an unsigned transaction issuing TRC-10,\n\njavascript=","metadata":{"loc":{"lines":{"from":2874,"to":2891}}}}],["2033",{"pageContent":"HTTP API\nTrough FullNode wallet/createassetissue to create an unsigned transaction issuing TRC-10,\n\njavascript=\n\ncurl -X POST  https://api.shasta.trongrid.io/wallet/createassetissue -d '{\n\"owner_address\":\"417946F66D0FC67924DA0AC9936183AB3B07C81126\",\n\"name\":\"0x6173736574497373756531353330383934333132313538\",\n\"abbr\": \"0x6162627231353330383934333132313538\",\n\"total_supply\" :100000000,\n\"trx_num\":1,\n\"num\":1,\n\"precision\":1,\n\"start_time\" : 1581928489000,\n\"end_time\":1581938187000,\n\"description\":\"007570646174654e616d6531353330363038383733343633\",\n\"url\":\"007570646174654e616d6531353330363038383733343633\",\n\"free_asset_net_limit\":10000,\n\"public_free_asset_net_limit\":10000,\n\"frozen_supply\":{\"frozen_amount\":1, \"frozen_days\":2}\n}'\nOnce the transaction is done, we need to sign and broadcast this transaction in order to implement the issuing. Details can be found in Transactions.\n\nTronWeb SDK\n\njavascript=","metadata":{"loc":{"lines":{"from":2891,"to":2916}}}}],["2034",{"pageContent":"const privateKey = \"...\";\nvar createAssetAddress = \"TM2TmqauSEiRf16CyFgzHV2BVxBejY9iyR\";\nconst trc_options = {\n      name : \"test\", \n      abbreviation : \"tt\",  \n      description : \"fortest\", \n      url : \"www.baidu.com\",\n      totalSupply : 10000000,\n      trxRatio : 1,\n      tokenRatio : 1,\n      saleStart : 1581929489000,\n      saleEnd : 1581938187000,\n      freeBandwidth : 0,\n      freeBandwidthLimit : 0,\n      frozenAmount : 0,\n      frozenDuration : 0,\n      precision : 6\n}\n//create an unsigned transaction for TRC-10 issuing\ntradeobj = await tronWeb.transactionBuilder.createAsset(\n      trc_options,\n      createAssetAddress\n).then(output => {\n  console.log('- Output:', output, '\\n');\n  return output;\n});\n//sign\nconst signedtxn = await tronWeb.trx.sign(\n      tradeobj,\n      privateKey\n);\n//broadcast\nconst receipt = await tronWeb.trx.sendRawTransaction(\n      signedtxn\n).then(output => {\n  console.log('- Output:', output, '\\n');\n  return output;\n});\nTransfer","metadata":{"loc":{"lines":{"from":2918,"to":2956}}}}],["2035",{"pageContent":"privateKey\n);\n//broadcast\nconst receipt = await tronWeb.trx.sendRawTransaction(\n      signedtxn\n).then(output => {\n  console.log('- Output:', output, '\\n');\n  return output;\n});\nTransfer\nTransferAssetContract is introduced as a type of transaction in TRON network to transfers the token from one account address to another. It can be implemented with either HTTP API or TronWeb SDK.","metadata":{"loc":{"lines":{"from":2956,"to":2966}}}}],["2036",{"pageContent":"HTTP API\nWith fullnode HTTP API wallet/transferasset to start an unsigned transaction,\n\njavascript=\n\ncurl -X POST   https://127.0.0.1:8090/wallet/transferasset -d '{\n  \"owner_address\":\"41d1e7a6bc354106cb410e65ff8b181c600ff14292\", \n  \"to_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \n  \"asset_name\": \"0x6173736574497373756531353330383934333132313538\", \n  \"amount\": 100\n}'\nWhen the transaction is created, we need to sign and broadcast this transaction in order to implement the transfer. Details can be found in Transactions.\n\nTronWeb SDK\n\njavascript=","metadata":{"loc":{"lines":{"from":2968,"to":2983}}}}],["2037",{"pageContent":"TronWeb SDK\n\njavascript=\n\nconst privateKey = \"...\"; \nvar toAddress = \"TM2TmqauSEiRf16CyFgzHV2BVxBejY9iyR\";\nvar tokenID= \"1000088\";\nvar amount = 1000;\nvar fromAddress = \"TVDGpn4hCSzJ5nkHPLetk8KQBtwaTppnkr\";\n//create an unsigned transfer\ntradeobj = await tronWeb.transactionBuilder.sendToken(\n      toAddress,\n      amount,\n      tokenID,\n      fromAddress,    \n).then(output => {\n  console.log('- Output:', output, '\\n');\n  return output;\n});\n//sign\nconst signedtxn = await tronWeb.trx.sign(\n      tradeobj,\n      privateKey\n);\n//broadcast\nconst receipt = await tronWeb.trx.sendRawTransaction(\n      signedtxn\n).then(output => {\n  console.log('- Output:', output, '\\n');\n  return output;\n});\nCheck Balance\nHTTP API\nThe return value of assetV2 in fullnode HTTP APIwallet/getaccount shows the TRC-10 balance in wallet,\n\njavascript=\n\n curl -X POST  https://api.shasta.trongrid.io/wallet/getaccount -d \n     '{\"address\": \"TM2TmqauSEiRf16CyFgzHV2BVxBejY9iyR\",\n       \"visible\": true\n     }'\ntronweb SDK","metadata":{"loc":{"lines":{"from":2983,"to":3024}}}}],["2038",{"pageContent":"javascript=\n\n curl -X POST  https://api.shasta.trongrid.io/wallet/getaccount -d \n     '{\"address\": \"TM2TmqauSEiRf16CyFgzHV2BVxBejY9iyR\",\n       \"visible\": true\n     }'\ntronweb SDK\n\njavascript=\n\nvar address = \"TM2TmqauSEiRf16CyFgzHV2BVxBejY9iyR\"; \n//check the balance by assetV2 value in return\nvar tradeobj = await tronWeb.trx.getAccount(\n      address,\n).then(output => {console.log('- Output:', output, '\\n');});\nMore TRC-10 API\nNum\tAPI\tDescription\n1\tgetassetissuebyaccount\tcheck issued TRC-10 by account\n2\tgetassetissuebyid\tcheck issued TRC-10 by ID\n3\tgetassetissuebyname\tcheck issued TRC-10 by name\n4\tgetassetissuelistbyname\tcheck issued TRC-10 list by name\n5\tgetassetissuelist\tcheck issued TRC-10 list\n6\tgetpaginatedassetissuelist\tcheck paginated TRC-10 list\n7\tunfreezeasset\tunfreeze pledge ended token\n8\tupdateasset\tupdate token info\n9\tparticipateassetissue\tparticipate token issuing","metadata":{"loc":{"lines":{"from":3024,"to":3049}}}}],["2039",{"pageContent":"TRC-10 Transfer in Smart Contracts\nSuggest Edits\nIntroduction\nCompared to TRC-20 tokens, TRC-10 tokens face a user experience flexibility issue. In Odyssey 3.2, developers and their smart contract callers can interact with TRC-10 token via smart contracts according to the contract logic, do TRC-10 token transfers in smart contracts, giving them more control to implement their token in business scenarios. Unlike TRC-20 tokens, sending TRC-10 tokens is like transferring TRX in a contract, TRON developers added an interface specifically for TRC-10 transfers and queries in solidity.\n\nExample of transferring trc10 in a contract\n\nSolidity\n\npragma solidity ^0.5.0;","metadata":{"loc":{"lines":{"from":3052,"to":3061}}}}],["2040",{"pageContent":"Example of transferring trc10 in a contract\n\nSolidity\n\npragma solidity ^0.5.0;\n\ncontract transferTokenContract {\n    constructor() payable public{}\n    \n    function() payable external {}\n    \n    function transferTokenTest(address payable toAddress, uint256 tokenValue, trcToken id) payable public    {\n        toAddress.transferToken(tokenValue, id);\n    }\n    \n    function msgTokenValueAndTokenIdTest() public payable returns(trcToken, uint256){\n        trcToken id = msg.tokenid;\n        uint256 value = msg.tokenvalue;\n        return (id, value);\n    }\n    \n    function getTokenBalanceTest(address accountAddress) payable public returns (uint256){\n        trcToken id = 1000001;\n        return accountAddress.tokenBalance(id);\n    }\n}\nTRC10 token type\nOdyssey_v3.2 defined a new type (trcToken) for TRC10 token, which represents the tokenId in a token transfer operation. TRC10 token can be converted to uint256 type and vice versa.\n\nJavaScript","metadata":{"loc":{"lines":{"from":3061,"to":3090}}}}],["2041",{"pageContent":"JavaScript\n\ntrcToken id = 1000001;\nTRC10 transfer in contract\n\nJavaScript\n\naddress.transferToken(uint256 tokenValue, trcToken tokenId)\nQuery the TRC10 balance in the contract\n\n\naddress.tokenBalance(trcToken) returns(uint256 tokenAmount)\nOdyssey_v3.2 defines a new tokenBalance function for TRC10 token balance query.\n\nTokenValue & TokenID\nMsg.tokenvalue, represents the token value in the current msg call, with a default value of 0. Msg.tokenid, represents the token id in current msg call, with a default value of 0.\n\n\nProtocol Interface\nSuggest Edits\nTRC-20 contract standard\nTRC-20 is a set of contract standards for the issuance of token assets, contracts written in compliance with this standard are considered to be a TRC-20 contract. When wallets and exchanges are docking the assets of the TRC-20 contract, from this set of standards, you can know which functions and events the contract defines, so as to facilitate the docking.\n\nOptional Items\nToken Name","metadata":{"loc":{"lines":{"from":3090,"to":3114}}}}],["2042",{"pageContent":"Optional Items\nToken Name\n\n\nstring public name = \"TRONEuropeRewardCoin\";\nToken Abbreviation\n\n\nstring public symbol = \"TERC\";\nToken Precision(Decimals)\n\n\nuint8 public decimals = 6;\nRequired Items\nJavaScript\n\ncontract TRC20 {\n             function totalSupply() constant returns (uint theTotalSupply);\n             function balanceOf(address _owner) constant returns (uint balance);\n             function transfer(address _to, uint _value) returns (bool success);\n             function transferFrom(address _from, address _to, uint _value) returns (bool success);\n             function approve(address _spender, uint _value) returns (bool success);\n             function allowance(address _owner, address _spender) constant returns (uint remaining);\n             event Transfer(address indexed _from, address indexed _to, uint _value);\n             event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\ntotalSupply()\nThis function returns the total supply of the token.","metadata":{"loc":{"lines":{"from":3114,"to":3141}}}}],["2043",{"pageContent":"balanceOf()\nThis function returns the token balance of the specific account.\n\ntransfer()\nThis function is used to transfer a number of tokens to a specific address.\n\napprove()\nThis function is used to authorize the third party (like a DAPP smart contract) to transfer the token from the token owner’s account.\n\ntransferFrom()\nThis function is used to allow the third party to transfer the token from an owner account to a receiver account. The owner account must be approved to be called by the third party.\n\nallowance()\nThis function is used to query the remaining amount of tokens the third party can transfer.\n\nEvent Functions\nWhen the token is successfully transferred, the contract will trigger a Transfer Event.\n\n\nevent Transfer(address indexed _from, address indexed _to, uint256 _value)\nWhen approval() is successfully called, the contract will trigger an Approval Event.\n\n\nevent Approval(address indexed _owner, address indexed _spender, uint256 _value)","metadata":{"loc":{"lines":{"from":3143,"to":3166}}}}],["2044",{"pageContent":"event Approval(address indexed _owner, address indexed _spender, uint256 _value)\n\nProtocol Interface\nSuggest Edits\nTRC-20 contract standard\nTRC-20 is a set of contract standards for the issuance of token assets, contracts written in compliance with this standard are considered to be a TRC-20 contract. When wallets and exchanges are docking the assets of the TRC-20 contract, from this set of standards, you can know which functions and events the contract defines, so as to facilitate the docking.\n\nOptional Items\nToken Name\n\n\nstring public name = \"TRONEuropeRewardCoin\";\nToken Abbreviation\n\n\nstring public symbol = \"TERC\";\nToken Precision(Decimals)\n\n\nuint8 public decimals = 6;\nRequired Items\nJavaScript","metadata":{"loc":{"lines":{"from":3166,"to":3187}}}}],["2045",{"pageContent":"string public name = \"TRONEuropeRewardCoin\";\nToken Abbreviation\n\n\nstring public symbol = \"TERC\";\nToken Precision(Decimals)\n\n\nuint8 public decimals = 6;\nRequired Items\nJavaScript\n\ncontract TRC20 {\n             function totalSupply() constant returns (uint theTotalSupply);\n             function balanceOf(address _owner) constant returns (uint balance);\n             function transfer(address _to, uint _value) returns (bool success);\n             function transferFrom(address _from, address _to, uint _value) returns (bool success);\n             function approve(address _spender, uint _value) returns (bool success);\n             function allowance(address _owner, address _spender) constant returns (uint remaining);\n             event Transfer(address indexed _from, address indexed _to, uint _value);\n             event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\ntotalSupply()\nThis function returns the total supply of the token.","metadata":{"loc":{"lines":{"from":3187,"to":3210}}}}],["2046",{"pageContent":"balanceOf()\nThis function returns the token balance of the specific account.\n\ntransfer()\nThis function is used to transfer a number of tokens to a specific address.\n\napprove()\nThis function is used to authorize the third party (like a DAPP smart contract) to transfer the token from the token owner’s account.\n\ntransferFrom()\nThis function is used to allow the third party to transfer the token from an owner account to a receiver account. The owner account must be approved to be called by the third party.\n\nallowance()\nThis function is used to query the remaining amount of tokens the third party can transfer.\n\nEvent Functions\nWhen the token is successfully transferred, the contract will trigger a Transfer Event.\n\n\nevent Transfer(address indexed _from, address indexed _to, uint256 _value)\nWhen approval() is successfully called, the contract will trigger an Approval Event.\n\n\nevent Approval(address indexed _owner, address indexed _spender, uint256 _value)","metadata":{"loc":{"lines":{"from":3212,"to":3235}}}}],["2047",{"pageContent":"event Approval(address indexed _owner, address indexed _spender, uint256 _value)\n\nIssuing TRC-20 tokens tutorial\nSuggest Edits\n1. Install TronLink Chrome plugin\nAddress: TronLink\n\n2. Prepare an account for issue token\nThere are three ways to create an account, import an account, and link a hardware wallet. You need to ensure that there are more than 1000 TRX in the account.\n\n864\n3. Prepare the TRC20 contract code\nTrc20 contract template: code\n\nModify the Token.sol file to define the token name, token symbol, precision, and totalsupply\n\n864\n4. Deploy TRC20 contract\nDeploy with tronscan: deployment tool\n\nLink wallet\n1900\nUpload contract code\n864\n864\nCompile the contract\nPlease select 0.5.10 version compiler\n864\n864\nThe following prompt appears, indicating successful compilation\n\n864\nDeployment contract\nPlease note that you must choose the Token contract, because Token is the main contract","metadata":{"loc":{"lines":{"from":3294,"to":3327}}}}],["2048",{"pageContent":"864\nDeployment contract\nPlease note that you must choose the Token contract, because Token is the main contract\n\n864\nClick Confirm to deploy, the tronlink signature dialog box will pop up, click to accept to sign,when successful deployment, please get the contract address, and record the contract address.\n\n364\n864\n5. Record TRC20 Token\nRecord with Tronscan: Record tool\n\nSelect token type\n1039\nSelect the TRC20 token and click Yes.\n\nEnter TRC20 token information\nEnter the basic information, contract information and social media information of the token. Fields with \"*\" are required information. The information you entered must match that of the TRC20 contract.\nPlease note that record must be logged in with the deployer address.\n690\nEnter all information required for the TRC20 token, click Next.","metadata":{"loc":{"lines":{"from":3327,"to":3347}}}}],["2049",{"pageContent":"682\nConfirm token information\nCheck if token information is right. Click I’m not a robot, and then click Submit (Note: Google authentication is required for this step. Users in Mainland China may have to use VPN).\n\n266\nYou will see a popup dialog to confirm token issuance. Click Confirm and you will see another popup from Tronlink asking for your signature. Click Accept to sign the message.\n\n1029\nToken successfully recorded\n897\n6. Add tokens to Tronlink\nOn the asset management page, fill in the contract address obtained after successful deployment in the add token input box, the contract just deployed will pop up, click the switch button, and add the token to tronlink. After the addition is successful, the transfer can be carried out.\n\n864\nYou can also search the contract homepage on tronscan","metadata":{"loc":{"lines":{"from":3349,"to":3363}}}}],["2050",{"pageContent":"864\nYou can also search the contract homepage on tronscan\n\n864\nNote:\nTronlink plug-in currently supports the mainnet and Nile testnet to add tokens. At the same time, the token must be successfully recored in Tronscan and requires 2 hours of data synchronization.\n\n7.Verify TRC20 contracts\nVerify with Tronacan: Validation tool\n\nEnter contract information including contract address,contract name, compiler version, License, optimization history and Runs.\nContract address is the address recorded while deploying the contract.\nContract name refers to the name of the main contract deployed. In the example above, the name is \"Token\".\nCompiler version is 0.5.10\nYou may select None for License\nOptimization history is Yes and Runs is 0 by default.\n\n1010\nClick Upload contract file(s) for validation.","metadata":{"loc":{"lines":{"from":3363,"to":3381}}}}],["2051",{"pageContent":"1010\nClick Upload contract file(s) for validation.\n\nUpload contract code\nCheck I am not a robot (Note: Google authentication is required for this step. Users in Mainland China may have to use VPN).\n1024\nClick Verify and publish, you will be directed to the contract information page once validated successfully.\n\nContract successfully validated\nContract information page will show successful validation.\n902\n\nTRC-20 Contract Interaction\nSuggest Edits\nTake the USDT contract on Shasta test net as an example，Use Tronweb and wallet-cli to call the TRC-20 interface of the contract, respectively.\n\nSome related links:\nFind the USDT on Tronscan\nCode conversion tool\n\nWe can use the triggersmartcontract function to call constant functions in the contract to get the result directly without broadcasting.\nPlease set supportConstant = true in your node config.\n\nname\nCall the name function to get the name of the token.\n\nHTTP API :\n\nHTTP","metadata":{"loc":{"lines":{"from":3381,"to":3409}}}}],["2052",{"pageContent":"name\nCall the name function to get the name of the token.\n\nHTTP API :\n\nHTTP\n\n/wallet/triggerconstantcontract\nDescription: Trigger the constant of the smart contract, the transaction is off the blockchain\ndemo: curl -X POST  https://127.0.0.1:8090/wallet/triggerconstantcontract -d '{\n\"contract_address\":\"419E62BE7F4F103C36507CB2A753418791B1CDC182\",\n\"function_selector\":\"name()\",\n\"owner_address\":\"41977C20977F412C2A1AA4EF3D49FEE5EC4C31CDFB\"\n}'\nTronweb Example:\n\nJavaScript\n\nconst TronWeb = require('tronweb')\n\nconst HttpProvider = TronWeb.providers.HttpProvider;\nconst fullNode = new HttpProvider(\"https://127.0.0.1:8090\");\nconst solidityNode = new HttpProvider(\"https://127.0.0.1:8090\");\nconst eventServer = new HttpProvider(\"https://127.0.0.1:8090\");\nconst privateKey = \"your private key\";\nconst tronWeb = new TronWeb(fullNode,solidityNode,eventServer,privateKey);\n\nasync function triggerSmartContract() {\n    const trc20ContractAddress = \"TQQg4EL8o1BSeKJY4MJ8TB8XK7xufxFBvK\";//contract address","metadata":{"loc":{"lines":{"from":3409,"to":3437}}}}],["2053",{"pageContent":"async function triggerSmartContract() {\n    const trc20ContractAddress = \"TQQg4EL8o1BSeKJY4MJ8TB8XK7xufxFBvK\";//contract address\n\n    try {\n        let contract = await tronWeb.contract().at(trc20ContractAddress);\n        //Use call to execute a pure or view smart contract method.\n        // These methods do not modify the blockchain, do not cost anything to execute and are also not broadcasted to the network.\n        let result = await contract.name().call();\n        console.log('result: ', result);\n    } catch(error) {\n        console.error(\"trigger smart contract error\",error)\n    }\n}\nWallet-cli Example:\n\nwallet-cli command","metadata":{"loc":{"lines":{"from":3437,"to":3452}}}}],["2054",{"pageContent":"wallet-cli command\n\nTriggerConstantContract TQQg4EL8o1BSeKJY4MJ8TB8XK7xufxFBvK name() # false\nUsage : TriggerConstantContract [ownerAddress] [contractAddress] [method] [args] [isHex]\nParameter Description：\nownerAddress: calller address\ncontractAdress：TRC20 contract address\nmethod： contract function\nargs：function parameters，If there is no parameter,use # placeholder\nisHex： whether the address of the command parameter is in hex format\n\nsymbol\nCall the symbol function to get the symbol of the token.\n\nHTTP API :\n\nHTTP\n\n/wallet/triggerconstantcontract\nDescription: Trigger the constant of the smart contract, the transaction is off the blockchain\ndemo: curl -X POST  https://127.0.0.1:8090/wallet/triggerconstantcontract -d '{\n\"contract_address\":\"419E62BE7F4F103C36507CB2A753418791B1CDC182\",\n\"function_selector\":\"symbol()\",\n\"owner_address\":\"41977C20977F412C2A1AA4EF3D49FEE5EC4C31CDFB\"\n}'\nTronweb Example:\n\nJavaScript\n\nconst TronWeb = require('tronweb')","metadata":{"loc":{"lines":{"from":3452,"to":3481}}}}],["2055",{"pageContent":"JavaScript\n\nconst TronWeb = require('tronweb')\n\nconst HttpProvider = TronWeb.providers.HttpProvider;\nconst fullNode = new HttpProvider(\"https://127.0.0.1:8090\");\nconst solidityNode = new HttpProvider(\"https://127.0.0.1:8090\");\nconst eventServer = new HttpProvider(\"https://127.0.0.1:8090\");\nconst privateKey = \"your private key\";\nconst tronWeb = new TronWeb(fullNode,solidityNode,eventServer,privateKey);\n\nasync function triggerSmartContract() {\n    const trc20ContractAddress = \"TQQg4EL8o1BSeKJY4MJ8TB8XK7xufxFBvK\";//contract address","metadata":{"loc":{"lines":{"from":3481,"to":3493}}}}],["2056",{"pageContent":"async function triggerSmartContract() {\n    const trc20ContractAddress = \"TQQg4EL8o1BSeKJY4MJ8TB8XK7xufxFBvK\";//contract address\n\n    try {\n        let contract = await tronWeb.contract().at(trc20ContractAddress);\n        //Use call to execute a pure or view smart contract method.\n        // These methods do not modify the blockchain, do not cost anything to execute and are also not broadcasted to the network.\n        let result = await contract.symbol().call();\n        console.log('result: ', result);\n    } catch(error) {\n        console.error(\"trigger smart contract error\",error)\n    }\n}\nWallet-cli Example:\n\nwallet-cli command","metadata":{"loc":{"lines":{"from":3545,"to":3560}}}}],["2057",{"pageContent":"wallet-cli command\n\nTriggerConstantContract TQQg4EL8o1BSeKJY4MJ8TB8XK7xufxFBvK symbol() # false\nUsage : TriggerConstantContract [ownerAddress] [contractAddress] [method] [args] [isHex]\nParameter Description：\nownerAddress: calller address\ncontractAdress：TRC20 contract address\nmethod： contract function\nargs：function parameters，If there is no parameter,use # placeholder\nisHex： whether the address of the command parameter is in hex format\n\ndecimals\nCall the decimals function to get the precision of the token.\n\nHTTP API :\n\nHTTP\n\n/wallet/triggerconstantcontract\nDescription: Trigger the constant of the smart contract, the transaction is off the blockchain\ndemo: curl -X POST  https://127.0.0.1:8090/wallet/triggerconstantcontract -d '{\n\"contract_address\":\"419E62BE7F4F103C36507CB2A753418791B1CDC182\",\n\"function_selector\":\"decimals()\",\n\"owner_address\":\"41977C20977F412C2A1AA4EF3D49FEE5EC4C31CDFB\"\n}'\nTronweb Example:\n\nJavaScript\n\nconst TronWeb = require('tronweb')","metadata":{"loc":{"lines":{"from":3560,"to":3589}}}}],["2058",{"pageContent":"JavaScript\n\nconst TronWeb = require('tronweb')\n\nconst HttpProvider = TronWeb.providers.HttpProvider;\nconst fullNode = new HttpProvider(\"https://127.0.0.1:8090\");\nconst solidityNode = new HttpProvider(\"https://127.0.0.1:8090\");\nconst eventServer = new HttpProvider(\"https://127.0.0.1:8090\");\nconst privateKey = \"your private key\";\nconst tronWeb = new TronWeb(fullNode,solidityNode,eventServer,privateKey);\n\nasync function triggerSmartContract() {\n    const trc20ContractAddress = \"TQQg4EL8o1BSeKJY4MJ8TB8XK7xufxFBvK\";//contract address","metadata":{"loc":{"lines":{"from":3589,"to":3601}}}}],["2059",{"pageContent":"async function triggerSmartContract() {\n    const trc20ContractAddress = \"TQQg4EL8o1BSeKJY4MJ8TB8XK7xufxFBvK\";//contract address\n\n    try {\n        let contract = await tronWeb.contract().at(trc20ContractAddress);\n        //Use call to execute a pure or view smart contract method.\n        // These methods do not modify the blockchain, do not cost anything to execute and are also not broadcasted to the network.\n        let result = await contract.decimals().call();\n        console.log('result: ', result);\n    } catch(error) {\n        console.error(\"trigger smart contract error\",error)\n    }\n}\nWallet-cli Example:\n\nwallet-cli command","metadata":{"loc":{"lines":{"from":3706,"to":3721}}}}],["2060",{"pageContent":"wallet-cli command\n\nTriggerConstantContract TQQg4EL8o1BSeKJY4MJ8TB8XK7xufxFBvK decimals() # false\nUsage : TriggerConstantContract [ownerAddress] [contractAddress] [method] [args] [isHex]\nParameter Description：\nownerAddress: calller address\ncontractAdress：TRC20 contract address\nmethod： contract function\nargs：function parameters，If there is no parameter,use # placeholder\nisHex： whether the address of the command parameter is in hex format\n\ntotalSupply\nCall the totalSupply function to get the total supply of the token.\n\nHTTP API :\n\nHTTP\n\n/wallet/triggerconstantcontract\nDescription: Trigger the constant of the smart contract, the transaction is off the blockchain\ndemo: curl -X POST  https://127.0.0.1:8090/wallet/triggerconstantcontract -d '{\n\"contract_address\":\"419E62BE7F4F103C36507CB2A753418791B1CDC182\",\n\"function_selector\":\"totalSupply()\",\n\"owner_address\":\"41977C20977F412C2A1AA4EF3D49FEE5EC4C31CDFB\"\n}'\nTronweb Example:\n\nJavaScript\n\nconst TronWeb = require('tronweb')","metadata":{"loc":{"lines":{"from":3721,"to":3750}}}}],["2061",{"pageContent":"JavaScript\n\nconst TronWeb = require('tronweb')\n\nconst HttpProvider = TronWeb.providers.HttpProvider;\nconst fullNode = new HttpProvider(\"https://127.0.0.1:8090\");\nconst solidityNode = new HttpProvider(\"https://127.0.0.1:8090\");\nconst eventServer = new HttpProvider(\"https://127.0.0.1:8090\");\nconst privateKey = \"your private key\";\nconst tronWeb = new TronWeb(fullNode,solidityNode,eventServer,privateKey);\n\nasync function triggerSmartContract() {\n    const trc20ContractAddress = \"TQQg4EL8o1BSeKJY4MJ8TB8XK7xufxFBvK\";//contract address","metadata":{"loc":{"lines":{"from":3750,"to":3762}}}}],["2062",{"pageContent":"async function triggerSmartContract() {\n    const trc20ContractAddress = \"TQQg4EL8o1BSeKJY4MJ8TB8XK7xufxFBvK\";//contract address\n\n    try {\n        let contract = await tronWeb.contract().at(trc20ContractAddress);\n        //Use call to execute a pure or view smart contract method.\n        // These methods do not modify the blockchain, do not cost anything to execute and are also not broadcasted to the network.\n        let result = await contract.totalSupply().call();\n        console.log('result: ', result);\n    } catch(error) {\n        console.error(\"trigger smart contract error\",error)\n    }\n}\nWallet-cli:\n\nwallet-cli command","metadata":{"loc":{"lines":{"from":3920,"to":3935}}}}],["2063",{"pageContent":"wallet-cli command\n\nTriggerConstantContract TQQg4EL8o1BSeKJY4MJ8TB8XK7xufxFBvK totalSupply() # false\nUsage : TriggerConstantContract [ownerAddress] [contractAddress] [method] [args] [isHex]\nParameter Description：\nownerAddress: calller address\ncontractAdress：TRC20 contract address\nmethod： contract function\nargs：function parameters，If there is no parameter,use # placeholder\nisHex： whether the address of the command parameter is in hex format\n\nbalanceOf\nCall the balanceOf function to get the token balance of the specified account.\n\nHTTP API :\n\nHTTP","metadata":{"loc":{"lines":{"from":3935,"to":3951}}}}],["2064",{"pageContent":"balanceOf\nCall the balanceOf function to get the token balance of the specified account.\n\nHTTP API :\n\nHTTP\n\n/wallet/triggerconstantcontract\nDescription: Trigger the constant of the smart contract, the transaction is off the blockchain\ndemo: curl -X POST https://127.0.0.1:8090/wallet/triggerconstantcontract -d '{\n\"contract_address\":\"419E62BE7F4F103C36507CB2A753418791B1CDC182\",\n\"function_selector\":\"balanceOf(address)\",\n\"parameter\":\"000000000000000000000041977C20977F412C2A1AA4EF3D49FEE5EC4C31CDFB\",\n\"owner_address\":\"41977C20977F412C2A1AA4EF3D49FEE5EC4C31CDFB\"\n}'\nTronweb Example:\n\nJavaScript\n\nconst TronWeb = require('tronweb')\n\nconst HttpProvider = TronWeb.providers.HttpProvider;\nconst fullNode = new HttpProvider(\"https://127.0.0.1:8090\");\nconst solidityNode = new HttpProvider(\"https://127.0.0.1:8090\");\nconst eventServer = new HttpProvider(\"https://127.0.0.1:8090\");\nconst privateKey = \"your private key\";\nconst tronWeb = new TronWeb(fullNode,solidityNode,eventServer,privateKey);","metadata":{"loc":{"lines":{"from":3951,"to":3977}}}}],["2065",{"pageContent":"async function triggerSmartContract() {\n    const trc20ContractAddress = \"TQQg4EL8o1BSeKJY4MJ8TB8XK7xufxFBvK\";//contract address\n    var address = \"TM2TmqauSEiRf16CyFgzHV2BVxBe...\";\n\n    try {\n        let contract = await tronWeb.contract().at(trc20ContractAddress);\n        //Use call to execute a pure or view smart contract method.\n        // These methods do not modify the blockchain, do not cost anything to execute and are also not broadcasted to the network.\n        let result = await contract.balanceOf(address).call();\n        console.log('result: ', result);\n    } catch(error) {\n        console.error(\"trigger smart contract error\",error)\n    }\n}\nWallet-cli Example:\n\nwallet-cli command","metadata":{"loc":{"lines":{"from":3979,"to":3995}}}}],["2066",{"pageContent":"wallet-cli command\n\nTriggerConstantContract TQQg4EL8o1BSeKJY4MJ8TB8XK7xufxFBvK balanceOf(address) \"TM2TmqauSEiRf16CyFgzHV2BVxBejY9iyR\" false\nUsage : TriggerConstantContract [ownerAddress] [contractAddress] [method] [args] [isHex]\nParameter Description：\nownerAddress: calller address\ncontractAdress：TRC20 contract address\nmethod： contract function\nargs：function parameters，If there is no parameter,use # placeholder\nisHex： whether the address of the command parameter is in hex format\n\ntransfer\nCall transfer function for token transfer\n\nHTTP API :\n\nHTTP","metadata":{"loc":{"lines":{"from":3995,"to":4011}}}}],["2067",{"pageContent":"transfer\nCall transfer function for token transfer\n\nHTTP API :\n\nHTTP\n\nwallet/triggersmartcontract\nDescription: Trigger smart contract\ndemo: curl -X POST https://127.0.0.1:8090/wallet/triggersmartcontract -d '{\n\"contract_address\":\"419E62BE7F4F103C36507CB2A753418791B1CDC182\",\n\"function_selector\":\"transfer(address,uint256)\",\n\"parameter\":\"00000000000000000000004115208EF33A926919ED270E2FA61367B2DA3753DA0000000000000000000000000000000000000000000000000000000000000032\",\n\"fee_limit\":100000000,\n\"call_value\":0,\n\"owner_address\":\"41977C20977F412C2A1AA4EF3D49FEE5EC4C31CDFB\"\n}'\nThe parameter is to encode address and uint256 in transfer (address,uint256), please refer to the parameter encoding and decoding document\nNote: After calling this HTTP API, you also need to call the signature and broadcast APIs.\n\nTronweb Example:\n\nJavaScript\n\nconst TronWeb = require('tronweb')","metadata":{"loc":{"lines":{"from":4011,"to":4035}}}}],["2068",{"pageContent":"Tronweb Example:\n\nJavaScript\n\nconst TronWeb = require('tronweb')\n\nconst HttpProvider = TronWeb.providers.HttpProvider;\nconst fullNode = new HttpProvider(\"https://127.0.0.1:8090\");\nconst solidityNode = new HttpProvider(\"https://127.0.0.1:8090\");\nconst eventServer = new HttpProvider(\"https://127.0.0.1:8090\");\nconst privateKey = \"your private key\";\nconst tronWeb = new TronWeb(fullNode,solidityNode,eventServer,privateKey);\n\nasync function triggerSmartContract() {\n    const trc20ContractAddress = \"TQQg4EL8o1BSeKJY4MJ8TB8XK7xufxFBvK\";//contract address\n    var address = \"TM2TmqauSEiRf16CyFgzHV2BVxBe...\";","metadata":{"loc":{"lines":{"from":4035,"to":4050}}}}],["2069",{"pageContent":"async function triggerSmartContract() {\n    const trc20ContractAddress = \"TQQg4EL8o1BSeKJY4MJ8TB8XK7xufxFBvK\";//contract address\n    var address = \"TM2TmqauSEiRf16CyFgzHV2BVxBe...\";\n\n    try {\n        let contract = await tronWeb.contract().at(trc20ContractAddress);\n        //Use send to execute a non-pure or modify smart contract method on a given smart contract that modify or change values on the blockchain.\n        // These methods consume resources(bandwidth and energy) to perform as the changes need to be broadcasted out to the network.\n        let result = await contract.transfer(\n            \"TVDGp...\", //address _to\n            1000000   //amount\n        ).send({\n            feeLimit: 1000000\n        }).then(output => {console.log('- Output:', output, '\\n');});\n        console.log('result: ', result);\n    } catch(error) {\n        console.error(\"trigger smart contract error\",error)\n    }\n}\nWallet-cli Example:\n\nwallet-cli command","metadata":{"loc":{"lines":{"from":4108,"to":4129}}}}],["2070",{"pageContent":"wallet-cli command\n\nTriggerContract TQQg4EL8o1BSeKJY4MJ8TB8XK7xufxFBvK  transfer(address,uint256) \"TBQDyqoJ2ZJHTRDsrGQasyqBm4nUVLbWee\",100 false 100000000 0 0 #\nUsage ：\nTriggerContract [ownerAddress] [contractAddress] [method] [args] [isHex] [fee_limit] [value] [token_value] [token_id]\nParameter Description：\nownerAddress: calller address\ncontractAdress：TRC20 contract address\nmethod： contract function\nargs：function parameters，If there is no parameter,use # placeholder\nisHex： whether the address of the command parameter is in hex format\nfee_limit: the maximum trx consumption of this calling, the unit is sun\nvalue: the amount of TRX that transfered to the contract while calling the contract, the unit is sun\ntoken_value: the amount of TRC10 asset that transfered to the contract while calling the contract\ntoken_id:the TRC10 asset ID that transfered to the contract while calling the contract","metadata":{"loc":{"lines":{"from":4129,"to":4143}}}}],["2071",{"pageContent":"Transaction confirmation：\nCheck whether the transfer of TRC20 was successful according to result of getTransactionInfoById.\n\napprove\nCall the approve function to authorize a certain amount of token use rights to other addresses.\n\nHTTP API :\n\nHTTP\n\nwallet/triggersmartcontract\nDescription: Trigger smart contract\ndemo: curl -X POST https://127.0.0.1:8090/wallet/triggersmartcontract -d '{\n\"contract_address\":\"419E62BE7F4F103C36507CB2A753418791B1CDC182\",\n\"function_selector\":\"approve(address,uint256)\",\n\"parameter\":\"0000000000000000000000410FB357921DFB0E32CBC9D1B30F09AAD13017F2CD0000000000000000000000000000000000000000000000000000000000000064\",\n\"fee_limit\":100000000,\n\"call_value\":0,\n\"owner_address\":\"41977C20977F412C2A1AA4EF3D49FEE5EC4C31CDFB\"\n}'\nNote: After calling this HTTP API, you also need to call the signature and broadcast APIs.\n\nTronweb Example:\n\nJavaScript\n\nconst TronWeb = require('tronweb')","metadata":{"loc":{"lines":{"from":4145,"to":4171}}}}],["2072",{"pageContent":"Tronweb Example:\n\nJavaScript\n\nconst TronWeb = require('tronweb')\n\nconst HttpProvider = TronWeb.providers.HttpProvider;\nconst fullNode = new HttpProvider(\"https://127.0.0.1:8090\");\nconst solidityNode = new HttpProvider(\"https://127.0.0.1:8090\");\nconst eventServer = new HttpProvider(\"https://127.0.0.1:8090\");\nconst privateKey = \"your private key\";\nconst tronWeb = new TronWeb(fullNode,solidityNode,eventServer,privateKey);\n\nasync function triggerSmartContract() {\n    //User A allows user B to use 10USDT of A: A calls approve (B,10)\n    const trc20ContractAddress = \"TQQg4EL8o1BSeKJY4MJ8TB8XK7xufxFBvK\";//contract address","metadata":{"loc":{"lines":{"from":4171,"to":4186}}}}],["2073",{"pageContent":"async function triggerSmartContract() {\n    //User A allows user B to use 10USDT of A: A calls approve (B,10)\n    const trc20ContractAddress = \"TQQg4EL8o1BSeKJY4MJ8TB8XK7xufxFBvK\";//contract address\n\n    try {\n        let contract = await tronWeb.contract().at(trc20ContractAddress);\n        //Use send to execute a non-pure or modify smart contract method on a given smart contract that modify or change values on the blockchain.\n        // These methods consume resources(bandwidth and energy) to perform as the changes need to be broadcasted out to the network.\n        await contract.approve(\n            \"TA1g2WQiXbU...\", //address _spender\n            10000000 //amount\n        ).send({\n            feeLimit: 100000000\n        }).then(output => {console.log('- Output:', output, '\\n');});\n    } catch(error) {\n        console.error(\"trigger smart contract error\",error)\n    }\n}\nWallet-cli Example:\n\nwallet-cli command","metadata":{"loc":{"lines":{"from":4186,"to":4206}}}}],["2074",{"pageContent":"wallet-cli command\n\nTriggerContract TQQg4EL8o1BSeKJY4MJ8TB8XK7xufxFBvK  approve(address,uint256) \"TBQDyqoJ2ZJHTRDsrGQasyqBm4nUVLbWee\",100 false 100000000 0 0 #\nUsage ：\nTriggerContract [ownerAddress] [contractAddress] [method] [args] [isHex] [fee_limit] [value] [token_value] [token_id]\nParameter Description：\nownerAddress: calller address\ncontractAdress：TRC20 contract address\nmethod： contract function\nargs：function parameters，If there is no parameter,use # placeholder\nisHex： whether the address of the command parameter is in hex format\nfee_limit: the maximum trx consumption of this calling, the unit is sun\nvalue: the amount of TRX that transfered to the contract while calling the contract, the unit is sun\ntoken_value: the amount of TRC10 asset that transfered to the contract while calling the contract\ntoken_id:the TRC10 asset ID that transfered to the contract while calling the contract","metadata":{"loc":{"lines":{"from":4206,"to":4220}}}}],["2075",{"pageContent":"Transaction confirmation：\nCheck whether the transfer of TRC20 was successful according to result of getTransactionInfoById.\n\ntransferFrom\nAuthorized addresses calling the transferFrom function to transfer tokens from autherizer's account.\n\nHTTP API :\n\nHTTP\n\nwallet/triggersmartcontract\nDescription: Trigger smart contract\ndemo: curl -X POST https://127.0.0.1:8090/wallet/triggersmartcontract -d '{\n\"contract_address\":\"419E62BE7F4F103C36507CB2A753418791B1CDC182\",\n\"function_selector\":\"transferFrom(address,address,uint256)\",\n\"parameter\":\"00000000000000000000004109669733965A37BA3582E70CCC5302F8D254675D0000000000000000000000410FB357921DFB0E32CBC9D1B30F09AAD13017F2CD0000000000000000000000000000000000000000000000000000000000000032\",\n\"fee_limit\":100000000,\n\"call_value\":0,\n\"owner_address\":\"41977C20977F412C2A1AA4EF3D49FEE5EC4C31CDFB\"\n}'\nNote: After calling this HTTP API, you also need to call the signature and broadcast APIs.\n\nTronweb Example:\n\nJavaScript\n\nconst TronWeb = require('tronweb')","metadata":{"loc":{"lines":{"from":4222,"to":4248}}}}],["2076",{"pageContent":"Tronweb Example:\n\nJavaScript\n\nconst TronWeb = require('tronweb')\n\nconst HttpProvider = TronWeb.providers.HttpProvider;\nconst fullNode = new HttpProvider(\"https://127.0.0.1:8090\");\nconst solidityNode = new HttpProvider(\"https://127.0.0.1:8090\");\nconst eventServer = new HttpProvider(\"https://127.0.0.1:8090\");\nconst privateKey = \"your private key\";\nconst tronWeb = new TronWeb(fullNode,solidityNode,eventServer,privateKey);\n\nasync function triggerSmartContract() {\n    // Address B transfers 10 USDT from address A to C: B calls transferFrom (A, C, 10)\n    const trc20ContractAddress = \"TQQg4EL8o1BSeKJY4MJ8TB8XK7xufxFBvK\";//contract address","metadata":{"loc":{"lines":{"from":4248,"to":4263}}}}],["2077",{"pageContent":"try {\n        let contract = await tronWeb.contract().at(trc20ContractAddress);\n        //Use send to execute a non-pure or modify smart contract method on a given smart contract that modify or change values on the blockchain.\n        // These methods consume resources(bandwidth and energy) to perform as the changes need to be broadcasted out to the network.\n        await contract.transferFrom(\n            \"TM2TmqauSEiRf16CyFgzHV2BVxBej...\", //address _from\n            \"TVDGpn4hCSzJ5nkHPLetk8KQBtwaT...\", //address _to\n            100000 //amount\n        ).send({\n            feeLimit: 10000000\n        }).then(output => {console.log('- Output:', output, '\\n');});\n    } catch(error) {\n        console.error(\"trigger smart contract error\",error)\n    }\n}\nWallet-cli Example:\n\nwallet-cli command","metadata":{"loc":{"lines":{"from":4265,"to":4282}}}}],["2078",{"pageContent":"wallet-cli command\n\nTriggerContract TQQg4EL8o1BSeKJY4MJ8TB8XK7xufxFBvK  transferFrom(address,address,uint256) \"TApuyuazZnGgxvbNbaGcrUijEFn1oidsAH\",\"TBQDyqoJ2ZJHTRDsrGQasyqBm4nUVLbWee\",50 false 100000000 0 0 #\nUsage ：\nTriggerContract [ownerAddress] [contractAddress] [method] [args] [isHex] [fee_limit] [value] [token_value] [token_id]\nParameter Description：\nownerAddress: calller address\ncontractAdress：TRC20 contract address\nmethod： contract function\nargs：function parameters，If there is no parameter,use # placeholder\nisHex： whether the address of the command parameter is in hex format\nfee_limit: the maximum trx consumption of this calling, the unit is sun\nvalue: the amount of TRX that transfered to the contract while calling the contract, the unit is sun\ntoken_value: the amount of TRC10 asset that transfered to the contract while calling the contract\ntoken_id:the TRC10 asset ID that transfered to the contract while calling the contract","metadata":{"loc":{"lines":{"from":4282,"to":4296}}}}],["2079",{"pageContent":"Transaction confirmation：\nCheck whether the transfer of TRC20 was successful according to result of getTransactionInfoById.\n\nallowance\nAuthorized addresses call the allowance function to query the balance of authroized amount.\n\nHTTP API :\n\nHTTP\n\n/wallet/triggerconstantcontract\nDescription: Trigger the constant of the smart contract, the transaction is off the blockchain\ndemo: curl -X POST https://127.0.0.1:8090/wallet/triggersmartcontract -d '{\n\"contract_address\":\"419E62BE7F4F103C36507CB2A753418791B1CDC182\",\n\"function_selector\":\"allowance(address,address)\",\n\"parameter\":\"00000000000000000000004109669733965A37BA3582E70CCC5302F8D254675D000000000000000000000041A245B99ECB47B18C6A90ED1D51100C5A9F0641A7\",\n\"owner_address\":\"41977C20977F412C2A1AA4EF3D49FEE5EC4C31CDFB\"\n}'\nTronweb Example:\n\nJavaScript\n\nconst TronWeb = require('tronweb')","metadata":{"loc":{"lines":{"from":4298,"to":4320}}}}],["2080",{"pageContent":"JavaScript\n\nconst TronWeb = require('tronweb')\n\nconst HttpProvider = TronWeb.providers.HttpProvider;\nconst fullNode = new HttpProvider(\"https://127.0.0.1:8090\");\nconst solidityNode = new HttpProvider(\"https://127.0.0.1:8090\");\nconst eventServer = new HttpProvider(\"https://127.0.0.1:8090\");\nconst privateKey = \"your private key\";\nconst tronWeb = new TronWeb(fullNode,solidityNode,eventServer,privateKey);\n\nasync function triggerSmartContract() {\n    //Query the USDT balance that Account A can use for Account B: Account B calls allowance (A, B)\n    const trc20ContractAddress = \"TQQg4EL8o1BSeKJY4MJ8TB8XK7xufxFBvK\";//contract address","metadata":{"loc":{"lines":{"from":4320,"to":4333}}}}],["2081",{"pageContent":"try {\n        let contract = await tronWeb.contract().at(trc20ContractAddress);\n        //Use send to execute a non-pure or modify smart contract method on a given smart contract that modify or change values on the blockchain.\n        // These methods consume resources(bandwidth and energy) to perform as the changes need to be broadcasted out to the network.\n        const value = await contract.allowance(\n            \"TM2TmqauSEiRf16CyFgzHV2BVxBejY9...\", //address _owner\n            \"TA1g2WQiXbU5GnYBTJ5Cp22dvSjT3ug...\" //address _spender\n        ).call();\n        console.log('- Output:', value, '\\n');\n    } catch(error) {\n        console.error(\"trigger smart contract error\",error)\n    }\n}\nWallet-cli Example:\n\nwallet-cli command","metadata":{"loc":{"lines":{"from":4335,"to":4350}}}}],["2082",{"pageContent":"wallet-cli command\n\nTriggerConstantContract TQQg4EL8o1BSeKJY4MJ8TB8XK7xufxFBvK allowance(address,address) \"TApuyuazZnGgxvbNbaGcrUijEFn1oidsAH\",\"TQmDzierQxEFJm1dT5YXnTXqVAfdN9HtXj\" false\nUsage : TriggerConstantContract [ownerAddress] [contractAddress] [method] [args] [isHex]\nParameter Description：\nownerAddress: calller address\ncontractAdress：TRC20 contract address\nmethod： contract function\nargs：function parameters，If there is no parameter,use # placeholder\nisHex： whether the address of the command parameter is in hex format\n\nGet TRC-20 transaction history\nSuggest Edits\nTRC-20 transaction history\nGet the transaction history for a specific TRC-20 in a specific account.\n\nAPI documents references\n\nGet Transaction history\nGet TRC-20 transaction info by account address\nShell\n\ncurl --request GET \\\n  --url 'https://api.trongrid.io/v1/accounts/TJmmqjb1DK9TTZbQXzRQ2AuA94z4gKAPFh/transactions/trc20?limit=100&contract_address=TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t'","metadata":{"loc":{"lines":{"from":4350,"to":4373}}}}],["2083",{"pageContent":"curl --request GET \\\n  --url 'https://api.trongrid.io/v1/accounts/TJmmqjb1DK9TTZbQXzRQ2AuA94z4gKAPFh/transactions/trc20?limit=100&contract_address=TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t'\n\nParameters：\nversion:The latest version v1.\naddress: account address，in Base58 or Hex.\nonly_confirmed:  true|false. if false, returns both confirmed & unconfirmed transactions; if no parameters, returns both confirmed & unconfirmed transactions. CAN NOT be used with only_unconfirmed.\nonly_unconfirmed: true|false. if false，returns both confirmed & unconfirmed transactions; if no parameters, returns both confirmed & unconfirmed transactions. CAN NOT be used with only_confirmed.\nlimit:transactions per page，default is 20, maximum is 200.\nfingerprint：The fingerprint of the last transaction returned on the previous page\n. When using this, other parameters and filters should remain unchanged.\ncontract_address：TRC20 contract address, Base58 or Hex.","metadata":{"loc":{"lines":{"from":4373,"to":4384}}}}],["2084",{"pageContent":"//Example\n//Get transactions related to TRC20 USDT on the address TJmmqjb1DK9TTZbQXzRQ2AuA94z4gKAPFh\ncurl --request GET \\\n  --url ' https://api.trongrid.io/v1/accounts/TJmmqjb1DK9TTZbQXzRQ2AuA94z4gKAPFh/transactions/trc20?limit=20&contract_address=TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t'\n\n  TRC-721\nSuggest Edits\n1 TRC-721 Protocol Standard\nTRC-721 is a set of standard interfaces, for issuing non-fungible tokens(NFT) on the TRON network. TRC-721 is fully compatible with ERC-721.\n\n1.1 TRC-721 Smart Contract Interface Implementation\nEvery TRC-721 compliant contract must implement the TRC721 and TRC165 interfaces. Other extension interfaces can be implemented according to specific business requirements.\n\n1.1.1 TRC-721 & TRC-165 Interfaces\nSolidity\n\npragma solidity ^0.4.20;\n\n  interface TRC721 {\n    // Returns the number of NFTs owned by the given account\n    function balanceOf(address _owner) external view returns (uint256);","metadata":{"loc":{"lines":{"from":4386,"to":4406}}}}],["2085",{"pageContent":"pragma solidity ^0.4.20;\n\n  interface TRC721 {\n    // Returns the number of NFTs owned by the given account\n    function balanceOf(address _owner) external view returns (uint256);\n\n    //Returns the owner of the given NFT\n    function ownerOf(uint256 _tokenId) external view returns (address);\n\n    //Transfer ownership of NFT\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external payable;\n\n    //Transfer ownership of NFT\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\n\n    //Transfer ownership of NFT\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\n\n    //Grants address ‘_approved’ the authorization of the NFT ‘_tokenId’\n    function approve(address _approved, uint256 _tokenId) external payable;\n\n    //Grant/recover all NFTs’ authorization of the ‘_operator’\n    function setApprovalForAll(address _operator, bool _approved) external;","metadata":{"loc":{"lines":{"from":4406,"to":4428}}}}],["2086",{"pageContent":"//Grant/recover all NFTs’ authorization of the ‘_operator’\n    function setApprovalForAll(address _operator, bool _approved) external;\n\n    //Query the authorized address of NFT\n    function getApproved(uint256 _tokenId) external view returns (address);\n\n    //Query whether the ‘_operator’ is the authorized address of the ‘_owner’\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\n\n    //The successful ‘transferFrom’ and ‘safeTransferFrom’ will trigger the ‘Transfer’ Event\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n\n    //The successful ‘Approval’ will trigger the ‘Approval’ event\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\n\n    //The successful ‘setApprovalForAll’ will trigger the ‘ApprovalForAll’ event\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n  }","metadata":{"loc":{"lines":{"from":4428,"to":4446}}}}],["2087",{"pageContent":"//The successful ‘setApprovalForAll’ will trigger the ‘ApprovalForAll’ event\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n  }\n\n  interface TRC165 {\n      //Query whether the interface ‘interfaceID’  is supported\n      function supportsInterface(bytes4 interfaceID) external view returns (bool);\n  }\nA wallet/broker/auction application MUST implement the wallet interface if it will accept safe transfers.\n\nSolidity","metadata":{"loc":{"lines":{"from":4446,"to":4457}}}}],["2088",{"pageContent":"Solidity\n\ninterface TRC721TokenReceiver {\n     //This method will be triggered when the ‘_to’ is the contract address during the ‘safeTransferFrom’ execution, and the return value must be checked, If the return value is not bytes4(keccak256(\"onTRC721Received(address,address,uint256,bytes)\")) throws an exception. The smart contract which can receive NFT must implement the TRC721TokenReceiver interface.\n       function onTRC721Received(address _operator, address _from, uint256 _tokenId, bytes _data) external                returns(bytes4);\n   }\n🚧\nNote\n\n\nThe hash of bytes4(keccak256(\"onTRC721Received(address,address,uint256,bytes))) is different from the Ethereum version bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes))). Please use 0x5175f878 instead of 0x150b7a02.","metadata":{"loc":{"lines":{"from":4457,"to":4467}}}}],["2089",{"pageContent":"1.1.2 OPTIONAL Metadata Extension Interface\nThe metadata extension is OPTIONAL for TRC-721 smart contracts. This allows your smart contract to be interrogated for its name and for details about the assets which your NFTs represent.\n\nSolidity\n\ninterface TRC721Metadata {\n     //Return the token name\n     function name() external view returns (string _name);\n\n      //Return the token symbol\n     function symbol() external view returns (string _symbol);\n\n       //Returns the URI of the external file corresponding to ‘_tokenId’. External resource files need to include names, descriptions and pictures. \n     function tokenURI(uint256 _tokenId) external view returns (string);\n  }\nURI is a URI link describing the _tokenId asset, pointing to a JSON file that conforms to the TRC721 metadata description structure. When tokens are minted, each token needs to be assigned a unique URI:\n\nJSON","metadata":{"loc":{"lines":{"from":4469,"to":4486}}}}],["2090",{"pageContent":"JSON\n\n{\n\t\"title\": \"Asset Metadata\",\n\t\"type\": \"object\",\n\t\"properties\": {\n\t\t\"name\": {\n\t\t\t\"type\": \"string\",\n\t\t\t\"description\": \"Identifies the asset to which this NFT represents\"\n\t\t},\n\t\t\"description\": {\n\t\t\t\"type\": \"string\",\n\t\t\t\"description\": \"Describes the asset to which this NFT represents\"\n\t\t},\n\t\t\"image\": {\n\t\t\t\"type\": \"string\",\n\t\t\t\"description\": \"A URI pointing to a resource with mime type image/* representing the asset to which this NFT represents. Consider making any images at a width between 320 and 1080 pixels and aspect ratio between 1.91:1 and 4:5 inclusive.\"\n\t\t}\n\t}\n}\n1.1.3 OPTIONAL Enumeration Extension Interface\nThe enumeration extension is OPTIONAL for TRC-721 smart contracts. This allows your contract to publish its full list of NFTs and make them discoverable.\n\nSolidity\n\ninterface TRC721Enumerable  {\n    //Return the total supply of NFT\n    function totalSupply() external view returns (uint256);","metadata":{"loc":{"lines":{"from":4486,"to":4513}}}}],["2091",{"pageContent":"Solidity\n\ninterface TRC721Enumerable  {\n    //Return the total supply of NFT\n    function totalSupply() external view returns (uint256);\n\n    //Return the corresponding ‘tokenId’ through ‘_index’\n    function tokenByIndex(uint256 _index) external view returns (uint256);\n\n     //Return the ‘tokenId’ corresponding to the index in the NFT list owned by the ‘_owner'\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);\n  }\n\n  Protocol Interface\nProtocol Interface\n\nSuggest Edits\nTRC-721 Standard\nA standard interface allows applications to track and transfer NFTs on Tron. Simple TRC-721 smart contracts list as below to track a large number of NFTs. TRC-20 token standard is insufficient for handling NFTs due to each token in TRC-721 being unique. The standard of TRC-721 is inspiring on Tron. It plays an important role as well as TRC-20.\n\nMUST Implemented Interfaces\nEvery TRC-721 compliant contract must implement the TRC721 and TRC165 interfaces","metadata":{"loc":{"lines":{"from":4513,"to":4534}}}}],["2092",{"pageContent":"MUST Implemented Interfaces\nEvery TRC-721 compliant contract must implement the TRC721 and TRC165 interfaces\n\nsolidity\n\npragma solidity ^0.4.20;\n\n  interface TRC721 {\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);","metadata":{"loc":{"lines":{"from":4534,"to":4544}}}}],["2093",{"pageContent":"function balanceOf(address _owner) external view returns (uint256);\n    function ownerOf(uint256 _tokenId) external view returns (address);\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external payable;\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\n    function approve(address _approved, uint256 _tokenId) external payable;\n    function setApprovalForAll(address _operator, bool _approved) external;\n    function getApproved(uint256 _tokenId) external view returns (address);\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\n  }\n  interface TRC165 {\n      function supportsInterface(bytes4 interfaceID) external view returns (bool);\n  }\nbalanceOf(address _owner)\nReturns the number of NFTs owned by the specified account","metadata":{"loc":{"lines":{"from":4546,"to":4560}}}}],["2094",{"pageContent":"ownerOf(uint256 _tokenId)\nReturns the owner of the specified NFT\n\nsafeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data)\nTransfer ownership of an NFT\n\nsafeTransferFrom(address _from, address _to, uint256 _tokenId)\nTransfer ownership of an NFT\n\ntransferFrom(address _from, address _to, uint256 _tokenId)\nTransfer the ownership of an NFT (the caller must confirm whether the _to address can receive the NFT normally, otherwise the NFT will be lost)\n\napprove(address _approved, uint256 _tokenId)\nGrant other people control of an NFT\n\nsetApprovalForAll(address _operator, bool _approved)\nGrant/recover control of all NFTs by a third party (_operator)\n\ngetApproved(uint256 _tokenId)\nQuery the authorization of a certain NFT\n\nisApprovedForAll(address _owner, address _operator)\nQuery whether the operator is the authorized address of the owner\n\nsupportsInterface(bytes4 interfaceID)\nQuery whether a certain interface is supported (interfaceID)","metadata":{"loc":{"lines":{"from":4562,"to":4587}}}}],["2095",{"pageContent":"supportsInterface(bytes4 interfaceID)\nQuery whether a certain interface is supported (interfaceID)\n\nevent Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId)\nApproval event will be triggered after Approval is successful\n\nevent Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId)\nSuccessful transferFrom and safeTransferFrom will trigger the Transfer event\n\nevent ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved)\nApprovalForAll event will be triggered after setApprovalForAll succeeds\n\nA wallet/broker/auction application MUST implement the wallet interface if it will accept safe transfers.\n\nsolidity\n\ninterface TRC721TokenReceiver {\n       function onTRC721Received(address _operator, address _from, uint256 _tokenId, bytes _data) external       returns(bytes4);\n   }\nonTRC721Received(address _operator, address _from, uint256 _tokenId, bytes _data)","metadata":{"loc":{"lines":{"from":4587,"to":4606}}}}],["2096",{"pageContent":"Works with the safeTransferFrom method, when _to is the contract address, you need to call this method and check the return value. If the return value is not bytes4(keccak256(\"onTRC721Received(address,address,uint256,bytes)\")) an exception will be thrown. A smart contract that can receive NFT must implement the TRC721TokenReceiver interface.\n\n📘\nNote\n\n\nThe hash of bytes4(keccak256(\"onTRC721Received(address,address,uint256,bytes))) is different from the Ethereum version bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes))). With the return value of function onTRC721Received, please use 0x5175f878 instead of 0x150b7a02.\n\nOPTIONAL Metadata Extension Interface\nThe metadata extension is OPTIONAL for TRC-721 smart contracts. This allows your smart contract to be interrogated for its name and for details about the assets which your NFTs represent.\n\nsolidity","metadata":{"loc":{"lines":{"from":4608,"to":4619}}}}],["2097",{"pageContent":"solidity\n\ninterface TRC721Metadata {\n     function name() external view returns (string _name);\n     function symbol() external view returns (string _symbol);\n     function tokenURI(uint256 _tokenId) external view returns (string);\n  }\nname()\nReturns the contract name\n\nsymbol()\nReturns the contract symbol\n\ntokenURI(uint256 _tokenId)\nReturns the URI of the external file corresponding to _tokenId. External resource files need to include names, descriptions and pictures.\n\nOPTIONAL Enumeration Extension Interface\nThe enumeration extension is OPTIONAL for TRC-721 smart contracts. This allows your contract to publish its full list of NFTs and make them discoverable.\n\nsolidity\n\ninterface TRC721Enumerable  {\n    function totalSupply() external view returns (uint256);\n    function tokenByIndex(uint256 _index) external view returns (uint256);\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);\n  }\ntotalSupply()\nReturns the total amount of NFT","metadata":{"loc":{"lines":{"from":4619,"to":4646}}}}],["2098",{"pageContent":"tokenByIndex(uint256 _index)\nReturns the corresponding tokenId through _index\n\ntokenOfOwnerByIndex(address _owner, uint256 _index)\nReturns the tokenId corresponding to the index in the NFT list owned by the owner\n\nTRC-721 Token Issuance\nSuggest Edits\n1 Create a TRON Account\nInstall the Chrome extension of TronLink to get ready for your issuance. You may create a new account in three ways:\n\ncreate a new account\n\nrestoring from a mnemonic phrase, private key or Keystore\n\nconnect to a hardware wallet\n\n350 TRX is required in your account as the minimum.\n\n2 TRC-721 Code Modification\nYou may modify the file of TRC721Token.sol to customise the name and symbol of the token. Remember to save your changes.\n\nTRC-721 contract template: template\n\n936\n3 Deploy a TRC-721 Smart Contract\nDeploy with tronscan: Contract Compiler\n\n3.1 Connect to the Wallet\n936\n3.2 Upload Contract Codes\n936\n936\n3.3 Compile the Contract\n936\nPlease choose the compiler version between 0.5.14 and 0.5.5","metadata":{"loc":{"lines":{"from":4648,"to":4683}}}}],["2099",{"pageContent":"3.1 Connect to the Wallet\n936\n3.2 Upload Contract Codes\n936\n936\n3.3 Compile the Contract\n936\nPlease choose the compiler version between 0.5.14 and 0.5.5\n\n936\nClick ‘Confirm’ to compile. Compilation succeeds with this:\n\n936\n3.4 Deploy the Contract\n936\nRemember to choose TRC721Token, for it is the main contract.\n\n936\nClick Confirm to deploy. There will be a pop-up from TronLink, click Accept to sign.\n\n936\n4 Minting an NFT Token\nLog in to Tronscan with your wallet, and use the contract address to open the deployed TRC-721 contract. Here, take the TZ4NjvdqyCbWmZxXEEAb3bXhfT8f6YGxJd contract on the Nile test net as an example:\n\nChoose 'Contract', 'Write Contract'\n2584\nFind the mintWithTokenURI method, fill in the to_address, tokenId, and the tokenURI corresponding to coral.json\n2534\n📘\nMetadata URI\n\n\nRefer to Uploading NFT MEtadata to BTFS Network for the generation of metadata URI.","metadata":{"loc":{"lines":{"from":4683,"to":4715}}}}],["2100",{"pageContent":"Refer to Uploading NFT MEtadata to BTFS Network for the generation of metadata URI.\n\nClick 'send', then accept the signature. A 'true' will be displayed if the token was mint successfully\n936\n2526\n5 Record TRC-721 Token\nRecord with Tronscan: Record tool\n\nSelect token type\n1037\nSelect the TRC721 token and click Yes.\n\nEnter TRC721 token information\nEnter the basic information, contract address and social media information of the token. Fields with \"*\" are required information.\nPlease note that record must be logged in with the deployer address.\n692\nConfirm all information required for the TRC721 token, click Submit.\n\n683\nYou will see a popup from Tronlink asking for your signature. Click Accept to sign the message.\n\n1030\nToken successfully recorded\n691\n6 Mobile Wallet adds TRC-721 tokens and transfer TRC-721\nClick the Add Assets button\n389\nClick the search button\n394\nInput TRC-721 contract address and click add button\n393\nTRC721 added successfully","metadata":{"loc":{"lines":{"from":4715,"to":4746}}}}],["2101",{"pageContent":"391\nClick TRC-721 token, for example Wendy\n394\nClick Wendy 721 in List collectibles\n393\nClick send for transfer TRC-721\n393\nInput address for receiving and enter your password for wallet\n390\nTransfer successfully\n392\n\nTRC-721 Contract Interaction\nSuggest Edits\n1.Query the Token Name\nCall the name() function of the TRC721 contract to get the token name.\n\nJavaScript\n\nconst TronWeb = require('tronweb')\n\nconst HttpProvider = TronWeb.providers.HttpProvider;\nconst fullNode = new HttpProvider(\"https://nile.trongrid.io\");\nconst solidityNode = new HttpProvider(\"https://nile.trongrid.io\");\nconst eventServer = new HttpProvider(\"https://nile.trongrid.io\");\nconst privateKey = \"your private key\";\nconst tronWeb = new TronWeb(fullNode,solidityNode,eventServer,privateKey);\n\nasync function trc721_name() {\n    const trc721ContractAddress = \"TRio4FwnDvtYN2ogss6Qm7Hn2EaTLwWMNs\";//contract address","metadata":{"loc":{"lines":{"from":4748,"to":4777}}}}],["2102",{"pageContent":"async function trc721_name() {\n    const trc721ContractAddress = \"TRio4FwnDvtYN2ogss6Qm7Hn2EaTLwWMNs\";//contract address\n\n    try {\n        let contract = await tronWeb.contract().at(trc721ContractAddress);\n        //Use call to execute a pure or view smart contract method.\n        // These methods do not modify the blockchain, do not cost anything to execute and are also not broadcasted to the network.\n        let trc721name = await contract.name().call();\n        console.log('name: ', trc721name);\n    } catch(error) {\n        console.error(\"trigger smart contract error\",error)\n    }\n}\ntrc721_name()\nReturn results：\n\n\nname:  TRC721TEST  \n2.Query the Token Symbol\nCall the symbol() function of the TRC721 contract to get the token symbol.\n\nJavaScript\n\nconst TronWeb = require('tronweb')","metadata":{"loc":{"lines":{"from":4777,"to":4800}}}}],["2103",{"pageContent":"name:  TRC721TEST  \n2.Query the Token Symbol\nCall the symbol() function of the TRC721 contract to get the token symbol.\n\nJavaScript\n\nconst TronWeb = require('tronweb')\n\nconst HttpProvider = TronWeb.providers.HttpProvider;\nconst fullNode = new HttpProvider(\"https://nile.trongrid.io\");\nconst solidityNode = new HttpProvider(\"https://nile.trongrid.io\");\nconst eventServer = new HttpProvider(\"https://nile.trongrid.io\");\nconst privateKey = \"your private key\";\nconst tronWeb = new TronWeb(fullNode,solidityNode,eventServer,privateKey);\n\nasync function trc721_symbol() {\n    const trc721ContractAddress = \"TRio4FwnDvtYN2ogss6Qm7Hn2EaTLwWMNs\";//contract address","metadata":{"loc":{"lines":{"from":4800,"to":4816}}}}],["2104",{"pageContent":"async function trc721_symbol() {\n    const trc721ContractAddress = \"TRio4FwnDvtYN2ogss6Qm7Hn2EaTLwWMNs\";//contract address\n\n    try {\n        let contract = await tronWeb.contract().at(trc721ContractAddress);\n        //Use call to execute a pure or view smart contract method.\n        // These methods do not modify the blockchain, do not cost anything to execute and are also not broadcasted to the network.\n        let trc721symbol = await contract.symbol().call();\n        console.log('symbol: ', trc721symbol);\n    } catch(error) {\n        console.error(\"trigger smart contract error\",error)\n    }\n}\ntrc721_symbol()\nReturn results:\n\n\nsymbol:  TEST\n3.Query the Balance\nCall the balanceOf() function of the TRC721 contract to get the balance of tokens for the specified account.\n\nJavaScript\n\nconst TronWeb = require('tronweb')","metadata":{"loc":{"lines":{"from":4816,"to":4839}}}}],["2105",{"pageContent":"symbol:  TEST\n3.Query the Balance\nCall the balanceOf() function of the TRC721 contract to get the balance of tokens for the specified account.\n\nJavaScript\n\nconst TronWeb = require('tronweb')\n\nconst HttpProvider = TronWeb.providers.HttpProvider;\nconst fullNode = new HttpProvider(\"https://nile.trongrid.io\");\nconst solidityNode = new HttpProvider(\"https://nile.trongrid.io\");\nconst eventServer = new HttpProvider(\"https://nile.trongrid.io\");\nconst privateKey = \"your private key\";\nconst tronWeb = new TronWeb(fullNode,solidityNode,eventServer,privateKey);\n\nasync function trc721_balanceOf() {\n    const trc721ContractAddress = \"TRio4FwnDvtYN2ogss6Qm7Hn2EaTLwWMNs\";//contract address\n    var address = \"TA1g2WQiXbU5GnYBTJ5Cp22dvSjT3ug9uK\";","metadata":{"loc":{"lines":{"from":4839,"to":4856}}}}],["2106",{"pageContent":"async function trc721_balanceOf() {\n    const trc721ContractAddress = \"TRio4FwnDvtYN2ogss6Qm7Hn2EaTLwWMNs\";//contract address\n    var address = \"TA1g2WQiXbU5GnYBTJ5Cp22dvSjT3ug9uK\";\n\n    try {\n        let contract = await tronWeb.contract().at(trc721ContractAddress);\n        //Use call to execute a pure or view smart contract method.\n        // These methods do not modify the blockchain, do not cost anything to execute and are also not broadcasted to the network.\n        let result = await contract.balanceOf(address).call();\n        console.log('balance: ', tronWeb.toDecimal(result));\n    } catch(error) {\n        console.error(\"trigger smart contract error\",error)\n    }\n}\ntrc721_balanceOf()\nReturn results:\n\n\nbalance:  1\n4.NFT Transfer\nCall the tranferFrom() function of the TRC721 contract for NFT transfers\n\nJavaScript\n\nconst TronWeb = require('tronweb')","metadata":{"loc":{"lines":{"from":4856,"to":4880}}}}],["2107",{"pageContent":"balance:  1\n4.NFT Transfer\nCall the tranferFrom() function of the TRC721 contract for NFT transfers\n\nJavaScript\n\nconst TronWeb = require('tronweb')\n\nconst HttpProvider = TronWeb.providers.HttpProvider;\nconst fullNode = new HttpProvider(\"https://nile.trongrid.io\");\nconst solidityNode = new HttpProvider(\"https://nile.trongrid.io\");\nconst eventServer = new HttpProvider(\"https://nile.trongrid.io\");\nconst privateKey = \"your private key\";\nconst tronWeb = new TronWeb(fullNode,solidityNode,eventServer,privateKey);\n\nasync function trc721_transferFrom() {\n    const trc721ContractAddress = \"TRio4FwnDvtYN2ogss6Qm7Hn2EaTLwWMNs\";//contract address","metadata":{"loc":{"lines":{"from":4880,"to":4896}}}}],["2108",{"pageContent":"async function trc721_transferFrom() {\n    const trc721ContractAddress = \"TRio4FwnDvtYN2ogss6Qm7Hn2EaTLwWMNs\";//contract address\n\n    try {\n        let contract = await tronWeb.contract().at(trc721ContractAddress);\n        //Use send to execute a non-pure or modify smart contract method on a given smart contract that modify or change values on the blockchain.\n        // These methods consume resources(bandwidth and energy) to perform as the changes need to be broadcasted out to the network.\n        await contract.transferFrom(\n            \"TA1g2WQiXbU5GnYBTJ5Cp22dvSjT3ug9uK\", //address _from\n            \"TM8vRhebJD7zeoBLWAnr9SrYrhWNrHjBgC\", //address _to\n            666 //uint256 tokenId\n        ).send({\n            feeLimit: 100000000\n        }).then(output => {console.log('- transferFrom hash:', output, '\\n');});\n    } catch(error) {\n        console.error(\"trigger smart contract error\",error)\n    }\n}\ntrc721_transferFrom()\nReturn results:","metadata":{"loc":{"lines":{"from":4896,"to":4915}}}}],["2109",{"pageContent":"- transferFrom hash: 9f4d10713cb0406adb7c729013b941d35597afeeba56faf2a1bc7647fc0a92bd\n\nNote: The above result is the transfer transaction hash, you can check the transaction details via Nile tronscan browse\n5.Approve the Control of an NFT to Another Address\nCall the approve() function of the TRC721 contract to grant NFT access to other addresses\n\nJavaScript\n\nconst TronWeb = require('tronweb')\n\nconst HttpProvider = TronWeb.providers.HttpProvider;\nconst fullNode = new HttpProvider(\"https://nile.trongrid.io\");\nconst solidityNode = new HttpProvider(\"https://nile.trongrid.io\");\nconst eventServer = new HttpProvider(\"https://nile.trongrid.io\");\nconst privateKey = \"your private key\";\nconst tronWeb = new TronWeb(fullNode,solidityNode,eventServer,privateKey);\n\nasync function trc721_approve() {\n    const trc721ContractAddress = \"TRio4FwnDvtYN2ogss6Qm7Hn2EaTLwWMNs\";//contract address","metadata":{"loc":{"lines":{"from":4918,"to":4936}}}}],["2110",{"pageContent":"async function trc721_approve() {\n    const trc721ContractAddress = \"TRio4FwnDvtYN2ogss6Qm7Hn2EaTLwWMNs\";//contract address\n\n    try {\n        let contract = await tronWeb.contract().at(trc721ContractAddress);\n        //Use send to execute a non-pure or modify smart contract method on a given smart contract that modify or change values on the blockchain.\n        // These methods consume resources(bandwidth and energy) to perform as the changes need to be broadcasted out to the network.\n        await contract.approve(\n            \"TA1g2WQiXbU5GnYBTJ5Cp22dvSjT3ug9uK\", //address _spender\n            666 //uint256 tokenId\n        ).send({\n            feeLimit: 100000000\n        }).then(output => {console.log('- approve hash:', output, '\\n');});\n    } catch(error) {\n        console.error(\"trigger smart contract error\",error)\n    }\n}\ntrc721_approve()\nReturn results:\n\n\n- approve hash: d7cb1451ed962667f3e24323655dadd8c650ee80d171ea5e44ea97b97eaa3118","metadata":{"loc":{"lines":{"from":4936,"to":4957}}}}],["2111",{"pageContent":"- approve hash: d7cb1451ed962667f3e24323655dadd8c650ee80d171ea5e44ea97b97eaa3118 \n\nNote: The above result is the authorized transaction hash, you can check the transaction details through Nile tronscan browser\n6.Query All NFT information of a TRC-721 Contract of a Specific Address\n(1).Call the function of balanceOf(address _owner) to query the number of NFT holdings\n\nJavaScript\n\nconst TronWeb = require('tronweb')\n\nconst HttpProvider = TronWeb.providers.HttpProvider;\nconst fullNode = new HttpProvider(\"https://nile.trongrid.io\");\nconst solidityNode = new HttpProvider(\"https://nile.trongrid.io\");\nconst eventServer = new HttpProvider(\"https://nile.trongrid.io\");\nconst privateKey = \"your private key\";\nconst tronWeb = new TronWeb(fullNode,solidityNode,eventServer,privateKey);\n\nasync function trc721_balanceOf() {\n    const trc721ContractAddress = \"TRio4FwnDvtYN2ogss6Qm7Hn2EaTLwWMNs\";//contract address\n    var address = \"TM8vRhebJD7zeoBLWAnr9SrYrhWNrHjBgC\";","metadata":{"loc":{"lines":{"from":4957,"to":4976}}}}],["2112",{"pageContent":"async function trc721_balanceOf() {\n    const trc721ContractAddress = \"TRio4FwnDvtYN2ogss6Qm7Hn2EaTLwWMNs\";//contract address\n    var address = \"TM8vRhebJD7zeoBLWAnr9SrYrhWNrHjBgC\";\n\n    try {\n        let contract = await tronWeb.contract().at(trc721ContractAddress);\n        //Use call to execute a pure or view smart contract method.\n        // These methods do not modify the blockchain, do not cost anything to execute and are also not broadcasted to the network.\n        let result = await contract.balanceOf(address).call();\n        console.log('result: ', tronWeb.toDecimal(result));\n    } catch(error) {\n        console.error(\"trigger smart contract error\",error)\n    }\n}\ntrc721_balanceOf()\nReturn results:：\n\n\nresult:  2\nNote: The returned result indicates that the above query address holds a quantity of 2.\n(2).Call the function of tokenOfOwnerByIndex(address _owner, uint256 _index) to traverse all token_ids","metadata":{"loc":{"lines":{"from":4976,"to":4996}}}}],["2113",{"pageContent":"The number of NFTs held by the above address is 2, so the index of the query is 0 and 1 respectively.\n\nJavaScript\n\nconst TronWeb = require('tronweb')\n\nconst HttpProvider = TronWeb.providers.HttpProvider;\nconst fullNode = new HttpProvider(\"https://nile.trongrid.io\");\nconst solidityNode = new HttpProvider(\"https://nile.trongrid.io\");\nconst eventServer = new HttpProvider(\"https://nile.trongrid.io\");\nconst privateKey = \"your private key\";\nconst tronWeb = new TronWeb(fullNode,solidityNode,eventServer,privateKey);\n\nasync function trc721_tokenOfOwnerByIndex(index) {\n    const trc721ContractAddress = \"TRio4FwnDvtYN2ogss6Qm7Hn2EaTLwWMNs\";//contract address","metadata":{"loc":{"lines":{"from":4998,"to":5012}}}}],["2114",{"pageContent":"async function trc721_tokenOfOwnerByIndex(index) {\n    const trc721ContractAddress = \"TRio4FwnDvtYN2ogss6Qm7Hn2EaTLwWMNs\";//contract address\n\n    try {\n        let contract = await tronWeb.contract().at(trc721ContractAddress);\n        //Use call to execute a pure or view smart contract method.\n        // These methods do not modify the blockchain, do not cost anything to execute and are also not broadcasted to the network.\n        let token_id = await contract.tokenOfOwnerByIndex(\n            \"TM8vRhebJD7zeoBLWAnr9SrYrhWNrHjBgC\", // address owner\n            index //uint256 index\n            ).call();\n        console.log('token_id: ', tronWeb.toDecimal(token_id));\n    } catch(error) {\n        console.error(\"trigger smart contract error\",error)\n    }\n}\ntrc721_tokenOfOwnerByIndex(0)\ntrc721_tokenOfOwnerByIndex(1)\nReturn results:\n\n\ntoken_id:  666\ntoken_id:  555\n(3).Call the function of tokenURI(uint256 _tokenId) to query the details of every NFT.\n\nJavaScript","metadata":{"loc":{"lines":{"from":5012,"to":5037}}}}],["2115",{"pageContent":"token_id:  666\ntoken_id:  555\n(3).Call the function of tokenURI(uint256 _tokenId) to query the details of every NFT.\n\nJavaScript\n\nconst TronWeb = require('tronweb')\n\nconst HttpProvider = TronWeb.providers.HttpProvider;\nconst fullNode = new HttpProvider(\"https://nile.trongrid.io\");\nconst solidityNode = new HttpProvider(\"https://nile.trongrid.io\");\nconst eventServer = new HttpProvider(\"https://nile.trongrid.io\");\nconst privateKey = \"your private key\";\nconst tronWeb = new TronWeb(fullNode,solidityNode,eventServer,privateKey);\n\nasync function trc721_tokenURI(tokenid) {\n    const trc721ContractAddress = \"TRio4FwnDvtYN2ogss6Qm7Hn2EaTLwWMNs\";//contract address","metadata":{"loc":{"lines":{"from":5037,"to":5053}}}}],["2116",{"pageContent":"async function trc721_tokenURI(tokenid) {\n    const trc721ContractAddress = \"TRio4FwnDvtYN2ogss6Qm7Hn2EaTLwWMNs\";//contract address\n\n    try {\n        let contract = await tronWeb.contract().at(trc721ContractAddress);\n        //Use call to execute a pure or view smart contract method.\n        // These methods do not modify the blockchain, do not cost anything to execute and are also not broadcasted to the network.\n        let tokenURI = await contract.tokenOfOwnerByIndex(\n            tokenid //uint256 tokenid\n            ).call();\n        console.log(tokenid + ' tokenURI:', tokenURI);\n    } catch(error) {\n        console.error(\"trigger smart contract error\",error)\n    }\n}\ntrc721_tokenURI(666)\ntrc721_tokenURI(555)\nReturn results:\n\n\n666 tokenURI:  https://gateway.btfs.io/btfs/QmWq4cp588QD8tzrSxvPs2bGikDdKyA35BT3iysBcP1jFD\n555 tokenURI: https://gateway.btfs.io/btfs/QmWq4cp588QD8tzrSxvPs2bGikDdKyA35BT3iysBcP1jFD","metadata":{"loc":{"lines":{"from":5053,"to":5074}}}}],["2117",{"pageContent":"666 tokenURI:  https://gateway.btfs.io/btfs/QmWq4cp588QD8tzrSxvPs2bGikDdKyA35BT3iysBcP1jFD\n555 tokenURI: https://gateway.btfs.io/btfs/QmWq4cp588QD8tzrSxvPs2bGikDdKyA35BT3iysBcP1jFD\n\nUploading NFT Metadata to BTFS Network\nSuggest Edits\nBitTorrent File System (BTFS) is a next-generation file-sharing protocol utilizing the TRON network and the BitTorrent ecosystem.\n\nMetadata is the detailed information of the NFT token. It is stored off the chain. Generally, the issuance of an NFT token will specify a URI path that points to the Metadata data of the token.\n\n1 Install BTFS\nRefer to BTFS Installation Instructions.\n\n2 Deposit BTT\nUploading files to the BTFS network requires BTT as the payment method.","metadata":{"loc":{"lines":{"from":5074,"to":5087}}}}],["2118",{"pageContent":"1 Install BTFS\nRefer to BTFS Installation Instructions.\n\n2 Deposit BTT\nUploading files to the BTFS network requires BTT as the payment method.\n\nThe current storage price is 0.0037 BTT/Mb/month. For the uploader, redundant information will be added to the uploaded file and split into 30 copies. Any ten copies can be restored into a complete file so that each file will be uploaded three times the original file size. That is, for the uploader, the price is 3*0.0037 BTT/Mb/month(about $0.000038/Mb/month, calculated with the current price).\n\nWhile using btfs init to initialize the local node, the command will generate a TRON wallet account associated with the node. You can check the TRON address corresponding to the wallet through btfs id.\n\n936\nFirst, you need to recharge some BTT to the node's TRON account and then transfer the BTT of the TRON account to the accounting system of the BTFS network.\n\nSet a Password\nRun the following command to set a password for the node wallet:\n\nShell","metadata":{"loc":{"lines":{"from":5087,"to":5103}}}}],["2119",{"pageContent":"Set a Password\nRun the following command to set a password for the node wallet:\n\nShell\n\nbtfs wallet password   **********\nTransfer BTT to BTFS network accounting system\nRunning the following command will transfer the BTT of the local BTFS node account to the accounting system of the BTFS network. The minimum transfer amount is 10 BTT, and the BTT unit specified in the following command is μBTT (1/1000000 of BTT):\n\nShell\n\nbtfs wallet deposit -p *********  10000000\n3 Upload the File\nStep 1: Prepare a picture and name the picture coral.jpeg\n936\nStep 2: Use Reed-Solomon encoding to add pictures to the local node\nShell\n\nbtfs add --chunker=reed-solomon coral.jpeg\n936\nThe QmUK9nwtLEiHBJ48HAZHNmSQ53U6ADbRhATxs2tomadwKw in the picture is the hash value of the file.\n\nStep 3: Upload files to the BTFS network through this hash value:\nShell","metadata":{"loc":{"lines":{"from":5103,"to":5126}}}}],["2120",{"pageContent":"Step 3: Upload files to the BTFS network through this hash value:\nShell\n\nbtfs storage upload QmUK9nwtLEiHBJ48HAZHNmSQ53U6ADbRhATxs2tomadwKw\n936\nWhen you see \"File storage successful\" in the window of btfs daemon, it means the upload is successful\n\n936\nStep 4: Verify that the picture can be downloaded\nOpen the following link of the picture in the browser, you can see the picture indicating that the picture can be downloaded successfully:\n\nhttps://gateway.btfs.io/btfs/QmUK9nwtLEiHBJ48HAZHNmSQ53U6ADbRhATxs2tomadwKw\n\n936\n4 Construct the NFT metadata file\nYou can use the image link above to construct metadata for NFT.\n\nCreate a JSON file according to the metadata example in the TRC-721 document and name it coral.json, and replace the description value in the image field with the BTFS download link of the image above, as shown in the figure:\n\n936\nRun the btfs command to upload coral.json:","metadata":{"loc":{"lines":{"from":5126,"to":5146}}}}],["2121",{"pageContent":"936\nRun the btfs command to upload coral.json:\n\n936\nOpen the URI of the metadata file in the browser:\nhttps://gateway.btfs.io/btfs/QmWq4cp588QD8tzrSxvPs2bGikDdKyA35BT3iysBcP1jFD\n\n936\n\nIntroduction\nSuggest Edits\nSmart Contract\nA \"smart contract\" is an application program that runs on the TRON network. It's a collection of code (its functions) and data (its state) that resides at a specific account address on the TRON network. Smart contracts are a type of TRON account. This means they have a balance and they can send transactions over the network. However they're not controlled by a user, instead they are deployed to the network and run as programmed. User accounts can then interact with a smart contract by submitting transactions that execute a function defined on the smart contract, but interactions with them are irreversible.","metadata":{"loc":{"lines":{"from":5146,"to":5158}}}}],["2122",{"pageContent":"Perhaps the best metaphor for a smart contract is a vending machine. With the right inputs, a certain output is guaranteed. This logic is programmed into the vending machine: money + snack selection = snack dispensed, then user can get a snack from a vending machine.\n\nA smart contract, like a vending machine, has logic programmed into it. Here's a simple example of smart contract - vending machine:\n\nsolidity=\n\npragma solidity 0.8.7;\n\ncontract VendingMachine {\n\n    // Declare state variables of the contract\n    address public owner;\n    mapping (address => uint) public cupcakeBalances;\n\n    // When 'VendingMachine' contract is deployed:\n    // 1. set the deploying address as the owner of the contract\n    // 2. set the deployed smart contract's cupcake balance to 100\n    constructor() {\n        owner = msg.sender;\n        cupcakeBalances[address(this)] = 100;\n    }","metadata":{"loc":{"lines":{"from":5160,"to":5180}}}}],["2123",{"pageContent":"// Allow the owner to increase the smart contract's cupcake balance\n    function refill(uint amount) public {\n        require(msg.sender == owner, \"Only the owner can refill.\");\n        cupcakeBalances[address(this)] += amount;\n    }\n\n    // Allow anyone to purchase cupcakes\n    function purchase(uint amount) public payable {\n        require(msg.value >= amount * 1 trx , \"You must pay at least 1 TRX per cupcake\");\n        require(cupcakeBalances[address(this)] >= amount, \"Not enough cupcakes in stock to complete this purchase\");\n        cupcakeBalances[address(this)] -= amount;\n        cupcakeBalances[msg.sender] += amount;\n    }\n}\nLike how a vending machine removes the need for a vendor employee, smart contracts can replace intermediaries in many industries.\n\nProperties of Smart Contracts\nSmart contracts in TRON network have the following properties:","metadata":{"loc":{"lines":{"from":5182,"to":5199}}}}],["2124",{"pageContent":"Properties of Smart Contracts\nSmart contracts in TRON network have the following properties:\n\nPremissionless\nAnyone can write a smart contract and deploy it to the TRON network. You just need to learn how to code in a smart contract language, and have enough TRX to deploy your contract. Deploying a smart contract is technically a transaction, so you need to pay your resource fee in the same way that you need to pay for a simple TRX transfer. However resource consumed for contract deployment are far higher.\n\nTRON has developer-friendly language for writing smart contracts:Solidity. However, they must be compiled before they can be deployed so that TRON virtual machine can interpret and store the contract.","metadata":{"loc":{"lines":{"from":5199,"to":5205}}}}],["2125",{"pageContent":"Composability\nSmart contracts are public on TRON network and can be thought of as open APIs. That means you can call other smart contracts in your own smart contract to greatly extend what's possible. Contracts can even deploy other contracts. You don't need to write your own smart contract to become a dapp developer, you just need to know how to interact with them. For example, you can use the existing smart contracts of SunSwap, a decentralized exchange, to handle all the token swap logic in your app – you don't need to start from scratch.\n\nLimitations of Smart Contracts\nThe TRON network smart contracts have the following limitations:","metadata":{"loc":{"lines":{"from":5207,"to":5211}}}}],["2126",{"pageContent":"Limitations of Smart Contracts\nThe TRON network smart contracts have the following limitations:\n\nUnable to communicate with external system\nSmart contracts cannot communicate directly with external systems, so smart contracts themselves cannot get information about \"real-world\" events, and this bottleneck limits smart contract application scenarios, but this is by design. Relying on external information could jeopardise consensus, which is important for security and decentralization. But the oracle can be used to solve this problem.","metadata":{"loc":{"lines":{"from":5211,"to":5215}}}}],["2127",{"pageContent":"Maximum execution time of smart contracts\nIn order to ensure high throughput and stable operation of the network, TRON sets the maximum execution time of TVM to 80ms to ensure that the TRON network can generate a new block every 3s, so the maximum execution time allowed by smart contracts is 80ms . The maximum execution time of TVM is the #13 dynamic parameter of the TRON network, and the super representative committee can modify this parameter by initiating proposals.\n\nFor complex smart contracts, the execution may timeout and trigger an OUT_OF_TIME error, and the caller will be deducted from the full fee_limit fee. So, to avoid smart contracts executing overtime, try to split large contracts into smaller contracts and reference each other as needed, and be aware of common pitfalls and recursive calls to avoid infinite loops.\n\nProgramming Language\nSuggest Edits\nTRON supports Solidity, a developer-friendly smart contract development language, which has the following features:","metadata":{"loc":{"lines":{"from":5217,"to":5224}}}}],["2128",{"pageContent":"Programming Language\nSuggest Edits\nTRON supports Solidity, a developer-friendly smart contract development language, which has the following features:\n\nObject-oriented, high-level language\nStatically typed\nSupports inheritance, libraries and complex user-defined types.\nThe composition of a smart contract\nA smart contract is consist of data and functions.\n\nData\nAny contract data must be assigned to a location: either to storage or memory. It is costly to modify storage in a smart contract so you need to consider where your data should live wisely.\n\nStorage\nPersistent data is referred to as storage and is represented by state variables. These values get stored permanently on the blockchain. You need to declare the type so that the contract can keep track of how much storage on the blockchain it needs when it compiles.\n\nSolidity","metadata":{"loc":{"lines":{"from":5224,"to":5240}}}}],["2129",{"pageContent":"Solidity\n\ncontract SimpleStorage {\n    uint storedData; // State variable\n    // ...\n}\nTypes of variables include: address, boolean, integer, fixed point numbers, fixed-size byte arrays, dynamically-sized byte arrays, Rational and integer literals, String literals, Hexadecimal literals, Enums.\n\naddress：In order to be compatible with Ethereum, the data of address in Solidity is the value obtained by performing the following operations on the hex format address of the TRON network account:","metadata":{"loc":{"lines":{"from":5240,"to":5248}}}}],["2130",{"pageContent":"address：In order to be compatible with Ethereum, the data of address in Solidity is the value obtained by performing the following operations on the hex format address of the TRON network account:\n\nRemove the prefix 41 from the TRON Hex format address\nPerform Mixed-case checksum on the results obtained in the previous step\nMixed-case checksum : According to a certain logic, some letters in the address are capitalized, together with the remaining lowercase letters to form a checksum, so that the address has the ability to self-check. On average, there will be 15 check bits per address, and the net probability that a randomly generated address if mistyped will accidentally pass a check is 0.0247%.\nFor example, this TRON network account TA9h822trLafTtsGXQc4g4ehPvyNzkQNsS, the Hex format address is: 4101fba20cb405734c6b2e704b9ed67c0b5ea74d9e , the value in solidity is:\n\nSolidity","metadata":{"loc":{"lines":{"from":5248,"to":5255}}}}],["2131",{"pageContent":"Solidity\n\naddress newAddress = 0x01fbA20CB405734C6B2e704B9eD67C0b5ea74D9E\nMemory\nValues that are only stored for the lifetime of a contract function's execution are called memory variables. Since these are not stored permanently on the blockchain, they are much cheaper to use.\n\nEnvironment variables\nIn addition to the variables you define on your contract, there are some special global variables. They are primarily used to provide information about the blockchain or current transaction.\n\nExamples:","metadata":{"loc":{"lines":{"from":5255,"to":5264}}}}],["2132",{"pageContent":"Examples:\n\nEnvironment variables\tType\tDescription\nblock.timestamp\tuint256\tTimestamp of the current block in seconds\nblock.number\tuint\tCurrent block number\nblock.coinbase\taddress\tSuper representative's Node address producing the current block\nmsg.sender\taddress\tMessage sender (current smart contract caller)\nmsg.value\tuint\tThe amount of SUN send with message\nmsg.data\tbytes\tcomplete call data\nmsg.sig\tbytes4\tfirst 4 bytes of call data (function identifier)\nnow\tuint\tcurrent block timestamp (block.timestamp)\nFunctions\nThere are two types of function calls:","metadata":{"loc":{"lines":{"from":5264,"to":5276}}}}],["2133",{"pageContent":"internal - these don't create an EVM call\nInternal functions and state variables can only be accessed internally (i.e. from within the current contract or contracts deriving from it)\nexternal - these do create an EVM call\nExternal functions are part of the contract interface, which means they can be called from other contracts and via transactions. An external function f cannot be called internally (i.e. f() does not work, but this.f() works).\nThey can also be public or private:\n\npublic - public functions can be called internally from within the contract or externally via messages\nprivate - private functions are only visible for the contract they are defined in and not in derived contracts\nHere's a function for updating a state variable on a contract, The parameter value of type string is passed into the function: update_name. It's declared public, meaning anyone can access it. It's not declared view, so it can modify the contract state.\n\nSolidity","metadata":{"loc":{"lines":{"from":5278,"to":5288}}}}],["2134",{"pageContent":"Solidity\n\nfunction update_name(string value) public {\n    dapp_name = value;\n}\nView functions\nview functions promise not to modify the state of the contract's data, such as query operations. Here is an example of a function that queries account balances:\n\nSolidity\n\nfunction balanceOf(address _owner) public view returns (uint256 _balance) {\n    return ownerPizzaCount[_owner];\n}\nWhat is considered modifying state:\n\nWriting to state variables.\nEmitting events.\nCreating other contracts.\nUsing selfdestruct.\nSending trx via calls.\nCalling any function not marked view or pure.\nUsing low-level calls.\nUsing inline assembly that contains certain opcodes.\nConstructor functions\nconstructor functions are only executed once when the contract is first deployed. Like constructor in many class-based programming languages, these functions often initialize state variables to their specified values.\n\nSolidity","metadata":{"loc":{"lines":{"from":5288,"to":5314}}}}],["2135",{"pageContent":"Solidity\n\n// Initializes the contract's data, setting the `owner`\n// to the address of the contract creator.\nconstructor() public {\n    // All smart contracts rely on external transactions to trigger its functions.\n    // `msg` is a global variable that includes relevant data on the given transaction,\n    // such as the address of the sender and the trx value included in the transaction.\n    owner = msg.sender;\n}\nBuilt-in functions\nIn addition to the variables and functions you define on your contract, there are some special built-in functions. For example, address.send(), it allows contract to send TRX to other accounts.\n\nWriting functions\nYour function needs:\n\nparameter variable and type (if it accepts parameters)\ndeclaration of public or private\ndeclaration of pure or view or payable\nreturns type (if it returns a value)\nA complete contract might look something like this. Here the constructor function provides an initial value for the dapp_name variable.\n\nSolidity","metadata":{"loc":{"lines":{"from":5314,"to":5336}}}}],["2136",{"pageContent":"Solidity\n\npragma solidity >=0.4.0 <=0.6.0;\n\ncontract ExampleDapp {\n    string dapp_name; // state variable\n\n    // Called when the contract is deployed and initializes the value\n    constructor() public {\n        dapp_name = \"My Example dapp\";\n    }\n\n    // Get Function\n    function read_name() public view returns(string) {\n        return dapp_name;\n    }\n\n    // Set Function\n    function update_name(string value) public {\n        dapp_name = value;\n    }\n}\nEvents and Logs\nEvents allow us to easily query \"things\" that happened when a contract transaction was executed. Logs are used to \"write\" data to data structures outside of smart contracts. Log information cannot be accessed by smart contracts, but can provide information about transactions and what happened in blocks. When a contract transaction is successfully executed, the smart contract can emit events and write logs to the blockchain.","metadata":{"loc":{"lines":{"from":5336,"to":5359}}}}],["2137",{"pageContent":"Smart Contract Library\nYou don't need to write every smart contract in your project from scratch. There are many open source smart contract libraries available that provide reusable building blocks for your project that can save you from having to reinvent the wheel.\n\nWhat's in A Library\nYou can usually find two kinds of building blocks in smart contract libraries: reusable behaviors you can add to your contracts, and implementations of various standards.\n\nBehaviors\nWhen writing smart contracts, there is a good chance you'll find yourself writing similar patterns over and over, like assigning an admin address to carry out protected operations in a contract. Smart contract libraries usually provide reusable implementations of these behaviors as libraries or via inheritance in Solidity.","metadata":{"loc":{"lines":{"from":5361,"to":5368}}}}],["2138",{"pageContent":"As an example, following is a simplified version of the Ownable contract from the OpenZeppelin Contracts library, which designates an address as the owner of a contract, and provides a modifier for restricting access to a method only to that owner.\n\nSolidity\n\ncontract Ownable {\n    address public owner;\n\n    constructor() internal {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n}\n\nTo use a building block like this in your contract, you would need to first import it, and then extend from it in your own contracts. This will allow you to use the modifier provided by the base Ownable contract to secure your own functions.\n\nsolidity=\n\nimport \".../Ownable.sol\"; // Path to the imported library\n\ncontract MyContract is Ownable {\n    // The following function can only be called by the owner\n    function secured() onlyOwner public {\n        msg.sender.transfer(1 ether);\n    }\n}","metadata":{"loc":{"lines":{"from":5370,"to":5398}}}}],["2139",{"pageContent":"contract MyContract is Ownable {\n    // The following function can only be called by the owner\n    function secured() onlyOwner public {\n        msg.sender.transfer(1 ether);\n    }\n}\n\nAnother popular example is SafeMath. This library provides arithmetic functions with overflow checks, which are not provided by the language. It's a good practice to use it instead of native arithmetic operations to guard your contract against overflows, which can have disastrous consequences!\n\nStandards\nThe TRON community has defined several standards in the form of TRCs: TRC10, TRC20, TRC721 etc. When including an TRC as part of your contracts, it's a good idea to look for standard implementations rather than trying to roll out your own.","metadata":{"loc":{"lines":{"from":5398,"to":5408}}}}],["2140",{"pageContent":"How to Add A Library\nAlways refer to the documentation of the library you are including for specific instructions on how to include it in your project. Several Solidity contract libraries are packaged using npm, so you can just npm install them. When including a library, always keep an eye on the language version. For instance, you cannot use a library for Solidity 0.6 if you are writing your contracts in Solidity 0.5.","metadata":{"loc":{"lines":{"from":5410,"to":5411}}}}],["2141",{"pageContent":"When to Use\nUsing a smart contract library for your project has several benefits. First and foremost, it saves you time by providing you with ready-to-use building blocks you can include in your system, rather than having to code them yourself. Security is also a major plus. Open source smart contract libraries are also often heavily scrutinized. Given many projects depend on them, there is a strong incentive by the community to keep them under constant review. It's much more common to find errors in application code than in reusable contract libraries. Some libraries also undergo external audits for additional security.","metadata":{"loc":{"lines":{"from":5413,"to":5414}}}}],["2142",{"pageContent":"However, using smart contract libraries carry the risk of including code you are not familiar with into your project. Without a good understanding of what that contract does, you may be inadvertently introducing an issue in your system due to an unexpected behavior. Always make sure to read the documentation of the code you are importing, and then review the code itself before making it a part of your project!\n\nLast, when deciding on whether to include a library, consider its overall usage. A widely-adopted one has the benefits of having a larger community and more eyes looking into it for issues. Security should be your primary focus when building with smart contracts!\n\nStake 2.0 Solidity API\nSuggest Edits\nStake 2.0 realizes the integration with TVM, users can perform staking/unstaking, delegating/undelegating, resource status query, etc. in the smart contract, the following introduces the Solidity APIs related to Stake 2.0.","metadata":{"loc":{"lines":{"from":5416,"to":5422}}}}],["2143",{"pageContent":"freezebalancev2(uint amount, uint resourceType)\nDescription: stake TRX to obtain TRON Power (voting rights) and bandwidth or energy. If fails, the revert exception will be thrown\n\nParams:\n\namount — amount of TRX to be staked, unit is sun\nresourceType — resource type, 0 is “BANDWIDTH” and 1 is “ENERGY”\nReturns: N/A\n\nExample:\n\n\npragma solidity ^0.8.17;\n\ncontract C {\n    event BalanceFreezedV2(uint, uint);\n\n    // stake 1 TRX to obtain energy\n    function example() external {\n        freezebalancev2(1000000, 1);\n        emit BalanceFreezedV2(1000000, 1);\n    }\n}\nunfreezeBalanceV2(uint amount, uint resourceType)\nDescription: unstake TRX to release bandwidth and energy and at the same time TRON Power will be reduced and corresponding votes will be canceled. After executing this transaction, the users need to wait for N days, then they can call withdrawexpireunfreeze to withdraw their funds.\n\nParams:","metadata":{"loc":{"lines":{"from":5424,"to":5450}}}}],["2144",{"pageContent":"Params:\n\namount — amount of TRX to be staked, unit is sun\nresourceType — resource type, 0 is “BANDWIDTH” and 1 is “ENERGY”\nReturns: N/A\n\nExample:\n\n\npragma solidity ^0.8.17;\n\ncontract C {\n    event BalanceFreezedV2(uint, uint);\n\n    // unstake 1 TRX staked for energy\n    function example() external {\n        unfreezebalancev2(1000000, 1);\n        emit BalanceUnfreezedV2(1000000, 1);\n    }\n}\ncancelAllUnfreezeV2()\nDescription: cancel all pending unstaking requests. Before calling selfdestruct(address) to destroy the contract, should cancel all pending unstaking requests, otherwise, the contract cannot be destroyed.\n\nParams: N/A\n\nReturns: N/A\n\nExample:\n\n\npragma solidity ^0.8.17;\n\ncontract C {\n    event AllUnFreezeV2Canceled();\n\n   // cancel all pending unstaking requests and destroy the contract\n   function killme(address payable target) external {\n         cancelallunfreezev2();\n         emit AllUnFreezeV2Canceled();\n    \n         selfdestruct(target);\n   }","metadata":{"loc":{"lines":{"from":5450,"to":5491}}}}],["2145",{"pageContent":"}\nwithdrawExpireUnfreeze() returns(uint amount)\nDescription: withdraw unfrozen TRX, the user can call this API to withdraw funds to account after executing unfreezeBalanceV2 transaction and waiting N days, N is a network parameter.\n\nParams: N/A\n\nReturns: the amount of TRX successfully withdraw, the unit is sun\n\nExample:\n\n\npragma solidity ^0.8.17;\n\ncontract C {\n    event ExpireUnfreezeWithdrew(uint);\n\n    // withdraw unfrozen TRX\n    function example() external{\n        amount = withdrawexpireunfreeze();\n        emit ExpireUnfreezeWithdrew(amount);\n    }\n\n}\n<address payable>.delegateResource(uint amount, uint resourceType)\nDescription: delegate bandwidth or energy resource to address\n\nParams:\n\namount — amount of TRX staked for resource to be delegated, unit is sun\nresourceType — resource type, 0 is BANDWIDTH and 1 is ENERGY\nReturns: N/A\n\nExample:\n\n\npragma solidity ^0.8.17;\n\ncontract C {\n    event ExpireUnfreezeWithdrew(uint);","metadata":{"loc":{"lines":{"from":5493,"to":5531}}}}],["2146",{"pageContent":"Example:\n\n\npragma solidity ^0.8.17;\n\ncontract C {\n    event ExpireUnfreezeWithdrew(uint);\n\n    // the contract delegates 1 TRX bandwidth resource share to receiver\n    function example(address payable receiver) external {\n        receiver.delegateResource(1000000, 0);\n        emit ResourceDelegated(1000000, 0, receiver);\n    }\n\n}\n<address payable>.unDelegateResource(amount, resourceType)\nDescription: cancel the resource delegation for the address\n\nParams:\n\namount — amount of TRX staked for resource to be undelegated, unit is sun\nresourceType — resource type, 0 is BANDWIDTH and 1 is ENERGY\nReturns: N/A\n\nExample:\n\n\npragma solidity ^0.8.17;\n\ncontract C {\n    event ResourceUnDelegated(uint, uint, address);","metadata":{"loc":{"lines":{"from":5531,"to":5561}}}}],["2147",{"pageContent":"Example:\n\n\npragma solidity ^0.8.17;\n\ncontract C {\n    event ResourceUnDelegated(uint, uint, address);\n\n    // the contract undelegates 1 TRX bandwidth resource share from the receiver\n    function example(address payable receiver) external {\n        receiver.unDelegateResource(1000000, 0);\n        emit ResourceDelegated(1000000, 0, receiver);\n    }\n}\nChain Properties\nchain.totalNetLimit: total bandwidth provision in the network, the current value is 43,200,000,000\nchain.totalNetWeight: total TRX staked for bandwidth, the unit is TRX\nchain.totalEnergyCurrentLimit: total energy provision in the network, the current value is 90,000,000,000\nchain.totalEnergyWeight: total TRX staked for energy, the unit is TRX\nchain.unfreezeDelayDays: unstaking waiting time, the unit is DAY\nExample:\n\n\npragma solidity ^0.8.17;\n\ncontract C {\n\n    function getChainParameters() view public returns(uint, uint, uint, uint, uint)","metadata":{"loc":{"lines":{"from":5561,"to":5588}}}}],["2148",{"pageContent":"pragma solidity ^0.8.17;\n\ncontract C {\n\n    function getChainParameters() view public returns(uint, uint, uint, uint, uint)       \n\n    {\n        return (chain.totalNetLimit, chain.totalNetWeight,\n                chain.totalEnergyCurrentLimit, chain.totalEnergyWeight,\n                chain.unfreezeDelayDays);\n    }\n}\n<address>.availableUnfreezeV2Size() returns(uint)\nDescription: query the remaining times of executing unstake operation for address\n\nParams:N/A\n\nReturns: remaining times of executing unstake operation\n\nExample:\n\n\npragma solidity ^0.8.17;\n\ncontract C {\n    function getvailableUnfreezeV2Size(address target) view public returns(uint) {\n        return target.availableUnfreezeV2Size();\n    }\n}\n<address>.unfreezableBalanceV2() returns(uint amount)\nDescription: query the unfreezable balance of a specified resourceType for address\n\nParams:\n\nresourceType — resource type, 0 is BANDWIDTH and 1 is ENERGY\nReturns: unfreezable TRX balance, the unit is sun\nExample:","metadata":{"loc":{"lines":{"from":5588,"to":5624}}}}],["2149",{"pageContent":"Params:\n\nresourceType — resource type, 0 is BANDWIDTH and 1 is ENERGY\nReturns: unfreezable TRX balance, the unit is sun\nExample:\n\n\npragma solidity ^0.8.17;\n\ncontract C {\n    \n    function getvailableUnfreezeV2Size(address target) view public returns(uint amount) {\n        return target.unfreezableBalanceV2(1);\n    }\n}\n<address>.expireUnfreezeBalanceV2(uint timestamp) returns(uint amount)\nDescription: query the withdrawable balance at the specified timestamp for address\n\nParams:\n\ntimestamp — query cutoff timestamp, the unit is secounds\nReturns: withdrawable TRX balance, the unit is sun\n\nExample:\n\n\npragma solidity ^0.8.17;\n\ncontract C {\n    \n    function getExpireUnfreezeBalanceV2(address target) view public returns(uint amount) {\n        return target.expireUnfreezeBalanceV2(block.timestamp);\n    }\n}\n<address>.delegatableResource(uint resourceType) returns(uint amount)\nDescription: query the amount of delegatable resources share of the specified resourceType for address\n\nParams:","metadata":{"loc":{"lines":{"from":5624,"to":5661}}}}],["2150",{"pageContent":"Params:\n\nresourceType — resource type, 0 is BANDWIDTH and 1 is ENERGY\nReturns: delegatable resources share, the unit is sun\n\nExample:\n\n\npragma solidity ^0.8.17;\n\ncontract C {\n    //query the amount of delegatable resources share of energy for target address\n    function getDelegatableResource(address target) view public returns(uint) {\n        return target.delegatableResource(1);\n    }\n}\n<address>.resourceV2(address from, uint resourceType) returns(uint amount)\nDescription: query the amount of resources share of a specific resourceType delegated by from to address\n\nParams:\n\nfrom — resource owner\nresourceType — Resource type, 0 is BANDWIDTH and 1 is ENERGY\nReturns: resources share, the unit is sun\n\nExample:\n\n\npragma solidity ^0.8.17;","metadata":{"loc":{"lines":{"from":5661,"to":5689}}}}],["2151",{"pageContent":"Params:\n\nfrom — resource owner\nresourceType — Resource type, 0 is BANDWIDTH and 1 is ENERGY\nReturns: resources share, the unit is sun\n\nExample:\n\n\npragma solidity ^0.8.17;\n\ncontract C {\n    //query the amount of resources share of energy delegated by a to b\n    function getResourceV2(address b, address a) view public returns(uint) {\n        return b.resourceV2(a, 1);\n    }\n}\n<address>.checkUnDelegateResource(uint amount, uint resourceTyp) returns(uint available, uint used, uint restoreTime)\nDescription: check whether the contract can recycle the specified amount of resources share of a specific resourceType that have been delegated to address\n\nParams:\n\namount — resource share, unit is sun\nresourceType — resource type, 0 is BANDWIDTH and 1 is ENERGY\nReturns: available is the amount of available resource share, the unit sun, used is the amount of used resource share, the unit is sun, restoreTime is the restore time point for the used resources, the unit is seconds\n\nExample:","metadata":{"loc":{"lines":{"from":5689,"to":5715}}}}],["2152",{"pageContent":"Example:\n\n\npragma solidity ^0.8.17;\n\ncontract C {\n\n    function checkUnDelegateResource(address target) view public returns(uint, uint, uint) {\n        (uint available, uint used, uint restoreTime) = target.checkUnDelegateResource(1000000, 1);\n        return (available, used, restoreTime);\n    }\n}\n<address>.getResourceUsage(uint resourceTyp) returns(uint used, uint restoreTime)\nDescription: query the usage of a specific resourceType of resources for address\n\nParams:\n\nresourceType — resource type, 0 is BANDWIDTH and 1 is ENERGY\nReturns: used is the amount of used resource share, the unit sun,, restoreTime is the restore time point for the used resources, the unit is seconds\n\nExample:\n\n\npragma solidity ^0.8.17;\n\ncontract C {\n\n    function getResourceUsage(address target) view public returns(uint, uint) {\n        (uint used, uint restoreTime) = target.resourceUsage(1);\n        return (used, restoreTime);\n    }","metadata":{"loc":{"lines":{"from":5715,"to":5745}}}}],["2153",{"pageContent":"function getResourceUsage(address target) view public returns(uint, uint) {\n        (uint used, uint restoreTime) = target.resourceUsage(1);\n        return (used, restoreTime);\n    }\n\n}\n<address>.totalResource(uint resourceTyp) returns(uint amount)\nDescription: query the total available resource share of a specific resourceType for address\n\nParams:\n\nresourceType — resource type, 0 is BANDWIDTH and 1 is ENERGY\nReturns: the amount of available resource share, the unit is sun\n\nExample:\n\n\npragma solidity ^0.8.17;\n\ncontract C {\n    //query the available resource share of energy for the target address\n    function getTotalResource(address target) view public returns(uint) {\n        return target.totalResource(1);\n    }\n\n}\n<address>.totalDelegatedResource(uint resourceTyp) returns(uint amount)\nDescription: query delegated resources share of a specific resourceType for address\n\nParams:","metadata":{"loc":{"lines":{"from":5745,"to":5774}}}}],["2154",{"pageContent":"}\n<address>.totalDelegatedResource(uint resourceTyp) returns(uint amount)\nDescription: query delegated resources share of a specific resourceType for address\n\nParams:\n\nresourceType — resource type, 0 is BANDWIDTH and 1 is ENERGY\nReturns: the amount of delegated resource share, the uint is sun\n\nExample:\n\n\npragma solidity ^0.8.17;\n\ncontract C {\n    //query the delegated resource share of energy for the target address\n    function getTotalDelegatedResource(address from) view public returns(uint) {\n        return from.totalDelegatedResource(1);\n    }\n}\n<address>.totalAcquiredResource(uint resourceType) returns(uint amount)\nDescription: query the acquired resource share of a specific resourceType for address\n\nParams:\n\nresourceType — resource type, 0 is BANDWIDTH and 1 is ENERGY\nReturns: the amount of acquired resource share, the unit is sun\n\nExample:\n\n\npragma solidity ^0.8.17;","metadata":{"loc":{"lines":{"from":5774,"to":5805}}}}],["2155",{"pageContent":"Params:\n\nresourceType — resource type, 0 is BANDWIDTH and 1 is ENERGY\nReturns: the amount of acquired resource share, the unit is sun\n\nExample:\n\n\npragma solidity ^0.8.17;\n\ncontract C {\n    //query the acquired resource share of energy for the target address\n    function getTotalAcquiredResource(address target) view public returns(uint) {\n        return target.totalAcquiredResource(1);\n    }\n}\nvote(address[] srList, uint[] tpList)\nDescription: Vote witness in srList array and every witness will get correspond TP in tpList array\n\nParams:\n\nsrList — SR list\ntpList — Number of votes for super representatives in srList\nReturns: N/A\n\nBelow situations can cause revert exception:\n\nsrList array length and tpList array length are different.\nArray length are greater than MAX_VOTE_NUMBER (30).\nThere are normal account address in srList array.\nThere are negative value in 'tpList' array.\nTotal needed tron power is greater than current owned tron power of contract.\nExample:","metadata":{"loc":{"lines":{"from":5805,"to":5837}}}}],["2156",{"pageContent":"pragma solidity ^0.8.17;\n\ncontract C {\n    function voteWitness(address[] calldata srList, uint[] calldata tpList) external {\n        vote(srList, tpList);\n    }\n}\nwithdrawReward() returns(uint)\nDescription: Withdraw all allowance and reward to contract balance\n\nParams:N/A\n\nReturns: Actually withdrawn balance of allowance and reward. unit is sun.\n\nBelow situations can cause revert exception:\n\nContract address is in witness list of genesis block.\nSum of contract balance and reward overflow long (8 bytes).\nExample:\n\n\npragma solidity ^0.8.17;\n\ncontract C {\n    function withdrawReward() external returns(uint) {\n        return withdrawreward();\n    }\n}\nrewardBalance() returns(uint)\nDescription: Query all allowance and reward of contract account\n\nParams:N/A\n\nReturns: Sum of allowance and reward of contradct account\n\nExample:\n\n\npragma solidity ^0.8.17;","metadata":{"loc":{"lines":{"from":5840,"to":5878}}}}],["2157",{"pageContent":"Params:N/A\n\nReturns: Sum of allowance and reward of contradct account\n\nExample:\n\n\npragma solidity ^0.8.17;\n\ncontract C {\n    function queryRewardBalance() external view returns(uint) {\n        return rewardBalance();\n    }\n}\nisSrCandidate(address sr) returns(bool)\nDescription: Judge whether the address is a candidate address\n\nParams:\n\nsr - Address to query\nReturns: If the address is a candidate address, return true, otherwise return false.\n\nExample:\n\n\npragma solidity ^0.8.17;\n\ncontract C {\n    function isWitness(address sr) external view returns(bool) {\n        return isSrCandidate(sr);\n    }\n}\nvoteCount(address from, address to) returns(uint)\nDescription: Query vote count of from account voting for to account\n\nParams:\n\nfrom - vote address\nto - SR address\nReturns: Corresponding vote count (tron-power, 1 trx = 1 tron-power).\n\nExample:\n\n\npragma solidity ^0.8.17;","metadata":{"loc":{"lines":{"from":5878,"to":5922}}}}],["2158",{"pageContent":"Params:\n\nfrom - vote address\nto - SR address\nReturns: Corresponding vote count (tron-power, 1 trx = 1 tron-power).\n\nExample:\n\n\npragma solidity ^0.8.17;\n\ncontract C {\n    function queryVoteCount(address from, address to) external view returns(uint) {\n        return voteCount(from, to);\n    }\n}\nusedVoteCount(address owner) returns(uint)\nDescription: Query owner used vote count\n\nParams:\n\nowner - address to query\nReturns: Used vote count of owner account (tron-power, 1 trx = 1 tron-power).\n\nExample:\n\n\npragma solidity ^0.8.17;\n\ncontract C {\n    function queryUsedVoteCount(address owner) external view returns(uint) {\n        return usedVoteCount(owner);\n    }\n}\nReceivedVoteCount(address owner) returns(uint)\nDescription: Query owner recevied vote count\n\nParams:\n\nowner - address to query\nReturns: Received vote count of owner account (tron-power, 1 trx = 1 tron-power)\n\nExample:\n\n\npragma solidity ^0.8.17;","metadata":{"loc":{"lines":{"from":5922,"to":5967}}}}],["2159",{"pageContent":"Params:\n\nowner - address to query\nReturns: Received vote count of owner account (tron-power, 1 trx = 1 tron-power)\n\nExample:\n\n\npragma solidity ^0.8.17;\n\ncontract C {\n    function queryReceivedVoteCount(address owner) external view returns(uint) {\n        return receivedVoteCount(owner);\n    }\n}\nTotalVoteCount(address owner) returns(uint)\nDescription: Query total vote count of owner (Also can be called tron-power owned by contract)\n\nParams:\n\nowner - address to query\nReturns: Total vote count of owner account (tron-power, 1 trx = 1 tron-power)\n\nExample:\n\n\npragma solidity ^0.8.17;\n\ncontract C {\n    function queryTotalVoteCount(address owner) external view returns(uint) {\n        return totalVoteCount(owner);\n    }\n}","metadata":{"loc":{"lines":{"from":5967,"to":5999}}}}],["2160",{"pageContent":"Example:\n\n\npragma solidity ^0.8.17;\n\ncontract C {\n    function queryTotalVoteCount(address owner) external view returns(uint) {\n        return totalVoteCount(owner);\n    }\n}\n\nDeployment and Invocation\nSuggest Edits\nSmart Contract Deployment\nDeploying a smart contract is to create a CreateSmartContract type transaction, which can be created through the fullnode api wallet/deploycontract, and after the creation, then to sign and broadcast the transaction:\n\ncURL","metadata":{"loc":{"lines":{"from":5999,"to":6015}}}}],["2161",{"pageContent":"curl --request POST \\\n     --url https://api.shasta.trongrid.io/wallet/deploycontract \\\n     --header 'Accept: application/json' \\\n     --header 'Content-Type: application/json' \\\n     --data '\n{\n     \"owner_address\": \"41D1E7A6BC354106CB410E65FF8B181C600FF14292\",\n     \"abi\": \"[{\\\"constant\\\":false,\\\"inputs\\\":[{\\\"name\\\":\\\"key\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"set\\\",\\\"outputs\\\":[],\\\"payable\\\":false,\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"constant\\\":true,\\\"inputs\\\":[{\\\"name\\\":\\\"key\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"get\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"payable\\\":false,\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"}]\",","metadata":{"loc":{"lines":{"from":6017,"to":6024}}}}],["2162",{"pageContent":"\"bytecode\": \"608060405234801561001057600080fd5b5060de8061001f6000396000f30060806040526004361060485763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631ab06ee58114604d5780639507d39a146067575b600080fd5b348015605857600080fd5b506065600435602435608e565b005b348015607257600080fd5b50607c60043560a0565b60408051918252519081900360200190f35b60009182526020829052604090912055565b600090815260208190526040902054905600a165627a7a72305820fdfe832221d60dd582b4526afa20518b98c2e1cb0054653053a844cf265b25040029\",\n     \"fee_limit\": 1000000,\n     \"origin_energy_limit\": 100000,\n     \"name\": \"SomeContract\",\n     \"call_value\": 0,\n     \"consume_user_resource_percent\": 100\n}\n'\nThe return result:","metadata":{"loc":{"lines":{"from":6025,"to":6033}}}}],["2163",{"pageContent":"JSON","metadata":{"loc":{"lines":{"from":6033,"to":6033}}}}],["2164",{"pageContent":"{\n  \"visible\": false,\n  \"txID\": \"e4eb4df3a64a33565059ee3cef29b93b79f58ece9e7e8153fda3bbfe40fb0524\",\n  \"contract_address\": \"416c5d359d1836085cdad65788e1ce53d3d7a13dd6\",\n  \"raw_data\": {\n    \"contract\": [\n      {\n        \"parameter\": {\n          \"value\": {\n            \"owner_address\": \"41d1e7a6bc354106cb410e65ff8b181c600ff14292\",\n            \"new_contract\": {\n              \"bytecode\": \"608060405234801561001057600080fd5b5060de8061001f6000396000f30060806040526004361060485763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631ab06ee58114604d5780639507d39a146067575b600080fd5b348015605857600080fd5b506065600435602435608e565b005b348015607257600080fd5b50607c60043560a0565b60408051918252519081900360200190f35b60009182526020829052604090912055565b600090815260208190526040902054905600a165627a7a72305820fdfe832221d60dd582b4526afa20518b98c2e1cb0054653053a844cf265b25040029\",\n              \"consume_user_resource_percent\": 100,\n              \"name\": \"SomeContract\",","metadata":{"loc":{"lines":{"from":11226,"to":11239}}}}],["2165",{"pageContent":"\"consume_user_resource_percent\": 100,\n              \"name\": \"SomeContract\",\n              \"origin_address\": \"41d1e7a6bc354106cb410e65ff8b181c600ff14292\",\n              \"abi\": {\n                \"entrys\": [\n                  {\n                    \"inputs\": [\n                      {\n                        \"name\": \"key\",\n                        \"type\": \"uint256\"\n                      },\n                      {\n                        \"name\": \"value\",\n                        \"type\": \"uint256\"\n                      }\n                    ],\n                    \"name\": \"set\",\n                    \"stateMutability\": \"Nonpayable\",\n                    \"type\": \"Function\"\n                  },\n                  {\n                    \"outputs\": [\n                      {\n                        \"name\": \"value\",\n                        \"type\": \"uint256\"\n                      }\n                    ],\n                    \"constant\": true,\n                    \"inputs\": [","metadata":{"loc":{"lines":{"from":11239,"to":11267}}}}],["2166",{"pageContent":"\"name\": \"value\",\n                        \"type\": \"uint256\"\n                      }\n                    ],\n                    \"constant\": true,\n                    \"inputs\": [\n                      {\n                        \"name\": \"key\",\n                        \"type\": \"uint256\"\n                      }\n                    ],\n                    \"name\": \"get\",\n                    \"stateMutability\": \"View\",\n                    \"type\": \"Function\"\n                  }\n                ]\n              },\n              \"origin_energy_limit\": 100000\n            }\n          },\n          \"type_url\": \"type.googleapis.com/protocol.CreateSmartContract\"\n        },\n        \"type\": \"CreateSmartContract\"\n      }\n    ],\n    \"ref_block_bytes\": \"0a49\",\n    \"ref_block_hash\": \"975853d6629c8702\",\n    \"expiration\": 1652153760000,\n    \"fee_limit\": 1000000,\n    \"timestamp\": 1652153701556\n  },","metadata":{"loc":{"lines":{"from":11267,"to":11297}}}}],["2167",{"pageContent":"\"raw_data_hex\":","metadata":{"loc":{"lines":{"from":11297,"to":11297}}}}],["2168",{"pageContent":"\"0a020a492208975853d6629c87024080f2a6e08a305add03081e12d8030a30747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e437265617465536d617274436f6e747261637412a3030a1541d1e7a6bc354106cb410e65ff8b181c600ff142921289030a1541d1e7a6bc354106cb410e65ff8b181c600ff142921a5c0a2b1a03736574220e12036b65791a0775696e743235362210120576616c75651a0775696e74323536300240030a2d10011a03676574220e12036b65791a0775696e743235362a10120576616c75651a0775696e743235363002400222fd01608060405234801561001057600080fd5b5060de8061001f6000396000f30060806040526004361060485763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631ab06ee58114604d5780639507d39a146067575b600080fd5b348015605857600080fd5b506065600435602435608e565b005b348015607257600080fd5b50607c60043560a0565b60408051918252519081900360200190f35b60009182526020829052604090912055565b600090815260208190526040902054905600a165627a7a72305820fdfe832221d60dd582b4526afa20518b98c2e1cb0054653053a844cf265b2504002930643a0c536f6d65436f6e747261637440a0","metadata":{"loc":{"lines":{"from":15979,"to":15979}}}}],["2169",{"pageContent":"90f35b60009182526020829052604090912055565b600090815260208190526040902054905600a165627a7a72305820fdfe832221d60dd582b4526afa20518b98c2e1cb0054653053a844cf265b2504002930643a0c536f6d65436f6e747261637440a08d0670b4a9a3e08a309001c0843d\"","metadata":{"loc":{"lines":{"from":15979,"to":15979}}}}],["2170",{"pageContent":"}\nThe transaction structure of different types of transactions are the same, but the content contained in raw_data is different, which is mainly reflected in the contract.parameter.value field of the transaction.","metadata":{"loc":{"lines":{"from":15980,"to":15981}}}}],["2171",{"pageContent":"The contract.parameter.value in the contract deployment transaction contains the following:","metadata":{"loc":{"lines":{"from":15983,"to":15983}}}}],["2172",{"pageContent":"owner_address: address of contract owner, that is Contract deployer address\nnew_contract: details of the new smart contract\norigin_address：address of smart contract owner\ncontract_address：address of the smart contract\nABI：ABI of the smart contract\nbytecode: bytecode of the smart contract\ncall_value：amount of TRX that send to the smart contract\nconsume_user_resource_percent：user energy payment percentage\nname：the name of the smart contract\norigin_energy_limit：limit of the owner’s energy consuming for each transaction, in sun\ncall_token_value: amount of TRC10 token sent to the newly created smart contract\ntoken_id: TRC10 token id\nSmart contract invocation and query\ntriggersmartcontract\nThe contract call is to create a TriggerSmartContract type transaction. You can create a triggering contract call transaction through the fullnode api wallet/triggersmartcontract , after the transaction is created, it needs to be signed, then broadcasted to the entire network.\n\ncURL","metadata":{"loc":{"lines":{"from":15985,"to":16001}}}}],["2173",{"pageContent":"cURL\n\n\ncurl -X POST https://api.shasta.trongrid.io/wallet/triggersmartcontract -d '{\n\"contract_address\":\"419E62BE7F4F103C36507CB2A753418791B1CDC182\",\n\"function_selector\":\"transfer(address,uint256)\",\n\"parameter\":\"00000000000000000000004115208EF33A926919ED270E2FA61367B2DA3753DA0000000000000000000000000000000000000000000000000000000000000032\",\n\"fee_limit\":100000000,\n\"call_value\":0,\n\"owner_address\":\"41977C20977F412C2A1AA4EF3D49FEE5EC4C31CDFB\"\n}'\nParameter description：","metadata":{"loc":{"lines":{"from":16001,"to":16012}}}}],["2174",{"pageContent":"contract_address：contract address\nowner_address: caller address\nfunction_selector：contract function\nparameter：the encoded parameter value of contract method. In this example, there are two parameters that should be passed in, namely address and uint256 type. For details on how to encode and decode the parameters, please refer to Parameter Encoding and Decoding chapter\nfee_limit：The upper limit of the energy consumed by the transaction that the caller is willing to undertake, please refer to the description of feelimit\ncall_value：amount of TRX that send to the smart contract\nAfter the above command is executed successfully, the following results will be returned, including a contract calling transaction: transaction:\n\nJSON","metadata":{"loc":{"lines":{"from":16014,"to":16022}}}}],["2175",{"pageContent":"{\n\t\"result\": {\n\t\t\"result\": true\n\t},\n\t\"transaction\": {\n\t\t\"visible\": false,\n\t\t\"txID\": \"d2ce86097df40287ad45ebc67f0d546ee98c2d7cd7c101e4d4d5b0c8a752d900\",\n\t\t\"raw_data\": {\n\t\t\t\"contract\": [{\n\t\t\t\t\"parameter\": {\n\t\t\t\t\t\"value\": {\n\t\t\t\t\t\t\"data\": \"a9059cbb00000000000000000000004115208ef33a926919ed270e2fa61367b2da3753da0000000000000000000000000000000000000000000000000000000000000032\",\n\t\t\t\t\t\t\"owner_address\": \"41977c20977f412c2a1aa4ef3d49fee5ec4c31cdfb\",\n\t\t\t\t\t\t\"contract_address\": \"419e62be7f4f103c36507cb2a753418791b1cdc182\"\n\t\t\t\t\t},\n\t\t\t\t\t\"type_url\": \"type.googleapis.com/protocol.TriggerSmartContract\"\n\t\t\t\t},\n\t\t\t\t\"type\": \"TriggerSmartContract\"\n\t\t\t}],\n\t\t\t\"ref_block_bytes\": \"1c51\",\n\t\t\t\"ref_block_hash\": \"74912b480b7b887c\",\n\t\t\t\"expiration\": 1652169501000,\n\t\t\t\"fee_limit\": 100000000,\n\t\t\t\"timestamp\": 1652169442098\n\t\t},","metadata":{"loc":{"lines":{"from":16024,"to":16048}}}}],["2176",{"pageContent":"}],\n\t\t\t\"ref_block_bytes\": \"1c51\",\n\t\t\t\"ref_block_hash\": \"74912b480b7b887c\",\n\t\t\t\"expiration\": 1652169501000,\n\t\t\t\"fee_limit\": 100000000,\n\t\t\t\"timestamp\": 1652169442098\n\t\t},\n\t\t\"raw_data_hex\": \"0a021c51220874912b480b7b887c40c8d2e7e78a305aae01081f12a9010a31747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e54726967676572536d617274436f6e747261637412740a1541977c20977f412c2a1aa4ef3d49fee5ec4c31cdfb1215419e62be7f4f103c36507cb2a753418791b1cdc1822244a9059cbb00000000000000000000004115208ef33a926919ed270e2fa61367b2da3753da000000000000000000000000000000000000000000000000000000000000003270b286e4e78a30900180c2d72f\"\n\t}\n}\nThe contract.parameter.value in the contract call transaction contains the following:","metadata":{"loc":{"lines":{"from":16048,"to":16058}}}}],["2177",{"pageContent":"owner_address：caller address\ncontract_address：contract address\ndata：The contract function selector and its parameters, the first 4 bytes are the contract function selector, which is the first 4 bytes of the result obtained by performing the Keccak-256 operation on the contract function name and parameters, which is used for the virtual machine to find the function . The remaining bytes of data are the parameters of the function. For details on encoding and decoding, please refer to the Parameter Encoding and Decoding chapter.\ncall_value：amount of TRX that send to the smart contract\ntoken_id：The token id of the TRC10 token sent to the contract\ncall_token_value：amount of TRC10 token sent to the smart contract\ntriggerconstantcontract\nTo invoke the constant function of the contract through the fullnode api wallet/triggerconstantcontract, because it is a query operation and does not need to be chained, so no signature and broadcast are required :\n\ncURL","metadata":{"loc":{"lines":{"from":16060,"to":16069}}}}],["2178",{"pageContent":"cURL\n\ncurl -X POST https://127.0.0.1:8090/wallet/triggerconstantcontract -d '{\n\"contract_address\":\"419E62BE7F4F103C36507CB2A753418791B1CDC182\",\n\"function_selector\":\"balanceOf(address)\",\n\"parameter\":\"000000000000000000000041977C20977F412C2A1AA4EF3D49FEE5EC4C31CDFB\",\n\"owner_address\":\"41977C20977F412C2A1AA4EF3D49FEE5EC4C31CDFB\"\n}'\n\nParameter description：\n\ncontract_address：contract address\nowner_address：caller address\nfunction_selector：triggered contract method\nparameter：The parameters to be passed in the contract method. For details on encoding and decoding, please refer to the chapter on parameter encoding and decoding.\nThe return result is as follows：\n\nJSON","metadata":{"loc":{"lines":{"from":16069,"to":16086}}}}],["2179",{"pageContent":"{\n\t\"result\": {\n\t\t\"result\": true\n\t},\n\t\"constant_result\": [\"0000000000000000000000000000000000000000000000000000000430e1b700\"],\n\t\"transaction\": {\n\t\t\"ret\": [{}],\n\t\t\"visible\": false,\n\t\t\"txID\": \"7f47212aed2fdab232195feece54fc302bde2ce379e92ffd0d0e95206ce7a3bb\",\n\t\t\"raw_data\": {\n\t\t\t\"contract\": [{\n\t\t\t\t\"parameter\": {\n\t\t\t\t\t\"value\": {\n\t\t\t\t\t\t\"data\": \"70a08231000000000000000000000041977c20977f412c2a1aa4ef3d49fee5ec4c31cdfb\",\n\t\t\t\t\t\t\"owner_address\": \"41977c20977f412c2a1aa4ef3d49fee5ec4c31cdfb\",\n\t\t\t\t\t\t\"contract_address\": \"419e62be7f4f103c36507cb2a753418791b1cdc182\"\n\t\t\t\t\t},\n\t\t\t\t\t\"type_url\": \"type.googleapis.com/protocol.TriggerSmartContract\"\n\t\t\t\t},\n\t\t\t\t\"type\": \"TriggerSmartContract\"\n\t\t\t}],\n\t\t\t\"ref_block_bytes\": \"5ab1\",\n\t\t\t\"ref_block_hash\": \"f24f075df912f43e\",\n\t\t\t\"expiration\": 1590382815000,\n\t\t\t\"timestamp\": 1590382762536\n\t\t},","metadata":{"loc":{"lines":{"from":16088,"to":16113}}}}],["2180",{"pageContent":"},\n\t\t\t\t\"type\": \"TriggerSmartContract\"\n\t\t\t}],\n\t\t\t\"ref_block_bytes\": \"5ab1\",\n\t\t\t\"ref_block_hash\": \"f24f075df912f43e\",\n\t\t\t\"expiration\": 1590382815000,\n\t\t\t\"timestamp\": 1590382762536\n\t\t},\n\t\t\"raw_data_hex\": \"0a025ab12208f24f075df912f43e4098cecfd1a42e5a8e01081f1289010a31747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e54726967676572536d617274436f6e747261637412540a1541977c20977f412c2a1aa4ef3d49fee5ec4c31cdfb1215419e62be7f4f103c36507cb2a753418791b1cdc182222470a08231000000000000000000000041977c20977f412c2a1aa4ef3d49fee5ec4c31cdfb70a8b4ccd1a42e\"\n\t}\n}\nconstant_result：It is the result of querying the contract. In this example, the return value is of type uint256. For details on how to encode and decode the return value, please refer to the Parameter Encoding and Decoding chapter.\nconsume_user_resource_percent","metadata":{"loc":{"lines":{"from":16113,"to":16125}}}}],["2181",{"pageContent":"consume_user_resource_percent\nContract invocation requires payment of a certain resource fee. In order to encourage users to conduct contract transactions and reduce their invocation costs, the TRON network supports contract deployers to share part of the contract invocation fee. When deploying the contract, the user's energy payment ratio can be set through the parameter consume_user_resource_percent.","metadata":{"loc":{"lines":{"from":16125,"to":16126}}}}],["2182",{"pageContent":"The user energy payment ratio is the ratio of the energy paid by the user for smart contract execution. For example, if the user energy payout ratio is set to 60, the user pays 60% of the energy required for contract execution, and the developer (contract deployer) pays the remaining 40% of the energy. This parameter can only be an integer between 0 and 100 (inclusive 0 and 100). Developers are advised to appropriately increase the user's energy payment ratio to prevent users from attacking the contract and exhausting the contract owner's account resources.\n\nAfter the contract is successfully deployed, the user energy payment ratio can also be modified. For example, the contract owner can modify it through the fullnode HTTP API wallet/updatesetting.","metadata":{"loc":{"lines":{"from":16128,"to":16130}}}}],["2183",{"pageContent":"After the contract is successfully deployed, the user energy payment ratio can also be modified. For example, the contract owner can modify it through the fullnode HTTP API wallet/updatesetting.\n\nNote: Although the contract developer may need to share a certain percentage of the energy cost of the contract invocation, when the energy of the developer's account is not enough to pay for the part he or she need undertake, or the energy of the developer's account consumed by this invocation exceeds the value of origin_energy_limit, the rest is borne by the caller.\n\nfeelimit\nThe feelimit refers to the upper limit of the energy cost that the caller is willing to undertake for the deployment or invocation of the smart contract, in sun (1TRX = 1e6 sun). Currently, the upper limit of the energy cost that can be set is 15000 TRX. If the feelimit is set greater than 15000TRX, an error will be occurred.","metadata":{"loc":{"lines":{"from":16130,"to":16135}}}}],["2184",{"pageContent":"When executing the contract, Energy is calculated and deducted one by one instruction. If the energy used is exceeded, the contract execution will fail and the deducted Energy will not be refunded;\n\nBefore deploying the contract to the mainnet, it is best to set a reasonable feelimit. For example, when deploying large contracts or running complex functions, a larger feelimit is necessary. However, due to the existence of contract execution timeouts, infinite loops in contracts, illegal operations, and transfers to non-existing accounts, relatively low feelimit would be the better option.\n\n\nParameter Encoding and Decoding\nSuggest Edits\nThis article mainly introduces how to encode and decode parameters when triggering a smart contract in the Tron network. The encoding and decoding of parameters follows the Solidity ABI encoding rules.","metadata":{"loc":{"lines":{"from":16137,"to":16144}}}}],["2185",{"pageContent":"ABI Encoding Specification\nThis chapter mainly introduces the ABI coding rules through examples. For detailed ABI coding rules, please refer to the ABI Specification in Solidity documentation.\n\nFunction Selector\nThe first four bytes of the data field of a contract function call are the function selector, specifying the function to be called.\n\nThe function selector is the first (left, high-order in big-endian) four bytes of the Keccak-256 hash of the function signature. The function signature contains only the function name and parameter types, without parameter names and spaces. Take tranfer(address _to, uint256 _value) as an example, its function signature is transfer(address, uint256).\n\nYou can get the Keccak-256 hash value of the function signature by calling the tronweb.sha3 interface.","metadata":{"loc":{"lines":{"from":16146,"to":16154}}}}],["2186",{"pageContent":"You can get the Keccak-256 hash value of the function signature by calling the tronweb.sha3 interface.\n\nArgument Encoding\nStarting from the fifth byte, the encoded arguments follow. This encoding is also used in other places, e.g. the return values and also event arguments are encoded in the same way, without the four bytes specifying the function.\n\nTypes\nWe distinguish static and dynamic types. Static types are encoded in-place and dynamic types are encoded at a separately allocated location after the current block.","metadata":{"loc":{"lines":{"from":16154,"to":16160}}}}],["2187",{"pageContent":"Types\nWe distinguish static and dynamic types. Static types are encoded in-place and dynamic types are encoded at a separately allocated location after the current block.\n\nStatic Types：Fixed-length parameters, such as uint256, bytes32, bool (the boolean type is uint8, which can only be 0 or 1). Taking uint256 as an example, for a parameter whose type is uint256, even if the value is 1, it needs to be padded with 0 to make it 256 bits, that is, 32 bytes, so the length of the static parameter is fixed and has nothing to do with the value.\nDynamic Types：The length of dynamic parameters is indeterminate. Dynamic parameter types include: bytes, string, T[] for any T, T[k] for any dynamic T and any k >= 0, (T1,...,Tk) if Ti is dynamic for some 1 <= i <= k.\nStatic Argument Encoding\nExample 1\n\nsolidity=","metadata":{"loc":{"lines":{"from":16160,"to":16168}}}}],["2188",{"pageContent":"solidity=\n\nfunction baz(uint32 x, bool y) public pure returns (bool r) { r = x > 32 || y; }\nThe function signature is baz(uint32,bool), Keccak-256 value of function signature is 0xcdcd77c0992ec5bbfc459984220f8c45084cc24d9b6efed1fae540db8de801d2, Its function selector is 0xcdcd77c0.\n\nThe parameter encoding is expressed in hexadecimal, and every two hexadecimal digits occupies one byte. Since the maximum length of static parameters is 256 bits, during encoding, the length of each static parameter is 256 bits, that is, 32 bytes, with a total of 64 hexadecimal digits. When the parameter is less than 256 bits, the left side is filled with 0s.\n\nPass a set of parameters (69, true) to the baz method, the encoding result is as follows:\n\nConvert the decimal number 69 to hexadecimal 45, and add 0 to the left to make it occupy 32 bytes, the result is：\n0x0000000000000000000000000000000000000000000000000000000000000045","metadata":{"loc":{"lines":{"from":16168,"to":16178}}}}],["2189",{"pageContent":"Convert the decimal number 69 to hexadecimal 45, and add 0 to the left to make it occupy 32 bytes, the result is：\n0x0000000000000000000000000000000000000000000000000000000000000045\n\nBoolean true is 1 of uint8, its hexadecimal value is also 1, and add 0 to the left to make it occupy 32 bytes, and the result is：\n0x0000000000000000000000000000000000000000000000000000000000000001\n\nIn total:\n\n\n0xcdcd77c000000000000000000000000000000000000000000000000000000000000000450000000000000000000000000000000000000000000000000000000000000001\nExample 2\n\nSimilarly, for static type data of bytes type, it needs to be padded to 32 bytes when encoding. The difference is that bytes type data needs to be padded on the right. Take the following function as an example\n\nsolidity=\n\nfunction bar(bytes3[2] memory) public pure {}\nFunction signature is bar(bytes3[2]), function selector is: 0xfce353f6.\n\nPass a set of parameters (abc, def) to this function, the encoding result is as follows:","metadata":{"loc":{"lines":{"from":16178,"to":16197}}}}],["2190",{"pageContent":"Pass a set of parameters (abc, def) to this function, the encoding result is as follows:\n\nThe ASCII value of a b c are 97, 98, 99 in decimal, and 61, 62, 63 in hexadecimal. If parameter is less than 32 bytes，it's need to fill with 0 on the right, the result is: 0x6162630000000000000000000000000000000000000000000000000000000000\nThe ASCII value of d e f are 100, 101, 102 in decimal, and 64, 65, 66 in hexadecimal. If parameter is less than 32 bytes，it's need to fill with 0 on the right, the result is: 0x6465660000000000000000000000000000000000000000000000000000000000\nIn total:\n\n\n0xfce353f661626300000000000000000000000000000000000000000000000000000000006465660000000000000000000000000000000000000000000000000000000000\nDynamic Argument Encoding\nFor dynamic parameters, due to their indeterminate lengths, it is necessary to use a fixed-length offset to occupy the space first, and record the number of offset bytes of the actual position of the dynamic parameters, and then encode the data.","metadata":{"loc":{"lines":{"from":16197,"to":16206}}}}],["2191",{"pageContent":"Take the function f(uint,uint32[],bytes10,bytes) as an example, when passing the parameters (0x123, [0x456, 0x789], \"1234567890\", \"Hello, world!\") to it, the encoding The result is as follows:\n\nThe first static parameter encoding: uints with unmarked lengths are regarded as uint256, and the encoding result of 0x123 is:","metadata":{"loc":{"lines":{"from":16208,"to":16210}}}}],["2192",{"pageContent":"The first static parameter encoding: uints with unmarked lengths are regarded as uint256, and the encoding result of 0x123 is:\n\n\n0x0000000000000000000000000000000000000000000000000000000000000123\nThe offset of the second dynamic parameter: For uint32[], since the array length is unknown，first use the offset to occupy the place, and the offset records the number of bytes at the starting position of this parameter. Before the formal encoding of this uint32 parameter, there are: the encoding of the first parameter uint (32 bytes), the offset of the second parameter uint32[] (32 bytes), and the encoding of the third parameter bytes10 (32 words) section), the offset of the fourth parameter bytes (32 bytes), therefore, the start bytes of the value encoding should be 128, which is 0x80, and the encoding result is:","metadata":{"loc":{"lines":{"from":16210,"to":16214}}}}],["2193",{"pageContent":"0x0000000000000000000000000000000000000000000000000000000000000080\nThe value encoding of second dynamic parameter : an array [0x456, 0x789] is passed to uint32[]. For dynamic parameters, first record its length, which is 0x2, and then encode the value. The encoding result of this parameter is：\n\n\n0000000000000000000000000000000000000000000000000000000000000002 \n0000000000000000000000000000000000000000000000000000000000000456\n0000000000000000000000000000000000000000000000000000000000000789\nThe third static parameter encoding: \"1234567890\" is a static bytes10 parameter, convert it to hex format and pad with 0, the result is:","metadata":{"loc":{"lines":{"from":16217,"to":16224}}}}],["2194",{"pageContent":"0x3132333435363738393000000000000000000000000000000000000000000000\nThe offset of the fourth dynamic parameter: This parameter type is bytes, it is a dynamic type, so first use the offset to occupy the place. The content before the actual content of the parameter is: 1. the encoding of the first parameter uint (32 bytes), 2. the offset of the second parameter uint32[] (32 bytes), 3. the encoding of the third parameter bytes10 (32 bytes) ), 4. the offset of the fourth parameter bytes (32 bytes), 5. the encoding of the second parameter uint32[] (96 bytes). So the offset should be 224 which is 0xe0.\n\n\n0x00000000000000000000000000000000000000000000000000000000000000e0\nThe value encoding of fourth dynamic parameter : For the parameter value ofbytes type ：\"Hello, world!\", first record its length 13, which is 0xd. Then convert the string to hexadecimal characters, that is : 0x48656c6c6f2c20776f726c642100000000000000000000000000000000000000. The encoding result of this parameter is：","metadata":{"loc":{"lines":{"from":16227,"to":16232}}}}],["2195",{"pageContent":"000000000000000000000000000000000000000000000000000000000000000d\n48656c6c6f2c20776f726c642100000000000000000000000000000000000000\nAll parameters are encoded, and the final data is","metadata":{"loc":{"lines":{"from":16235,"to":16237}}}}],["2196",{"pageContent":"0x8be65246 - function selector\n0000000000000000000000000000000000000000000000000000000000000123 - encoding of 0x123\n0000000000000000000000000000000000000000000000000000000000000080 - offset of [0x456, 0x789]\n3132333435363738393000000000000000000000000000000000000000000000 - encoding of \"1234567890\"\n00000000000000000000000000000000000000000000000000000000000000e0 - offset of \"Hello, world!\"\n0000000000000000000000000000000000000000000000000000000000000002 - length of [0x456, 0x789]\n0000000000000000000000000000000000000000000000000000000000000456 - encoding of 0x456\n0000000000000000000000000000000000000000000000000000000000000789 - encoding of 0x789\n000000000000000000000000000000000000000000000000000000000000000d - length of \"Hello, world!\"\n48656c6c6f2c20776f726c642100000000000000000000000000000000000000 - encoding of \"Hello, world!\"\nParameter's Encoding and Decoding","metadata":{"loc":{"lines":{"from":16240,"to":16250}}}}],["2197",{"pageContent":"48656c6c6f2c20776f726c642100000000000000000000000000000000000000 - encoding of \"Hello, world!\"\nParameter's Encoding and Decoding\nAfter understanding the ABI encoding rules, you can use the ABI rules to encode and decode parameters in the code. The TRON community provides many SDKs or libraries for developers to use. Some SDKs have already encapsulated the encoding and decoding of parameters. You can call it directly, such as trident-java. The following will use trident-java SDK and JavaScript libraries to illustrate how to encode and decode parameters in code.","metadata":{"loc":{"lines":{"from":16250,"to":16252}}}}],["2198",{"pageContent":"Parameter Encoding\nWe take the transfer function in USDT contract as an example:\n\nsolidity=\n\nfunction transfer(address to, uint256 value) public returns (bool);\nSuppose you transfer 50000 USDT to the address 412ed5dd8a98aea00ae32517742ea5289761b2710e, and call the triggersmartcontract interface as follows:\n\ncurl=\n\ncurl -X POST https://127.0.0.1:8090/wallet/triggersmartcontract -d '{\n\"contract_address\":\"412dd04f7b26176aa130823bcc67449d1f451eb98f\",\n\"owner_address\":\"411fafb1e96dfe4f609e2259bfaf8c77b60c535b93\",\n\"function_selector\":\"transfer(address,uint256)\",\n\"parameter\":\"0000000000000000000000002ed5dd8a98aea00ae32517742ea5289761b2710e0000000000000000000000000000000000000000000000000000000ba43b7400\",\n\"call_value\":0,\n\"fee_limit\":1000000000,\n\"call_token_value\":0,\n\"token_id\":0\n}'\nIn the above command, the parameter's encoding needs to be in accordance with the ABI rules.","metadata":{"loc":{"lines":{"from":16254,"to":16274}}}}],["2199",{"pageContent":"Example of Parameter Encoding Using Javascript\nFor JavaScript, users can use the ethers library, here is the sample code:\n\njavascript=\n\n// It is recommended to use ethers4.0.47 version\nvar ethers = require('ethers')\n\nconst AbiCoder = ethers.utils.AbiCoder;\nconst ADDRESS_PREFIX_REGEX = /^(41)/;\nconst ADDRESS_PREFIX = \"41\";\n\nasync function encodeParams(inputs){\n    let typesValues = inputs\n    let parameters = ''\n\n    if (typesValues.length == 0)\n        return parameters\n    const abiCoder = new AbiCoder();\n    let types = [];\n    const values = [];\n\n    for (let i = 0; i < typesValues.length; i++) {\n        let {type, value} = typesValues[i];\n        if (type == 'address')\n            value = value.replace(ADDRESS_PREFIX_REGEX, '0x');\n        else if (type == 'address[]')\n            value = value.map(v => toHex(v).replace(ADDRESS_PREFIX_REGEX, '0x'));\n        types.push(type);\n        values.push(value);\n    }","metadata":{"loc":{"lines":{"from":16276,"to":16306}}}}],["2200",{"pageContent":"console.log(types, values)\n    try {\n        parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n    } catch (ex) {\n        console.log(ex);\n    }\n    return parameters\n\n}\n\nasync function main() {\n    let inputs = [\n        {type: 'address', value: \"412ed5dd8a98aea00ae32517742ea5289761b2710e\"},\n        {type: 'uint256', value: 50000000000}\n    ]\n    let parameters = await encodeParams(inputs)\n    console.log(parameters)\n}\n\nmain()\n\nOutput:","metadata":{"loc":{"lines":{"from":16308,"to":16329}}}}],["2201",{"pageContent":"main()\n\nOutput:\n\n\n0000000000000000000000002ed5dd8a98aea00ae32517742ea5289761b2710e0000000000000000000000000000000000000000000000000000000ba43b7400\nExample of Parameter Encoding Using trident-java\nThe process of parameter encoding has been encapsulated in trident, just select the parameter type and pass in the parameter value. The type of the parameter is in the org.tron.trident.abi.datatypes package, please select the appropriate java class according to the parameter type. The following sample code shows how to use trident to generate data information of contract. The main steps are as follows:\n\nTo construct a Function object, three parameters are required: function name, input parameters and output parameters. See Function code for details.\nCall the FunctionEncoder.encode function to encode the Function object and generate the data of the contract transaction.\njava=","metadata":{"loc":{"lines":{"from":16329,"to":16340}}}}],["2202",{"pageContent":"public void SendTrc20Transaction() {\n    ApiWrapper client = ApiWrapper.ofNile(\"3333333333333333333333333333333333333333333333333333333333333333\");\n\n    org.tron.trident.core.contract.Contract contr  = client.getContract(\"\");\n    \n    // transfer(address,uint256) returns (bool)\n    Function trc20Transfer = new Function(\"transfer\",\n                                          Arrays.asList(new Address(\"TVjsyZ7fYF3qLF6BQgPmTEZy1xrNNyVAAA\"),new Uint256(BigInteger.valueOf(10).multiply(BigInteger.valueOf(10).pow(18)))),\n                                          Arrays.asList(new TypeReference<Bool>() {})\n                                         );\n\n    String encodedHex = FunctionEncoder.encode(trc20Transfer);","metadata":{"loc":{"lines":{"from":16342,"to":16353}}}}],["2203",{"pageContent":"String encodedHex = FunctionEncoder.encode(trc20Transfer);\n\n    TriggerSmartContract trigger =\n            TriggerSmartContract.newBuilder()\n                .setOwnerAddress(ApiWrapper.parseAddress(\"TJRabPrwbZy45sbavfcjinPJC18kjpRTv8\"))\n                .setContractAddress(ApiWrapper.parseAddress(\"TF17BgPaZYbz8oxbjhriubPDsA7ArKoLX3\"))\n                .setData(ApiWrapper.parseHex(encodedHex))\n                .build();\n\n    System.out.println(\"trigger:\\n\" + trigger);\n\n    TransactionExtention txnExt = client.blockingStub.triggerContract(trigger);\n    System.out.println(\"txn id => \" + Hex.toHexString(txnExt.getTxid().toByteArray()));\n}\nParameter decoding\nIn the above section of the parameter encoding , the invoked triggersmartcontract generates a transaction object, and then signs and broadcasts it. After the transaction is successfully on chain, the transaction information on the chain can be obtained through gettransactionbyid:\n\ncurl=","metadata":{"loc":{"lines":{"from":16353,"to":16370}}}}],["2204",{"pageContent":"curl=\n\ncurl -X POST \\\n  https://api.trongrid.io/wallet/gettransactionbyid \\\n  -d '{\"value\" : \"1472178f0845f0bfb15957059f3fe9c791e7e039f449c3d5a843aafbc8bbdeeb\"}'\nThe results are as follows:\n\njson=","metadata":{"loc":{"lines":{"from":16370,"to":16377}}}}],["2205",{"pageContent":"{\n    \"ret\": [\n        {\n            \"contractRet\": \"SUCCESS\"\n        }\n    ],\n    ..........\n    \"raw_data\": {\n        \"contract\": [\n            {\n                \"parameter\": {\n                    \"value\": {\n                        \"data\": \"a9059cbb0000000000000000000000002ed5dd8a98aea00ae32517742ea5289761b2710e0000000000000000000000000000000000000000000000000000000ba43b7400\",\n                        \"owner_address\": \"418a4a39b0e62a091608e9631ffd19427d2d338dbd\",\n                        \"contract_address\": \"41a614f803b6fd780986a42c78ec9c7f77e6ded13c\"\n                    },\n                    \"type_url\": \"type.googleapis.com/protocol.TriggerSmartContract\"\n                },\n    ..........\n}","metadata":{"loc":{"lines":{"from":16379,"to":16398}}}}],["2206",{"pageContent":"},\n                    \"type_url\": \"type.googleapis.com/protocol.TriggerSmartContract\"\n                },\n    ..........\n}\nThe raw_data.contract[0].parameter.value.data field in the return value is the called transfer(address to, uint256 value) function and its parameters. The first four bytes a9059cbb of the data field are function selectors, which come from the first 4 bytes after Keccak-256 operation of transfer(address, uint256) in ASCII format, which is used for the virtual machine to address the function. The latter part is the parameter, which is the same as the parameter in the wallet/triggersmartcontract interface in the parameter encoding chapter.","metadata":{"loc":{"lines":{"from":16398,"to":16403}}}}],["2207",{"pageContent":"Function selector，the first four bytes of data, obtained by Keccak-256, cannot be reversed. The function signature can be obtained in two ways:\n\nIf the contract ABI can be obtained, the selector of each contract function can be calculated and compared with the first four bytes of data to judge the function\nThe contract generated by the contract may not have ABI on the chain. The contract deployer can also clear the ABI on the chain through the clearAbi interface. When the ABI cannot be obtained, you can try to query the functions in the database through Ethereum Signature Database.\nFor parameters decode please refer to below content.\n\nExample of Parameter Decoding using javascript\nDecode data\nThe following JavaScript code decodes the data field and obtains the parameters passed by the transfer function:\n\njavascript=\n\nvar ethers = require('ethers')\n\nconst AbiCoder = ethers.utils.AbiCoder;\nconst ADDRESS_PREFIX_REGEX = /^(41)/;\nconst ADDRESS_PREFIX = \"41\";","metadata":{"loc":{"lines":{"from":16405,"to":16421}}}}],["2208",{"pageContent":"javascript=\n\nvar ethers = require('ethers')\n\nconst AbiCoder = ethers.utils.AbiCoder;\nconst ADDRESS_PREFIX_REGEX = /^(41)/;\nconst ADDRESS_PREFIX = \"41\";\n\n//types:Parameter type list, if the function has multiple return values, the order of the types in the list should conform to the defined order\n//output: Data before decoding\n//ignoreMethodHash：Decode the function return value, fill falseMethodHash with false, if decode the data field in the gettransactionbyid result, fill ignoreMethodHash with true\n\nasync function decodeParams(types, output, ignoreMethodHash) {\n\n    if (!output || typeof output === 'boolean') {\n        ignoreMethodHash = output;\n        output = types;\n    }\n\n    if (ignoreMethodHash && output.replace(/^0x/, '').length % 64 === 8)\n        output = '0x' + output.replace(/^0x/, '').substring(8);\n\n    const abiCoder = new AbiCoder();","metadata":{"loc":{"lines":{"from":16421,"to":16443}}}}],["2209",{"pageContent":"if (ignoreMethodHash && output.replace(/^0x/, '').length % 64 === 8)\n        output = '0x' + output.replace(/^0x/, '').substring(8);\n\n    const abiCoder = new AbiCoder();\n\n    if (output.replace(/^0x/, '').length % 64)\n        throw new Error('The encoded string is not valid. Its length must be a multiple of 64.');\n    return abiCoder.decode(types, output).reduce((obj, arg, index) => {\n        if (types[index] == 'address')\n            arg = ADDRESS_PREFIX + arg.substr(2).toLowerCase();\n        obj.push(arg);\n        return obj;\n    }, []);\n}\n\n\nasync function main() {\n\n    let data = '0xa9059cbb0000000000000000000000004f53238d40e1a3cb8752a2be81f053e266d9ecab000000000000000000000000000000000000000000000000000000024dba7580'\n\n    result = await decodeParams(['address', 'uint256'], data, true)\n    console.log(result)\n}\nSample code output:","metadata":{"loc":{"lines":{"from":16443,"to":16466}}}}],["2210",{"pageContent":"result = await decodeParams(['address', 'uint256'], data, true)\n    console.log(result)\n}\nSample code output:\n\n\n[ '414f53238d40e1a3cb8752a2be81f053e266d9ecab', BigNumber { _hex: '0x024dba7580' } ]\nDecode the return value of a contract query operation\nWe take the query function in USDT contract as an example:\n\n\nbalanceOf(address who) public constant returns (uint)\nSuppose you query the balance of 410583A68A3BCD86C25AB1BEE482BAC04A216B0261 and call the triggerconstantcontract interface as follows:\n\ncurl=\n\ncurl -X POST https://127.0.0.1:8090/wallet/triggerconstantcontract -d '{\n\"contract_address\":\"419E62BE7F4F103C36507CB2A753418791B1CDC182\",\n\"function_selector\":\"balanceOf(address)\",\n\"parameter\":\"000000000000000000000041977C20977F412C2A1AA4EF3D49FEE5EC4C31CDFB\",\n\"owner_address\":\"41977C20977F412C2A1AA4EF3D49FEE5EC4C31CDFB\"\n}'\nThe results are as follows:\n\njson=","metadata":{"loc":{"lines":{"from":16466,"to":16490}}}}],["2211",{"pageContent":"json=\n\n{\n    \"result\": {\n        \"result\": true\n    },\n    \"constant_result\": [\n        \"000000000000000000000000000000000000000000000000000196ca228159aa\"\n    ],\n   ............\n}\nThe constant_result is the return value of balanceOf. Here is the sample code for decoding constant_result:\n\njavascript=\n\nasync function main() {\n  //Must start with 0x\n    let outputs = '0x000000000000000000000000000000000000000000000000000196ca228159aa'\n    //\n    //['uint256 '] is a list of return value types. If there are multiple return values, fill in the types in order\n    result = await decodeParams(['uint256'], outputs, false)\n    console.log(result)\n}\nSample code output:\n\n\n[ BigNumber { _hex: '0x0196ca228159aa' } ]\nExample of Parameter Decoding using trident-java\nDecode data\nThe following Java code decodes the data field using trident and obtains the parameters passed by the transfer function:\n\njava=","metadata":{"loc":{"lines":{"from":16490,"to":16521}}}}],["2212",{"pageContent":"java=\n\nfinal String DATA = \"a9059cbb0000000000000000000000007fdf5157514bf89ffcb7ff36f34772afd4cdc7440000000000000000000000000000000000000000000000000de0b6b3a7640000\";\n\npublic void dataDecodingTutorial() {\n        String rawSignature = DATA.substring(0,8);\n        String signature = \"transfer(address,uint256)\"; //function signature\n        Address rawRecipient = TypeDecoder.decodeAddress(DATA.substring(8,72)); //recipient address\n        String recipient = rawRecipient.toString();\n        Uint256 rawAmount = TypeDecoder.decodeNumeric(DATA.substring(72,136), Uint256.class); //amount\n        BigInteger amount = rawAmount.getValue();","metadata":{"loc":{"lines":{"from":16521,"to":16531}}}}],["2213",{"pageContent":"System.out.println(signature);\n        System.out.println(\"Transfer \" + amount + \" to \" + recipient);\n    }\nDecode the return value of a contract query operation\nThe constant function call will return a TransactionExtention object, in which the constantResult field is the query result, which is a List. After converting it to a hex string, you can use the TypeDecoder class in the above sample code to decode the return value of the contract query operation. Or you can also use the decode method of org.tron.trident.abi.FunctionReturnDecoder:\n\nSpecify the type of the return value in the org.tron.trident.abi.FunctionReturnDecoder: decode method, and it can convert the result to an object of this type.\n\njava=","metadata":{"loc":{"lines":{"from":16533,"to":16541}}}}],["2214",{"pageContent":"Specify the type of the return value in the org.tron.trident.abi.FunctionReturnDecoder: decode method, and it can convert the result to an object of this type.\n\njava=\n\npublic BigInteger balanceOf(String accountAddr) {\n        //construct the funtion\n        Function balanceOf = new Function(\"balanceOf\",\n                Arrays.asList(new Address(accountAddr)), Arrays.asList(new TypeReference<Uint256>() {}));\n        //call the function\n        TransactionExtention txnExt = wrapper.constantCall(Base58Check.bytesToBase58(ownerAddr.toByteArray()), \n                Base58Check.bytesToBase58(cntrAddr.toByteArray()), balanceOf);\n        //Convert constant result to human readable text\n        String result = Numeric.toHexString(txnExt.getConstantResult(0).toByteArray());\n        return (BigInteger)FunctionReturnDecoder.decode(result, balanceOf.getOutputParameters()).get(0).getValue();\n      }","metadata":{"loc":{"lines":{"from":16541,"to":16555}}}}],["2215",{"pageContent":"FeeLimit Parameter Setting\nSuggest Edits\nFeeLimit is a parameter of the smart contract transaction, which is used to set the upper limit of the energy cost that the caller is willing to undertake for the deployment or invocation of the smart contract, in sun (1TRX = 1e6 sun). The default value is 0. Currently, the upper limit of feelimit can be set is 15000 TRX.\n\nWhen executing the contract, Energy is calculated and deducted one by one instruction. If the energy used is exceeded, the contract execution will fail and the deducted Energy will not be refunded. Therefore, before deploying or calling the contract, it is recommended to set an appropriate feelimit to ensure the normal execution of smart contract transactions. The following describes how to estimate the energy consumption of smart contract transactions and set the feelimit parameter.","metadata":{"loc":{"lines":{"from":16557,"to":16561}}}}],["2216",{"pageContent":"How to determine the FeeLimit parameter?\nDue to the Dynamic Energy Model mechanism, the energy consumption of popular contracts changes dynamically, so calling the same contract function in different time periods may result in different energy consumption, so in different time periods, transactions that call popular contracts need to set different feelimit parameters. Here we introduce three ways of setting feelimit:\n\nEstimate energy before each contract call\nBefore each transaction is sent, the total energy consumption of the transaction is estimated through API, and the FeeLimit parameter of the transaction is determined according to the estimated energy consumption:","metadata":{"loc":{"lines":{"from":16563,"to":16567}}}}],["2217",{"pageContent":"FeeLimit of contract transaction = estimated total energy consumption * EnergyPrice\nGet the contract energy_factor once every maintenance cycle\nFirst, determine the basic energy consumption of a function of a contract through triggerconstantcontract API or past historical experience of the contract, and then get the energy_factor parameter of a contract at each maintenance cycle:\n\n\nFeeLimit of contract transaction = estimated basic energy consumption * (1 + energy_factor) * EnergyPrice\nSet feelimit according to max_factor\nFirst, determine the basic energy consumption of a function of a contract through triggerconstantcontract API or past historical experience of the contract, and then obtain the max_factor parameter of the chain. max_factor is the maximum ratio of the energy penalty coefficient, so no matter how the energy consumption of popular contracts fluctuates, it will not exceed this maximum ratio:","metadata":{"loc":{"lines":{"from":16570,"to":16577}}}}],["2218",{"pageContent":"FeeLimit of contract transaction = estimated basic energy consumption *（1 + max_factor）* EnergyPrice\nThe advantage of the first method above is that the feelimit setting is very accurate, but the disadvantage is that the operation is more cumbersome, and each transaction needs to be estimated. Compared with the first method, the second method maintains the accuracy of the feelimit setting, but still needs to obtain the energy_factor parameter of the contract every maintenance cycle (6 hours). The advantage of the third method is that it is easy to operate and does not need to frequently obtain the max_factor parameter, but the calculated FeeLimit will be greater than the actual energy cost, because the energy_factor of most contracts will not reach max_factor.\n\nHow to estimate energy consumption?\nDevelopers can call wallet/triggerconstantcontract API to estimate the energy consumption value of calling contracts.\n\nAn example is listed as follows:","metadata":{"loc":{"lines":{"from":16580,"to":16586}}}}],["2219",{"pageContent":"How to estimate energy consumption?\nDevelopers can call wallet/triggerconstantcontract API to estimate the energy consumption value of calling contracts.\n\nAn example is listed as follows:\n\n\n$ curl -X POST  https://nile.trongrid.io/wallet/triggerconstantcontract -d '{\n    \"owner_address\": \"TTGhREx2pDSxFX555NWz1YwGpiBVPvQA7e\",\n    \"contract_address\": \"TVSvjZdyDSNocHm7dP3jvCmMNsCnMTPa5W\",\n    \"function_selector\": \"transfer(address,uint256)\",\n    \"parameter\": \"0000000000000000000000002ce5de57373427f799cc0a3dd03b841322514a8c00000000000000000000000000000000000000000000000000038d7ea4c68000\",\n    \"visible\": true\n}'\nIt returns:\n\n\n{\n   ……\n   \"result\": {\n       \"result\": true\n   },\n   \"energy_used\": 46236,\n   \"energy_penalty\": 32983,\n   ……","metadata":{"loc":{"lines":{"from":16586,"to":16609}}}}],["2220",{"pageContent":"{\n   ……\n   \"result\": {\n       \"result\": true\n   },\n   \"energy_used\": 46236,\n   \"energy_penalty\": 32983,\n   ……\n\n\n}\nThe result.result=true in the example stands for the successful execution of estimating operation, the value of energy_used is the estimated energy consumption of the transaction, where the basic energy consumption value is (energy_used — energy_penalty), and value of energy_penalty is the additional energy consumption.","metadata":{"loc":{"lines":{"from":16609,"to":16620}}}}],["2221",{"pageContent":"The triggerconstantcontract API can be used to estimate the energy consumption value of calling most smart contracts on the chain, such as USDD, USDT, USDC, TUSD, etc. Meanwhile, in the Java-tron 4.7.0.1 version, a new API of wallet/estimateenergy is added. Compared to the existing wallet/triggerconstantcontract API, the new API will be more accurate in estimating the energy consumption of calling a small number of special contract. But for FullNode, enabling the wallet/estimateEnergy API is optional. So please pay attention that when developers call wallet/estimateEnergy, if the error message shows that the node does not support this function when calling the new API (this node does not support estimate energy), it is recommended to continue using the wallet/triggerconstantcontract API to estimate energy consumption.\n\nAn example is listed as follows:","metadata":{"loc":{"lines":{"from":16622,"to":16624}}}}],["2222",{"pageContent":"An example is listed as follows:\n\n\n$ curl -X POST  https://nile.trongrid.io/wallet/estimateenergy -d '{\n    \"owner_address\": \"TTGhREx2pDSxFX555NWz1YwGpiBVPvQA7e\",\n    \"contract_address\": \"TVSvjZdyDSNocHm7dP3jvCmMNsCnMTPa5W\",\n    \"function_selector\": \"transfer(address,uint256)\",\n    \"parameter\": \"0000000000000000000000002ce5de57373427f799cc0a3dd03b841322514a8c00000000000000000000000000000000000000000000000000038d7ea4c68000\",\n    \"visible\": true\n}'\nIt returns:\n\n\n{\n   \"result\": {\n      \"result\": true\n   },\n   \"energy_required\": 34830\n}\n\nThe result.result = true in the example stands for the successful execution of estimating operation, the value of energy_equired is the estimated energy consumption of the transaction, it contains the basic energy consumption and additional energy consumption.","metadata":{"loc":{"lines":{"from":16624,"to":16644}}}}],["2223",{"pageContent":"Security\nSuggest Edits\nSmart contracts are extremely flexible, capable of both holding large quantities of tokens and running immutable logic based on previously deployed smart contract code. While this has created a vibrant and creative ecosystem of trustless, interconnected smart contracts, it is also the perfect ecosystem to attract attackers looking to profit by exploiting vulnerabilities in smart contracts and unexpected behavior in TRON network. Smart contract code usually cannot be changed to patch security flaws, assets that have been stolen from smart contracts are irrecoverable, and stolen assets are extremely difficult to track.\n\nBefore launching any code to Mainnet, it is important to take sufficient precaution to protect anything of value your smart contract is entrusted with. In this article, we will discuss a few specific attacks and best practice to ensure your contracts function correctly and securely.","metadata":{"loc":{"lines":{"from":16646,"to":16650}}}}],["2224",{"pageContent":"Smart Contract Development Process\nSecurity starts with a proper design and development process. There are many things to keep in mind about the smart contract development process, but at least ensure the following:\n\nAll code stored in a version control system, such as git\nAll code modifications made via Pull Requests\nAll Pull Requests have at least one reviewer\nA single command compiles, deploys, and runs a suite of tests against your code using a development tool, for example, tronbox\nYou have run your code through basic code analysis tools such as Mythril and Slither, ideally before each pull request is merged, comparing differences in output\nSolidity does not emit ANY compiler warnings\nYour code is well-documented\nAttacks And Vulnerabilities\nHere are some common vulnerabilities:","metadata":{"loc":{"lines":{"from":16652,"to":16663}}}}],["2225",{"pageContent":"Re-entrancy\nRe-entrancy is one of the largest and most significant security issue to consider when developing Smart Contracts. While the TVM cannot run multiple contracts at the same time, a contract calling a different contract pauses the calling contract's execution and memory state until the call returns, at which point execution proceeds normally. This pausing and re-starting can create a vulnerability known as \"re-entrancy\".\n\nHere is a simple version of a contract that is vulnerable to re-entrancy:\n\nsolidity=\n\n// THIS CONTRACT HAS INTENTIONAL VULNERABILITY, DO NOT COPY\ncontract Victim {\n    mapping (address => uint256) public balances;\n\n    function deposit() external payable {\n        balances[msg.sender] += msg.value;\n    }\n\n    function withdraw() external {\n        uint256 amount = balances[msg.sender];\n        (bool success, ) = msg.sender.call.value(amount)(\"\");\n        require(success);\n        balances[msg.sender] = 0;\n    }\n}","metadata":{"loc":{"lines":{"from":16665,"to":16686}}}}],["2226",{"pageContent":"To allow a user to withdraw TRX they have previously stored on the contract, Withdraw function will do the following in sequence:\n\nReads how much balance a user has\nSends them that balance amount in TRX\nResets their balance to 0, so they cannot withdraw their balance again.\nIf called from a regular external account (such as your own Tronlink account), this functions as expected: msg.sender.call.value() simply sends your account TRX. However, smart contracts can make calls as well. If a custom, malicious contract is the one calling withdraw(), msg.sender.call.value() will not only send amount of TRX, it will also implicitly call the contract to begin executing code. Imagine this malicious contract:\n\nsolidity=\n\ncontract Attacker {\n    uint count；\n    function beginAttack() external payable {\n        count = 5；\n        Victim(VICTIM_ADDRESS).deposit.value(1 trx)();\n        Victim(VICTIM_ADDRESS).withdraw();\n    }","metadata":{"loc":{"lines":{"from":16688,"to":16703}}}}],["2227",{"pageContent":"function() external payable {\n        if（count>0）\n        {\n            count -=1;\n            Victim(VICTIM_ADDRESS).withdraw(); \n        }\n            \n    }\n}\n\nCalling Attacker.beginAttack() will start a cycle that looks something like:\n\n\n0.) Attacker's external account calls Attacker.beginAttack() with 1 TRX。\n0.) Attacker.beginAttack() deposits 1 TRX into Victim contract： Victim.deposit.value(1 trx)();","metadata":{"loc":{"lines":{"from":16705,"to":16719}}}}],["2228",{"pageContent":"1.) Attacker calls Victim's withdraw function： Victim.withdraw()\n  1.) Victim reads the caller's balance 1TRX： balances[msg.sender]\n  1.) Victim sends TRX to Attacker ，which executes default function call of Attacker contract\n    2.) In Attacker's default function  -> Victim.withdraw()\n    2.) Victim reads balance： balances[msg.sender]\n    2.) Victim sends TRX to Attacker which executes default function call of Attacker contract\n      3.) In Attacker's default function -> Victim.withdraw()\n      3.) Victim reads balance： balances[msg.sender]\n      3.) Victim sends TRX to Attacker which executes default function call of Attacker contract\n        4.) For Attacker, in order not to exceed the maximum excution time allowed by the contract, after executing several times, do not continue to execute withdraw, and return directly.\n      3.) balances[msg.sender] = 0;\n    2.) balances[msg.sender] = 0; \n  1.) balances[msg.sender] = 0;","metadata":{"loc":{"lines":{"from":16721,"to":16733}}}}],["2229",{"pageContent":"Calling Attacker.beginAttack with 1 TRX will re-entrancy attack Victim, withdrawing more TRX than it provided. That is, Attacker takes TRX from other users' balances.\n\nHow to deal with re-entrancy\nBy simply switching the order of the storage update and external call, we prevent the re-entrancy condition that enabled the attack. In the following example, the withdraw function first sets the stored balance information to 0, and then transfers TRX to avoid malicious code reentrancy attacks.\n\nsolidity=\n\ncontract NoLongerAVictim {\n    function withdraw() external {\n        uint256 amount = balances[msg.sender];\n        balances[msg.sender] = 0;\n        (bool success, ) = msg.sender.call.value(amount)(\"\");\n        require(success);\n    }\n}","metadata":{"loc":{"lines":{"from":16735,"to":16749}}}}],["2230",{"pageContent":"Any time you are sending TRX to an untrusted address or interacting with an unknown contract (such as calling transfer() of a user-provided token address), you open yourself up to the possibility of re-entrancy. By designing contracts that neither send TRX nor call untrusted contracts, you prevent the possibility of re-entrancy!\n\nMore Attack Types\nIn addition to the above-mentioned re-entrancy attacks caused by smart contract coding, there are many other types of attacks, such as:\n\nTRX send rejection\nInteger overflow/underflow\n\nImplementation Details\nSuggest Edits\nPowered by zk-SNARKs, TRONZ achieved TRON-based TRC20 token shielded transaction, which is one of the few account model-based shield transaction solutions.\n\nThis article is mainly intended to help smart contract developers understand the design and implementation of TRC20 token shielded transactions.","metadata":{"loc":{"lines":{"from":16751,"to":16763}}}}],["2231",{"pageContent":"This article is mainly intended to help smart contract developers understand the design and implementation of TRC20 token shielded transactions.\n\nBackground\nCurrently, most shielded transaction solutions in the blockchain industry are built with UTXO model using technologies like zk-SNARKs and ring signature. For instance, Zcash adopts zk-SNARKs technology while Monero uses ring signature and Bulletproof. Few, however, adopts account model-based shielded transaction scheme because within the account model user's funds are fluid, and zk-SNARKs generated based on the account balance is only valid for a limited period, thus making it extremely difficult to implement a shielded transaction scheme.","metadata":{"loc":{"lines":{"from":16763,"to":16766}}}}],["2232",{"pageContent":"In 2019, Benedikt Bünz and some others proposed a shielded transaction scheme for the account-based system - Zether Protocol[1]. Adopting a new zk-SNARKs mechanism Σ-Bullets, Zether Protocol is able to hide the transfer amount and addresses. This technology was deployed and tested on Ethereum and was proved to be flawed as it consumed too much gas. Even worse, every transaction has to be completed within one epoch or otherwise would fail. So in cases when the network is busy, transactions may often fail as they can not be packed or recorded on-chain.","metadata":{"loc":{"lines":{"from":16768,"to":16768}}}}],["2233",{"pageContent":"In a bid to safeguard users' privacy in TRC20 token transactions, the TRONZ team adopts zk-SNARKs to implement the TRC20 token shielded transaction, protecting the confidentiality of both the amount and addresses of each transaction. Here we provide the standard implementation scheme of the shielded transaction for TRC20 tokens[2], which is fully compatible with standard TRC20 tokens and is able to hide both the amount and addresses of each transaction.\n\nDesign\nTo achieve TRC20 token shielded transaction, a smart contract is deployed to receive users' TRC20 tokens and execute the shielded transaction. In this way, the current UTXO-based shielded transaction scheme can be used to implement the shielded transactions based on the account model.\n\nOur shielded transaction scheme employs two types of accounts: the public account and the shielded account. Public accounts are simply TRON accounts. Shielded accounts are similar to the account system of Zcash Salping.","metadata":{"loc":{"lines":{"from":16770,"to":16775}}}}],["2234",{"pageContent":"We designed three shielded transaction modes: MINT, TRANSFER and BURN.","metadata":{"loc":{"lines":{"from":16777,"to":16777}}}}],["2235",{"pageContent":"MINT refers to the transfer of TRC20 tokens from public addresses to a shielded address. To be more specific, TRC20 tokens are transferred from the user's address to the contract address and a commitment to this shielded output is added to the smart contract.\nTRANSFER supports transfers from up to 2 shielded inputs to no more than 2 shielded outputs (By nature it is many-to-many transfer. Here we add a limit at the implementation level). After the validity of the shielded inputs and outputs is confirmed in the smart contract, a commitment to such shielded output will be added.","metadata":{"loc":{"lines":{"from":16779,"to":16780}}}}],["2236",{"pageContent":"BURN supports two scenarios, the first scenario is to transfer from a shielded input to a public address. The other scenario is to transfer from a shielded input to a public address and a shielded output. After the validity of shielded input and shielded output is confirmed in the smart contract, a certain amount of TRC20 token will be transferred from the contract address to the user's public address. For the second scenario, it will also add the commitment of shielded output.\nImplementation\nShielded Account System\nShielded accounts employ a different key system from the public accounts, as is shown below.","metadata":{"loc":{"lines":{"from":16781,"to":16784}}}}],["2237",{"pageContent":"924\nHere is the usage for each key:","metadata":{"loc":{"lines":{"from":16786,"to":16787}}}}],["2238",{"pageContent":"sk(Spending Key): the 32-byte bit string randomly generated by the user. It is the core key from which all other keys derive;\nask: the BLAKE2b hash calculated from sk and 0. It is used to generate the key for signing the shielded input using Spend Authority Signature algorithm;\nak: the value returned by multiplying a coordinate on the elliptic curve by ask (scalar). It is used to generate the public key for verifying the shielded input using the Spend Authority Signature algorithm;\nnsk: the BLAKE2b hash calculated from sk and 1. It is used to generate nk;\nnk: generated by the scalar multiplication of nsk and a coordinate on the elliptic curve. It is used to generate nullifier(prevent double-spending);\nivk: generated by ak and nk performing a BLAKE2s hash. It's mostly used by the recipient to view the shielded transactions he/she receives;\novk: generated by sk and 2 performing a BLAKE2b hash. It's mostly used by the sender to view the shielded transactions.","metadata":{"loc":{"lines":{"from":16789,"to":16795}}}}],["2239",{"pageContent":"ovk: generated by sk and 2 performing a BLAKE2b hash. It's mostly used by the sender to view the shielded transactions.\nd (Diversifier): the 11-byte random number selected by the user. It is a part of the address and is mainly used for generating different addresses to break the relation between addresses and transactions;\npk_d: it is a part of the address. d will perform a DiversifyHash (namely, hash d to the coordinate of the elliptic curve) first to generate g_d. The scalar multiplication of g_d and ivk produces pk_d, and (d, pk_d) constitutes the shielded address.\nTheory Behind Shielded Transaction","metadata":{"loc":{"lines":{"from":16795,"to":16798}}}}],["2240",{"pageContent":"Theory Behind Shielded Transaction\nEvery anonymous output is a note. Note = (d, pk_d, value, rcm). (d, pk_d)is the transaction address, value is the transaction amount, and rcm is the random number that falls in the scalar range of the Jubjub elliptic curve, namely rcm < 0xe7db4ea6533afa906673b0101343b00a6682093ccc81082d0970e5ed6f72cb7. The getrcm interface provided by the chain can randomly generate rcm. To ensure the anonymity and privacy of the transaction, the note is not on chain. It is the commitment of the note that is on the chain, which is called note_commitment. After each shielded transaction is successfully verified, the note_commitment will be stored at the leaf node of the Merkle tree. Similarly, every anonymous input is also a note.","metadata":{"loc":{"lines":{"from":16798,"to":16799}}}}],["2241",{"pageContent":"When spending a note, the user needs to provide zero-knowledge proof to prove that the user knows the private information of the note being spent. When verifying the proof on the chain, public input is required.\n\nnf: every note matches a unique nf, the positions of nf and note on the Merkle tree is related to note_commitment , it is used to prevent the double spending of note.\nanchor: the root of the Merkle tree.\nvalue_commitment: the commitment to the amount of the note.\nrk: the public key that verifies the Spend Authority Signature of the note\nUsers can spend a certain note by verifying the proof, but others have no way to know which note on the Merkle tree is being spent, which means they won't be able to know the exact amount and the address of the transaction. The privacy and anonymity of the sender can thus be protected.\n\nIn addition to verifying the proof, it is also required to provide Spend Authority Signature to complete an on-chain verification for each anonymous input.","metadata":{"loc":{"lines":{"from":16801,"to":16809}}}}],["2242",{"pageContent":"In addition to verifying the proof, it is also required to provide Spend Authority Signature to complete an on-chain verification for each anonymous input.\n\nWhen performing a transaction, every shielded output also needs zero-knowledge proof to ensure that the user knows the amount of the transaction and the address o the recipient. When verifying a proof, following public inputs are required:\n\nnote_commitment: the commitment to note\nvalue_commitment: the commitment to note amount\nepk: the temporary public key for deciphering note\nVerifying proof confirms the recipient‘s address and amount of the transaction, which are known to no one except the sender and the receiver. Thus, the privacy and anonymity of the receiver are guaranteed.\n\nEvery shielded output requires extra ciphertext fields C_enc and C_out, so that the sender and the receiver can decipher information from the note.","metadata":{"loc":{"lines":{"from":16809,"to":16818}}}}],["2243",{"pageContent":"Every shielded output requires extra ciphertext fields C_enc and C_out, so that the sender and the receiver can decipher information from the note.\n\nBesides, verification of a transaction requires verifying Binding signature, which ensures the balance of the transaction amount for the sender and the recipient.\n\nFor details of the protocol, please refer to TRONZ Privacy Protocol [3]\n\nImplementation of Shielded Transactions\nTRC20 token shielded transaction is implemented through smart contracts (hereafter referred to as shielded contract).\n\nIn deploying the shielded contract, the TRC20 contract address is binded so that the privacy protocol is applied only to the shielded transaction of the TRC20 tokens.","metadata":{"loc":{"lines":{"from":16818,"to":16827}}}}],["2244",{"pageContent":"In deploying the shielded contract, the TRC20 contract address is binded so that the privacy protocol is applied only to the shielded transaction of the TRC20 tokens.\n\n\nconstructor (address trc20ContractAddress, uint256 scalingFactorExponent) public {\n    require(scalingFactorExponent < 77, \"The scalingFactorLogarithm is out of range!\");\n    scalingFactor = 10 ** scalingFactorExponent;\n    owner = msg.sender;\n    trc20Token = TokenTRC20(trc20ContractAddress);\n}\nApart from TRC20 contract address, scalingFactorExponent needs to be set up in the contract, mainly for supporting TRC20 tokens with higher precision (Decimals). The shielded contract requires that the transfer amount must be a multiple of scalingFactor.\n\nThe variable frontier stores the Merkle tree, and leafCount represents the number of nodes on the current Merkle tree.","metadata":{"loc":{"lines":{"from":16827,"to":16838}}}}],["2245",{"pageContent":"The variable frontier stores the Merkle tree, and leafCount represents the number of nodes on the current Merkle tree.\n\n\nbytes32[33] frontier;\nuint256 public leafCount;\nMINT Transaction\nMINT transaction transfers a certain amount of TRC20 tokens to a shielded contract address, and adds the shielded output note_commitment to a leaf node on the shielded contract Merkle tree.\n\nMINT transaction transfers TRC20 tokens from a user account to a shielded contract account, therefore, before implementing MINT, the approve(address _spender, uint256 _value) function of the TRC20 contract needs to be called to allow a certain amount of TRC20 tokens to be transferred to the shielded contract account. _spender represents the shielded contract address and _value represents the transfer amount.","metadata":{"loc":{"lines":{"from":16838,"to":16846}}}}],["2246",{"pageContent":"function mint(uint256 rawValue, bytes32[9] calldata output, bytes32[2] calldata bindingSignature, bytes32[21] calldata c) external {}\nMINT transaction is executed through triggering the shielded contract's mint function. Parameters of the function include:\n\nrawValue: Amount of transfer\noutput: {note_commitment||value_commitment||epk||proof}\nbindingSignature: Binding signature of a transaction that is used to verify the balance of input and output amount within a transaction\nc: {C_enc||C_out}, ciphertext field.\nPerform the following steps in the shielded contract:\n\nTransfer the designated amount of TRC20 tokens from a user address to a shielded contract address.","metadata":{"loc":{"lines":{"from":16849,"to":16858}}}}],["2247",{"pageContent":"Transfer the designated amount of TRC20 tokens from a user address to a shielded contract address.\n\n\nbool transferResult = trc20Token.transferFrom(sender, address(this), rawValue);\nrequire(transferResult, \"TransferFrom failed!\");\nVerify zk-SNARKs and Binding signature. If the verification is successful, update the Merkle tree by adding note_commitment to the leaf node. This step is implemented in verifyMintProof pre-compiled contract and is added specially for zk-SNARKs. verifyMintProof returns the latest root and node that needs to be updated of the Merkle tree.\n\n\nbytes32 signHash = sha256(abi.encodePacked(address(this), value, output, c));\n(bytes32[] memory ret) = verifyMintProof(output, bindingSignature, value, signHash, frontier, leafCount);\nuint256 result = uint256(ret[0]);\nrequire(result == 1, \"The proof and signature have not been verified by the contract!\");\nsignHash is the message Hash of Binding signature.","metadata":{"loc":{"lines":{"from":16858,"to":16870}}}}],["2248",{"pageContent":"The root and node of the Merkle tree, which returned by verifyMintProof, needs to be updated in the contract.\n\n\nmapping(bytes32 => bytes32) public roots;\nroots[latestRoot] = latestRoot;\nroots stores all historical roots of the Merkle tree.\n\nAlso, as tree stores the complete Merkle tree, all updated nodes of the Merkle tree will be updated to tree.\n\n\nmapping(uint256 => bytes32) public tree;\nAdd note_commitment, value_commitment, epk, c and the location of the newly-added leaf node to the transaction log.\n\n\nemit NewLeaf(leafCount - 1, output[0], output[1], output[2], c);\nTRANSFER Transaction\nTRANSFER transaction supports transfers from multiple shielded inputs to multiple shielded outputs. Once a transaction is confirmed, note_commitment of the shielded outputs will be added to the leaf node of the shielded contract’s Merkle tree.\n\nTRANSFER transaction is executed through triggering the shielded contract’s transfer function.","metadata":{"loc":{"lines":{"from":16872,"to":16890}}}}],["2249",{"pageContent":"TRANSFER transaction is executed through triggering the shielded contract’s transfer function.\n\n\nfunction transfer(bytes32[10][] calldata input, bytes32[2][] calldata spendAuthoritySignature, bytes32[9][] calldata output, bytes32[2] calldata bindingSignature, bytes32[21][] calldata c) external {}\nParameters of the function include:\n\ninput: {nf||anchor||value_commitment||rk||proof}, variable-length array. Multiple shielded inputs are supported.\nspendAuthoritySignature: Authentication signature of the shielded input. Each shielded input has a corresponding authentication signature.\noutput: {note_commitment||value_commitment||epk||proof}, each shielded output has a corresponding output.\nbindingSignature: Binding signature of a transaction that is used to verify the balance of input and output amount within a transaction.\nc: {C_enc||C_out}, ciphertext field. Each shielded output has a corresponding c.\nPerform the following steps in the shielded contract:","metadata":{"loc":{"lines":{"from":16890,"to":16901}}}}],["2250",{"pageContent":"Limit the number of shielded inputs and outputs. In order to verify the efficiency of zk-SNARKS, set the upper limit of the number of shielded inputs and outputs to two.\n\n\nrequire(input.length >= 1 && input.length <= 2, \"Input number must be 1 or 2!\");\nrequire(input.length == spendAuthoritySignature.length, \"Input number must be equal to spendAuthoritySignature number!\");\nrequire(output.length >= 1 && output.length <= 2, \"Output number must be 1 or 2!\");\nrequire(output.length == c.length, \"Output number must be equal to c number!\");\nVerify the validity of double spending and Merkle root.","metadata":{"loc":{"lines":{"from":16903,"to":16910}}}}],["2251",{"pageContent":"for (uint256 i = 0; i < input.length; i++) {\n    require(nullifiers[input[i][0]] == 0, \"The note has already been spent!\");\n    require(roots[input[i][1]] != 0, \"The anchor must exist!\");\n}\nVerify whether nf is in nullifiers for each shielded input. If the result is no, then it is verified that the note has not been spent. It also needs to be verified whether anchor exists in the historical roots of Merkle tree.\n\nVerify zk-SNARKs, the authentication signature and Binding signature of shielded input. If the verification is successful, update the Merkle tree by adding note_commitment to the leaf node. This step is implemented in verifyTransferProof pre-compiled contract and is added specially for zk-SNARKs. verifyTransferProof returns the latest root and nodess that needs to be updated of the Merkle tree.","metadata":{"loc":{"lines":{"from":16913,"to":16919}}}}],["2252",{"pageContent":"bytes32 signHash = sha256(abi.encodePacked(address(this), input, output, c));\n(bytes32[] memory ret) = verifyTransferProof(input, spendAuthoritySignature, output, bindingSignature, signHash, frontier, leafCount);\nuint256 result = uint256(ret[0]);\nrequire(result == 1, \"The proof and signature have not been verified by the contract!\");\nThe root and nodes that need to be updated of the Merkle tree, which returned by verifyTransferProof, need to be updated to the contract.\n\nAdd the nf of each shielded input to nullifier to signify the note has been spent.\n\n\nfor (uint256 i = 0; i < input.length; i++) {\n    bytes32 nf = input[i][0];\n    nullifiers[nf] = nf;\n}\nAdd note_commitment, value_commitment, epk, c and the location of the newly-added leaf node of each shielded output to transaction log.","metadata":{"loc":{"lines":{"from":16922,"to":16935}}}}],["2253",{"pageContent":"for (uint256 i = 0; i < output.length; i++) {\n    emit NewLeaf(leafCount - (output.length - i), output[i][0], output[i][1], output[i][2], c[i]);\n}\nBURN Transaction\nBURN transaction enables transfers from a shielded input to either a public address or a public address and a shielded output. Once a transaction is confirmed, a certain amount of TRC20 token will be transferred from the shielded contract address to the user's public address through TRC20 contract's transfer function. For the second scenario, the note_commitment of the shielded output will also be added to the Merkle tree.\n\nBURN transaction is executed through triggering the burn function of the shielded contract.\n\n\nfunction burn(bytes32[10] calldata input, bytes32[2] calldata spendAuthoritySignature, uint256 rawValue, bytes32[2] calldata bindingSignature, address payTo, bytes32[3] calldata burnCipher, bytes32[9][] calldata output, bytes32[21][] calldata c) external {}\nParameters of the function include:","metadata":{"loc":{"lines":{"from":16938,"to":16948}}}}],["2254",{"pageContent":"input: {nf||anchor||value_commitment||rk||proof}\nspendAuthoritySignature: Authentication signature of shielded input.\nrawValue: Amount of transfer.\nbindingSignature: Binding signature of a transaction that is used to verify the balance of input and output amount within a transaction.\npayTo: Public address of the transaction's receiver.\nburnCipher: Encryption of the receiving address and the transfer amount. Encryption key is the sender's ovk. This parameter is mainly used by the transaction sender to track his transaction history.\noutput: {note_commitment||value_commitment||epk||proof}\nc: {C_enc||C_out}，ciphertext field. Each shielded output has a corresponding c.\nPerform the function following the steps below:\n\nVerify nf and anchor to determine whether the shielded input has been double-spent and whether the anchor is the historical root of the Merkle tree.","metadata":{"loc":{"lines":{"from":16950,"to":16960}}}}],["2255",{"pageContent":"Verify nf and anchor to determine whether the shielded input has been double-spent and whether the anchor is the historical root of the Merkle tree.\n\n\nrequire(nullifiers[nf] == 0, \"The note has already been spent!\");\nrequire(roots[anchor] != 0, \"The anchor must exist!\");\nDecide the burn scenario based on the length of output, if it is scenario one(transfer from a shielded input to a public address), execute the step 2.1, it it is the scenario two(transfer from a shielded input to a public address and a shielded output), execute the step 2.2\n\n2.1 For scenario one, Verify zk-SNARKs, the authentication signature and Binding signature of shielded input. This step is implemented in verifyBurnProof pre-compiled contract and is specially added for zk-SNARKs.","metadata":{"loc":{"lines":{"from":16960,"to":16967}}}}],["2256",{"pageContent":"bytes32 signHash = sha256(abi.encodePacked(address(this), input, output, c, payTo, value));\n(bool result) = verifyBurnProof(input, spendAuthoritySignature, value, bindingSignature, signHash);\nrequire(result, \"The proof and signature have not been verified by the contract!\");\n2.2 For scenario two, Verify zk-SNARKs of shielded input and shielded output, verify the authentication signature and Binding signature of shielded input. This step is implemented in verifyTransferProof pre-compiled contract and is specially added for zk-SNARKs.","metadata":{"loc":{"lines":{"from":16970,"to":16973}}}}],["2257",{"pageContent":"bytes32 signHash = sha256(abi.encodePacked(address(this), input, output, c, payTo, value));\n   (bytes32[] memory ret) = verifyTransferProof(inputs, spendAuthoritySignatures, output, bindingSignature, signHash, value, frontier, leafCount);\n   uint256 result = uint256(ret[0]);\n   require(result == 1, \"The proof and signature have not been verified by the contract!\");\nThe root and nodes that need to be updated, which returned by verifyTransferProof, needs to be updated to the contract.\n\nAdd the nf of the shielded input to nullifier to signify the note has been spent.\n\n\nnullifiers[nf] = nf;\nCall the transfer function of TRC20 contract to transfer a certain amount of TRC20 token from the shielded contract address to the public address specified by the user.","metadata":{"loc":{"lines":{"from":16976,"to":16986}}}}],["2258",{"pageContent":"nullifiers[nf] = nf;\nCall the transfer function of TRC20 contract to transfer a certain amount of TRC20 token from the shielded contract address to the public address specified by the user.\n\n\nbool transferResult = trc20Token.transfer(payTo, rawValue);\nrequire(transferResult, \"Transfer failed!\");\nMerkle Path\nIn the construction of a shielded input, private information of note includes the Merkle path and Merkle tree root of note_commitment. To help users construct zk-SNARKs with ease, the shielded contract provides getPath as a method to calculate the Merkle path of a leaf node at a specified location.\n\n\nfunction getPath(uint256 position) public view returns (bytes32, bytes32[32] memory) {}\nEnter the location of the leaf node using getPath. Merkle root and Merkle path will be returned.\n\nImplementation Details\nSuggest Edits\nPowered by zk-SNARKs, TRONZ achieved TRON-based TRC20 token shielded transaction, which is one of the few account model-based shield transaction solutions.","metadata":{"loc":{"lines":{"from":16986,"to":17001}}}}],["2259",{"pageContent":"Implementation Details\nSuggest Edits\nPowered by zk-SNARKs, TRONZ achieved TRON-based TRC20 token shielded transaction, which is one of the few account model-based shield transaction solutions.\n\nThis article is mainly intended to help smart contract developers understand the design and implementation of TRC20 token shielded transactions.\n\nBackground\nCurrently, most shielded transaction solutions in the blockchain industry are built with UTXO model using technologies like zk-SNARKs and ring signature. For instance, Zcash adopts zk-SNARKs technology while Monero uses ring signature and Bulletproof. Few, however, adopts account model-based shielded transaction scheme because within the account model user's funds are fluid, and zk-SNARKs generated based on the account balance is only valid for a limited period, thus making it extremely difficult to implement a shielded transaction scheme.","metadata":{"loc":{"lines":{"from":17001,"to":17008}}}}],["2260",{"pageContent":"In 2019, Benedikt Bünz and some others proposed a shielded transaction scheme for the account-based system - Zether Protocol[1]. Adopting a new zk-SNARKs mechanism Σ-Bullets, Zether Protocol is able to hide the transfer amount and addresses. This technology was deployed and tested on Ethereum and was proved to be flawed as it consumed too much gas. Even worse, every transaction has to be completed within one epoch or otherwise would fail. So in cases when the network is busy, transactions may often fail as they can not be packed or recorded on-chain.","metadata":{"loc":{"lines":{"from":17010,"to":17010}}}}],["2261",{"pageContent":"In a bid to safeguard users' privacy in TRC20 token transactions, the TRONZ team adopts zk-SNARKs to implement the TRC20 token shielded transaction, protecting the confidentiality of both the amount and addresses of each transaction. Here we provide the standard implementation scheme of the shielded transaction for TRC20 tokens[2], which is fully compatible with standard TRC20 tokens and is able to hide both the amount and addresses of each transaction.\n\nDesign\nTo achieve TRC20 token shielded transaction, a smart contract is deployed to receive users' TRC20 tokens and execute the shielded transaction. In this way, the current UTXO-based shielded transaction scheme can be used to implement the shielded transactions based on the account model.\n\nOur shielded transaction scheme employs two types of accounts: the public account and the shielded account. Public accounts are simply TRON accounts. Shielded accounts are similar to the account system of Zcash Salping.","metadata":{"loc":{"lines":{"from":17012,"to":17017}}}}],["2262",{"pageContent":"We designed three shielded transaction modes: MINT, TRANSFER and BURN.","metadata":{"loc":{"lines":{"from":17019,"to":17019}}}}],["2263",{"pageContent":"MINT refers to the transfer of TRC20 tokens from public addresses to a shielded address. To be more specific, TRC20 tokens are transferred from the user's address to the contract address and a commitment to this shielded output is added to the smart contract.\nTRANSFER supports transfers from up to 2 shielded inputs to no more than 2 shielded outputs (By nature it is many-to-many transfer. Here we add a limit at the implementation level). After the validity of the shielded inputs and outputs is confirmed in the smart contract, a commitment to such shielded output will be added.","metadata":{"loc":{"lines":{"from":17021,"to":17022}}}}],["2264",{"pageContent":"BURN supports two scenarios, the first scenario is to transfer from a shielded input to a public address. The other scenario is to transfer from a shielded input to a public address and a shielded output. After the validity of shielded input and shielded output is confirmed in the smart contract, a certain amount of TRC20 token will be transferred from the contract address to the user's public address. For the second scenario, it will also add the commitment of shielded output.\nImplementation\nShielded Account System\nShielded accounts employ a different key system from the public accounts, as is shown below.","metadata":{"loc":{"lines":{"from":17023,"to":17026}}}}],["2265",{"pageContent":"924\nHere is the usage for each key:","metadata":{"loc":{"lines":{"from":17028,"to":17029}}}}],["2266",{"pageContent":"sk(Spending Key): the 32-byte bit string randomly generated by the user. It is the core key from which all other keys derive;\nask: the BLAKE2b hash calculated from sk and 0. It is used to generate the key for signing the shielded input using Spend Authority Signature algorithm;\nak: the value returned by multiplying a coordinate on the elliptic curve by ask (scalar). It is used to generate the public key for verifying the shielded input using the Spend Authority Signature algorithm;\nnsk: the BLAKE2b hash calculated from sk and 1. It is used to generate nk;\nnk: generated by the scalar multiplication of nsk and a coordinate on the elliptic curve. It is used to generate nullifier(prevent double-spending);\nivk: generated by ak and nk performing a BLAKE2s hash. It's mostly used by the recipient to view the shielded transactions he/she receives;\novk: generated by sk and 2 performing a BLAKE2b hash. It's mostly used by the sender to view the shielded transactions.","metadata":{"loc":{"lines":{"from":17031,"to":17037}}}}],["2267",{"pageContent":"ovk: generated by sk and 2 performing a BLAKE2b hash. It's mostly used by the sender to view the shielded transactions.\nd (Diversifier): the 11-byte random number selected by the user. It is a part of the address and is mainly used for generating different addresses to break the relation between addresses and transactions;\npk_d: it is a part of the address. d will perform a DiversifyHash (namely, hash d to the coordinate of the elliptic curve) first to generate g_d. The scalar multiplication of g_d and ivk produces pk_d, and (d, pk_d) constitutes the shielded address.\nTheory Behind Shielded Transaction","metadata":{"loc":{"lines":{"from":17037,"to":17040}}}}],["2268",{"pageContent":"Theory Behind Shielded Transaction\nEvery anonymous output is a note. Note = (d, pk_d, value, rcm). (d, pk_d)is the transaction address, value is the transaction amount, and rcm is the random number that falls in the scalar range of the Jubjub elliptic curve, namely rcm < 0xe7db4ea6533afa906673b0101343b00a6682093ccc81082d0970e5ed6f72cb7. The getrcm interface provided by the chain can randomly generate rcm. To ensure the anonymity and privacy of the transaction, the note is not on chain. It is the commitment of the note that is on the chain, which is called note_commitment. After each shielded transaction is successfully verified, the note_commitment will be stored at the leaf node of the Merkle tree. Similarly, every anonymous input is also a note.","metadata":{"loc":{"lines":{"from":17040,"to":17041}}}}],["2269",{"pageContent":"When spending a note, the user needs to provide zero-knowledge proof to prove that the user knows the private information of the note being spent. When verifying the proof on the chain, public input is required.\n\nnf: every note matches a unique nf, the positions of nf and note on the Merkle tree is related to note_commitment , it is used to prevent the double spending of note.\nanchor: the root of the Merkle tree.\nvalue_commitment: the commitment to the amount of the note.\nrk: the public key that verifies the Spend Authority Signature of the note\nUsers can spend a certain note by verifying the proof, but others have no way to know which note on the Merkle tree is being spent, which means they won't be able to know the exact amount and the address of the transaction. The privacy and anonymity of the sender can thus be protected.\n\nIn addition to verifying the proof, it is also required to provide Spend Authority Signature to complete an on-chain verification for each anonymous input.","metadata":{"loc":{"lines":{"from":17043,"to":17051}}}}],["2270",{"pageContent":"In addition to verifying the proof, it is also required to provide Spend Authority Signature to complete an on-chain verification for each anonymous input.\n\nWhen performing a transaction, every shielded output also needs zero-knowledge proof to ensure that the user knows the amount of the transaction and the address o the recipient. When verifying a proof, following public inputs are required:\n\nnote_commitment: the commitment to note\nvalue_commitment: the commitment to note amount\nepk: the temporary public key for deciphering note\nVerifying proof confirms the recipient‘s address and amount of the transaction, which are known to no one except the sender and the receiver. Thus, the privacy and anonymity of the receiver are guaranteed.\n\nEvery shielded output requires extra ciphertext fields C_enc and C_out, so that the sender and the receiver can decipher information from the note.","metadata":{"loc":{"lines":{"from":17051,"to":17060}}}}],["2271",{"pageContent":"Every shielded output requires extra ciphertext fields C_enc and C_out, so that the sender and the receiver can decipher information from the note.\n\nBesides, verification of a transaction requires verifying Binding signature, which ensures the balance of the transaction amount for the sender and the recipient.\n\nFor details of the protocol, please refer to TRONZ Privacy Protocol [3]\n\nImplementation of Shielded Transactions\nTRC20 token shielded transaction is implemented through smart contracts (hereafter referred to as shielded contract).\n\nIn deploying the shielded contract, the TRC20 contract address is binded so that the privacy protocol is applied only to the shielded transaction of the TRC20 tokens.","metadata":{"loc":{"lines":{"from":17060,"to":17069}}}}],["2272",{"pageContent":"In deploying the shielded contract, the TRC20 contract address is binded so that the privacy protocol is applied only to the shielded transaction of the TRC20 tokens.\n\n\nconstructor (address trc20ContractAddress, uint256 scalingFactorExponent) public {\n    require(scalingFactorExponent < 77, \"The scalingFactorLogarithm is out of range!\");\n    scalingFactor = 10 ** scalingFactorExponent;\n    owner = msg.sender;\n    trc20Token = TokenTRC20(trc20ContractAddress);\n}\nApart from TRC20 contract address, scalingFactorExponent needs to be set up in the contract, mainly for supporting TRC20 tokens with higher precision (Decimals). The shielded contract requires that the transfer amount must be a multiple of scalingFactor.\n\nThe variable frontier stores the Merkle tree, and leafCount represents the number of nodes on the current Merkle tree.","metadata":{"loc":{"lines":{"from":17069,"to":17080}}}}],["2273",{"pageContent":"The variable frontier stores the Merkle tree, and leafCount represents the number of nodes on the current Merkle tree.\n\n\nbytes32[33] frontier;\nuint256 public leafCount;\nMINT Transaction\nMINT transaction transfers a certain amount of TRC20 tokens to a shielded contract address, and adds the shielded output note_commitment to a leaf node on the shielded contract Merkle tree.\n\nMINT transaction transfers TRC20 tokens from a user account to a shielded contract account, therefore, before implementing MINT, the approve(address _spender, uint256 _value) function of the TRC20 contract needs to be called to allow a certain amount of TRC20 tokens to be transferred to the shielded contract account. _spender represents the shielded contract address and _value represents the transfer amount.","metadata":{"loc":{"lines":{"from":17080,"to":17088}}}}],["2274",{"pageContent":"function mint(uint256 rawValue, bytes32[9] calldata output, bytes32[2] calldata bindingSignature, bytes32[21] calldata c) external {}\nMINT transaction is executed through triggering the shielded contract's mint function. Parameters of the function include:\n\nrawValue: Amount of transfer\noutput: {note_commitment||value_commitment||epk||proof}\nbindingSignature: Binding signature of a transaction that is used to verify the balance of input and output amount within a transaction\nc: {C_enc||C_out}, ciphertext field.\nPerform the following steps in the shielded contract:\n\nTransfer the designated amount of TRC20 tokens from a user address to a shielded contract address.","metadata":{"loc":{"lines":{"from":17091,"to":17100}}}}],["2275",{"pageContent":"Transfer the designated amount of TRC20 tokens from a user address to a shielded contract address.\n\n\nbool transferResult = trc20Token.transferFrom(sender, address(this), rawValue);\nrequire(transferResult, \"TransferFrom failed!\");\nVerify zk-SNARKs and Binding signature. If the verification is successful, update the Merkle tree by adding note_commitment to the leaf node. This step is implemented in verifyMintProof pre-compiled contract and is added specially for zk-SNARKs. verifyMintProof returns the latest root and node that needs to be updated of the Merkle tree.\n\n\nbytes32 signHash = sha256(abi.encodePacked(address(this), value, output, c));\n(bytes32[] memory ret) = verifyMintProof(output, bindingSignature, value, signHash, frontier, leafCount);\nuint256 result = uint256(ret[0]);\nrequire(result == 1, \"The proof and signature have not been verified by the contract!\");\nsignHash is the message Hash of Binding signature.","metadata":{"loc":{"lines":{"from":17100,"to":17112}}}}],["2276",{"pageContent":"The root and node of the Merkle tree, which returned by verifyMintProof, needs to be updated in the contract.\n\n\nmapping(bytes32 => bytes32) public roots;\nroots[latestRoot] = latestRoot;\nroots stores all historical roots of the Merkle tree.\n\nAlso, as tree stores the complete Merkle tree, all updated nodes of the Merkle tree will be updated to tree.\n\n\nmapping(uint256 => bytes32) public tree;\nAdd note_commitment, value_commitment, epk, c and the location of the newly-added leaf node to the transaction log.\n\n\nemit NewLeaf(leafCount - 1, output[0], output[1], output[2], c);\nTRANSFER Transaction\nTRANSFER transaction supports transfers from multiple shielded inputs to multiple shielded outputs. Once a transaction is confirmed, note_commitment of the shielded outputs will be added to the leaf node of the shielded contract’s Merkle tree.\n\nTRANSFER transaction is executed through triggering the shielded contract’s transfer function.","metadata":{"loc":{"lines":{"from":17114,"to":17132}}}}],["2277",{"pageContent":"TRANSFER transaction is executed through triggering the shielded contract’s transfer function.\n\n\nfunction transfer(bytes32[10][] calldata input, bytes32[2][] calldata spendAuthoritySignature, bytes32[9][] calldata output, bytes32[2] calldata bindingSignature, bytes32[21][] calldata c) external {}\nParameters of the function include:\n\ninput: {nf||anchor||value_commitment||rk||proof}, variable-length array. Multiple shielded inputs are supported.\nspendAuthoritySignature: Authentication signature of the shielded input. Each shielded input has a corresponding authentication signature.\noutput: {note_commitment||value_commitment||epk||proof}, each shielded output has a corresponding output.\nbindingSignature: Binding signature of a transaction that is used to verify the balance of input and output amount within a transaction.\nc: {C_enc||C_out}, ciphertext field. Each shielded output has a corresponding c.\nPerform the following steps in the shielded contract:","metadata":{"loc":{"lines":{"from":17132,"to":17143}}}}],["2278",{"pageContent":"Limit the number of shielded inputs and outputs. In order to verify the efficiency of zk-SNARKS, set the upper limit of the number of shielded inputs and outputs to two.\n\n\nrequire(input.length >= 1 && input.length <= 2, \"Input number must be 1 or 2!\");\nrequire(input.length == spendAuthoritySignature.length, \"Input number must be equal to spendAuthoritySignature number!\");\nrequire(output.length >= 1 && output.length <= 2, \"Output number must be 1 or 2!\");\nrequire(output.length == c.length, \"Output number must be equal to c number!\");\nVerify the validity of double spending and Merkle root.","metadata":{"loc":{"lines":{"from":17145,"to":17152}}}}],["2279",{"pageContent":"for (uint256 i = 0; i < input.length; i++) {\n    require(nullifiers[input[i][0]] == 0, \"The note has already been spent!\");\n    require(roots[input[i][1]] != 0, \"The anchor must exist!\");\n}\nVerify whether nf is in nullifiers for each shielded input. If the result is no, then it is verified that the note has not been spent. It also needs to be verified whether anchor exists in the historical roots of Merkle tree.\n\nVerify zk-SNARKs, the authentication signature and Binding signature of shielded input. If the verification is successful, update the Merkle tree by adding note_commitment to the leaf node. This step is implemented in verifyTransferProof pre-compiled contract and is added specially for zk-SNARKs. verifyTransferProof returns the latest root and nodess that needs to be updated of the Merkle tree.","metadata":{"loc":{"lines":{"from":17155,"to":17161}}}}],["2280",{"pageContent":"bytes32 signHash = sha256(abi.encodePacked(address(this), input, output, c));\n(bytes32[] memory ret) = verifyTransferProof(input, spendAuthoritySignature, output, bindingSignature, signHash, frontier, leafCount);\nuint256 result = uint256(ret[0]);\nrequire(result == 1, \"The proof and signature have not been verified by the contract!\");\nThe root and nodes that need to be updated of the Merkle tree, which returned by verifyTransferProof, need to be updated to the contract.\n\nAdd the nf of each shielded input to nullifier to signify the note has been spent.\n\n\nfor (uint256 i = 0; i < input.length; i++) {\n    bytes32 nf = input[i][0];\n    nullifiers[nf] = nf;\n}\nAdd note_commitment, value_commitment, epk, c and the location of the newly-added leaf node of each shielded output to transaction log.","metadata":{"loc":{"lines":{"from":17164,"to":17177}}}}],["2281",{"pageContent":"for (uint256 i = 0; i < output.length; i++) {\n    emit NewLeaf(leafCount - (output.length - i), output[i][0], output[i][1], output[i][2], c[i]);\n}\nBURN Transaction\nBURN transaction enables transfers from a shielded input to either a public address or a public address and a shielded output. Once a transaction is confirmed, a certain amount of TRC20 token will be transferred from the shielded contract address to the user's public address through TRC20 contract's transfer function. For the second scenario, the note_commitment of the shielded output will also be added to the Merkle tree.\n\nBURN transaction is executed through triggering the burn function of the shielded contract.\n\n\nfunction burn(bytes32[10] calldata input, bytes32[2] calldata spendAuthoritySignature, uint256 rawValue, bytes32[2] calldata bindingSignature, address payTo, bytes32[3] calldata burnCipher, bytes32[9][] calldata output, bytes32[21][] calldata c) external {}\nParameters of the function include:","metadata":{"loc":{"lines":{"from":17180,"to":17190}}}}],["2282",{"pageContent":"input: {nf||anchor||value_commitment||rk||proof}\nspendAuthoritySignature: Authentication signature of shielded input.\nrawValue: Amount of transfer.\nbindingSignature: Binding signature of a transaction that is used to verify the balance of input and output amount within a transaction.\npayTo: Public address of the transaction's receiver.\nburnCipher: Encryption of the receiving address and the transfer amount. Encryption key is the sender's ovk. This parameter is mainly used by the transaction sender to track his transaction history.\noutput: {note_commitment||value_commitment||epk||proof}\nc: {C_enc||C_out}，ciphertext field. Each shielded output has a corresponding c.\nPerform the function following the steps below:\n\nVerify nf and anchor to determine whether the shielded input has been double-spent and whether the anchor is the historical root of the Merkle tree.","metadata":{"loc":{"lines":{"from":17192,"to":17202}}}}],["2283",{"pageContent":"Verify nf and anchor to determine whether the shielded input has been double-spent and whether the anchor is the historical root of the Merkle tree.\n\n\nrequire(nullifiers[nf] == 0, \"The note has already been spent!\");\nrequire(roots[anchor] != 0, \"The anchor must exist!\");\nDecide the burn scenario based on the length of output, if it is scenario one(transfer from a shielded input to a public address), execute the step 2.1, it it is the scenario two(transfer from a shielded input to a public address and a shielded output), execute the step 2.2\n\n2.1 For scenario one, Verify zk-SNARKs, the authentication signature and Binding signature of shielded input. This step is implemented in verifyBurnProof pre-compiled contract and is specially added for zk-SNARKs.","metadata":{"loc":{"lines":{"from":17202,"to":17209}}}}],["2284",{"pageContent":"bytes32 signHash = sha256(abi.encodePacked(address(this), input, output, c, payTo, value));\n(bool result) = verifyBurnProof(input, spendAuthoritySignature, value, bindingSignature, signHash);\nrequire(result, \"The proof and signature have not been verified by the contract!\");\n2.2 For scenario two, Verify zk-SNARKs of shielded input and shielded output, verify the authentication signature and Binding signature of shielded input. This step is implemented in verifyTransferProof pre-compiled contract and is specially added for zk-SNARKs.","metadata":{"loc":{"lines":{"from":17212,"to":17215}}}}],["2285",{"pageContent":"bytes32 signHash = sha256(abi.encodePacked(address(this), input, output, c, payTo, value));\n   (bytes32[] memory ret) = verifyTransferProof(inputs, spendAuthoritySignatures, output, bindingSignature, signHash, value, frontier, leafCount);\n   uint256 result = uint256(ret[0]);\n   require(result == 1, \"The proof and signature have not been verified by the contract!\");\nThe root and nodes that need to be updated, which returned by verifyTransferProof, needs to be updated to the contract.\n\nAdd the nf of the shielded input to nullifier to signify the note has been spent.\n\n\nnullifiers[nf] = nf;\nCall the transfer function of TRC20 contract to transfer a certain amount of TRC20 token from the shielded contract address to the public address specified by the user.","metadata":{"loc":{"lines":{"from":17218,"to":17228}}}}],["2286",{"pageContent":"nullifiers[nf] = nf;\nCall the transfer function of TRC20 contract to transfer a certain amount of TRC20 token from the shielded contract address to the public address specified by the user.\n\n\nbool transferResult = trc20Token.transfer(payTo, rawValue);\nrequire(transferResult, \"Transfer failed!\");\nMerkle Path\nIn the construction of a shielded input, private information of note includes the Merkle path and Merkle tree root of note_commitment. To help users construct zk-SNARKs with ease, the shielded contract provides getPath as a method to calculate the Merkle path of a leaf node at a specified location.\n\n\nfunction getPath(uint256 position) public view returns (bytes32, bytes32[32] memory) {}\nEnter the location of the leaf node using getPath. Merkle root and Merkle path will be returned.\n\nReferences\n[1] Zether protocol https://crypto.stanford.edu/~buenz/papers/zether.pdf\n\n[2] TIP135 https://github.com/tronprotocol/tips/blob/master/tip-135.md","metadata":{"loc":{"lines":{"from":17466,"to":17482}}}}],["2287",{"pageContent":"References\n[1] Zether protocol https://crypto.stanford.edu/~buenz/papers/zether.pdf\n\n[2] TIP135 https://github.com/tronprotocol/tips/blob/master/tip-135.md\n\n[3] TRONZ shielded protocol https://www.tronz.io/Shielded%20Transaction%20Protocol.pdf\n\n\n\nHow to Use Shielded Smart Contracts\nSuggest Edits\nz-address geneneration\nz-address i.e. shielded address, is the address format that TRONZ uses. It is determined by an sk and d key. One can publish its z-address and receive shielded transactions.\n\nText\n\n// sk: spending key => ask, nsk, ovk\n// ask: spend authorizing key, 256 => ak\n// nsk: proof authorizing key, 256 => nk\n// ovk: outgoing viewing key, 256\n// ivk: incoming viewing key, 256 => pkD\n// d: diversifier, 11bytes\n// pkD: the public key of the address, g_d^ivk\n// pkD + d => z-addr\nsk is the hidden private key. d is an identifier of different addresses generated from sk, can be used to implement HD-wallets. All other keys are used in different occasions.","metadata":{"loc":{"lines":{"from":17482,"to":17506}}}}],["2288",{"pageContent":"Take an address as an example: ztron1m445gx74mjuuyhkyru5hrx886jszfga4a7dk3mg4uarrl0cru649jz4928tm6rqul2pg645hqv5. The address is in bech32 format. ztron1 is the fixed prefix. The remains are encoded value of pkD and d.\n\nComparing to the original TRON address format T-...., one can call it a transparent address or T-address.\n\nKey and z-address related APIs are:\n\nText\n\nwallet/getspendingkey\n> generating sk\n\nwallet/getexpandedspendingkey\n> sk => aks, nsk, ovk\n\nwallet/getakfromask\n> ask => ak\n\nwallet/getnkfromnsk\n> nsk => nk\n\nwallet/getincomingviewingkey\n> ak, nk => ivk\n\nwallet/getdiversifier\n> generating d\n\nwallet/getzenpaymentaddress\n> ivk, d => z-addr, pkD\n\nwallet/getnewshieldedaddress\n> generate all above keys and address at once\nThere are 3 main tasks related to shielded transaction:","metadata":{"loc":{"lines":{"from":17508,"to":17539}}}}],["2289",{"pageContent":"wallet/getzenpaymentaddress\n> ivk, d => z-addr, pkD\n\nwallet/getnewshieldedaddress\n> generate all above keys and address at once\nThere are 3 main tasks related to shielded transaction:\n\ntransfer from T-address to z-address, mint for shielded trc20\ntransfer between z-addresses, transfer for shielded trc20\ntransfer from z-address to T-address, burn for shielded trc20\nShielded TRC20 Contract\nText\n\nconstructor (address trc20ContractAddress, uint256 scalingFactorExp)\n\nfunction burn(bytes32[10] input, bytes32[2] spendAuthoritySignature, uint256 rawValue, bytes32[2] bindingSignature, address payTo, bytes32[3] c)\n    => burn(bytes32[10],bytes32[2],uint256,bytes32[2],address,bytes32[3]) [4d013fde]\n\nfunction mint(uint256 rawValue, bytes32[9] output, bytes32[2] bindingSignature, bytes32[21] c)\n    => mint(uint256,bytes32[9],bytes32[2],bytes32[21]) [855d175e]","metadata":{"loc":{"lines":{"from":17539,"to":17558}}}}],["2290",{"pageContent":"function mint(uint256 rawValue, bytes32[9] output, bytes32[2] bindingSignature, bytes32[21] c)\n    => mint(uint256,bytes32[9],bytes32[2],bytes32[21]) [855d175e]\n\nfunction transfer(bytes32[10][] input, bytes32[2][] spendAuthoritySignature, bytes32[9][] output, bytes32[2] bindingSignature, bytes32[21][] c)\n    => transfer(bytes32[10][],bytes32[2][],bytes32[9][],bytes32[2],bytes32[21][]) [9110a55b]\n\nfunction scalingFactor() view returns (uint256)\n    => scalingFactor() [ed3437f8]\nfunction getPath(uint256 position) view returns (bytes32, bytes32[32])\n    => getPath(uint256) [e1765073]\nUsage\nPrerequisite - a shielded TRC20 contract\nThe shielded contract is at ShieldedTRC20.sol.\n\nIt can only be compiled with solidity variation from TRON: https://github.com/tronprotocol/solidity, and the code branch is develop.\n\nDeploy the code with constructor parameter (TF17BgPaZYbz8oxbjhriubPDsA7ArKoLX3, 18). We got a shielded TRC20 address TNnFMMykZzwhPZkurKtNMyVGvgeSkCrnPi.","metadata":{"loc":{"lines":{"from":17558,"to":17574}}}}],["2291",{"pageContent":"Deploy the code with constructor parameter (TF17BgPaZYbz8oxbjhriubPDsA7ArKoLX3, 18). We got a shielded TRC20 address TNnFMMykZzwhPZkurKtNMyVGvgeSkCrnPi.\n\nWhere TF17BgPaZYbz8oxbjhriubPDsA7ArKoLX3 is the TRC20 address of JST token in Nile Testnet, 1 is the exponent of the scaling factor.\n\nTransfer to z-address - mint\nBefore any transferring, use the approve method of the original TRC20 to approve the required amount of tokens to the shielded TRC20 contract.\n\nSuppose we want to transfer tokens to the address ztron1s2s9fpf2v2l3d8mgzf7dqnfptkrlmyekvaqlw50lpf8dz8xkdgphjuxaysh4h0wvml8qzjzrv36.\n\nFirst, create rcm:\n\nconsole\n\n> curl https://api.nileex.io/wallet/getrcm\n{\"value\": \"b9a22cedc38da726f056299e4d09bae107df201066647b0a58912f33d0f49b00\"}\nThen, construct the shielded contract parameters:\n\nPython","metadata":{"loc":{"lines":{"from":17574,"to":17591}}}}],["2292",{"pageContent":"console\n\n> curl https://api.nileex.io/wallet/getrcm\n{\"value\": \"b9a22cedc38da726f056299e4d09bae107df201066647b0a58912f33d0f49b00\"}\nThen, construct the shielded contract parameters:\n\nPython\n\n{\n  'from_amount': '200000000000000000000',\n  'shielded_receives': {'note': {\n      'value': 200,\n      'payment_address': 'ztron1s2s9fpf2v2l3d8mgzf7dqnfptkrlmyekvaqlw50lpf8dz8xkdgphjuxaysh4h0wvml8qzjzrv36',\n      'rcm': 'b9a22cedc38da726f056299e4d09bae107df201066647b0a58912f33d0f49b00',\n      'memo': 'HEX'}},\n  'shielded_TRC20_contract_address': '418C8705769E5EC53F5F9C42A3BC3305624AD37192'\n}\nfrom_amount is of string type\nvalue is from_amount divided by scalingFactor\nThen we got the response, the only one we care is trigger_contract_input:\n\nPython","metadata":{"loc":{"lines":{"from":17591,"to":17612}}}}],["2293",{"pageContent":"Python\n\n{'binding_signature': '......',\n 'message_hash': '.....',\n 'parameter_type': 'mint',\n 'receive_description': [{'c_enc': '..........',\n                          'c_out': '.....',\n                          'epk': '...',\n                          'note_commitment': '.....',\n                          'value_commitment': '.....',\n                          'zkproof': '.....'}],\n 'trigger_contract_input': '.....'\n}\nConcat [855d175e](signature of mint()) with trigger_contract_input, we got the calling parameter.\nSign the TriggerSmartContract transaction with the T-address and broadcast.\n\nHere is an example of the parameters of TriggerSmartContract.","metadata":{"loc":{"lines":{"from":17612,"to":17628}}}}],["2294",{"pageContent":"{'contract_address': '418c8705769e5ec53f5f9c42a3bc3305624ad37192',\n 'fee_limit': 100000000,\n 'function_selector': 'mint(uint256,bytes32[9],bytes32[2],bytes32[21])',\n 'owner_address': '41458915d507cd3384f4e15e9bb2e5ebd0fa974061',","metadata":{"loc":{"lines":{"from":17631,"to":17634}}}}],["2295",{"pageContent":"'parameter':","metadata":{"loc":{"lines":{"from":17635,"to":17635}}}}],["2296",{"pageContent":"'00000000000000000000000000000000000000000000000ad78ebc5ac620000056ae06ce40ce9eb28fde5f76c80617b81a1f1669c0a8d04c09265bc4b2058f04606ef2f138dfe02b08343be5345c15e61e287541aee884dc6f9e1d3986b8a9a12564bc61bfad63c09ad9f39f782acb96027cbb89bd33a99d6db430fddba41393aca4cfdd915e87b6b89a1d54e310489b6c746ba4348cc0af31029298526d2fe7714cf070ea658ba3fa25888afa0f8f12b67950787ef3f7a8b96de905b19ca6562b86216e18ea53bcb38ab2c90a146e4fb41bda55dfee5aa46d886068c941ea10161861426afd6fd9718ac21da3c548ddf2b33e39cca3b2ee4965e891eae180c62d35014c02994e19e00e383577c578b7866030b896e90f04b05bfc8aa0aa06d468662aa97722d3ff6c78306568ceb7be2fbda34afb1bd2f33d4ff3266e2e6edc0b6048c8deecf69c9a9bf6702cce07b2ffc5f7ad2d18da03fc5588f4c984cbe9b08ce2973d0cb1ee8113242126caddf7e406d8bcc80c2d24e4dd88d0b5870b05646ca4ca540aa16d267831a24cd53c06dfb9764e1be035fabeb2e814c6d18d3fd1091cf8b05296b6084dffd6fe6d26046897174b1a0ca8fa370eba2d4dd1ac9532970f41da1af41d78bc54260820e9d01ae8bfd4af30250aeaa4b95b153fccd6771e47cfb49aea19bfc3f24356ae95f715b670","metadata":{"loc":{"lines":{"from":17635,"to":17635}}}}],["2297",{"pageContent":"06dfb9764e1be035fabeb2e814c6d18d3fd1091cf8b05296b6084dffd6fe6d26046897174b1a0ca8fa370eba2d4dd1ac9532970f41da1af41d78bc54260820e9d01ae8bfd4af30250aeaa4b95b153fccd6771e47cfb49aea19bfc3f24356ae95f715b6700b7c4ec5856d43f1e7383efc8805e7c12da045b832d07b2634b0238c1a1321010bd73f0b5936882a31f51a75819648315c6b20a84500799e35d1831872ea916b2c1d95102432664a388b3b96e930783c98024bf3320029e982dca8f16b7690447ea744dc278243d38bf12f014fc1a8e27dff649f15bfcacd65f999c951cb8213b5cfd314ae2f136d3152a013fde43e8b620d3f47ed5146cb0e778aa17e33a5abae3b0d9fd5d63be78b2e73bf9668e5bc1a9761442bee34700f816c96796b96d6e755188fa7028fa281350a55ecb65333d4a65fb48e0d08dfbb2b78df40d9a2f0986587c2503db2e70d2b8e89ff5feec7b25543c8bb2bbfbb5cb994b97667e14c5e53510e6416cea932f7a705b24babd22dd1f786bd2e4c9675531ca77d6a244854059cf5cd9bd03a1a0866d767b33feb180e687642c6f84051476cda46b460751e19f7e38356445dd66beed81b83d2ccf9dfee4b5665581ba5ead308f44f89b01a844ebd3015cc797e32c9808b3854a4fd3c3d40e55e77b48d0e299a7b627f2bf944ae4025712afa5801a456a757a9f5","metadata":{"loc":{"lines":{"from":17635,"to":17635}}}}],["2298",{"pageContent":"67b33feb180e687642c6f84051476cda46b460751e19f7e38356445dd66beed81b83d2ccf9dfee4b5665581ba5ead308f44f89b01a844ebd3015cc797e32c9808b3854a4fd3c3d40e55e77b48d0e299a7b627f2bf944ae4025712afa5801a456a757a9f5039369ccaf311cdd2c5402784501d4363502153de3b742d043dfe5ddc1a6317172ed075c451a7d386d5b622b8661a8070d09a8843151b2e369fefff455068094566549b0e05d79f8fde9a0e9ca11a10fc7b03d37ce56a5c35b674df80ee66fb6932ed4db7f3c5f55d355765a99e4db08c89e48280dff5b79fcc4c722dc19edcc118b9111a026b9b36deeec100b325d582b000000000000000000000000'}","metadata":{"loc":{"lines":{"from":17635,"to":17635}}}}],["2299",{"pageContent":"Transaction: https://nile.tronscan.org/#/transaction/d05078358d359450aa8f57df7722d2d338e53af15362f852b1d7e6b5c4b8f47b","metadata":{"loc":{"lines":{"from":17636,"to":17636}}}}],["2300",{"pageContent":"Query incoming notes\nUse wallet/scanshieldedtrc20notesbyivk with ivk, ak, nk. You can only scan 1000 blocks at once.\n\nThe returned note has a field called is_spent.\n\nTransfer between z-addresses - transfer\nAll transfers are based on note. You can transfer 1-2 notes to 1-2 notes. The total balanced must be matched.\n\nalpha and rcm are generated by wallet/getrcm API.\n\nQuery outgoing notes\nUse wallet/scanshieldedtrc20notesbyovk with ovk.\n\nIs a note spent\nUse wallet/isshieldedtrc20contractNoteSpent with ak, nk.\n\nTransfer from z-address to T-address - burn\nAlmost the same as a transfer. The TriggerSmartContract transaction can be broadcasted by anyone.","metadata":{"loc":{"lines":{"from":17638,"to":17655}}}}],["2301",{"pageContent":"Transfer from z-address to T-address - burn\nAlmost the same as a transfer. The TriggerSmartContract transaction can be broadcasted by anyone.\n\n\nProtocol Interface\nSuggest Edits\nTRC-20 contract standard\nTRC-20 is a set of contract standards for the issuance of token assets, contracts written in compliance with this standard are considered to be a TRC-20 contract. When wallets and exchanges are docking the assets of the TRC-20 contract, from this set of standards, you can know which functions and events the contract defines, so as to facilitate the docking.\n\nOptional Items\nToken Name\n\n\nstring public name = \"TRONEuropeRewardCoin\";\nToken Abbreviation\n\n\nstring public symbol = \"TERC\";\nToken Precision(Decimals)\n\n\nuint8 public decimals = 6;\nRequired Items\nJavaScript","metadata":{"loc":{"lines":{"from":17655,"to":17678}}}}],["2302",{"pageContent":"string public name = \"TRONEuropeRewardCoin\";\nToken Abbreviation\n\n\nstring public symbol = \"TERC\";\nToken Precision(Decimals)\n\n\nuint8 public decimals = 6;\nRequired Items\nJavaScript\n\ncontract TRC20 {\n             function totalSupply() constant returns (uint theTotalSupply);\n             function balanceOf(address _owner) constant returns (uint balance);\n             function transfer(address _to, uint _value) returns (bool success);\n             function transferFrom(address _from, address _to, uint _value) returns (bool success);\n             function approve(address _spender, uint _value) returns (bool success);\n             function allowance(address _owner, address _spender) constant returns (uint remaining);\n             event Transfer(address indexed _from, address indexed _to, uint _value);\n             event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\ntotalSupply()\nThis function returns the total supply of the token.","metadata":{"loc":{"lines":{"from":17678,"to":17701}}}}],["2303",{"pageContent":"balanceOf()\nThis function returns the token balance of the specific account.\n\ntransfer()\nThis function is used to transfer a number of tokens to a specific address.\n\napprove()\nThis function is used to authorize the third party (like a DAPP smart contract) to transfer the token from the token owner’s account.\n\ntransferFrom()\nThis function is used to allow the third party to transfer the token from an owner account to a receiver account. The owner account must be approved to be called by the third party.\n\nallowance()\nThis function is used to query the remaining amount of tokens the third party can transfer.\n\nEvent Functions\nWhen the token is successfully transferred, the contract will trigger a Transfer Event.\n\n\nevent Transfer(address indexed _from, address indexed _to, uint256 _value)\nWhen approval() is successfully called, the contract will trigger an Approval Event.\n\n\nevent Approval(address indexed _owner, address indexed _spender, uint256 _value)","metadata":{"loc":{"lines":{"from":17703,"to":17726}}}}],["2304",{"pageContent":"event Approval(address indexed _owner, address indexed _spender, uint256 _value)\n\n\nGlossary\nSuggest Edits\nApplication Programming Interface (API)\nAPI is mainly used for client application development, and supports developers to design their own Decentralized Applications (DApps).\n\nAddress (Public Key)\nThe public key and the private key are a key pair obtained via a hash algorithm.\n\nThe public key is the public part while the private key is the non-public part.\n\nThe public key is usually used to encrypt the session secret, and the corresponding private key is used to perform digital signature verification and data decryption.\n\nApplication Layer\nDevelopers can use interfaces to easily implement rich DApps and personalized wallets. TRON protocol completely follows the Google Protobuf to implement, therefore naturally supports multi-language extensions.","metadata":{"loc":{"lines":{"from":21457,"to":21473}}}}],["2305",{"pageContent":"Bandwidth Points\nExcessive insignificant transactions cause network congestion, which happens in other public blockchain projects like Ethereum everyday, and it delays transaction confirmation. To avoid the network congestion, TRON network allows each account to initiate a limited number of transactions for free with Bandwidth Points.\n\nBandwidth Points allows you to perform transactions on the TRON without paying any gas fees. Every account is distributed with 600 Bandwidth Points every 24 hours. Higher transaction frequency requires more Bandwidth Points, which can be obtained by staking TRX.\n\nA transaction is transmitted and stored in the form of a byte array in the network. The Bandwidth Points consumed by a transaction is proportional to the size of the byte array in this transaction. For example if the byte array length of a transaction is 100, then the transaction needs to consume 100 Bandwidth Points.","metadata":{"loc":{"lines":{"from":21475,"to":21480}}}}],["2306",{"pageContent":"Block\nBlocks are used to store your transaction information. A complete block includes block size, block header, transaction counter, and transactions. When a transaction is broadcasted to the network, the nodes pick up the transaction. Either miners (PoW) or Super Representatives (DPoS) would perform the hashing of the transaction. Once the correct hash is calculated, which fits the block header format, the block will be added after the previous block.\n\nBlock Rewards\nThe Super Representative's (SR) block rewards are stored in a sub-account, and the Super Representative can redeem their rewards at Tronscan.\n\nContent Delivery Network\nContent Delivery Network (CDN) is designed to avoid the bottlenecks and links on the Internet which may affect the speed and stability of a data transmission. Content transmission can be faster and more stable with CDN.","metadata":{"loc":{"lines":{"from":21482,"to":21489}}}}],["2307",{"pageContent":"Cold Wallet\nCold wallet installs on \"cold\" devices (any network-isolated devices, e.g. computers, mobile phones, etc.). An offline cold wallet isolates the wallet private key from the internet, ensuring its security.\n\nConsensus Mechanism\nThe consensus mechanism is to complete the verification and confirmation of the transaction in a short period of time through the voting among nodes; for a transaction, if several nodes with irrelevant interests can reach a consensus, then the entire network could reach the consensus.","metadata":{"loc":{"lines":{"from":21491,"to":21495}}}}],["2308",{"pageContent":"Maintenance Period\nThe TRON network adopts the DPOS consensus algorithm and periodically elects 27 super representatives responsible for block production based on voting. The network will count votes at the beginning of every cycle to determine the super representatives and the order to produce blocks within this cycle. This period of counting votes is called the maintenance period, which is fixed at 6s. In addition to counting votes, the maintenance period also performs operations such as reward statistics and confirmation of proposals taking effect. The start time of the next maintenance period can be obtained through the getnextmaintenancetime interface.","metadata":{"loc":{"lines":{"from":21497,"to":21498}}}}],["2309",{"pageContent":"Maintenance Time Interval\nThe time interval between two maintenance periods is a parameter of the TRON network, currently it is 6 hours, and the first 6 seconds is the maintenance period time. There are 4 maintenance time intervals per day, and the first maintenance time interval starts at UTC 00:00. Maintenance time interval is also known as maintenance cycle.\n\n\n\nCore Layer\nTRON includes a stack-based virtual machine with an optimized instruction set, as well as numerous modules for smart contracts, account management, and consensus.\n\nDecentralized Applications (DApps)\nA decentralized application is an application that runs on a decentralized P2P network. Since DApps do not depend on a central entity for operation, this eliminates the risk of a single point of failure. Records and data from DApps are also stored on the blockchain.","metadata":{"loc":{"lines":{"from":21500,"to":21509}}}}],["2310",{"pageContent":"Energy\nLike Bandwidth Points, Energy can be obtained by staking TRX, but there are no free Energy distributed to every account. Different from Bandwidth Points which is used in transactions, energy represents how much CPU resources are consumed during an execution of a smart contract.\n\n1 Energy equals 1 millisecond of a CPU spending in a smart contract execution. Depending on the complexity of a smart contract, the longer the execution time, the more Energy the account have to spend for.\n\nStake Operation\nStake a specified number of TRX to get TRON Power for voting. Stake also generates Bandwidth Point and Energy. The amount of Bandwidth Point and Energy generated by staking is related with the amount of staked TRX and the corresponding number of staking days. Staked TRX cannot be circulated and cannot be used for transactions.","metadata":{"loc":{"lines":{"from":21511,"to":21517}}}}],["2311",{"pageContent":"Google Protobuf\nProtoBuf is a flexible and efficient language-independent structured data representation method that can be used to represent communication protocols and data storage. Compared to XML, ProtoBuF is smaller, faster and simpler. You can use the ProtoBuf compiler to generate source code for specific languages (such as C++, Java, Python, etc., ProtoBuf currently supports mainstream programming languages) for serialization and deserialization.","metadata":{"loc":{"lines":{"from":21519,"to":21520}}}}],["2312",{"pageContent":"GRPC\nGRPC is a language-neutral, platform-neutral, open source remote procedure call (RPC) system. In gRPC, a client application can directly call a server-side application on a different machine as if it were a local object, making it easier to create distributed applications and services. Like many RPC systems, gRPC is based on the idea of defining a service that specifies the methods (including parameters and return types) that can be called remotely. Implement this interface on the server side and run a gRPC server to handle client calls. Having a stub on the client can be the same as the server.\n\nHot Wallet\nHot wallet is known as a wallet connected to the internet. Hot wallet is said to be more vulnerable than cold wallet, as user's private key might be exposed due to potential technical security breaches or attacks by hackers, but it is more convenient to use than cold wallet.","metadata":{"loc":{"lines":{"from":21522,"to":21526}}}}],["2313",{"pageContent":"JDK\nJDK is a software development kit for the Java language, primarily for Java applications on mobile devices and embedded devices. JDK is the core of the entire Java development, it contains the JAVA runtime environment (JVM + Java system class library) and JAVA tools.\n\nKhaosDB\nThe KhaosDB used by TRON stores all newly generated bifurcation chains for a certain period of time. When there is a need to switch the main chain, with the support of KhaosDB, the verification node can quickly switch the effective chain to the new main chain.\n\nLevel DB\nIn order to meet both access speed and rapid development requirements, TRON will adopt Level DB in the early stage of development. After the Mainnet went online, TRON upgraded the database according to actual needs, making TRON a fully tailored database.","metadata":{"loc":{"lines":{"from":21528,"to":21535}}}}],["2314",{"pageContent":"Private Testnet\nTest private network: Other developers configure their own network id, server ip, and test according to the tutorial deployment files provided by TRON. Only developers participating in the deployment have access.\n\nRPC\nRemote Procedure Call (RPC) is a protocol one program can use to request a service from a program located in another computer on a network without having to understand the network's details. A procedure call is also sometimes known as a function call or a subroutine call.\n\nScalability\nScalability is one of the features of the TRON network. Being scalable means that a system or network has the ability to handle an increasing amount of work, or has the potential to expand through this capability.","metadata":{"loc":{"lines":{"from":21537,"to":21544}}}}],["2315",{"pageContent":"Smart Contracts\nA smart contract is a computer protocol with a purpose to digitally verify the negotiation of a contract. They not only define the rules and penalties related to an agreement in the same way that a traditional contract does, but it can also automatically enforce those obligations. If and when the pre-defined rules are met, the agreement is automatically enforced. The smart contract code facilitates, verifies, and enforces the negotiation or performance of an agreement or transaction. It is the simplest form of decentralized automation.\n\nStorage Layer\nTRON's technical team designed a unique distributed storage protocol for TRON, including block storage and state storage. In the design of the storage layer, TRON introduced the idea of a graph database to more easily meet the needs of real-world diverse data storage.","metadata":{"loc":{"lines":{"from":21546,"to":21550}}}}],["2316",{"pageContent":"TRC20\nTRC‌20 is a technical standard used for smart contracts on the TRON blockchain for implementing tokens with the TRON Virtual Machine (TVM). It’s fully compatible to ERC‌-20. Interface is as follows:\n\nJava\n\ncontract TRC20Interface {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);","metadata":{"loc":{"lines":{"from":21552,"to":21563}}}}],["2317",{"pageContent":"event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\nTRC10\nTRC10 is a technical token standard supported by TRON blockchain natively, without TRON Virtual Machine (TVM) involves.","metadata":{"loc":{"lines":{"from":21565,"to":21569}}}}],["2318",{"pageContent":"TRON Protocol\n \n \nSecurity Audit Report\n \nTRON\n \nUpdated Final Report Version: 6 March 2020","metadata":{"loc":{"lines":{"from":1,"to":8}}}}],["2319",{"pageContent":"Table of Contents\n \nOverview\n \nBackground\n \nProject Dates\n \nReview Team\n \nCoverage\n \nTarget Code and Revision\n \nSupporting Documentation\n \nAreas of Concern\n \nFindings\n \nGeneral Comments\n \nTable of Findings\n \nIssues\n \nIssue A: Unsafe Random Usage\n \nIssue B: Eclipse Attacks On TRON Nodes\n \nSuggestions\n \nSuggestion 1: Unused Code Should Be Removed\n \nSuggestion 2: Secure Upgrade Instructions\n \nSuggestion 3: Review SonarQube Code Linter Results\n \nSuggestion 4: DataWord Mutability Might Lead to Unexpected Behavior\n \nNon-Findings\n \nNon-Finding A: Review of Known EthereumJ Deserialization CVE\n \nNon-Finding B: Send Blocks to Corrupt Node’s Internal DB\n \nRecommendations\n \nAbout Least Authority\n \nOur Methodology\n \n \n \n \nSecurity Audit Report | TRON Protocol | TRON\n1\n \n6 March 2020 by Least Authority TFA GmbH\n \n \nThis audit makes no statements or warranties and is for discussion purposes only.","metadata":{"loc":{"lines":{"from":15,"to":76}}}}],["2320",{"pageContent":"Overview\n \nBackground\n \nTRON has requested that Least Authority perform a security audit of their TRON Protocol, including the\n \nfollowing components:\n \n●\nTRON Protocol\n \n○\nBlockchain-based operating systems that aims to offer scalable, high-availability and\n \nhigh-throughput support that underlies all the decentralized applications in the TRON\n \necosystem.\n \n●\nTRON Virtual Machine (TVM)\n \n \n○\nAllows users to develop decentralized applications (DAPPs) for themselves or their\n \ncommunities with smart contracts.\n \n \nProject Dates\n \n●\nJanuary 28 - February 12​\n: Code review completed ​\n(Completed)\n \n●\nFebruary 14​\n: Delivery of Initial Audit Report ​\n(Completed)\n \n●\nFebruary 19 - 20:​\n Verification completed ​\n(Completed)\n \n●\nFebruary 29: ​\nDelivery of Final Audit Report ​\n(Completed)\n \n●\nMarch 3 - 5​\n: Second round of verification completed ​\n(Completed)\n \n●\nMarch 6​\n: Delivery of Updated Final Audit Report ​\n(Completed)\n \n \n \nReview Team\n \n●","metadata":{"loc":{"lines":{"from":80,"to":144}}}}],["2321",{"pageContent":"(Completed)\n \n●\nMarch 3 - 5​\n: Second round of verification completed ​\n(Completed)\n \n●\nMarch 6​\n: Delivery of Updated Final Audit Report ​\n(Completed)\n \n \n \nReview Team\n \n●\nEmery Rose Hall, Security Researcher and Engineer, Least Authority\n \n●\nJehad Baeth, Security Researcher and Engineer, Least Authority\n \n●\nNathan Fain, Security Researcher and Engineer, Deflect\n \n●\nTobais Heldt, Security Researcher and Engineer, Deflect\n \n \nCoverage\n \nTarget Code and Revision\n \nFor this audit, we performed research, investigation, and review of the TRON Protocol followed by issue\n \nreporting, along with mitigation and remediation instructions outlined in this report.\n \n \nThe following code repositories are considered in-scope for the review:\n \n●\nProtocol: ​\nhttps://github.com/tronprotocol/protocol\n \n●\nJava implementation of the TRON Protocol (java-tron): ​\nhttps://github.com/tronprotocol/java-tron\n \n \nSpecifically, we examined the Git revisions for our initial review:","metadata":{"loc":{"lines":{"from":144,"to":193}}}}],["2322",{"pageContent":"●\nJava implementation of the TRON Protocol (java-tron): ​\nhttps://github.com/tronprotocol/java-tron\n \n \nSpecifically, we examined the Git revisions for our initial review:\n \nc5a3032bb1aa423a6f7434fe50980c83f3a6114a\n \nFor the verification, we examined the Git revision:\n \n507f63d62c7d4fde9c13c44a71f2e40538f43b66\n \nFor the second round of verification, we examined Git revision:\n \n12bf8563dda7bc9c882f315dea75c3b2c489ecf2\n \nSecurity Audit Report | TRON Protocol | TRON\n2\n \n6 March 2020 by Least Authority TFA GmbH\n \n \nThis audit makes no statements or warranties and is for discussion purposes only.","metadata":{"loc":{"lines":{"from":193,"to":216}}}}],["2323",{"pageContent":"All file references in this document use Unix-style paths relative to the project’s root directory.\n \nSupporting Documentation\n \nThe following documentation was available to the review team:\n \n●\nWhitepaper Version: 2.0 (TRON Protocol Version: 3.2):\n \nhttps://tron.network/static/doc/white_paper_v_2_0.pdf\n \n●\nTRON Developer Hub: ​\nhttps://developers.tron.network/\n \n●\nTRON Virtual Machine: ​\nhttps://developers.tron.network/docs/virtual-machine-introduction\n \n \nAreas of Concern\n \nOur investigation focused on the following areas:\n \n●\nCorrectness of the protocol implementation;\n \n●\nAttack vectors related to building, running & maintaining TRON nodes (eg version upgrades,\n \ndownloading new clients, fork notifications);\n \n●\nUser funds are secure on the blockchain and cannot be transferred without user permission;\n \n●\nVulnerabilities within each component as well as secure interaction between the network\n \ncomponents;\n \n●\nCorrectly passing requests to the network core;\n \n●","metadata":{"loc":{"lines":{"from":220,"to":263}}}}],["2324",{"pageContent":"●\nVulnerabilities within each component as well as secure interaction between the network\n \ncomponents;\n \n●\nCorrectly passing requests to the network core;\n \n●\nData privacy, data leaking, and information integrity;\n \n●\nKey management implementation: secure private key storage and proper management of\n \nencryption and signing keys;\n \n●\nHandling large volumes of network traffic;\n \n●\nResistance to DDoS and similar attacks;\n \n \n●\nAligning incentives with the rest of the network;\n \n●\nVulnerabilities, potential misuse, and gaming of smart contracts;\n \n●\nAny attack that impacts funds, such as draining or manipulating of funds;\n \n●\nMismanagement of funds via transactions;\n \n●\nInappropriate permissions and excess authority;\n \n●\nSecure communication between the nodes;\n \n●\nSpecial token issuance model; and\n \n●\nAnything else as identified during the initial analysis phase.\n \n \nFindings\n \nGeneral Comments","metadata":{"loc":{"lines":{"from":263,"to":313}}}}],["2325",{"pageContent":"●\nSecure communication between the nodes;\n \n●\nSpecial token issuance model; and\n \n●\nAnything else as identified during the initial analysis phase.\n \n \nFindings\n \nGeneral Comments\n \n \nDuring our review, we found the TRON code to be well-structured and clear to follow. TRON demonstrates\n \norganized modular architecture, an effort to adhere to standardized development processes, and has\n \nadequate unit test coverage along with an open access test network environment - all of which are\n \npractices that are helpful for reducing the risk of security issues. TRON also maintains a considerable\n \namount of documentation and appears to proactively engage with the TRON community by maintaining\n \nan open source code base, which supports independent security reviews, in addition to public\n \ncommunications channels, including Gitter and Telegram, which encourage community participation.\n \nBoth of these efforts help to encourage the discoverability of security issues and complement","metadata":{"loc":{"lines":{"from":313,"to":342}}}}],["2326",{"pageContent":"communications channels, including Gitter and Telegram, which encourage community participation.\n \nBoth of these efforts help to encourage the discoverability of security issues and complement\n \nindependent reviews like this one.\n \nHowever, TRON’s use of a Proof of Stake (PoS) consensus algorithm exposes it to a host of potential\n \nattacks that have not yet been identified, largely due to PoS being a fairly new approach to achieving\n \nblockchain consensus. This exposure is inherent given that design and development of resilient PoS\n \nSecurity Audit Report | TRON Protocol | TRON\n3\n \n6 March 2020 by Least Authority TFA GmbH\n \n \nThis audit makes no statements or warranties and is for discussion purposes only.","metadata":{"loc":{"lines":{"from":342,"to":360}}}}],["2327",{"pageContent":"systems are still in the early stages and have yet to be extensively researched. Systems that do run PoS in\n \nproduction face criticism for being too centralized, not addressing the “​\nnothing-at-stake problem​\n”, and\n \nvarious complexities with regard to block reorganization. Comparatively, the security issues with Proof of\n \nWork (PoW) are better researched due to the number, scale and maturity of production systems available.\n \nTRON has taken reasonable steps to minimize the inherent risk with PoS, including soliciting an audit of\n \ntheir codebase and adding mechanisms like stacking and slashing.\n \nPrecautions like stacking and slashing are incorporated to incentivize good behavior and discourage\n \nselfishness by network participants, however, it is not yet clear if these will be sufficient or stable\n \nthroughout PoS network changes. The use of PoS by TRON and other comparable PoS algorithms in other","metadata":{"loc":{"lines":{"from":365,"to":383}}}}],["2328",{"pageContent":"throughout PoS network changes. The use of PoS by TRON and other comparable PoS algorithms in other\n \nblockchains will likely require close observation and potentially require adjustments to the mechanisms in\n \nplace over time. Further efforts such as routine third-party reviews of the code will help to protect against\n \npotential, unknown vulnerabilities.\n \nFinally, simplification of core components of the TRON codebase by removing unused code and reviewing\n \nSonarQube code linting results should be a continuous effort. TRON has taken the initiative to remove bug\n \nlevel sonar issues for legacy sonar problems, and the development team has stated their intent to\n \ngradually address SonarQube issues. We acknowledge that such efforts are undertaken incrementally and\n \niteratively, in order to increase code readability and allow for better review of code quality.\n \nTable of Findings","metadata":{"loc":{"lines":{"from":383,"to":401}}}}],["2329",{"pageContent":"iteratively, in order to increase code readability and allow for better review of code quality.\n \nTable of Findings\n \nWe list the issues we found in the code in the order we reported them. In most cases, remediation of an\n \nissue is preferable, but mitigation is suggested as another option for cases where a trade-off could be\n \nrequired.\n \nISSUE / SUGGESTION / NON-FINDING\n \nSTATUS\n \nIssue A: Unsafe Random Usage\n \n \nResolved\n \nIssue B: Eclipse Attacks On TRON Nodes\n \n \nResolved\n \nSuggestion 1: Unused Code Should Be Removed\n \nResolved\n \nSuggestion 2: Secure Upgrade Instructions\n \nUnresolved\n \nSuggestion 3: Review SonarQube Code Linter Results\n \nPartially Resolved\n \nSuggestion 4​\n: DataWord Mutability Might Lead to Unexpected Behavior\n \n \nUnresolved\n \nNon-Finding A: Review of EthereumJ Known Deserialization CVE\n \nReported\n \nNon-Finding B: Send Blocks to Corrupt Node’s Internal ​\nDB\n \nReported\n \n \nIssues\n \nIssue A: Unsafe Random Usage\n \nLocation","metadata":{"loc":{"lines":{"from":401,"to":457}}}}],["2330",{"pageContent":"Reported\n \nNon-Finding B: Send Blocks to Corrupt Node’s Internal ​\nDB\n \nReported\n \n \nIssues\n \nIssue A: Unsafe Random Usage\n \nLocation\n \n \n \njava-tron/framework/src/main/java/org/tron/core/zen/address/SpendingKey.java\n \nSecurity Audit Report | TRON Protocol | TRON\n4\n \n6 March 2020 by Least Authority TFA GmbH\n \n \nThis audit makes no statements or warranties and is for discussion purposes only.","metadata":{"loc":{"lines":{"from":457,"to":481}}}}],["2331",{"pageContent":"Synopsis\n \nRandom classes are not cryptographically strong and the numbers chosen are not completely random\n \nbecause a definite mathematical algorithm is used to select them.\n \n \nImpact\n \n \nCompromise of the secure generation of ​\nSpendingKey​\n.\n \nFeasibility\n \n \nModerate. An attacker would have to control the system elements (system time) used to seed the\n \nRandom number generator. This would require a side channel where the attacker has installed malware\n \non the target.\n \nTechnical Details\n \nIt is not safe to use Random class for tasks that require a high level of security. Furthermore, this code\n \ncreates a Random object and uses it to generate but one random number at a time. Random numbers are\n \nguessable, especially since the only usage spotted of this method is using a magic number of (0) as a\n \nseed value.\n \nMitigation\n \nReplace the Random class usage with a ​\njava.security.SecureRandom​\n instead and avoid allocating\n \na new ​\nSecureRandom​","metadata":{"loc":{"lines":{"from":486,"to":526}}}}],["2332",{"pageContent":"seed value.\n \nMitigation\n \nReplace the Random class usage with a ​\njava.security.SecureRandom​\n instead and avoid allocating\n \na new ​\nSecureRandom​\n for each random number needed.\n \nRemediation\n \nUse ​\nSecureRandom​\n for all tasks that require a high level of security. In case of using ​\nRandom​\n class,\n \ninitialize the ​\nRandom​\n object once, and then call ​\nnextBytes()/nextInt()...​\netc each time a new\n \nrandom number is needed.\n \nStatus\n \nThe unsafe ​\nRandom​\n object has been replaced with a correct ​\nSecureRandom​\n object usage. As a result,\n \nour suggested remediation has been fully implemented.\n \nVerification\n \nResolved.\n \nIssue B: Eclipse Attacks On TRON Nodes\n \nLocation\n \njava-tron/framework/src/main/java/org/tron/common/overlay/discover/node/statistics/NodeStatistics.j\nava\n \nSynopsis\n \nNodeStatistics.getReputation()​\n does not verify if connected nodes forward traffic correctly and\n \ntransactions are received by the network.\n \nImpact\n \nThe value of ​\nmaxActiveNodes​","metadata":{"loc":{"lines":{"from":526,"to":585}}}}],["2333",{"pageContent":"Synopsis\n \nNodeStatistics.getReputation()​\n does not verify if connected nodes forward traffic correctly and\n \ntransactions are received by the network.\n \nImpact\n \nThe value of ​\nmaxActiveNodes​\n can be filled up with adversarial nodes that can censor incoming and\n \noutgoing traffic, leading to a DOS on the node and Super Representative. In particular, this vulnerability\n \ncan be chained or used as a preparation for other types of attacks for Super Representative or exchanges.\n \nSecurity Audit Report | TRON Protocol | TRON\n5\n \n6 March 2020 by Least Authority TFA GmbH\n \n \nThis audit makes no statements or warranties and is for discussion purposes only.","metadata":{"loc":{"lines":{"from":585,"to":608}}}}],["2334",{"pageContent":"Preconditions\n \nDue to the implementation of the ​\nmaxActiveNodesWithSameIp = 2 ​\ncap, an attacker needs 15\n \ndifferent IP addresses to control a node's view of the TRON VM. After a node is restarted, the attacker\n \nmust fill up the node's connection pool before any non-malicious connections are established. If a node is\n \nrunning, an attacker can use the reputation metrics in ​\ngetScore()​\n to establish connections to a node\n \nwith a high score (e.g. high ​\np2pHandShake.count, low discoverMessageLatency​\n). As a result,\n \nCheckConnectNumberTask​\n would remove non-adversarial peers with lower reputation over time.\n \nFeasibility\n \nLow to moderate probability that enough of the peer nodes can be controlled by the attacker to\n \nmanipulate the blockchain state of the target VM. In terms of cost, this attack could be conducted for very\n \nlittle using cloud-based VPS services like AWS, where an attacker can easily spin up many hosts for this\n \npurpose.\n \nMitigation","metadata":{"loc":{"lines":{"from":613,"to":644}}}}],["2335",{"pageContent":"little using cloud-based VPS services like AWS, where an attacker can easily spin up many hosts for this\n \npurpose.\n \nMitigation\n \nImplement whitelisting for node connections and establish and drop connections randomly to make it\n \nharder for an attacker to consistently control a victim nodes view.\n \nRemediation\n \nA regression test could consist of a node initialized with a full connection pool, where all connections do\n \nnot forward any outgoing traffic. Mitigation strategies can be measured by the time the node requires to\n \nestablish and hold a connection to a non-malicious fraction of the network (e.g. containing a validator\n \nmajority).\n \n \nStatus\n \njava-tron implemented the following three strategies to mitigate the aforementioned issue:\n \n1.\nProvide a whitelisted list of trusted nodes;\n \n2.\nRandomly drop and establish connections to inactive nodes with exclusion to trusted nodes; and\n \n3.\nRestricting the number of incoming connections from the same IP address to one.","metadata":{"loc":{"lines":{"from":644,"to":676}}}}],["2336",{"pageContent":"2.\nRandomly drop and establish connections to inactive nodes with exclusion to trusted nodes; and\n \n3.\nRestricting the number of incoming connections from the same IP address to one.\n \n \nVerification\n \nResolved.\n \nSuggestions\n \nSuggestion 1: Unused Code Should Be Removed\n \nLocation\n \nExamples (not exhaustive):\n \n●\nECKey.java verify()​\n and ​\ndecodeFromDER()​\n methods\n \n●\nSM2.java verify()​\n and ​\ndecodeFromDER()​\n methods\n \nSynopsis\n \nVarious portions of unused code are left in the codebase. For example, the deserialization CVE\n \nnon-finding (​\nNon-Finding A​\n) in this report covers code in java-tron which is no longer in use (several\n \nmethods in ​\nECKey.java​\n and ​\nSM2.java​\n). Leftover unused code will add overhead to future security\n \nreviews and code maintenance and, where possible, these portions of code should be removed.\n \n \n \nSecurity Audit Report | TRON Protocol | TRON\n6\n \n6 March 2020 by Least Authority TFA GmbH","metadata":{"loc":{"lines":{"from":676,"to":728}}}}],["2337",{"pageContent":"reviews and code maintenance and, where possible, these portions of code should be removed.\n \n \n \nSecurity Audit Report | TRON Protocol | TRON\n6\n \n6 March 2020 by Least Authority TFA GmbH\n \n \nThis audit makes no statements or warranties and is for discussion purposes only.","metadata":{"loc":{"lines":{"from":728,"to":738}}}}],["2338",{"pageContent":"Additionally, because the EthereumJ project is no longer maintained, there is little reason for TRON to\n \nmaintain code compatibility with EthereumJ and can assume ownership of all left over code in java-tron.\n \nTypically, keeping unused code from the original fork maintains compatibility between the forks which\n \nmakes importing updates, patches and bug-fixes easier.\n \nMitigation\n \nRemove unused/dead code paths.\n \n \nStatus\n \nThe TRON team has removed unused (vulnerable) code segments from java-tron code base, thus\n \nremediating the issue as suggested.\n \nVerification\n \nResolved.\n \nSuggestion 2: Secure Upgrade Instructions\n \nLocation\n \nOdyssey 3.6.6 Upgrade Instructions\n \nSynopsis\n \nUpgrade instructions for a TRON node are distributed via ​\nOdyssey 3.6.6 Upgrade Instructions​\n, which could\n \nbe used as a phishing template by a malicious actor. Additionally, the information to verify the upgrade is\n \nposted in the same channel as the software itself (​\nGitHub Release Page​","metadata":{"loc":{"lines":{"from":744,"to":782}}}}],["2339",{"pageContent":", which could\n \nbe used as a phishing template by a malicious actor. Additionally, the information to verify the upgrade is\n \nposted in the same channel as the software itself (​\nGitHub Release Page​\n). If this source is compromised,\n \nan attacker could change both the hash and the package, yielding valid verification on the for the user.\n \nMitigation\n \nConsider publishing the information required to verify the upgrades for the TRON nodes in a different and\n \nredundant location, especially the hash and signature. Also, consider not using the MD5 hash function to\n \nverify the upgrades integrity, as MD5 is not considered secure. Ideally, integrity and authenticity of the\n \nupgrade could be verified with an EC signature, where the public key of the TRON team is published via\n \nTRON’s website, Keybase, a gpg keyserver, or another respected source for keys.\n \n \nStatus\n \nThe TRON team has acknowledged this suggestion and stated their intention to use EC signature instead","metadata":{"loc":{"lines":{"from":782,"to":807}}}}],["2340",{"pageContent":"TRON’s website, Keybase, a gpg keyserver, or another respected source for keys.\n \n \nStatus\n \nThe TRON team has acknowledged this suggestion and stated their intention to use EC signature instead\n \nof the MD5 hash function for their upcoming version 3.7 release. However, we advise that the TRON team\n \nstill also consider publishing the information required to verify TRON node upgrades in an alternative\n \nlocation for optimal security.\n \nVerification\n \nUnresolved.\n \nSuggestion 3: Review SonarQube Code Linter Results\n \nLocation\n \nAutomated reports provided by the SonarQube code linter.\n \nSynopsis\n \nThe java-tron repository is already configured to provide automated code review reports using the\n \nSonarQube code linter. The linter provides suggestions of areas of code that should be reviewed for\n \nSecurity Audit Report | TRON Protocol | TRON\n7\n \n6 March 2020 by Least Authority TFA GmbH\n \n \nThis audit makes no statements or warranties and is for discussion purposes only.","metadata":{"loc":{"lines":{"from":807,"to":842}}}}],["2341",{"pageContent":"security and stability. Due to limited time available for review, it was not possible for analysts to fully\n \nexamine the results but a brief review indicates that various portions of code may warrant review. For\n \nexample, several uses of regular expressions were flagged for review by SonarQube. Several of these\n \nissues relate to 3rd party code included in java-tron while others may be specific to code written by TRON.\n \n \nAs a SonarQube configuration is already provided in the java-tron repository, it is possible that TRON is\n \nalready aware of the issues raised by the linter.\n \nMitigation\n \nReview issues raised and mark as ​\nFixed or False Positive​\n with a description of reason for status change.\n \n \nStatus\n \nTRON acknowledged the suggestion and stated that bug level sonar issues have been addressed for\n \nlegacy sonar problems and that they intend to gradually fix SonarQube issues.\n \n \nVerification\n \nPartially Resolved.","metadata":{"loc":{"lines":{"from":847,"to":876}}}}],["2342",{"pageContent":"legacy sonar problems and that they intend to gradually fix SonarQube issues.\n \n \nVerification\n \nPartially Resolved.\n \nSuggestion 4: DataWord Mutability Might Lead to Unexpected Behavior\n \nLocation\n \n \njava-tron/common/src/main/java/org/tron/common/runtime/vm/DataWord.java\n \nSynopsis\n \nDataWord​\n (a data placeholder used extensively in TRON’s code base) mutability might lead to\n \nundetectable wrong behaviors and hard to trace bugs. ​\nByte[]​\n data object value should not change after\n \ninitialization, thus protecting the object from unintended and unintentional state change.\n \nMitigation\n \n \nRe-implement ​\nDataWord​\n class to be immutable:\n \n●\nDeclare the class and all mutable fields as final and all fields as private.\n \n●\nField initialization should be done using a deep-copy constructor.\n \n●\nGetters should clone objects instead of returning an actual reference.\n \n●\nProvide static methods that return new copies with different parameters as needed.","metadata":{"loc":{"lines":{"from":876,"to":918}}}}],["2343",{"pageContent":"●\nGetters should clone objects instead of returning an actual reference.\n \n●\nProvide static methods that return new copies with different parameters as needed.\n \nWhen possible, classes should be immutable. Providing thread safety, side-effect free access and\n \nimprove correctness and changeability.\n \nStatus\n \nAlthough the mutability of ​\nDataWord​\n is not a security concern, we recommend measuring the impact on\n \nperformance by implementing ​\nDataWord​\n to be immutable and then running a performance profiling test\n \nto better estimate the impact. TRON states that, based on previous test results, implementing ​\nDataWord\n \nas immutable can cause performance degradation impact due to its extensive usage in TVM. As a result,\n \nthey have decided against implementing ​\nDataWord​\n class to be immutable.\n \nVerification\n \nUnresolved.\n \nSecurity Audit Report | TRON Protocol | TRON\n8\n \n6 March 2020 by Least Authority TFA GmbH","metadata":{"loc":{"lines":{"from":918,"to":954}}}}],["2344",{"pageContent":"they have decided against implementing ​\nDataWord​\n class to be immutable.\n \nVerification\n \nUnresolved.\n \nSecurity Audit Report | TRON Protocol | TRON\n8\n \n6 March 2020 by Least Authority TFA GmbH\n \n \nThis audit makes no statements or warranties and is for discussion purposes only.","metadata":{"loc":{"lines":{"from":954,"to":968}}}}],["2345",{"pageContent":"Non-Findings\n \nNon-Finding A: Review of Known EthereumJ Deserialization CVE\n \nLocation\n \njava-tron/crypto/src/main/java/org/tron/common/crypto/ECKey.java\n \njava-tron/crypto/src/main/java/org/tron/common/crypto/sm2/SM2.java\n \nSynopsis\n \nA security related ​\nissue​\n and ​\nCVE​\n were reported in EthereumJ that concerns unsafe deserialization of data.\n \nThe java-tron code base was forked from EthereumJ so analysts examined the applicability of this issue\n \nto java-tron. A review confirms that java-tron is not affected.\n \n \nTechnical details in this document will assist future researchers and analysts re-examining the\n \ndeserialization issue.\n \nTechnical Details\n \nThe CVE and issue reported for EthereumJ lacks technical details and only provides the following\n \ntechnical information:\n \nThere is Unsafe Deserialization in ​\nois.readObject​\n in mine/Ethash.java and\n \ndecoder.readObject​\n in crypto/ECKey.java\n \nA review of the EthereumJ code confirms that the call to ​\nreadObject()​","metadata":{"loc":{"lines":{"from":974,"to":1015}}}}],["2346",{"pageContent":"There is Unsafe Deserialization in ​\nois.readObject​\n in mine/Ethash.java and\n \ndecoder.readObject​\n in crypto/ECKey.java\n \nA review of the EthereumJ code confirms that the call to ​\nreadObject()​\n in Ethash.java uses standard\n \nJava deserialization methods. If these functions are passed, unsanitized input could lead to code\n \nexecution. However, the Ethash.java code was not carried over from EthereumJ into java-tron as TRON is\n \na staking protocol and does not include code for mining.\n \nThe second deserialization issue mentioned in the CVE is in ECKey.java. This code can be found in\n \njava-tron in SM2.java and ECKey.java. However, analysts believe that this use of ​\nreadObject()​\n is likely\n \nsafe. The ​\nreadObject()​\n method is defined by the Bouncycastle cryptography library as part of the\n \nASN1InputStream​\n class. The ​\nASN1InputStream#readObject()​\n method is more restrictive than the\n \nstandard java ​\nreadObject()​\n methods.","metadata":{"loc":{"lines":{"from":1015,"to":1049}}}}],["2347",{"pageContent":"ASN1InputStream​\n class. The ​\nASN1InputStream#readObject()​\n method is more restrictive than the\n \nstandard java ​\nreadObject()​\n methods.\n \nFor further information concerning security concerns with deserialization of data see ​\nMITRE​\n and ​\nOWASP\n \ndiscussions.\n \nStatus\n \nCode segments related to the issue have been removed from the java-tron code base.\n \nNon-Finding B: Send Blocks to Corrupt Node’s Internal DB\n \nLocation\n \njava-tron/framework/src/main/java/org/tron/core/db/Manager.java\n \n \nSynopsis\n \nAn attacker may send invalid or already published blocks to a node/validator. If the attacker is successful,\n \nit could corrupt the node’s internal view of the chain or it’s database, for example, by reaching a call of\n \n \nSecurity Audit Report | TRON Protocol | TRON\n9\n \n6 March 2020 by Least Authority TFA GmbH\n \n \nThis audit makes no statements or warranties and is for discussion purposes only.","metadata":{"loc":{"lines":{"from":1049,"to":1089}}}}],["2348",{"pageContent":"chainBaseManager.getDynamicPropertiesStore().saveBlockEnergyUsage(0);\n \n \nImpact\n \nIf an invalid block is stored into the node’s DB, it might stop functioning, produce invalid blocks or\n \ntransactions.\n \nTechnical Details\n \nThere are several potential code paths this or a related attack could be triggered. New blocks arrive to the\n \nnode for instance in​\n processBlock()​\n:\n \n \n/java-tron/framework/src/main/java/org/tron/core/net/messagehandler/BlockMsgHandler.java\n \nThe block verification mechanisms in place could be circumvented under some conditions:\n \n \nvalidBlock()​\n \n​\ncould be bypassed if a validator publishes a new block, just before receiving a block\n \nfrom a fork with a higher block number (but lower timestamp due to latency). The validator updates its\n \ninternal view to the new fork.\n \nIf an attacker manages to set the flag on ​\nblock.generatedByMyself() = true​\n,\n \nvalidateSignature() ​\nand​\n preValidateTransactionSign()​\n \n​\nis bypassed and the block is being","metadata":{"loc":{"lines":{"from":1093,"to":1134}}}}],["2349",{"pageContent":"If an attacker manages to set the flag on ​\nblock.generatedByMyself() = true​\n,\n \nvalidateSignature() ​\nand​\n preValidateTransactionSign()​\n \n​\nis bypassed and the block is being\n \nprocessed by the node.\n \n \nRecommendations\n \nWe recommend that the unresolved and partially resolved ​\nIssues ​\nand​\n Suggestions​\n stated above are\n \naddressed as soon as possible and followed up with verification by the auditing team.\n \n \nWe commend  TRON’s effort to further simplify core components of the code base (​\nSuggestion 1​\n). We\n \nrecommend that these efforts continue , including fully addressing issues reported from the SonarQube\n \nautomated code linter (​\nSuggestion 3​\n), as they could further increase the speed at which new contributors\n \nare able to review and comprehend the project. This would also allow for more effective and efficient\n \nfuture security audits.\n \nIn addition, the use of PoS and the preferred network actions by the various participants should be closely","metadata":{"loc":{"lines":{"from":1134,"to":1173}}}}],["2350",{"pageContent":"future security audits.\n \nIn addition, the use of PoS and the preferred network actions by the various participants should be closely\n \nmonitored to ensure the incentives for good behavior and discouragement of selfishness are sufficient.\n \nFurthermore, as more PoS systems go into production, they can be points of reference for additional\n \nlearning.\n \nFinally, TRON has made significant effort to clearly express the intended functionality of the code via the\n \nwhitepaper and the developer hub, however, additional documentation and more expressive comments\n \nwould help new contributors become more familiar with the project.\n \n \n \nSecurity Audit Report | TRON Protocol | TRON\n10\n \n6 March 2020 by Least Authority TFA GmbH\n \n \nThis audit makes no statements or warranties and is for discussion purposes only.","metadata":{"loc":{"lines":{"from":1173,"to":1197}}}}],["2351",{"pageContent":"About Least Authority\n \nWe believe that people have a fundamental right to privacy and that the use of secure solutions enables\n \npeople to more freely use the Internet and other connected technologies. We provide security consulting\n \nservices to help others make their solutions more resistant to unauthorized access to data and\n \nunintended manipulation of the system. We support teams from the design phase through the production\n \nlaunch and after.\n \nThe Least Authority team has skills for reviewing code in C, C++, Python, Haskell, Rust, Node.js, Solidity,\n \nGo, and JavaScript for common security vulnerabilities and specific attack vectors. The team has\n \nreviewed implementations of cryptographic protocols and distributed system architecture, including in\n \ncryptocurrency, blockchains, payments, and smart contracts. Additionally, the team can utilize various\n \ntools to scan code and networks and build custom tools as necessary.","metadata":{"loc":{"lines":{"from":1201,"to":1221}}}}],["2352",{"pageContent":"cryptocurrency, blockchains, payments, and smart contracts. Additionally, the team can utilize various\n \ntools to scan code and networks and build custom tools as necessary.\n \n \nLeast Authority was formed in 2011 to create and further empower freedom-compatible technologies. We\n \nmoved the company to Berlin in 2016 and continue to expand our efforts. Although we are a small team,\n \nwe believe that we can have a significant impact on the world by being transparent and open about the\n \nwork we do.\n \nFor more information about our security consulting, please visit\n \nhttps://leastauthority.com/security-consulting/​\n.\n \nAnd for more information about Deflect GmbH who assisted on this audit, please visit\n \nhttps://deflectsecurity.com/#services\n \n \nOur Methodology\n \n \nWe like to work with a transparent process and make our reviews a collaborative effort. The goals of our\n \nsecurity audits are to improve the quality of systems we review and aim for sufficient remediation to help","metadata":{"loc":{"lines":{"from":1221,"to":1249}}}}],["2353",{"pageContent":"security audits are to improve the quality of systems we review and aim for sufficient remediation to help\n \nprotect users. The following is the methodology we use in our security audit process.\n \n \nManual Code Review\n \nIn manually reviewing all of the code, we look for any potential issues with code logic, error handling,\n \nprotocol and header parsing, cryptographic errors, and random number generators. We also watch for\n \nareas where more defensive programming could reduce the risk of future mistakes and speed up future\n \naudits. Although our primary focus is on the in-scope code, we examine dependency code and behavior\n \nwhen it is relevant to a particular line of investigation.\n \nVulnerability Analysis\n \nOur audit techniques included manual code analysis, user interface interaction, and whitebox penetration\n \ntesting. We look at the project's web site to get a high level understanding of what functionality the","metadata":{"loc":{"lines":{"from":1249,"to":1270}}}}],["2354",{"pageContent":"testing. We look at the project's web site to get a high level understanding of what functionality the\n \nsoftware under review provides. We then meet with the developers to gain an appreciation of their vision\n \nof the software. We install and use the relevant software, exploring the user interactions and roles. While\n \nwe do this, we brainstorm threat models and attack surfaces. We read design documentation, review\n \nother audit results, search for similar projects, examine source code dependencies, skim open issue\n \ntickets, and generally investigate details other than the implementation. We hypothesize what\n \nvulnerabilities may be present, creating Issue entries, and for each we follow the following Issue\n \nInvestigation and Remediation process.\n \n \nSecurity Audit Report | TRON Protocol | TRON\n11\n \n6 March 2020 by Least Authority TFA GmbH\n \n \nThis audit makes no statements or warranties and is for discussion purposes only.","metadata":{"loc":{"lines":{"from":1270,"to":1293}}}}],["2355",{"pageContent":"Documenting Results\n \n \nWe follow a conservative, transparent process for analyzing potential security vulnerabilities and seeing\n \nthem through successful remediation. Whenever a potential issue is discovered, we immediately create\n \nan Issue entry for it in this document, even though we have not yet verified the feasibility and impact of\n \nthe issue. This process is conservative because we document our suspicions early even if they are later\n \nshown to not represent exploitable vulnerabilities. We generally follow a process of first documenting the\n \nsuspicion with unresolved questions, then confirming the issue through code analysis, live\n \nexperimentation, or automated tests. Code analysis is the most tentative, and we strive to provide test\n \ncode, log captures, or screenshots demonstrating our confirmation. After this we analyze the feasibility of\n \nan attack in a live system.\n \n \nSuggested Solutions","metadata":{"loc":{"lines":{"from":1297,"to":1319}}}}],["2356",{"pageContent":"code, log captures, or screenshots demonstrating our confirmation. After this we analyze the feasibility of\n \nan attack in a live system.\n \n \nSuggested Solutions\n \nWe search for immediate mitigations that live deployments can take, and finally we suggest the\n \nrequirements for remediation engineering for future releases. The mitigation and remediation\n \nrecommendations should be scrutinized by the developers and deployment engineers, and successful\n \nmitigation and remediation is an ongoing collaborative process after we deliver our report, and before the\n \ndetails are made public.\n \nResponsible Disclosure\n \nBefore our report or any details about our findings and suggested solutions are made public, we like to\n \nwork with your team to find reasonable outcomes that can be addressed as soon as possible without an\n \noverly negative impact on pre-existing plans. Although the handling of issues must be done on a","metadata":{"loc":{"lines":{"from":1319,"to":1342}}}}],["2357",{"pageContent":"overly negative impact on pre-existing plans. Although the handling of issues must be done on a\n \ncase-by-case basis, we always like to agree on a timeline for resolution that balances the impact on the\n \nusers and the needs of your project team. We take this agreed timeline into account before publishing any\n \nreports to avoid the necessity for full disclosure.\n \nSecurity Audit Report | TRON Protocol | TRON\n12\n \n6 March 2020 by Least Authority TFA GmbH\n \n \nThis audit makes no statements or warranties and is for discussion purposes only.","metadata":{"loc":{"lines":{"from":1342,"to":1356}}}}],["2358",{"pageContent":"Advanced Decentralized Blockchain Platform\n \nWhitepaper Version: 2.0\n \nTRON Protocol Version: 3.2\n \nTRON DAO\n \nDecember 10th, 2018, San Francisco \n\n \n1. Introduction\n4\n \n1.1 Vision\n4\n \n1.2 Background\n4\n \n1.3 History\n5\n \n1.4 Terminology\n6\n \nAddress/Wallet\n6\n \nABI\n6\n \nAPI\n6\n \nAsset\n6\n \nBandwidth Points (BP)\n6\n \nBlock\n6\n \nBlock Reward\n6\n \nBlock Header\n6\n \nCold Wallet\n7\n \nDApp\n7\n \ngRPC\n7\n \nHot Wallet\n7\n \nJDK\n7\n \nKhaosDB\n7\n \nLevelDB\n7\n \nMerkle Root\n7\n \nPublic Testnet (Shasta)\n8\n \nRPC\n8\n \nScalability\n8\n \nSUN\n8\n \nThroughput\n8\n \nTimestamp\n8\n \nTKC\n8\n \nTRC-10\n8\n \nTRX\n8\n \n2. Architecture\n9\n \n2.1 Core\n10\n \n2.2 Storage\n10\n \n2.2.1 Blockchain Storage\n10\n \n2.2.2 State Storage\n10\n \n1","metadata":{"loc":{"lines":{"from":1,"to":117}}}}],["2359",{"pageContent":"2.3 Application\n10\n \n2.4 Protocol\n11\n \n2.4.1 Protocol Buffers\n11\n \n2.4.2 HTTP\n11\n \n2.5 TRON Virtual Machine (TVM)\n11\n \n2.6 Decentralized Exchange (DEX)\n11\n \n2.7 Implementation\n12\n \n3. Consensus\n13\n \n3.1 Delegated Proof of Stake (DPoS)\n13\n \n4. Account\n16\n \n4.1 Types\n16\n \n4.2 Creation\n16\n \n4.3 Structure\n16\n \n5. Block\n18\n \n5.1 Block Header\n18\n \n5.1.1 Raw Data\n18\n \n5.1.2 Witness Signature\n19\n \n5.1.3 Block ID\n19\n \n5.2 Transaction\n19\n \n5.2.1 Signing\n19\n \n5.2.2 Bandwidth Model\n19\n \n5.2.3 Fee\n20\n \n5.2.4 Transaction as Proof of Stake (TaPoS)\n20\n \n5.2.5 Transaction Confirmation\n21\n \n5.2.6 Structure\n21\n \n6. TRON Virtual Machine (TVM)\n23\n \n6.1 Introduction\n23\n \n6.2 Workflow\n23\n \n6.3 Performance\n25\n \n6.3.1 Lightweight Architecture\n25\n \n6.3.2 Robust\n25\n \n6.3.3 High Compatibility\n25\n \n6.3.4 Low Cost\n25\n \n7. Smart Contract\n26\n \n7.1 Introduction\n26\n \n7.2 Energy Model\n26\n \n7.3 Deployment\n27\n \n2","metadata":{"loc":{"lines":{"from":120,"to":231}}}}],["2360",{"pageContent":"7.4 Trigger Function\n27\n \n7.5 TRON Solidity\n27\n \n8. Token\n28\n \n8.1 TRC-10 Token\n28\n \n8.2 TRC-20 Token\n28\n \n8.3 Beyond\n29\n \n9. Governance\n30\n \n9.1 Super Representative\n30\n \n9.1.1 General\n30\n \n9.1.2 Election\n30\n \n9.1.3 Reward\n30\n \na. Vote Reward\n30\n \nb. Block Reward\n31\n \nc. Reward Calculation\n31\n \n9.2 Committee\n32\n \n9.2.1 General\n32\n \n9.2.2 Dynamic Network Parameters\n32\n \n9.2.3 Create Proposal\n36\n \n9.2.4 Vote Proposal\n36\n \n9.2.5 Cancel Proposal\n36\n \n9.3 Structure\n36\n \n10. DApp Development\n37\n \n10.1 APIs\n37\n \n10.2 Networks\n37\n \n10.3 Tools\n37\n \n10.4 Resources\n37\n \n11. Conclusion\n39\n \n \n \n3","metadata":{"loc":{"lines":{"from":234,"to":317}}}}],["2361",{"pageContent":"1. Introduction\n \n1.1 Vision\n \n \nTRON is an ambitious project dedicated to the establishment of a truly decentralized Internet and its\n \ninfrastructure. The TRON Protocol, one of the largest blockchain-based operating systems in the\n \nworld, offers public blockchain support of high throughput, high scalability, and high availability for\n \nall Decentralized Applications (DApps) in the TRON ecosystem. The July 2018 acquisition of\n \nBitTorrent further cemented TRON’s leadership in pursuing a decentralized ecosystem.\n \n \n1.2 Background\n \n \nThe introduction of Bitcoin in 2009 revolutionized society’s perception of the traditional financial\n \nsystem in the wake of the Great Recession (2007-2008). As centralized hedge funds and banks\n \ncollapsed from speculation in opaque financial derivatives, blockchain technology provided a\n \ntransparent universal ledger from which anybody could glean transaction information. The","metadata":{"loc":{"lines":{"from":320,"to":345}}}}],["2362",{"pageContent":"collapsed from speculation in opaque financial derivatives, blockchain technology provided a\n \ntransparent universal ledger from which anybody could glean transaction information. The\n \ntransactions were cryptographically secured using a Proof of Work (PoW) consensus mechanism,\n \nthus preventing double spend issues.\n \n \nIn late 2013, the Ethereum white paper proposed a network in which smart contracts and a\n \nTuring-complete Ethereum Virtual Machine (EVM) would allow developers to interact with the\n \nnetwork through DApps. However, as transaction volumes in Bitcoin and Ethereum peaked in 2017,\n \nit was apparent from the low transaction throughput times and high transaction fees that\n \ncryptocurrencies like Bitcoin and Ethereum in their existing state were not scalable for widespread\n \nadoption. Thus, TRON was founded and envisioned as an innovative solution to these pressing\n \nscalability challenges.\n \n \n \n \n4","metadata":{"loc":{"lines":{"from":345,"to":371}}}}],["2363",{"pageContent":"1.3 History\n \nThe \nTRON DAO\n \nwas established in July 2017 in Singapore. In December 2017, TRON had \nlaunched its open source protocol. The Testnet, Blockchain Explorer, and Web Wallet were all \nlaunched by March 2018. TRON Mainnet launched shortly afterward in May 2018, marking the \nOdyssey 2.0 release as a technical milestone. In June 2018, TRON declared its independence \nwith the creation of the Genesis block, along with the July 2018 acquisition of BitTorrent. In \nOctober 2018, TRON launched the TRON Virtual Machine (TVM), a complete developers’ toolset, \nand 360 support system. The TRON roadmap involves combining BitTorrent’s 100 million users \nwith the TRON network via Project Atlas, as well as fostering the developer community to launch \nexciting new DApps on the TRON network\n1\n. \n1\n V1.0 is available at https://tron.network/static/doc/white_paper_v_1_0.pdf\n \n5","metadata":{"loc":{"lines":{"from":374,"to":393}}}}],["2364",{"pageContent":"1.4 Terminology\n \n \nAddress/Wallet\n \nAn address or wallet consisting of account credentials on the TRON network are generated by a\n \nkey pair, which consists of a private key and a public key, the latter being derived from the former\n \nthrough an algorithm. The public key is usually used for session key encryption, signature\n \nverification, and encrypting data that could be decrypted by a corresponding private key.\n \n \nABI\n \nAn application binary interface (ABI) is an interface between two binary program modules; usually\n \none of these modules is a library or an operating system facility, and the other is a user run\n \nprogram.\n \n \nAPI\n \nAn application programming interface (API) is mainly used for user clients development. With API\n \nsupport, token issuance platforms can also be designed by developers themselves.\n \n \nAsset\n \nIn TRON's documents, asset is the same as token, which is also denoted as TRC-10 token.\n \n \nBandwidth Points (BP)","metadata":{"loc":{"lines":{"from":396,"to":431}}}}],["2365",{"pageContent":"Asset\n \nIn TRON's documents, asset is the same as token, which is also denoted as TRC-10 token.\n \n \nBandwidth Points (BP)\n \nTo keep the network operating smoothly, TRON network transactions use BP as fuel. Each account\n \ngets 5000 free daily BP and more can be obtained by freezing TRX for BP. Both TRX and TRC-10\n \ntoken transfers are normal transactions costing BP.  Smart contract deployment and execution\n \ntransactions consume both BP and Energy.\n \n \nBlock\n \nBlocks contain the digital records of transactions. A complete block consists of the magic number,\n \nblock size, block header, transaction counter, and transaction data.\n \n \nBlock Reward\n \nBlock production rewards are sent to a sub-account (address/wallet). Super Representatives can\n \nclaim their rewards on Tronscan or through the API directly.\n \n \nBlock Header\n \nA block header is part of a block. TRON block headers contain the previous block’s hash, the\n \nMerkle root, timestamp, version, and witness address.\n \n \n6","metadata":{"loc":{"lines":{"from":431,"to":468}}}}],["2366",{"pageContent":"Cold Wallet\n \nCold wallet, also known as offline wallet, keeps the private key completely disconnected from any\n \nnetwork. Cold wallets are usually installed on \"cold\" devices (e.g. computers or mobile phones\n \nstaying offline) to ensure the security of TRX private key.\n \n \nDApp\n \nDecentralized Application is an App that operates without a centrally trusted party. An application\n \nthat enables direct interaction/agreements/communication between end users and/or resources\n \nwithout a middleman.\n \n \ngRPC\n \ngRPC\n (gRPC Remote Procedure Calls) is an open source remote procedure call (RPC) system\n \n2\ninitially developed at Google. It uses HTTP/2 for transport, Protocol Buffers as the interface\n \ndescription language, and provides features such as authentication, bidirectional streaming and flow\n \ncontrol, blocking or nonblocking bindings, and cancellation and timeouts. It generates\n \ncross-platform client and server bindings for many languages. Most common usage scenarios","metadata":{"loc":{"lines":{"from":471,"to":501}}}}],["2367",{"pageContent":"control, blocking or nonblocking bindings, and cancellation and timeouts. It generates\n \ncross-platform client and server bindings for many languages. Most common usage scenarios\n \ninclude connecting services in microservices style architecture and connecting mobile devices, and\n \nbrowser clients to backend services.\n \n \nHot Wallet\n \nHot wallet, also known as online wallet, allows user's private key to be used online, thus it could be\n \nsusceptible to potential vulnerabilities or interception by malicious actors.\n \n \nJDK\n \nJava Development Kit is the Java SDK used for Java applications. It is the core of Java\n \ndevelopment, comprising the Java application environment (JVM+Java class library) and Java\n \ntools.\n \n \nKhaosDB\n \nTRON has a KhaosDB in the full-node memory that can store all the newly-forked chains generated\n \nwithin a certain period of time and supports witnesses to switch from their own active chain swiftly","metadata":{"loc":{"lines":{"from":501,"to":530}}}}],["2368",{"pageContent":"within a certain period of time and supports witnesses to switch from their own active chain swiftly\n \ninto a new main chain. See 2.2.2 State Storage for more details.\n \n \nLevelDB\n \nLevelDB was initially adopted with the primary goal to meet the requirements of fast R/W and rapid\n \ndevelopment. After launching the Mainnet, TRON upgraded its database to an entirely customized\n \none catered to its very own needs. See 2.2.1 Blockchain Storage for more details.\n \n \nMerkle Root\n \nA Merkle root is the hash of all hashes of all transactions included as part of a block in a blockchain\n \nnetwork. See 3.1 Delegated Proof of Stake (DPoS) for more details.\n \n2\n https://en.wikipedia.org/wiki/GRPC\n \n7","metadata":{"loc":{"lines":{"from":530,"to":553}}}}],["2369",{"pageContent":"Public Testnet (Shasta)\n \nA version of the network running in a single-node configuration. Developers can connect and test\n \nfeatures without worrying about the economic loss. Testnet tokens have no value and anyone can\n \nrequest more from the public faucet.\n \n \nRPC\n \n3\nIn distributed computing, a remote procedure call (RPC) is when a computer program causes a\n \nprocedure (subroutine) to execute in a different address space (commonly on another computer on\n \na shared network), which is coded as if it were a normal (local) procedure call, without the\n \nprogrammer explicitly coding the details for the remote interaction.\n \n \nScalability\n \nScalability is a feature of the TRON Protocol. It is the capability of a system, network, or process to\n \nhandle a growing amount of work or its potential to be enlarged to accommodate that growth.\n \n \nSUN\n \nSUN replaced drop as the smallest unit of TRX. 1 TRX = 1,000,000 SUN.\n \n \nThroughput","metadata":{"loc":{"lines":{"from":557,"to":590}}}}],["2370",{"pageContent":"handle a growing amount of work or its potential to be enlarged to accommodate that growth.\n \n \nSUN\n \nSUN replaced drop as the smallest unit of TRX. 1 TRX = 1,000,000 SUN.\n \n \nThroughput\n \nHigh throughput is a feature of TRON Mainnet. It is measured in Transactions Per Second (TPS),\n \nnamely the maximum transaction capacity in one second.\n \n \nTimestamp\n \nThe approximate time of block production is recorded as Unix timestamp, which is the number of\n \nmilliseconds that have elapsed since 00:00:00 01 Jan 1970 UTC.\n \n \nTKC\n \nToken configuration.\n \n \nTRC-10\n \nA standard of crypto token on TRON platform. Certain rules and interfaces are required to follow\n \nwhen holding an initial coin offering on TRON blockchain.\n \n \nTRX\n \nTRX stands for Tronix, which is the official cryptocurrency of TRON.\n \n \n \n3\n https://en.wikipedia.org/wiki/Remote_procedure_call\n \n8","metadata":{"loc":{"lines":{"from":590,"to":633}}}}],["2371",{"pageContent":"2. Architecture\n \n \nTRON adopts a 3-layer architecture divided into Storage Layer, Core Layer, and Application Layer.\n \nThe TRON protocol adheres to Google Protobuf, which intrinsically supports multi-language\n \nextension.\n \n \nFigure 1: TRON 3-layer Architecture\n \n9","metadata":{"loc":{"lines":{"from":636,"to":648}}}}],["2372",{"pageContent":"2.1 Core\n \n \nThere are several modules in the core layer, including smart contracts, account management, and\n \nconsensus. A stack-based virtual machine is implemented on TRON and an optimized instruction\n \nset is used. In order to better support DApp developers, Solidity\n was chosen as the smart contract\n \n4\nlanguage, followed by future support of other advanced languages. In addition, TRON's consensus\n \nmechanism is based on Delegated Proof of Stake (DPoS) and many innovations were made in\n \norder to meet its unique requirements.\n \n2.2 Storage\n \n \nTRON designed a unique distributed storage protocol consisting of Block Storage and State\n \nStorage. The notion of a graph database was introduced into the design of the storage layer to\n \nbetter meet the need for diversified data storage in the real world.\n \n2.2.1 Blockchain Storage\n \n \nTRON blockchain storage chooses to use LevelDB, which is developed by Google and proven","metadata":{"loc":{"lines":{"from":651,"to":680}}}}],["2373",{"pageContent":"better meet the need for diversified data storage in the real world.\n \n2.2.1 Blockchain Storage\n \n \nTRON blockchain storage chooses to use LevelDB, which is developed by Google and proven\n \nsuccessful with many companies and projects. It has high performance and supports arbitrary byte\n \narrays as both keys and values, singular get, put and delete, batched put and delete, bi-directional\n \niterators, and simple compression using the very fast Snappy algorithm.\n \n2.2.2 State Storage\n \n \nTRON has a KhaosDB in the full-node memory that can store all the newly forked chains generated\n \nwithin a certain period of time and supports witnesses to switch from their own active chain swiftly\n \ninto a new main chain. It can also protect blockchain storage by making it more stable from being\n \nterminating abnormally in an intermediate state.\n \n2.3 Application\n \n \nDevelopers can create a diverse range of DApps and customized wallets on TRON. Since TRON","metadata":{"loc":{"lines":{"from":680,"to":707}}}}],["2374",{"pageContent":"terminating abnormally in an intermediate state.\n \n2.3 Application\n \n \nDevelopers can create a diverse range of DApps and customized wallets on TRON. Since TRON\n \nenables smart contracts to be deployed and executed, the opportunities of utility applications are\n \nunlimited.\n \n4\n Solidity official documentation: https://solidity.readthedocs.io/\n \n10","metadata":{"loc":{"lines":{"from":707,"to":721}}}}],["2375",{"pageContent":"2.4 Protocol\n \n \nTRON protocol adheres to Google Protocol Buffers\n, which is a language-neutral, platform-neutral,\n \n5\nand extensible way of serializing structured data for use in communications protocols, data storage,\n \nand more.\n \n2.4.1 Protocol Buffers\n \n \nProtocol Buffers (Protobuf) is a flexible, efficient, automated mechanism for serializing structured\n \ndata, similar to JSON or XML, but much smaller, faster and simpler.\n \n \nProtobuf (.proto) definitions can be used to generate code for C++, Java, C#, Python, Ruby,\n \nGolang, and Objective-C languages through the official code generators. Various third-party\n \nimplementations are also available for many other languages. Protobuf eases development for\n \nclients by unifying the API definitions and also optimizing data transfers. Clients can take the API\n \n.proto from TRON’s protocol repository and integrate through the automatically-generated code\n \nlibraries.","metadata":{"loc":{"lines":{"from":724,"to":753}}}}],["2376",{"pageContent":".proto from TRON’s protocol repository and integrate through the automatically-generated code\n \nlibraries.\n \n \nAs a comparison, Protocol Buffers is 3 to 10 times smaller and 20 to 100 times faster than XML,\n \nwith less ambiguous syntax. Protobuf generates data access classes that are easier to use\n \nprogrammatically.\n \n2.4.2 HTTP\n \n \nTRON Protocol provides a RESTful HTTP API alternative to the Protobuf API. They share the same\n \ninterface but the HTTP API can be readily used in javascript clients.\n \n2.5 TRON Virtual Machine (TVM)\n \n \nThe TVM is a lightweight, Turing complete virtual machine developed for TRON’s ecosystem. The\n \nTVM connects seamlessly with the existing development ecosystem to provide millions of global\n \ndevelopers with a custom-built blockchain system that is efficient, convenient, stable, secure, and\n \nscalable.\n \n \n2.6 Decentralized Exchange (DEX)\n \n \n5\n Google Protocol Buffers official documentation: https://developers.google.com/protocol-buffers/\n \n11","metadata":{"loc":{"lines":{"from":753,"to":789}}}}],["2377",{"pageContent":"The TRON network natively supports decentralized exchange functions. A decentralized exchange\n \nconsists of multiple trading pairs. A trading pair (notation “Exchange”) is an Exchange Market\n \nbetween TRC-10 tokens, or between a TRC-10 token and TRX. Any account can create a trading\n \npair between any tokens, even if the same pair already exists on the TRON network. Trading and\n \nprice fluctuations of the trading pairs follow the Bancor Protocol\n. The TRON network stipulates that\n \n6\nthe weights of the two tokens in all trading pairs are equal, so the ratio of their balances is the price\n \nbetween them. For example, consider a trading pair containing two tokens, ABC and DEF. ABC has\n \na balance of 10 million and DEF has a balance of 1 million. Since their weights are equal, 10 ABC =\n \n1 DEF. This means that the ratio of ABC to DEF is 10 ABC per DEF.\n \n2.7 Implementation\n \n \nThe TRON blockchain code is implemented in Java and was originally a fork from EthereumJ.\n \n \n \n \n6","metadata":{"loc":{"lines":{"from":792,"to":820}}}}],["2378",{"pageContent":"1 DEF. This means that the ratio of ABC to DEF is 10 ABC per DEF.\n \n2.7 Implementation\n \n \nThe TRON blockchain code is implemented in Java and was originally a fork from EthereumJ.\n \n \n \n \n6\n Bancor Protocol official website: https://about.bancor.network/protocol/\n \n12","metadata":{"loc":{"lines":{"from":820,"to":833}}}}],["2379",{"pageContent":"3. Consensus\n \n3.1 Delegated Proof of Stake (DPoS)\n \n \nThe earliest consensus mechanism is the Proof of Work (PoW) consensus mechanism. This\n \nprotocol is currently implemented in Bitcoin\n and Ethereum\n. In PoW systems, transactions\n \n7\n8\nbroadcast through the network are grouped together into nascent blocks for miner confirmation. The\n \nconfirmation process involves hashing transactions using cryptographic hashing algorithms until a\n \nmerkle root has been reached, creating a merkle tree:\n \n \n \n \nFigure 2: 8 TRX transactions are hashed into the merkle root. This merkle root is then included in the block header, which\n \nis attached to the previously confirmed blocks to form a blockchain. This allows for easy and transparent tracking of\n \ntransactions, timestamps, and other related information.\n \n \n \n \n7\n Bitcoin whitepaper: https://bitcoin.org/bitcoin.pdf\n \n8\n Ethereum whitepaper: https://github.com/ethereum/wiki/wiki/White-Paper\n \n13","metadata":{"loc":{"lines":{"from":836,"to":873}}}}],["2380",{"pageContent":"Cryptographic hashing algorithms are useful in network attack prevention because they possess\n \nseveral properties\n:\n \n \n9\n \n \n●\nInput/Output length size\n​\n - The algorithm can pass in an input of any length in size, and\n \noutputs a fixed length hash value.\n \n \n●\nEfficiency\n​\n - The algorithm is relatively easy and fast to compute.\n \n \n●\nPreimage resistance\n​\n - For a given output \n​\nz\n​\n, it is impossible to find any input \n​\nx\n​\n such that\n \nh(x) =\n​\n \n​\nz\n​\n. In other words, the hashing algorithm \n​\nh(x)\n​\n is a one-way function in which only the\n \noutput can be found, given an input. The reverse is not possible.\n \n \n●\nCollision resistance\n​\n - It is computationally infeasible to find any pairs \n​\nx\n​\n1 \n​\n≠ x\n​\n2\n​\n \n​\nsuch that \n​\nh(x\n​\n1\n​\n)\n \n= h(x\n​\n2\n​\n)\n​\n. In other words, the probability of finding two different inputs hashing to the same\n \noutput is extremely low. This property also implies \n​\nsecond preimage resistance\n​\n.\n \n \n●\nSecond preimage resistance\n​\n - Given \n​\nx","metadata":{"loc":{"lines":{"from":876,"to":970}}}}],["2381",{"pageContent":"output is extremely low. This property also implies \n​\nsecond preimage resistance\n​\n.\n \n \n●\nSecond preimage resistance\n​\n - Given \n​\nx\n​\n1\n​\n, and thus \n​\nh(x\n​\n1\n​\n)\n​\n, it is computationally infeasible to\n \nfind any \n​\nx\n​\n2\n​\n such that \n​\nh(x\n​\n1\n​\n) = h(x\n​\n2\n​\n)\n​\n. While this property is similar to \n​\ncollision resistance\n​\n, the\n \nproperty differs in that it is saying an attacker with a given \n​\nx\n​\n1\n​\n will find it computationally\n \ninfeasible to find any \n​\nx\n​\n2\n​\n hashing to the same output.\n \n \n●\nDeterministic\n​\n - maps each input to one and only one output.\n \n●\nAvalanche effect\n​\n - a small change in the input results in an entirely different output.\n \n \nThese properties give the cryptocurrency network its intrinsic value by ensuring attacks do not\n \ncompromise the network. When miners confirm a block, they are rewarded tokens as a built-in\n \nincentive for network participation. However, as the global cryptocurrency market capitalization","metadata":{"loc":{"lines":{"from":970,"to":1052}}}}],["2382",{"pageContent":"compromise the network. When miners confirm a block, they are rewarded tokens as a built-in\n \nincentive for network participation. However, as the global cryptocurrency market capitalization\n \nsteadily increased, the miners became centralized and focused their computing resources on\n \nhoarding tokens as assets, rather than for network participation purposes. CPU miners gave way to\n \nGPUs, which in turn gave way to powerful ASICs. In one notable study, the total power\n \nconsumption of Bitcoin mining has been estimated to be as high as 3 GW\n, comparable to Ireland’s\n \n10\npower consumption. This same study projected total power consumption to reach 8 GW in the near\n \nfuture.\n \n \n \nTo solve the energy waste issue, the Proof of Stake (PoS) consensus mechanism was proposed by\n \nmany new networks. In PoS networks, token holders lock their token balances to become block\n \nvalidators. The validators take turns proposing and voting on the next block. However, the problem","metadata":{"loc":{"lines":{"from":1052,"to":1076}}}}],["2383",{"pageContent":"many new networks. In PoS networks, token holders lock their token balances to become block\n \nvalidators. The validators take turns proposing and voting on the next block. However, the problem\n \nwith standard PoS is that validator influence correlates directly to the amount of tokens locked up.\n \nThis results in parties hoarding large amounts of the network’s base currency wielding undue\n \ninfluence in the network ecosystem.\n \n \n \nThe TRON consensus mechanism uses an innovative Delegated Proof of Stake system in which 27\n \nSuper Representatives (SRs) produce blocks for the network. Every 6 hours, TRX account holders\n \nwho freeze their accounts can vote for a selection of SR candidates, with the top 27 candidates\n \ndeemed the SRs. Voters may choose SRs based on criteria such as projects sponsored by SRs to\n \n9\n PAAR, C., PELZL, J., \n​\nUnderstanding Cryptography: A Textbook for Students and Practitioners\n​\n, 2010 ed.\n \nSpringer-Verlag Berlin Heidelberg, 2010.\n \n \n10","metadata":{"loc":{"lines":{"from":1076,"to":1106}}}}],["2384",{"pageContent":"9\n PAAR, C., PELZL, J., \n​\nUnderstanding Cryptography: A Textbook for Students and Practitioners\n​\n, 2010 ed.\n \nSpringer-Verlag Berlin Heidelberg, 2010.\n \n \n10\n https://www.sciencedirect.com/science/article/pii/S2542435118301776\n \n14","metadata":{"loc":{"lines":{"from":1106,"to":1119}}}}],["2385",{"pageContent":"increase TRX adoption, and rewards distributed to voters. This allows for a more democratized and\n \ndecentralized ecosystem. SRs’ accounts are normal accounts, but their accumulation of votes\n \nallows them to produce blocks. With the low throughput rates of Bitcoin and Ethereum due to their\n \nPoW consensus mechanism and scalability issues, TRON’s DPoS system offers an innovative\n \nmechanism resulting in 2000 TPS compared to Bitcoin’s 3 TPS and Ethereum’s 15 TPS.\n \n \n \nThe TRON protocol network generates one block every three seconds, with each block awarding 32\n \nTRX to Super Representatives. A total of 336,384,000 TRX will be awarded annually to the 27 SRs.\n \nEach time an SR finishes block production, rewards are sent to a sub-account in the super-ledger.\n \nSRs can check, but not directly make use of these TRX tokens. A withdrawal can be made by each\n \nSR once every 24 hours, transferring the rewards from the sub-account to the specified SR\n \naccount.","metadata":{"loc":{"lines":{"from":1122,"to":1144}}}}],["2386",{"pageContent":"SR once every 24 hours, transferring the rewards from the sub-account to the specified SR\n \naccount.\n \n \n \nThe three types of nodes on the TRON network are Witness Node, Full Node, and Solidity Node.\n \nWitness nodes are set up by SRs and are mainly responsible for block production and proposal\n \ncreation/voting. Full nodes provide APIs and broadcast transactions and blocks. Solidity nodes sync\n \nblocks from other Full Nodes and also provide indexable APIs.\n \n \n \n \n15","metadata":{"loc":{"lines":{"from":1144,"to":1161}}}}],["2387",{"pageContent":"4. Account\n \n4.1 Types\n \n \nThe three types of accounts in the TRON network are regular accounts, token accounts, and\n \ncontract accounts.\n \n \n \n1.\nRegular accounts are used for standard transactions.\n \n \n2.\nToken accounts are used for storing TRC-10 tokens.\n \n \n3.\nContract accounts are smart contract accounts created by regular accounts and can be\n \ntriggered by regular accounts as well.\n \n4.2 Creation\n \n \nThere are three ways to create a TRON account:\n \n \n1.\nCreate a new account through API\n \n2.\nTransfer TRX into a new account address\n \n3.\nTransfer any TRC-10 token into a new account address\n \n \nAn offline key-pair consisting of an address (public key) and a private key, and not recorded by the\n \nTRON network, can also be generated. The user address generation algorithm consists of\n \ngenerating a key-pair and then extracting the public key (64-byte byte array representing x, y\n \ncoordinates). Hash the public key using the SHA3-256 function (the SHA3 protocol adopted is","metadata":{"loc":{"lines":{"from":1164,"to":1210}}}}],["2388",{"pageContent":"generating a key-pair and then extracting the public key (64-byte byte array representing x, y\n \ncoordinates). Hash the public key using the SHA3-256 function (the SHA3 protocol adopted is\n \nKECCAK-256) and extract the last 20 bytes of the result. Add 41 to the beginning of the byte array\n \nand ensure the initial address length is 21 bytes. Hash the address twice using SHA3-256 function\n \nand take the first 4 bytes as verification code. Add the verification code to the end of the initial\n \naddress and obtain the address in base58check format through base58 encoding. An encoded\n \nMainnet address begins with T and is 34 bytes in length.\n \n4.3 Structure\n \n \nThe three different account types are Normal, AssetIssue, and Contract. An Account contains 7\n \nparameters:\n \n \n1.\naccount_name\n​\n: the name for this account – e.g. BillsAccount.\n \n \n2.\ntype\n​\n: what type of this account is – e.g. 0 (stands for type ‘Normal’).\n \n \n3.\nbalance\n​\n: balance of this account – e.g. 4213312.\n \n \n16","metadata":{"loc":{"lines":{"from":1210,"to":1250}}}}],["2389",{"pageContent":"4.\nvote\n​\n: received votes on this account – e.g. {(“0x1b7w...9xj3”,323),\n \n(“0x8djq...j12m”,88),...,(“0x82nd...mx6i”,10001)}.\n \n \n5.\nasset\n​\n: other assets expected TRX in this account – e.g. {<“WishToken”, 66666>, <”Dogie”,\n \n233>}.\n \n6.\nlatest_operation_time\n​\n: the latest operation time of this account.\n \n \nProtobuf data structure:\n \nmessage\n​\n \n​\nAccount\n​\n {\u0000\n \n \n  \n​\nmessage\n​\n \n​\nVote\n​\n {\u0000\n \n \n    \n​\nbytes\n​\n vote_address = \n​\n1\n​\n;\u0000\n \n \n    \n​\nint64\n​\n vote_count = \n​\n2\n​\n;\u0000\n \n \n  }\u0000\n \n  \n​\nbytes\n​\n accout_name = \n​\n1\n​\n;\u0000\n \n \n  AccountType type = \n​\n2\n​\n;\u0000\n \n \n  \n​\nbytes\n​\n address = \n​\n3\n​\n;\u0000\n \n \n  \n​\nint64\n​\n balance = \n​\n4\n​\n;\u0000\n \n \n  \n​\nrepeated\n​\n Vote votes = \n​\n5\n​\n;\u0000\n \n \n  map<\n​\nstring\n​\n, \n​\nint64\n​\n> asset = \n​\n6\n​\n;\n \n  \n​\nint64\n​\n latest_operation_time = \n​\n10\n​\n;\u0000\n \n}\n \n \nenum\n​\n \n​\nAccountType\n​\n {\u0000\n \n \n  Normal = \n​\n0\n​\n;\u0000\n \n \n  AssetIssue = \n​\n1\n​\n;\u0000\n \n \n  Contract = \n​\n2\n​\n;\n \n\u0000}\n \n \n \n17","metadata":{"loc":{"lines":{"from":1253,"to":1431}}}}],["2390",{"pageContent":"5. Block\n \n \nA block typically contains a block header and several transactions.\n \n \nProtobuf data structure:\n \nmessage\n​\n \n​\nBlock\n​\n {\u0000\n \n \n  BlockHeader block_header = \n​\n1\n​\n;\u0000\n \n  \n​\nrepeated\n​\n Transaction transactions = \n​\n2\n​\n;\u0000\n \n}\n \n5.1 Block Header\n \n \nA block header contains \n​\nraw_data\n​\n, \n​\nwitness_signature\n​\n, and \n​\nblockID\n​\n.\n \n \nProtobuf data structure:\n \nmessage\n​\n \n​\nBlockHeader\n​\n {\u0000\n \n \n  \n​\nmessage\n​\n \n​\nraw\n​\n {\u0000\n \n \n    \n​\nint64\n​\n timestamp = \n​\n1\n​\n;\u0000\n \n \n    \n​\nbytes\n​\n txTrieRoot = \n​\n2\n​\n;\n \n    \n​\nbytes\n​\n parentHash = \n​\n3\n​\n;\u0000\n \n \n    \n​\nuint64\n​\n number = \n​\n4\n​\n;\n \n \n    \n​\nuint64\n​\n version = \n​\n5\n​\n;\u0000\n \n \n    \n​\nbytes\n​\n witness_address = \n​\n6\n​\n;\u0000\n \n  }\u0000\n \n  \n​\nbytes\n​\n witness_signature = \n​\n2\n​\n;\u0000\n \n  \n​\nbytes\n​\n blockID = \n​\n3\n​\n;\u0000\n \n \n}\n \n5.1.1 Raw Data\n \n \nRaw data is denoted as \n​\nraw_data\n​\n in Protobuf. It contains the raw data of a message, containing 6\n \nparameters:\n \n \n1.\ntimestamp\n​\n: timestamp of this message – e.g. 1543884429000.","metadata":{"loc":{"lines":{"from":1434,"to":1613}}}}],["2391",{"pageContent":"Raw data is denoted as \n​\nraw_data\n​\n in Protobuf. It contains the raw data of a message, containing 6\n \nparameters:\n \n \n1.\ntimestamp\n​\n: timestamp of this message – e.g. 1543884429000.\n \n2.\ntxTrieRoot\n​\n: the Merkle Tree’s Root – e.g. 7dacsa...3ed.\n \n3.\nparentHash\n​\n: the hash of the last block – e.g. 7dacsa...3ed.\n \n4.\nnumber\n​\n: the block height – e.g. 4638708.\n \n5.\nversion\n​\n: reserved – e\n​\n.g. 5.\n \n \n18","metadata":{"loc":{"lines":{"from":1613,"to":1650}}}}],["2392",{"pageContent":"6.\nwitness_address\n​\n: the address of the witness packed in this block – e.g. 41928c...4d21.\n \n5.1.2 Witness Signature\n \n \nWitness signature is denoted as \n​\nwitness_signature\n​\n in Protobuf, which is the signature for this\n \nblock header from the witness node.\n \n5.1.3 Block ID\n \n \nBlock ID is denoted as \n​\nblockID\n​\n in Protobuf. It contains the atomic identification of a block. A Block\n \nID contains 2 parameters:\n \n1.\nhash\n​\n: the hash of block.\n \n2.\nnumber\n​\n: the hash and height of the block.\n \n5.2 Transaction\n \n5.2.1 Signing\n \n \nTRON’s transaction signing process follows a standard ECDSA cryptographic algorithm, with a\n \nSECP256K1 selection curve. A private key is a random number, and the public key is a point on the\n \nelliptic curve. The public key generation process consists of first generating a random number as a\n \nprivate key, and then multiplying the base point of the elliptic curve by the private key to obtain the","metadata":{"loc":{"lines":{"from":1653,"to":1701}}}}],["2393",{"pageContent":"private key, and then multiplying the base point of the elliptic curve by the private key to obtain the\n \npublic key. When a transaction occurs, the transaction raw data is first converted into byte format.\n \nThe raw data then undergoes SHA-256 hashing. The private key corresponding to the contract\n \naddress then signs the result of the SHA256 hash. The signature result is then added to the\n \ntransaction.\n \n \n5.2.2 Bandwidth Model\n \n \nOrdinary transactions only consume bandwidth points, but smart contract operations consume both\n \nenergy and bandwidth points. There are two types of bandwidth points available. Users can gain\n \nbandwidth points from freezing TRX, while 5000 free bandwidth points are also available daily.\n \n \n \nWhen a TRX transaction is broadcast, it is transmitted and stored in the form of a byte array over\n \nthe network. Bandwidth Points consumed by one transaction = number of transaction bytes","metadata":{"loc":{"lines":{"from":1701,"to":1725}}}}],["2394",{"pageContent":"When a TRX transaction is broadcast, it is transmitted and stored in the form of a byte array over\n \nthe network. Bandwidth Points consumed by one transaction = number of transaction bytes\n \nmultiplied by bandwidth points rate. For example, if the byte array length of a transaction is 200,\n \nthen the transaction consumes 200 bandwidth points. However, if a TRX or token transfer results in\n \nthe target account being created, then only the bandwidth points consumed to create the account\n \nwill be deducted, and additional bandwidth points will not be deducted. In an account creation\n \nscenario, the network will first consume the bandwidth points that the transaction initiator gained\n \n19","metadata":{"loc":{"lines":{"from":1725,"to":1739}}}}],["2395",{"pageContent":"from freezing TRX. If this amount is insufficient, then the network consumes the transaction\n \ninitiator’s TRX.\n \n \n \nIn standard TRX transfer scenarios from one TRX account to another, the network first consumes\n \nthe bandwidth points gained by the transaction initiator for freezing TRX. If that is insufficient, it then\n \nconsumes from the free 5000 daily bandwidth points. If that is still not enough, then the network\n \nconsumes the TRX of the transaction initiator. The amount is calculated by the number of bytes in\n \nthe transaction multiplied by 10 SUN. Thus, for most TRX holders who may not necessarily freeze\n \ntheir TRX to participate in SR voting, the first step is automatically skipped (since TRX balance\n \nfrozen = 0) and the 5000 daily free bandwidth powers the transaction.\n \n \nFor TRC-10 token transfers, the network first verifies whether the total free bandwidth points of the\n \nissued token asset are sufficient. If not, the bandwidth points obtained from freezing TRX are","metadata":{"loc":{"lines":{"from":1742,"to":1765}}}}],["2396",{"pageContent":"issued token asset are sufficient. If not, the bandwidth points obtained from freezing TRX are\n \nconsumed. If there is still not enough bandwidth points, then it consumes the TRX of the transaction\n \ninitiator.\n \n \n \n5.2.3 Fee\n \n \nTRON network generally does not charge fees for most transactions, however, due to system\n \nrestrictions and fairness, bandwidth usage and transactions do take in certain fees.\n \n \nFee charges are broken down into the following categories:\n \n1.\nNormal transactions cost bandwidth points. Users can use the free daily bandwidth points\n \n(5000) or freeze TRX to obtain more. When bandwidth points are not enough, TRX will be\n \nused directly from the sending account. The TRX needed is the number of bytes * 10 SUN.\n \n2.\nSmart contracts cost energy (Section 6) but will also need bandwidth points for the\n \ntransaction to be broadcasted and confirmed. The bandwidth cost is the same as above.\n \n3.\nAll query transactions are free. It doesn’t cost energy or bandwidth.","metadata":{"loc":{"lines":{"from":1765,"to":1796}}}}],["2397",{"pageContent":"transaction to be broadcasted and confirmed. The bandwidth cost is the same as above.\n \n3.\nAll query transactions are free. It doesn’t cost energy or bandwidth.\n \n \nTRON network also defines a set of fixed fees for the following transactions:\n \n1.\nCreating a witness node: 9999 TRX\n \n2.\nIssuing a TRC-10 token: 1024 TRX\n \n3.\nCreating a new account: 0.1 TRX\n \n4.\nCreating an exchange pair: 1024 TRX\n \n5.2.4 Transaction as Proof of Stake (TaPoS)\n \n \nTRON uses TaPoS to ensure the transactions all confirm the main blockchain, while making it\n \ndifficult to forge counterfeit chains. In TaPoS, the networks require each transaction include part of\n \nthe hash of a recent block header. This requirement prevents transactions from being replayed on\n \nforks not including the referenced block, and also signals the network that a particular user and their\n \n20","metadata":{"loc":{"lines":{"from":1796,"to":1827}}}}],["2398",{"pageContent":"stake are on a specific fork. This consensus mechanism protects the network against Denial of\n \nService, 51%, selfish mining, and double spend attacks.\n \n \n5.2.5 Transaction Confirmation\n \n \nA transaction is included in a future block after being broadcast to the network. After 19 blocks are\n \nmined on TRON (including its own block), the transaction is confirmed. Each block is produced by\n \none of the top 27 Super Representatives in a round robin fashion. Each block takes ~3 seconds to\n \nbe mined on the blockchain. Time may slightly vary for each Super Representative due to network\n \nconditions and machine configurations. In general, a transaction is considered fully confirmed after\n \n~1 minute.\n \n5.2.6 Structure\n \n \nTransaction APIs consist of the following functions:\n \nmessage\n​\n \n​\nTransaction\n​\n {\n \n  \n​\nmessage\n​\n \n​\nContract\n​\n {\n \n    \n​\nenum\n​\n \n​\nContractType\n​\n {\n \n      AccountCreateContract = \n​\n0\n​\n;  // Create account/wallet\n \n      TransferContract = \n​\n1\n​","metadata":{"loc":{"lines":{"from":1830,"to":1892}}}}],["2399",{"pageContent":"​\n \n​\nTransaction\n​\n {\n \n  \n​\nmessage\n​\n \n​\nContract\n​\n {\n \n    \n​\nenum\n​\n \n​\nContractType\n​\n {\n \n      AccountCreateContract = \n​\n0\n​\n;  // Create account/wallet\n \n      TransferContract = \n​\n1\n​\n;  // Transfer TRX\n \n      TransferAssetContract = \n​\n2\n​\n;  // Transfer TRC10 token\n \n      VoteWitnessContract = \n​\n4\n​\n;  // Vote for Super Representative (SR)\n \n      WitnessCreateContract = \n​\n5\n​\n;  // Create a new SR account\n \n      AssetIssueContract = \n​\n6\n​\n;  // Create a new TRC10 token\n \n      WitnessUpdateContract = \n​\n8\n​\n;  // Update SR information\n \n      ParticipateAssetIssueContract = \n​\n9\n​\n;  // Purchase TRC10 token\n \n      AccountUpdateContract = \n​\n10\n​\n;  // Update account/wallet information\n \n      FreezeBalanceContract = \n​\n11\n​\n;  // Freeze TRX for bandwidth or energy\n \n      UnfreezeBalanceContract = \n​\n12\n​\n;  // Unfreeze TRX\n \n      WithdrawBalanceContract = \n​\n13\n​\n;  // Withdraw SR rewards, once per day\n \n      UnfreezeAssetContract = \n​\n14\n​","metadata":{"loc":{"lines":{"from":1892,"to":1994}}}}],["2400",{"pageContent":"UnfreezeBalanceContract = \n​\n12\n​\n;  // Unfreeze TRX\n \n      WithdrawBalanceContract = \n​\n13\n​\n;  // Withdraw SR rewards, once per day\n \n      UnfreezeAssetContract = \n​\n14\n​\n;  // Unfreeze TRC10 token\n \n      UpdateAssetContract = \n​\n15\n​\n;  // Update a TRC10 token’s information\n \n      ProposalCreateContract = \n​\n16\n​\n;  // Create a new network proposal by any SR\n \n      ProposalApproveContract = \n​\n17\n​\n;  // SR votes yes for a network proposal\n \n      ProposalDeleteContract = \n​\n18\n​\n;  // Delete a network proposal by owner\n \n      CreateSmartContract = \n​\n30\n​\n;  // Deploy a new smart contract\n \n      TriggerSmartContract = \n​\n31\n​\n;  // Call a function on a smart contract\n \n      GetContract = \n​\n32\n​\n;  // Get an existing smart contract\n \n      UpdateSettingContract = \n​\n33\n​\n;  // Update a smart contract’s parameters\n \n      ExchangeCreateContract = \n​\n41\n​\n;  // Create a token trading pair on DEX\n \n      ExchangeInjectContract = \n​\n42\n​","metadata":{"loc":{"lines":{"from":1994,"to":2069}}}}],["2401",{"pageContent":"​\n33\n​\n;  // Update a smart contract’s parameters\n \n      ExchangeCreateContract = \n​\n41\n​\n;  // Create a token trading pair on DEX\n \n      ExchangeInjectContract = \n​\n42\n​\n;  // Inject funding into a trading pair\n \n21","metadata":{"loc":{"lines":{"from":2069,"to":2086}}}}],["2402",{"pageContent":"ExchangeWithdrawContract = \n​\n43\n​\n;  // Withdraw funding from a trading pair\n \n      ExchangeTransactionContract = \n​\n44\n​\n;  // Perform token trading\n \n      UpdateEnergyLimitContract = \n​\n45\n​\n;  // Update origin_energy_limit on a\n \nsmart contract\n \n    }\n \n  }\n \n}\n \n \n \n22","metadata":{"loc":{"lines":{"from":2089,"to":2117}}}}],["2403",{"pageContent":"6. TRON Virtual Machine (TVM)\n \n6.1 Introduction\n \n \nTRON Virtual Machine (TVM) is a lightweight, Turing complete virtual machine developed for the\n \nTRON's ecosystem. Its goal is to provide a custom-built blockchain system that is efficient,\n \nconvenient, stable, secure and scalable.\n \n \nTVM initially forked from EVM\n and can connect seamlessly with the existing solidity smart contract\n \n11\ndevelopment ecosystem. Based on that, TVM additionally supports DPoS consensus.\n \n \nTVM employs the concept of Energy. Different from the Gas mechanism on EVM, operations of\n \ntransactions and smart contracts on TVM are free, with no TRX consumed. Technically, executable\n \ncomputation capacity on TVM is not restricted by total holding amount of tokens.\n \n6.2 Workflow\n \n \nThe compiler first translates the Solidity smart contract into bytecode readable and executable on\n \nthe TVM. The TVM then processes data through opcode, which is equivalent to operating the logic","metadata":{"loc":{"lines":{"from":2120,"to":2150}}}}],["2404",{"pageContent":"The compiler first translates the Solidity smart contract into bytecode readable and executable on\n \nthe TVM. The TVM then processes data through opcode, which is equivalent to operating the logic\n \nof a stack-based finite state machine. Finally, the TVM accesses blockchain data and invokes\n \nExternal Data Interface through the Interoperation layer.\n \n11\n EVM: Ethereum Virtual Machine (https://github.com/ethereum/ethereumj)\n \n23","metadata":{"loc":{"lines":{"from":2150,"to":2161}}}}],["2405",{"pageContent":"Figure 3: TVM Workflow\n \n24\n \n\n6.3 Performance\n \n6.3.1 Lightweight Architecture\n \n \nTVM adopts a lightweight architecture with the aim of reducing resource consumption to guarantee\n \nsystem performance.\n \n6.3.2 Robust\n \n \nTRX transfers and smart contract execution cost bandwidth points only, instead of TRX, which\n \nexempts TRON from being attacked. Bandwidth consumption is predictable and static since each\n \ncomputational step cost is fixed.\n \n6.3.3 High Compatibility\n \n \nTVM is compatible with EVM and will be compatible with more mainstream VMs in the future.\n \nThereby, all smart contracts on EVM are executable on TVM.\n \n6.3.4 Low Cost\n \n \nDue to TVM’s bandwidth setup, development costs are reduced and developers can focus on the\n \nlogic development of their contract code. TVM also offers all-in-one interfaces for contract\n \ndeployment, triggering and viewing to offer the convenience for developers.\n \n \n \n25","metadata":{"loc":{"lines":{"from":2166,"to":2207}}}}],["2406",{"pageContent":"7. Smart Contract\n \n7.1 Introduction\n \n \nA smart contract is a protocol that digitally verifies contract negotiation. They define the rules and\n \npenalties related to an agreement and also automatically enforce those obligations. The smart\n \ncontract code facilitates, verifies, and enforces the negotiation or performance of an agreement or\n \ntransaction. From a tokenization perspective, smart contracts also facilitate automatic funds\n \ntransfers between participating parties should certain criteria be met.\n \n \n \nTRON smart contracts are written in the Solidity language. Once written and tested, they can be\n \ncompiled into bytecode, then deployed onto the TRON network for the TRON Virtual Machine. Once\n \ndeployed, smart contracts can be queried via their contract addresses. The contract Application\n \nBinary Interface (ABI) shows the contract’s call functions and is used for interacting with the\n \nnetwork.\n \n7.2 Energy Model","metadata":{"loc":{"lines":{"from":2210,"to":2237}}}}],["2407",{"pageContent":"Binary Interface (ABI) shows the contract’s call functions and is used for interacting with the\n \nnetwork.\n \n7.2 Energy Model\n \n \nThe maximum energy limit for deploying and triggering a smart contract is a function of several\n \nvariables:\n \n \n \n●\nDynamic energy from freezing 1 TRX is 50,000,000,000 (Total Energy Limit) / (Total Energy\n \nWeight)\n \n●\nEnergy limit is the daily account energy limit from freezing TRX\n \n●\nRemaining daily account energy from freezing TRX is calculated as Energy Limit - Energy\n \nUsed\n \n●\nFee limit in TRX is set in smart contract deploy/trigger call\n \n●\nRemaining usable TRX in the account\n \n●\nEnergy per TRX if purchased directly (10 SUN = 1 Energy) = 100,000, SRs can vote on\n \nadjustment\n \n \nThere are two consumption scenarios to calculate for maximum energy limit for deployment and\n \ntrigger. The logic can be expressed as follows:\n \n \nconst\n​\n R = Dynamic Energy Limit\n \nconst\n​\n F = Daily account energy \n​\nfrom\n​\n freezing TRX\n \nconst\n​","metadata":{"loc":{"lines":{"from":2237,"to":2293}}}}],["2408",{"pageContent":"trigger. The logic can be expressed as follows:\n \n \nconst\n​\n R = Dynamic Energy Limit\n \nconst\n​\n F = Daily account energy \n​\nfrom\n​\n freezing TRX\n \nconst\n​\n E = Remaining daily account energy \n​\nfrom\n​\n freezing TRX\n \nconst\n​\n L = Fee limit \n​\nin\n​\n TRX set \n​\nin\n​\n deploy/trigger call\n \nconst\n​\n T = Remaining usable TRX \n​\nin\n​\n account\n \n26","metadata":{"loc":{"lines":{"from":2293,"to":2336}}}}],["2409",{"pageContent":"const\n​\n C = Energy per TRX \n​\nif\n​\n purchased directly\n \n \n// Calculate M, defined as maximum energy limit for deployment/trigger of\n \nsmart contract\n \nif\n​\n F > L*R\n \nlet\n​\n M = min(E+T*C, L*R)\n \nelse\n \nlet\n​\n M = E+T*C\n \n7.3 Deployment\n \n \nWhen a TRON solidity smart contract is compiled, the TRON Virtual Machine reads the compiled\n \nbytecode. The bytecode consists of a section for code deployment, contract code, and the Auxdata.\n \nThe Auxdata is the source code’s cryptographic fingerprint, used for verification. The deployment\n \nbytecode runs the constructor function and sets up the initial storage variables. The deployment\n \ncode also calculates the contract code and returns it to the TVM. The ABI is a JSON file that\n \ndescribes a TRON smart contract’s functions. This file defines the function names, their payability,\n \nthe function return values, and their state mutability.\n \n7.4 Trigger Function","metadata":{"loc":{"lines":{"from":2339,"to":2383}}}}],["2410",{"pageContent":"describes a TRON smart contract’s functions. This file defines the function names, their payability,\n \nthe function return values, and their state mutability.\n \n7.4 Trigger Function\n \n \nOnce the TRON smart contracts are deployed, their functions can be triggered individually either via\n \nTronStudio or through API calls. State-changing functions require Energy while read-only functions\n \nexecute without Energy.\n \n7.5 TRON Solidity\n \n \nTRON Solidity is a fork from Ethereum’s Solidity language. TRON modifies the original project to\n \nsupport TRX and SUN units (1 TRX = 1,000,000 SUN). The rest of the language syntax is\n \ncompatible with Solidity ^0.4.24. Thus the Tron Virtual Machine (TVM) is almost 100% compatible\n \nwith EVM instructions.\n \n \n \n27","metadata":{"loc":{"lines":{"from":2383,"to":2409}}}}],["2411",{"pageContent":"8. Token\n \n8.1 TRC-10 Token\n \n \nIn the TRON network, each account can issue tokens at the expense of 1024 TRX. \n​\nTo issue tokens,\n \nthe issuer needs to specify a token name, the total capitalization, the exchange rate to TRX,\n \ncirculation duration, description, website, maximum bandwidth consumption per account, total\n \nbandwidth consumption, and the amount of token frozen. Each token issuance can also configure\n \neach account’s maximum daily token transfer Bandwidth Points, the entire network’s maximum daily\n \ntoken transfer Bandwidth Points, total token supply, locking duration in days, and the total amount\n \nof tokens locked.\n \n8.2 TRC-20 Token\n \n \nTRC-20 is a technical standard used for smart contracts implementing tokens supported by the\n \nTRON Virtual Machine. It is fully compatible with ERC-20.\n \n \nThe interface is as follows:\n \n \ncontract\n​\n TRC20Interface {\n \n    \n​\nfunction\n​\n \n​\ntotalSupply\n​\n() \n​\npublic\n​\n \n​\nconstant\n​\n \n​\nreturns\n​\n (uint);\n \n    \n​\nfunction\n​\n \n​","metadata":{"loc":{"lines":{"from":2412,"to":2475}}}}],["2412",{"pageContent":"The interface is as follows:\n \n \ncontract\n​\n TRC20Interface {\n \n    \n​\nfunction\n​\n \n​\ntotalSupply\n​\n() \n​\npublic\n​\n \n​\nconstant\n​\n \n​\nreturns\n​\n (uint);\n \n    \n​\nfunction\n​\n \n​\nbalanceOf\n​\n(address tokenOwner) \n​\npublic\n​\n \n​\nconstant\n​\n \n​\nreturns\n​\n (uint\n \nbalance);\n \n    \n​\nfunction\n​\n \n​\nallowance\n​\n(address tokenOwner, address spender) \n​\npublic\n​\n \n​\nconstant\n \nreturns\n​\n (uint remaining);\n \n    \n​\nfunction\n​\n \n​\ntransfer\n​\n(address to, uint tokens) \n​\npublic\n​\n \n​\nreturns\n​\n (bool success);\n \n    \n​\nfunction\n​\n \n​\napprove\n​\n(address spender, uint tokens) \n​\npublic\n​\n \n​\nreturns\n​\n (bool\n \nsuccess);\n \n    \n​\nfunction\n​\n \n​\ntransferFrom\n​\n(address from, address to, uint tokens) \n​\npublic\n \nreturns\n​\n (bool success);\n \n \n    \n​\nevent\n​\n \n​\nTransfer\n​\n(address indexed from, address indexed to, uint tokens);\n \n    \n​\nevent\n​\n \n​\nApproval\n​\n(address indexed tokenOwner, address indexed spender, uint\n \ntokens);\n \n}","metadata":{"loc":{"lines":{"from":2475,"to":2625}}}}],["2413",{"pageContent":"​\nevent\n​\n \n​\nTransfer\n​\n(address indexed from, address indexed to, uint tokens);\n \n    \n​\nevent\n​\n \n​\nApproval\n​\n(address indexed tokenOwner, address indexed spender, uint\n \ntokens);\n \n}\n \n \nFrom a developer’s perspective, there are several differences between TRC-10 and TRC-20. Some\n \nof the key differences are that TRC-10 tokens are accessible by APIs and smart contracts while\n \nTRC-20 tokens allow for interface customization but are only accessible within smart contracts.\n \n28","metadata":{"loc":{"lines":{"from":2625,"to":2655}}}}],["2414",{"pageContent":"From a cost perspective, TRC-10 tokens have transaction fees that are 1000 times lower than\n \nTRC-20, but carry bandwidth costs for API transfers and deposits. Transfers and deposits in smart\n \ncontracts for TRC-10 tokens cost both bandwidth and energy.\n \n \n8.3 Beyond\n \n \nSince TRON uses the same Solidity version as Ethereum, more token standards could be readily\n \nported to TRON.\n \n \n \n29","metadata":{"loc":{"lines":{"from":2658,"to":2674}}}}],["2415",{"pageContent":"9. Governance\n \n9.1 Super Representative\n \n9.1.1 General\n \n \nEvery account in the TRON network can apply and have the opportunity to become a Super\n \nRepresentative (denoted as SR). Everyone can vote for SR candidates. The top 27 candidates with\n \nthe most votes will become SRs with the right and obligation to generate blocks. The votes are\n \ncounted every 6 hours and the SRs will change accordingly.\n \n \nTo prevent malicious attacks, there is a cost to becoming an SR candidate. When applying, 9999\n \nTRX will be burned from the applicant’s account. Once successful, such account can join the SR\n \nelection.\n \n9.1.2 Election\n \n \nTRON Power (denoted as TP) is needed to vote and the amount of TP depends on the voter’s\n \nfrozen assets (TRX).\n \n \n \nTP is calculated in the following way:\n \n \n \nT\nP\n \n1\n \nT\nR\nX\n \nf\nr\no\nz\ne\nn\n \nt\no\n \ng\ne\nt\n \nb\na\nn\nd\nw\ni\nd\nt\nh\n1\n=\n \n \n \nEvery account in the TRON network has the right to vote for their own SRs.","metadata":{"loc":{"lines":{"from":2677,"to":2749}}}}],["2416",{"pageContent":"TP is calculated in the following way:\n \n \n \nT\nP\n \n1\n \nT\nR\nX\n \nf\nr\no\nz\ne\nn\n \nt\no\n \ng\ne\nt\n \nb\na\nn\nd\nw\ni\nd\nt\nh\n1\n=\n \n \n \nEvery account in the TRON network has the right to vote for their own SRs.\n \n \nAfter the release (unfreeze, available after 3 days), users won't have any frozen assets and lose all\n \nTP accordingly. As a result, all votes become invalid for the ongoing and future voting round unless\n \nTRX is frozen again to vote.\n \n \nNote that the TRON network only records the most recent vote, which means that every new vote\n \nwill negate all previous votes.\n \n9.1.3 Reward\n \na. Vote Reward\n \n \n30","metadata":{"loc":{"lines":{"from":2749,"to":2809}}}}],["2417",{"pageContent":"Also known as Candidate Reward, which the top 127 candidates updated once every round (6\n \nhours) will share 115,200 TRX as mined. The reward will be split in accordance with the vote weight\n \neach candidate receives. Each year, the total reward for candidates will be 168,192,000 TRX.\n \nTotal vote reward per round\n \nWhy 115,200 TRX every round?\n \n15, 00 \nTRX\n \ntotal\n \nvote\n \nreward\n \nper\n \nround\n (\nV R\n/\nround\n)\n1\n2\n=\n \nV\n \nR\n/\nround\n \n=  16 \nT\n \nRX\n/\nblock\n \n×\n \n20 \nblocks\n/\nmin\n \n×\n \n60 \nmins\n/\nhr\n \n×\n \n6 \nhrs\n/\nround\nNotice: this is set by WITNESS_STANDBY_ALLOWANCE = 115,200 TRX. See dynamic network parameters. \nTotal vote reward per year\n \nWhy 168,192,000 TRX every year? \n168,\n \n192,\n \n000 \nT\n \nRX\n    = \ntotal\n \nvote\n \nreward\n \nper\n \nyear\n    (\nV\n \nR\n/\nyear\n)\n \nV\n \nR\n/\nyear\n \n=  115,\n \n200 \nT\n \nRX\n/\nround\n \n×\n \n4 \nrounds\n/\nday\n \n×\n \n365 \ndays\n/\nyear\nb.\n \nBlock Reward\nAlso known as Super Representative Reward, which the top 27 candidates (SRs) who are elected","metadata":{"loc":{"lines":{"from":2812,"to":2937}}}}],["2418",{"pageContent":"R\n/\nyear\n \n=  115,\n \n200 \nT\n \nRX\n/\nround\n \n×\n \n4 \nrounds\n/\nday\n \n×\n \n365 \ndays\n/\nyear\nb.\n \nBlock Reward\nAlso known as Super Representative Reward, which the top 27 candidates (SRs) who are elected \nevery round (6 hours) will share roughly 230,400 TRX as mined. The reward will be split evenly \nbetween the 27 SRs (minus the total reward blocks missed due to network error). A total of \n336,384,000 TRX will be awarded annually to the 27 SRs. \nTotal block reward per round\n \nWhy 230,400 TRX every round? \n230,\n \n400 \nT\n \nRX\n    = \ntotal\n \nblock\n \nreward\n \nper\n \nround\n (\nBR\n/\nround\n)\n \nBR\n/\nround\n \n=  32 \nT\n \nRX\n/\nbloc\n \n×\n \n20 \nblocks\n/\nmin\n \n×\n \n60 \nmins\n/\nhr\n \n×\n \n6 \nhrs\n/\nround\nNotice: the unit block reward is set by WITNESS_PAY_PER_BLOCK = 32 TRX. See dynamic network \nparameters. \nTotal block reward per year\n \nWhy 336,384,000 TRX every year? \n336,\n \n384,\n \n000 \nT\n \nRX\n    =\n \ntotal\n \nblock\n \nreward\n \nper\n \nyear\n    (\nBR\n/\nyear\n)\n \nBR\n/\nyear\n \n=  230,\n \n400 \nT\n \nRX\n/\nround\n \n×\n \n4","metadata":{"loc":{"lines":{"from":2937,"to":3071}}}}],["2419",{"pageContent":"Why 336,384,000 TRX every year? \n336,\n \n384,\n \n000 \nT\n \nRX\n    =\n \ntotal\n \nblock\n \nreward\n \nper\n \nyear\n    (\nBR\n/\nyear\n)\n \nBR\n/\nyear\n \n=  230,\n \n400 \nT\n \nRX\n/\nround\n \n×\n \n4 \nrounds\n/\nday\n \n×\n \n365 \ndays\n/\nyear\nJanuary 1, 2021 \nThere will be no inflation on the TRON network before January 1, 2021, and the \nTRON DAO\n \nwill \naward all block rewards and candidate rewards prior to that date. \nc.\n \nReward Calculation\n31","metadata":{"loc":{"lines":{"from":3071,"to":3132}}}}],["2420",{"pageContent":"SR reward calculation\n \no\nt\na\nl\n \nr\ne\nw\na\nr\nd\n \nv\no\nt\ne\n \nr\ne\nw\na\nr\nd\n \n(\nV\nR\n)\n \nb\nl\no\nc\nk\n \nr\ne\nw\na\nr\nd\n \n(\nB\nR\n)\nt\n=\n \n+\n \n \nR\n \n \nt\no\nt\na\nl\n \nV\nR\nV\n=\n \n×\n \nt\no\nt\na\nl\n \nv\no\nt\ne\ns\nv\no\nt\ne\ns\n \nS\nR\n \nc\na\nn\nd\ni\nd\na\nt\ne\n \nr\ne\nc\ne\ni\nv\ne\nd\n \nR\n \nb\nl\no\nc\nk\n \nm\ni\ns\ns\ne\nd\n2\nB\n=\n \n2\n7\nt\no\nt\na\nl\n \nB\nR\n \n−\n \n×\n3\n \nNote: the reward is calculated per SR per round (6 hours)\n \n \nRank 28 to rank 127 SR candidate reward calculation\n \no\nt\na\nl\n \nr\ne\nw\na\nr\nd\n \nv\no\nt\ne\n \nr\ne\nw\na\nr\nd\n \n(\nV\nR\n)\nt\n=\n \n \nR\n \n \nt\no\nt\na\nl\n \nV\nR\n \nV\n=\n \n×\n \nt\no\nt\na\nl\n \nv\no\nt\ne\ns\nv\no\nt\ne\ns\n \nS\nR\n \nc\na\nn\nd\ni\nd\na\nt\ne\n \nr\ne\nc\ne\ni\nv\ne\nd\n \nNote: the reward is calculated per SR candidate per round (6 hours)\n \n9.2 Committee\n \n9.2.1 General\n \n \nThe committee is used to modify TRON dynamic network parameters, such as block generation\n \nrewards, transaction fees, etc. The committee consists of the 27 SRs in the current round. Each SR\n \nhas the right to propose and vote on proposals. When a proposal receives 19 votes or more, it is","metadata":{"loc":{"lines":{"from":3135,"to":3382}}}}],["2421",{"pageContent":"rewards, transaction fees, etc. The committee consists of the 27 SRs in the current round. Each SR\n \nhas the right to propose and vote on proposals. When a proposal receives 19 votes or more, it is\n \napproved and the new network parameters will be applied in the next maintenance period (3 days).\n \n9.2.2 Dynamic Network Parameters\n \n0.\nMAINTENANCE_TIME_INTERVAL\n \na.\nDescription\n \n \nModify the maintenance interval time in ms. Known as the SR vote interval time per\n \nround.\n \n \nb.\nExample\n \n[6 * 3600 * 1000] ms - which is 6 hours.\n \nc.\nRange\n \n[3 * 27* 1000, 24 * 3600 * 1000] ms\n \n1.\nACCOUNT_UPGRADE_COST\n \na.\nDescription\n \nModify the cost of applying for SR account.\n \nb.\nExample\n \n[9,999,000,000] SUN - which is 9,999 TRX.\n \nc.\nRange\n \n[0,100 000 000 000 000 000] SUN\n \n2.\nCREATE_ACCOUNT_FEE\n \na.\nDescription\n \nModify the account creation fee.\n \n32","metadata":{"loc":{"lines":{"from":3382,"to":3438}}}}],["2422",{"pageContent":"b.\nExample\n \n[100,000] SUN - which is 1 TRX.\n \nc.\nRange\n \n[0,100 000 000 000 000 000] SUN\n \n3.\nTRANSACTION_FEE\n \na.\nDescription\n \nModify the amount of fee used to gain extra bandwidth.\n \nb.\nExample\n \n[10] SUN/byte.\n \nc.\nRange\n \n[0,100 000 000 000 000 000] SUN/byte\n \n4.\nASSET_ISSUE_FEE\n \na.\nDescription\n \nModify asset issuance fee.\n \nb.\nExample\n \n[1024,000,000] SUN - which is 1024 TRX.\n \nc.\nRange\n \n[0,100 000 000 000 000 000] SUN\n \n5.\nWITNESS_PAY_PER_BLOCK\n \na.\nDescription\n \nModify SR block generation reward. Known as unit block reward.\n \nb.\nExample\n \n[32,000,000] SUN - which is 32 TRX.\n \nc.\nRange\n \n[0,100 000 000 000 000 000] SUN\n \n6.\nWITNESS_STANDBY_ALLOWANCE\n \na.\nDescription\n \nModify the rewards given to the top 127 SR candidates. Known as total vote reward\n \nper round.\n \nb.\nExample\n \n[115,200,000,000] SUN - which is 115,200 TRX.\n \nc.\nRange\n \n[0,100 000 000 000 000 000] SUN\n \n7.\nCREATE_NEW_ACCOUNT_FEE_IN_SYSTEM_CONTRACT\n \na.\nDescription","metadata":{"loc":{"lines":{"from":3441,"to":3529}}}}],["2423",{"pageContent":"per round.\n \nb.\nExample\n \n[115,200,000,000] SUN - which is 115,200 TRX.\n \nc.\nRange\n \n[0,100 000 000 000 000 000] SUN\n \n7.\nCREATE_NEW_ACCOUNT_FEE_IN_SYSTEM_CONTRACT\n \na.\nDescription\n \nModify the cost of account creation. Combine dynamic network parameters #8 to get\n \ntotal account creation cost:\n \n \nR\nE\nA\nT\nE\n_\nN\nE\nW\n_\nA\nC\nC\nO\nU\nN\nT\n_\nF\nE\nE\n_\nI\nN\n_\nS\nY\nS\nT\nE\nM\n_\nC\nO\nN\nT\nR\nA\nC\nT\nR\nE\nA\nT\nE\n_\nN\nE\nW\n_\nA\nC\nC\nO\nU\nN\nT\n_\nB\nA\nN\nD\nW\nI\nD\nT\nH\n_\nR\nA\nT\nE\n \n \nC\n×\nC\n \nb.\nExample\n \n[0] SUN.\n \nc.\nRange\n \n[0,100 000 000 000 000 000] SUN\n \n8.\nCREATE_NEW_ACCOUNT_BANDWIDTH_RATE\n \n33","metadata":{"loc":{"lines":{"from":3529,"to":3643}}}}],["2424",{"pageContent":"a.\nDescription\n \nModify the cost of account creation. Combine dynamic network parameters #7 to get\n \ntotal account creation cost:\n \n \nR\nE\nA\nT\nE\n_\nN\nE\nW\n_\nA\nC\nC\nO\nU\nN\nT\n_\nF\nE\nE\n_\nI\nN\n_\nS\nY\nS\nT\nE\nM\n_\nC\nO\nN\nT\nR\nA\nC\nT\nR\nE\nA\nT\nE\n_\nN\nE\nW\n_\nA\nC\nC\nO\nU\nN\nT\n_\nB\nA\nN\nD\nW\nI\nD\nT\nH\n_\nR\nA\nT\nE\n \n \nC\n×\nC\n \nb.\nExample\n \n[1].\n \nc.\nRange\n \n[0,100,000,000,000,000,000]\n \n9.\nALLOW_CREATION_OF_CONTRACTS\n \na.\nDescription\n \nTo turn on Tron Virtual Machine (TVM).\n \nb.\nExample\n \nTrue - set to activate and effect since 10/10/2018 23:47 UTC.\n \nc.\nRange\n \nTrue/False\n \n10.\nREMOVE_THE_POWER_OF_THE_GR\n \na.\nDescription\n \nRemove the initial GR genesis votes\n \nb.\nExample\n \nTrue - effected at 11/4/2018 08:46 UTC.\n \nc.\nRange\n \nTrue/False - Notice: cannot set back to False from True.\n \n11.\n ENERGY_FEE\n \na.\nDescription\n \nModify the fee of 1 energy.\n \nb.\nExample\n \n20 SUN.\n \nc.\nRange\n \n[0,100 000 000 000 000 000] SUN\n \n12.\nEXCHANGE_CREATE_FEE\n \na.\nDescription","metadata":{"loc":{"lines":{"from":3646,"to":3800}}}}],["2425",{"pageContent":"11.\n ENERGY_FEE\n \na.\nDescription\n \nModify the fee of 1 energy.\n \nb.\nExample\n \n20 SUN.\n \nc.\nRange\n \n[0,100 000 000 000 000 000] SUN\n \n12.\nEXCHANGE_CREATE_FEE\n \na.\nDescription\n \nModify the cost of trading pair creation. Known as the cost of creating a trade order.\n \nb.\nExample\n \n[1,024,000,000] SUN - which is 1024 TRX.\n \nc.\nRange\n \n[0,100 000 000 000 000 000] SUN\n \n13.\nMAX_CPU_TIME_OF_ONE_TX\n \na.\nDescription\n \nModify the maximum execution time of one transaction. Known as the timeout limit of\n \none transaction.\n \nb.\nExample\n \n50 ms.\n \nc.\nRange\n \n34","metadata":{"loc":{"lines":{"from":3800,"to":3854}}}}],["2426",{"pageContent":"[0, 1000] ms\n \n14.\nALLOW_UPDATE_ACCOUNT_NAME\n \na.\nDescription\n \nModify the option to let an account update their account name.\n \n \nb.\nExample\n \nFalse - which is available to propose from java-tron Odyssey v3.2.\n \nc.\nRange\n \nTrue/False - Notice: cannot set back to False from True.\n \n15.\nALLOW_SAME_TOKEN_NAME\n \na.\nDescription\n \nModify the validation of allowing different token have a duplicate name.\n \n \nb.\nExample\n \nFalse - which is available to propose from java-tron Odyssey v3.2.\n \nc.\nRange\n \nTrue/False - Notice: cannot set back to False from True.\n \n16.\nALLOW_DELEGATE_RESOURCE\n \na.\nDescription\n \nModify the validation of allowing to issue token with a duplicate name, so the\n \ntokenID\n​\n of the token, in long integer data type, would be the only atomic\n \nidentification of a token.\n \n \nb.\nExample\n \nFalse - which is available to propose from java-tron Odyssey v3.2.\n \nc.\nRange\n \nTrue/False - Notice: cannot set back to False from True.\n \n17.\nTOTAL_ENERGY_LIMIT\n \na.\nDescription","metadata":{"loc":{"lines":{"from":3857,"to":3926}}}}],["2427",{"pageContent":"b.\nExample\n \nFalse - which is available to propose from java-tron Odyssey v3.2.\n \nc.\nRange\n \nTrue/False - Notice: cannot set back to False from True.\n \n17.\nTOTAL_ENERGY_LIMIT\n \na.\nDescription\n \nModify the whole network total energy limit.\n \nb.\nExample\n \n[50,000,000,000,000,000] SUN - which is 50,000,000,000 TRX.\n \nc.\nRange\n \n[0,100,000,000,000,000,000] SUN\n \n18.\nALLOW_TVM_TRANSFER_TRC10\n \na.\nDescription\n \nAllow TRC-10 token transfer within smart contracts.\n \nALLOW_UPDATE_ACCOUNT_NAME, ALLOW_SAME_TOKEN_NAME,\n \nALLOW_DELEGATE_RESOURCE proposals must all be approved before proposing\n \nthis parameter change.\n \n \nb.\nExample\n \nFalse - which is available to propose from java-tron Odyssey v3.2.\n \nc.\nRange\n \nTrue/False - Notice: cannot set back to False from True.\n \n35","metadata":{"loc":{"lines":{"from":3926,"to":3979}}}}],["2428",{"pageContent":"9.2.3 Create Proposal\n \n \nOnly the SR accounts have the rights to propose a change in dynamic network parameters.\n \n9.2.4 Vote Proposal\n \n \nOnly committee members (SRs) can vote for a proposal and the member who does not vote in time\n \nwill be considered as a disagree. The proposal is active for 3 days after it is created. The vote can\n \nbe changed or retrieved during the 3-days voting window. Once the period ends, the proposal will\n \neither succeed (19+ votes) or fail (and end).\n \n9.2.5 Cancel Proposal\n \n \nThe proposer can cancel the proposal before it becomes effective.\n \n9.3 Structure\n \n \nSRs are the witnesses of newly generated blocks. A witness contains 8 parameters:\n \n \n1.\naddress\n​\n: the address of this witness – e.g. 0xu82h...7237.\n \n \n2.\nvoteCount\n​\n: number of received votes on this witness – e.g. 234234.\n \n \n3.\npubKey\n​\n: the public key for this witness – e.g. 0xu82h...7237.\n \n \n4.\nurl\n​\n: the url for this witness – e.g. https://www.noonetrust.com.\n \n \n5.\ntotalProduced\n​","metadata":{"loc":{"lines":{"from":3982,"to":4035}}}}],["2429",{"pageContent":"3.\npubKey\n​\n: the public key for this witness – e.g. 0xu82h...7237.\n \n \n4.\nurl\n​\n: the url for this witness – e.g. https://www.noonetrust.com.\n \n \n5.\ntotalProduced\n​\n: the number of blocks this witness produced – e.g. 2434.\n \n \n6.\ntotalMissed\n​\n: the number of blocks this witness missed – e.g. 7.\n \n \n7.\nlatestBlockNum\n​\n: the latest height of block – e.g. 4522.\n \n8.\nisjobs\n​\n: a boolean flag.\n \n \nProtobuf data structure:\n \nmessage\n​\n \n​\nWitness\n​\n{\u0000\n \n \n  \n​\nbytes\n​\n address = \n​\n1\n​\n;\u0000\n \n \n  \n​\nint64\n​\n voteCount = \n​\n2\n​\n;\u0000\n \n \n  \n​\nbytes\n​\n pubKey = \n​\n3\n​\n;\u0000\n \n \n  \n​\nstring\n​\n url = \n​\n4\n​\n;\u0000\n \n \n  \n​\nint64\n​\n totalProduced = \n​\n5\n​\n;\u0000\n \n \n  \n​\nint64\n​\n totalMissed = \n​\n6\n​\n;\u0000\n \n \n  \n​\nint64\n​\n latestBlockNum = \n​\n7\n​\n;\u0000\n \n  \n​\nbool\n​\n isJobs = \n​\n8\n​\n;\n \n}\n \n36","metadata":{"loc":{"lines":{"from":4035,"to":4169}}}}],["2430",{"pageContent":"10. DApp Development\n \n10.1 APIs\n \n \nThe TRON network offers a wide selection of over 60+ HTTP API gateways for interacting with the\n \nnetwork via Full and Solidity Nodes. Additionally, TronWeb is a comprehensive JavaScript library\n \ncontaining API functions that enable developers to deploy smart contracts, change the blockchain\n \nstate, query blockchain and contract information, trade on the DEX, and much more. These API\n \ngateways can be directed towards a local privatenet, the Shasta testnet, or the TRON Mainnet.\n \n \n10.2 Networks\n \n \nTRON has both a Shasta testnet as well as a Mainnet. Developers may connect to the networks by\n \ndeploying nodes, interacting via TronStudio, or using APIs via the TronGrid service. The TronGrid\n \nservice consists of load balanced node clusters hosted on AWS servers worldwide. As DApp\n \ndevelopment scales up and API call volumes increase, TronGrid successfully fields the increase in\n \nAPI traffic.\n \n \n10.3 Tools","metadata":{"loc":{"lines":{"from":4172,"to":4202}}}}],["2431",{"pageContent":"development scales up and API call volumes increase, TronGrid successfully fields the increase in\n \nAPI traffic.\n \n \n10.3 Tools\n \n \nTRON offers a suite of development tools for enabling developers to create innovative DApps.\n \n \nTronBox is a framework that allows developers to test and deploy smart contracts via the TronWeb\n \nAPI. TronGrid is a load balanced and hosted API service that allows developers to access the\n \nTRON network without having to run their own node. TronGrid offers access to both the Shasta\n \ntestnet as well as the TRON Mainnet. TronStudio is a comprehensive Integrated Development\n \nEnvironment (IDE) that enables developers to compile, deploy, and debug their Solidity smart\n \ncontracts. TronStudio contains an internal full node that creates a private local environment for\n \nsmart contract testing prior to deployment. The TronWeb API library connects developers to the\n \nnetwork via a wide selection of HTTP API calls wrapped in JavaScript.\n \n \n10.4 Resources","metadata":{"loc":{"lines":{"from":4202,"to":4230}}}}],["2432",{"pageContent":"smart contract testing prior to deployment. The TronWeb API library connects developers to the\n \nnetwork via a wide selection of HTTP API calls wrapped in JavaScript.\n \n \n10.4 Resources\n \n \nThe TRON Developer Hub is a comprehensive API documentation\n site tailored towards\n \n12\ndevelopers wishing to build on the TRON network. The Developer Hub provides a high-level\n \nconceptual understanding of TRON and walks users through the details of interacting with the\n \n12\n Developer Hub: https://developers.tron.network/\n \n37","metadata":{"loc":{"lines":{"from":4230,"to":4249}}}}],["2433",{"pageContent":"network. The guides walk developers through node setup, deployment and interaction with smart\n \ncontracts, API interaction and implementation, building sample DApps, and using each of the\n \ndeveloper tools. Additionally, developer community channels are available through Discord\n.\n \n \n13\n \n \n13\n Discord: https://discordapp.com/invite/GsRgsTD\n \n38\n \n\n11. Conclusion\n \n \nTRON is a scalable blockchain solution that has employed innovative methods for tackling\n \nchallenges faced by legacy blockchain networks. Having reached over 2M transactions per day,\n \nwith over 700K TRX accounts, and surpassing 2000 TPS, TRON has enabled the community in\n \ncreating a decentralized and democratized network.\n \n39","metadata":{"loc":{"lines":{"from":4252,"to":4280}}}}],["2434",{"pageContent":"Introduction\nTRON is a robust blockchain ecosystem designed and developed by blockchain developers all over the world, which follows the philosophy of \"Decentralize the Web\".\nTronLink is a decentralized wallet that connects the DApps running on the TRON ecosystem. It ensures user’s data security through local storage of the private key and multi-layer algorithm encryption. In order to serve users worldwide, TronLink supports TRX, TRC-10, TRC-20, and TRC-721 tokens. Additionally, it offers a secure DApp explorer that facilitates the operation of Tron DApps.\n\nThe first and most popular TRON wallet. Recommended by TRON Foundation.\nTronLink is firstly launched at TRON’s official website and backed by TRON foundation, TronLink is the TRON wallet with the most users,coming in three versions (Chrome Wallet Extension/iOS/Android), and you’re looking at the Chrome Wallet Extension for TRON.","metadata":{"loc":{"lines":{"from":1,"to":6}}}}],["2435",{"pageContent":"Functions of Chrome Extension:\nProvides extensive support for TRON and now also supports Ethereum & BTTC & BSC;\nSupports safe interactions with DApps;\nProvides built-in support for hardware wallet.\n\nTronLink Wallet\n\nTrusted by over 10,000,000 users worldwide\n\nA decentralized self-custody wallet that is secure, transparent, and stable\nFully supports the TRON network and deeply supports its staking mechanisms\nTronLink Extension now supports EVM networks including Ethereum, BSC, and BTTC\nOffers seamless access to DApps and smooth on-chain operations, catering to various Web3 use cases\n\nMore Secure\n\nAsset Management\n\n\nDecentralized wallet: data security ensured through local storage of private key and multi-layer algorithm encryption.\n\n\nHot and cold wallets: sign in your hot wallet and store in your cold wallet to achieve physical isolation and double protection.\n\n\nNode stability and reliability: free switching among nodes and auto reconnection supported.\n\nMore Inclusive","metadata":{"loc":{"lines":{"from":8,"to":35}}}}],["2436",{"pageContent":"Node stability and reliability: free switching among nodes and auto reconnection supported.\n\nMore Inclusive\n\nNetwork Coverage\n\n\nDeep support for the TRON network: we support TRX, TRC-10, TRC-20, and TRC-721 tokens as well as unique staking mechanisms for you to obtain or delegate resources.\n\n\nHeterogeneous EVM networks supported: TronLink Extension now supports networks including Ethereum, BSC, and BTTC.\n\n\nMultichain HD wallet structure: this allows you to manage assets on TRON, Ethereum, BSC, and BTTC networks with a single mnemonic.\n\n\nMore Convenient\n\nUser Experience\n\n\nSimple and user-friendly: we support creating/importing wallets with one click, HD wallets, importing Ledger wallets via bluetooth and creating muiltiple wallet accounts.\n\n\nMultisignature feature: a new way of signing that enables multiple accounts to manage one set of assets in various use cases.","metadata":{"loc":{"lines":{"from":35,"to":59}}}}],["2437",{"pageContent":"Multisignature feature: a new way of signing that enables multiple accounts to manage one set of assets in various use cases.\n\n\nWeb3 browser: you can access trending Web3 DApps in DeFi, social media, and gaming in a few clicks and easily add DApps to your favorites.\n\n\nHD Wallets\nWhat is an HD Wallet?\nHD wallets are hierarchical deterministic wallets proposed in BIP-32 in order to avoid the trouble of managing a bunch of private keys. HD wallets allow selective sharing on multiple keypairs (private and public keys) that are generated from a single root. The seed is represented by mnemonic code (phrase) that consists of 12 words, which makes it easier for account holders to transcribe and memorize.\nTronLink Wallets - HD Wallets\nTronLink wallets support BIP-32 and BIP-44 proposals, and generate the corresponding TRON addresses based on the BIP-44 hierarchical sub-path.","metadata":{"loc":{"lines":{"from":59,"to":69}}}}],["2438",{"pageContent":"Custom Token\nWhat is Custom Token?\nUsers can manually add TRC-20 and TRC-721 assets that are not recorded as tokens on TronScan as custom tokens in TronLink, which helps users search and manage their token assets more easily.\nAdd Custom Token\nAdd: Add tokens in TronLink App: Home --> My Assets --> Add Custom Token\nPossible limitations:\nCertain TronLink features, such as \"transfer\" and \"approve,\" may be unavailable when custom tokens are added in TronLink. This is because certain ABI in the contract code (e.g., transfer, approve, etc.) are not identified. TronLink will notify users when such cases occur.\nSynchronization with TronScan: If the custom token has already been recorded on TronScan, Tronlink will notify the user to synchronize token information with TronScan; once done, the custom token will adopt the corresponding token information on TronScan.","metadata":{"loc":{"lines":{"from":71,"to":78}}}}],["2439",{"pageContent":"DeepLink\nDApps and H5 pages can launch the TronLink App to open the wallet, log in, make transfers, sign transactions, open DApps in the wallet, and more via DeepLink.\n\n\nTronLink Integration\nTronLink injects a version of TronWeb into the DApp that runs in TronLink's DApp Explorer. This enables the DApp to interact with TronLink DApps and the TRON network.\nDetails: Go to DApp\n\nDApp Explorer\nBasic Function\nThe DApp Explorer allows Tron DApps to run and automatically injects tronWeb and TronLink objects.\nExtension\nTron DApp running in the DApp Explorer injects iTron objects automatically to offer customized App service.","metadata":{"loc":{"lines":{"from":80,"to":92}}}}],["2440",{"pageContent":"How to Verify a TronLink APK\nWe have recently received feedback from the community that there are counterfeit TronLink APK (Android application package) files that may compromise the security of users' assets.\nThrough decompilation, cybercriminals implant code that can steal private keys and mnemonics in the official version of APK and then package and publish it on other websites for potential victims to fall into their trap.\nIf users download and use such fake TronLink wallets, their private keys or mnemonics will be leaked, risking the loss of all of their assets.\nTherefore, we have written this tutorial to guide users to check whether the APK they are using is genuine through SHA256/PGP verification.\nMethods of Verification\n1.SHA256 verification\n2.PGP verification\nThe following is the PGP public key information of TronLink official website APK:\nGitHub-TronLink: https://github.com/TronLink/Tronlink-Android\nPublic key: 7B910EA80207596075E6D7BA5D34F7A6550473BA","metadata":{"loc":{"lines":{"from":94,"to":104}}}}],["2441",{"pageContent":"The following is the PGP public key information of TronLink official website APK:\nGitHub-TronLink: https://github.com/TronLink/Tronlink-Android\nPublic key: 7B910EA80207596075E6D7BA5D34F7A6550473BA\nUser id: build_tronlink <build@tronlink.org>\nWhat is SHA256?\nThe SHA256 value is obtained by calculating the hash value of the APK through the SHA256 algorithm. By comparing the SHA256 value of the downloaded APK with the official one, users can verify if the content of the file has been tampered with.\nCompared with the more common MD5 algorithm, SHA256 is more time-consuming but more secure.\nWhat is PGP?\nPGP (Pretty Good Privacy) is an encryption program that provides cryptographic privacy, which can be used for integrity verification and source verification. PGP first calculates the APK file digest through the RSA algorithm and then encrypts the digest by using the private key of TronLink stored in the hardware to create a signature file.","metadata":{"loc":{"lines":{"from":104,"to":112}}}}],["2442",{"pageContent":"Users can import the TronLink PGP public key through the PGP public key server, decrypt the signature file using the key, and compare the decrypted file with the local APK file digest. If the two are consistent, then the local APK file is complete and untampered, which proves that it is the legit version launched by TronLink, as no one can access TronLink's official private key to sign the APK file digest.\nWhat is a signature file?\nTo create a signature file used in PGP, PGP encryption first calculates the APK file digest through the RSA algorithm and then encrypts the digest by using the private key of TronLink stored in the hardware. A signature file is used to verify if the APK file is officially launched by TronLink.\nThe SHA256 value and the signature file of TronLink official website APK\nVersion\nSHA256 Value\nSignature File\n4.11.3\nfae8a1bcb5f9a27942e6f076d65320990a1918f4cf8957c257c17361db564c8f\n​​\n4.11.4\nb97398a5fa6f342ff571525ee8378b4dafffa62f6058673a61ed441479a9ba84\n​​\n4.12.0","metadata":{"loc":{"lines":{"from":113,"to":126}}}}],["2443",{"pageContent":"Version\nSHA256 Value\nSignature File\n4.11.3\nfae8a1bcb5f9a27942e6f076d65320990a1918f4cf8957c257c17361db564c8f\n​​\n4.11.4\nb97398a5fa6f342ff571525ee8378b4dafffa62f6058673a61ed441479a9ba84\n​​\n4.12.0\n8a0855bfb7b2d14f270e907fb63d1fb699c0c6e8d72308fa528a1a5d07b26729\n​​\n4.13.0\n31025e84842f3d7dd431cc99718bbe73f727e1c10632a8340af1f783f8a68e94\n​​\n4.13.2\n1ec2455516073ad14afd1276381779261ddc55b3047a16852fb427c49eac41b3\n​​\n4.13.3\n1efdf82fc797548e70ef1be9870a6bb21bebb9631e4a4c616740b74fed5065e8\n​​\n4.13.6\na7a64b6dd948aa1f29557a27045de5786bdcfcb56586af1dc26d5cb2da1c3760\n​​\nSHA256 verification steps\nCalculate the SHA256 value by online tools\n1.Download the TronLink APK file;\n2.Go to​Note: this website is for calculating the SHA256 value of a file;\n3.Upload the APK to the website to obtain the SHA256 of the file. Select SHA256 as below, and Drop the APK to the area;","metadata":{"loc":{"lines":{"from":126,"to":154}}}}],["2444",{"pageContent":"2.Go to​Note: this website is for calculating the SHA256 value of a file;\n3.Upload the APK to the website to obtain the SHA256 of the file. Select SHA256 as below, and Drop the APK to the area;\n4.Compare the obtained SHA256 with the one in this document, the APK file is genuine if the two are consistent; otherwise, the file is counterfeit. If you find the file fake, please stop using the application at once, then download the official version of TronLink on  and transfer your assets out.\nObtain SHA256 on macOS\n1.Put the TronLink APK on your desktop;\n2.Open Terminal (Default Path: Launchpad—Others—Terminal), enter cd desktop/, then press the Enter key to confirm;\n3.Enter shasum -a 256 ‘The file name of  the APK’, press the Enter key to confirm and get the SHA256 of the APK;","metadata":{"loc":{"lines":{"from":154,"to":160}}}}],["2445",{"pageContent":"3.Enter shasum -a 256 ‘The file name of  the APK’, press the Enter key to confirm and get the SHA256 of the APK;\n4.Compare the obtained SHA256 with the one in this document, the APK file is genuine if the two are consistent; otherwise, the file is fake, in which case you should stop using the application at once, then download the official version of TronLink on  and transfer your assets out.\nObtain SHA256 on Windows\n1.Put the downloaded TronLink APK on your desktop;\n2.Open Command Prompt (Press Windows + R, then enter CMD and press the Enter key) and enter cd desktop/, then press Enter to confirm;\n3.Enter certUtil -hashfile ‘The file name of the APK’ SHA256, press Enter to confirm and get the SHA256 of the APK;","metadata":{"loc":{"lines":{"from":160,"to":165}}}}],["2446",{"pageContent":"3.Enter certUtil -hashfile ‘The file name of the APK’ SHA256, press Enter to confirm and get the SHA256 of the APK;\n4.Compare the obtained SHA256 with the one in this document, the APK file is genuine if the two are consistent; otherwise, the file is fake, in which case you should stop using the application at once, then download the official version of TronLink on  and transfer your assets out.\nPGP verification steps\n1.Install the client\nMethod 1: Install GPG Suite at  (recommended to non-developer users)\nMethod 2: Download GnuPG (GPG) Find the source code at ​\nEnter the source code and execute \"./configure & make install\" (You can download the dependency following the guide)\nMethod 3: Download the GnuPG installation package at ​\nPlease find the right package for your device. For example, macOS users should download GnuPG for OS X.","metadata":{"loc":{"lines":{"from":165,"to":173}}}}],["2447",{"pageContent":"Method 3: Download the GnuPG installation package at ​\nPlease find the right package for your device. For example, macOS users should download GnuPG for OS X.\nAfter installation, run gpg --help in Terminal or Command Prompt. The installation is considered successful when the version info is displayed. Note: you can find details on how to run Terminal and Command Prompt in the SHA256 section above.\n2.Import the TronLink PGP public key\nMethod 1: Use the GPG keychain which comes with GPG Suite, click “Lookup Key\n”, enter 7B910EA80207596075E6D7BA5D34F7A6550473BA, and import the public key shown in the result.\nMethod 2: Enter gpg --recv-keys 7B910EA80207596075E6D7BA5D34F7A6550473BA in Terminal or Command Prompt, and the public key will be imported automatically.\n3.Download the TronLink APK and the corresponding version of the PGP signature file, and put them on your desktop. Note: the latest versions of the APK and the PGP can be found on TronLink's official website.","metadata":{"loc":{"lines":{"from":173,"to":180}}}}],["2448",{"pageContent":"4.Integrity verification:\n* This is a crucial step. It is recommended that users always verify the file's integrity after download and before installation.\n(1) Enter cd desktop/ in Terminal or Command Prompt, and press Enter to confirm.\n(2) Enter gpg --verify ‘The signature file name of the APK’ ‘The file name of the APK’, and press Enter to confirm.\nIf the output is gpg: Good signature, then the APK is genuine. Otherwise, it is fake, in which case you should stop using it immediately, go to  to download the official version of TronLink, and transfer your assets out.","metadata":{"loc":{"lines":{"from":181,"to":185}}}}],["2449",{"pageContent":"Connect Website\nDEPRECATED\nThe methods in this section are deprecated and are expected to be removed in a few releases. The TRON community is discussing new specifications, you can go to  to participate in the discussion.\nConnect Website\nOverview\nTronLink supports TRX transfers, contract signature, authorization, etc. initiated by DApps. For security considerations, users are required to authorize the DApp to “connect website”. They can take further actions only after successful authorization. The DApp must first connect to the website, and wait for the user's permission before it can initiate a request for authorization.\nSpecification\nExample\nconst res = await tronWeb.request(\n  {\n    method: 'tron_requestAccounts',\n    params: {\n      websiteIcon: '<WEBSITE ICON URI>',\n      websiteName: '<WEBSITE NAME>',\n    },\n  }\n)\nParameters\ninterface RequestAccountsParams {\n  websiteIcon?: string;\n  websiteName?: string;\n}\nReturns\ninterface ReqestAccountsResponse {\n  code: 200 | 4000 | 4001,","metadata":{"loc":{"lines":{"from":187,"to":211}}}}],["2450",{"pageContent":"},\n  }\n)\nParameters\ninterface RequestAccountsParams {\n  websiteIcon?: string;\n  websiteName?: string;\n}\nReturns\ninterface ReqestAccountsResponse {\n  code: 200 | 4000 | 4001,\n  message: string\n}\nError Code\nDescription\nMessage\nnull\nWallet is locked\nEmpty string\n200\nThe site has previously been allowed to connect\nThe site is already in the whitelist\n200\nThe user approved the connection\nUser allowed the request.\n4000\nThe same DApp has already initiated a request to connect to the website, and the pop-up window has not been closed\nAuthorization requests are being processed, please do not resubmit\n4001\nThe user rejected connection\nUser rejected the request\nInteraction\nAfter triggering ‘tron_requestAccounts‘, there will be a pop-up window asking for confirmation:","metadata":{"loc":{"lines":{"from":211,"to":243}}}}],["2451",{"pageContent":"Add Token\nOverview\nButtons on DApps allow users to directly add the specified tokens to the asset list on their TronLink user extension.\nSpecification\nExample\nconst res = await tronWeb.request({\n  method: 'wallet_watchAsset',\n  params: {\n    type: 'TRC20',\n    options: {\n      address: 'TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t'\n    }\n  },\n});\nParameters\ninterface WatchAssetParams {\n  type: 'trc10' | 'trc20' | 'trc721';\n  options: {\n    address: string;\n    symbol?: string;\n    decimals?: number;\n    image?: string;\n  }\n}\nmethod: wallet_watchAsset fixed string\nparams: WatchAssetParams, the specific parameters are as follows:\ntype: Only 'trc10', 'trc20', 'trc721' are supported now\noptions:\naddress: the contract address of the token or the token id, required\nsymbol: placeholder (currently unused), optional\ndecimals: placeholder (currently unused), optional\nimage: placeholder (currently unused), optional\nReturns\nThis method has no return value\nInteraction\nAdd TRC10 assets","metadata":{"loc":{"lines":{"from":245,"to":280}}}}],["2452",{"pageContent":"decimals: placeholder (currently unused), optional\nimage: placeholder (currently unused), optional\nReturns\nThis method has no return value\nInteraction\nAdd TRC10 assets\nif (window.tronLink.ready) {\n  const tronweb = tronLink.tronWeb;\n  try {\n    tronweb.request({\n      method: 'wallet_watchAsset',\n      params: {\n        type: 'trc10',\n        options: {\n          address: '1002000'\n        },\n      },\n    });\n  } catch (e) {}\n}\nWhen the code is executed, a TronLink pop-up window for adding TRC10 assets will show up, and the user can click “Add” or “Cancel”.\n​\nAfter clicking \"Add\", users can see the added assets as shown in the following screen:\n​​\n​\nAdd TRC20 assets\nif (window.tronLink.ready) {\n  const tronweb = tronLink.tronWeb;\n  try {\n    tronweb.request({\n      method: 'wallet_watchAsset',\n      params: {\n        type: 'trc20',\n        options: {\n          address: 'TF17BgPaZYbz8oxbjhriubPDsA7ArKoLX3'\n        },\n      },\n    });\n  } catch (e) {}\n}","metadata":{"loc":{"lines":{"from":280,"to":319}}}}],["2453",{"pageContent":"method: 'wallet_watchAsset',\n      params: {\n        type: 'trc20',\n        options: {\n          address: 'TF17BgPaZYbz8oxbjhriubPDsA7ArKoLX3'\n        },\n      },\n    });\n  } catch (e) {}\n}\nWhen the code is executed, a TronLink pop-up window for adding TRC20 assets will show up, and the user can click “Add” or “Cancel”.\n​\nAfter clicking “Add”, users can see the added assets as shown in the following screen:\n​\nAdd TRC721 asset\nif (window.tronLink.ready) {\n  const tronweb = tronLink.tronWeb;\n  try {\n    tronweb.request({\n      method: 'wallet_watchAsset',\n      params: {\n        type: 'trc721',\n        options: {\n          address: 'TVtaUnsgKXhTfqSFRnHCsSXzPiXmm53nZt'\n        },\n      },\n    });\n  } catch (e) {}\n}\nWhen the code is executed, a TronLink pop-up window for adding TRC721 will show up, and the user can click “Add” or “Cancel”.\n​\nAfter clicking “Add”, users can see the added assets as shown in the following screen:","metadata":{"loc":{"lines":{"from":319,"to":350}}}}],["2454",{"pageContent":"Account Change Message\nMessage ID: accountsChanged\nOverview\nThis message is generated when:\nUsers log in\nUsers switch accounts\nUsers lock accounts\nThe wallet is automatically locked after timeout\nSpecification\nExample\nwindow.addEventListener('message', function (e) {\n  if (e.data.message && e.data.message.action === \"accountsChanged\") {\n    // handler logic\n    console.log('got accountsChanged event', e.data)\n  }\n})\nReturns\ninterface MessageEventAccountsChangedData {\n  isTronLink: boolean;\n  message: {\n    action: string;\n    data: {\n      address: string | boolean;\n    }\n  }\n}\nReturn value example\nWhen users log in, the content of the message body is:\n{\n  \"data\": {\n    \"address\": \"TZ5XixnRyraxJJy996Q1sip85PHWuj4793\" // Last selected account address\n  }\n}\nWhen users switch accounts, the content of the message body is:\n{\n  \"data\": {\n    \"address\": \"TRKb2nAnCBfwxnLxgoKJro6VbyA6QmsuXq\" // Newly selected account address\n  }\n}","metadata":{"loc":{"lines":{"from":352,"to":390}}}}],["2455",{"pageContent":"}\n}\nWhen users switch accounts, the content of the message body is:\n{\n  \"data\": {\n    \"address\": \"TRKb2nAnCBfwxnLxgoKJro6VbyA6QmsuXq\" // Newly selected account address\n  }\n}\nWhen users lock accounts and the wallet is automatically locked due to timeout, the message body content is:\n{\n  \"data\": {\n    \"address\": false\n  }\n}","metadata":{"loc":{"lines":{"from":390,"to":403}}}}],["2456",{"pageContent":"Network Change Message\nMessage ID: setNode\nOverview\nDevelopers can monitor this message to know network changes\nThis message is generated when:\nWhen the user changes the network\nSpecification\nExample\nwindow.addEventListener('message', function (e) {\n  if (e.data.message && e.data.message.action == \"setNode\") {\n    // handler logic\n    console.log('got setNode event', e.data)\n  }\n})\nReturns\n{\n  \"node\": {\n    // Information about the current network\n  },\n  \"connectNode\": {\n    // Node information of DApp chain\n  }\n}\n\nSuccessful connection message\nMessage ID: connect\nOverview\nDevelopers can monitor this message for connection changes.\nThis message is generated when:\nThe DApp requests a connection, and the user confirms the connection in the pop-up window\nUsers connect to the website\nSpecification\nExample\nwindow.addEventListener('message', function (e) {\n  if (e.data.message && e.data.message.action == \"connect\") {\n    // handler logic\n    console.log('got connect event', e.data)\n  }\n})","metadata":{"loc":{"lines":{"from":405,"to":443}}}}],["2457",{"pageContent":"Disconnect website message\nMessage ID: disconnect\nOverview\nDevelopers can monitor this message for connection changes.\nThis message is generated when:\nThe DApp requests a connection, and the user rejects the connection in the pop-up window\nUsers disconnect from the website\nSpecification\nExample\nwindow.addEventListener('message', function (e) {\n  if (e.data.message && e.data.message.action == \"disconnect\") {\n    // handler logic\n    console.log('got connect event', e.data)\n  }\n})\n\nMessages to Be Deprecated\nThe user rejects connection: “rejectWeb”\nThe user disconnects from the website: “disconnectWeb”\nThe user accepts connection: “acceptWeb”\nThe user requests to connect to the website: “connectWeb”","metadata":{"loc":{"lines":{"from":445,"to":465}}}}],["2458",{"pageContent":"Start Developing\nThis document will guide you to connect your DApp with the TronLink application in the easiest way.\nAfter the DApp is loaded, TronLink will inject the “window.tronLink” object into it.\nA user who has connected to this DApp can directly get tronLink.tronWeb.\nIf the user has not been connected to this DApp before, a request can be invoked to establish the connection before getting tronLink.tronWeb.\nasync function getTronWeb() {\n  let tronWeb;\n  if (window.tronLink.ready) {\n    tronWeb = tronLink.tronWeb;\n  } else {\n    const res = await tronLink.request({ method: 'tron_requestAccounts' });\n    if (res.code === 200) {\n      tronWeb = tronLink.tronWeb;\n    }\n  }\n  return tronWeb;\n}\nAfter getting the tronWeb instance, you can perform on-chain interactive actions such as signing transfers, multi-signature transactions, and messages.\nFor use cases of the tronWeb instance, please refer to the following document:\n​\nReference: ​","metadata":{"loc":{"lines":{"from":467,"to":487}}}}],["2459",{"pageContent":"Multi-Signature Transfer\nOverview\nFor this section, you may refer to ​\nSpecification\nExample\nif (window.tronLink.ready) {\n  const tronweb = tronLink.tronWeb;\n  const toAddress = \"TRKb2nAnCBfwxnLxgoKJro6VbyA6QmsuXq\";\n  const activePermissionId = 2;\n  const tx = await tronweb.transactionBuilder.sendTrx(\n    toAddress, 10,\n    { permissionId: activePermissionId}\n  ); // step 1\n  try {\n    const signedTx = await tronweb.trx.multiSign(tx, undefined, activePermissionId); // step 2\n    await tronweb.trx.sendRawTransaction(signedTx); // step 3\n  } catch (e) {}\n}\nIf the user chooses “Reject” in the pop-up window, an exception will be thrown, which the developer can catch for further processing.\nIf the user chooses “Sign” in the pop-up window, the DApp receives and broadcasts the signed transaction.","metadata":{"loc":{"lines":{"from":489,"to":508}}}}],["2460",{"pageContent":"Message Signature\nOverview\nDApp requires users to sign a hex message. The signed message will be forwarded to the back-end to verify whether a user's login is legitimate.\nPrerequisite\nThe DApp sends a request asking the user to connect the wallet to the website, and the user approves to the connection.\nSpecification\nExample\nif (window.tronLink.ready) {\n  const tronweb = tronLink.tronWeb;\n  try {\n    const message = \"0x1e\"; // any hex string\n    const signedString = await tronweb.trx.sign(message);\n  } catch (e) {}\n}\nParameters\n“tronLink.tronWeb.trx.sign” accepts a hexadecimal string as the parameter. The string represents the content to be signed.\nReturns\nIf the user chooses to sign in the pop-up window, the DApp will get the signed hexadecimal string. For example:\n0xaa302ca153b10dff25b5f00a7e2f603c5916b8f6d78cdaf2122e24cab56ad39a79f60ff3916dde9761baaadea439b567475dde183ee3f8530b4cc76082b29c341c\nIf an error occurs, the following information will be returned:","metadata":{"loc":{"lines":{"from":510,"to":529}}}}],["2461",{"pageContent":"0xaa302ca153b10dff25b5f00a7e2f603c5916b8f6d78cdaf2122e24cab56ad39a79f60ff3916dde9761baaadea439b567475dde183ee3f8530b4cc76082b29c341c\nIf an error occurs, the following information will be returned:\nUncaught (in promise) Invalid transaction provided\nInteraction\nWhen “tronweb.trx.sign(message);” is executed, a pop-up window will show in the TronLink wallet asking the user to confirm, as shown below. The message content will be in hex:\n​\nIf the user chooses “Reject” in the pop-up window, an exception will be thrown, which the developer can catch for further processing.","metadata":{"loc":{"lines":{"from":529,"to":535}}}}],["2462",{"pageContent":"General Transfer\nOverview\nDApp requires users to initiate a TRX transfer.\nPrerequisite\nThe DApp developer completes the request to connect to the website, and the user approves to the connection.\nThe DApp sends a request asking the user to connect the wallet to the website, and the user approves to the connection.\nIt takes 3 steps to initiate a transfer on the TRON network:\nCreate a transfer transaction\nSign the transaction\nBroadcast the signed transaction\nIn this process, Step 2 requires TronLink while both Step 1 and 3 happen on tronWeb.\nSpecification\nExample\nif (window.tronLink.ready) {\n  const tronweb = tronLink.tronWeb;\n  const fromAddress = tronweb.defaultAddress.base58;\n  const toAddress = \"TAHQdDiZajMMP26STUnfsiRMNyXdxAJakZ\";\n  const tx = await tronweb.transactionBuilder.sendTrx(toAddress, 10, fromAddress); // Step1\n  try {\n    const signedTx = await tronweb.trx.sign(tx); // Step2\n    await tronweb.trx.sendRawTransaction(signedTx); // Step3\n  } catch (e) {","metadata":{"loc":{"lines":{"from":537,"to":558}}}}],["2463",{"pageContent":"try {\n    const signedTx = await tronweb.trx.sign(tx); // Step2\n    await tronweb.trx.sendRawTransaction(signedTx); // Step3\n  } catch (e) {\n    // error handling\n  }\n}\nWhen “await tronweb.trx.sign(tx);” is executed, a pop-up window will show in the TronLink wallet asking the user to confirm, as shown below:\n​\nIf the user chooses on “Reject” in the pop-up window, an exception will be thrown, which the developer can catch for further processing.\nIf the user chooses “Sign” in the pop-up window, the DApp receives and broadcasts the signed transaction.","metadata":{"loc":{"lines":{"from":558,"to":568}}}}],["2464",{"pageContent":"Stake2.0\nWhen generating stake 2.0 transactions for DApps, for transactions of the DelegateResourceContract or UnDelegateResourceContract type, in order to display the estimated results during signature using the Tronlink extension, it is necessary to add the \"__options\" field to the transaction body.\nInside \"__options\", there are two values: estimatedBandwidth and estimatedEnergy, which correspond to the estimated energy and bandwidth of the delegate and reclaim operations, respectively.\nWhen generating stake 2.0 transactions using a non-tronlink extension injected tronweb, in order to display the corresponding type of resource for DelegateResourceContract or UnDelegateResourceContract type transactions during signature, the \"__resource\" field needs to be added to the transaction body. (Adding “resource” is only necessary for tronWeb that is not injected by a tronlink extension. TronWeb that is injected by tronlink extension does not require.)","metadata":{"loc":{"lines":{"from":570,"to":573}}}}],["2465",{"pageContent":"The \"__resource\" field corresponds to the values \"BANDWIDTH\" and \"ENERGY\".\n​\nFor example:\nconst transaction = await tronWeb.transactionBuilder.delegateResource(10e6, 'receiverAddress', 'BANDWIDTH', 'ownerAddress', false);\ntransaction.raw_data.contract[0].parameter.value.resource = \"BANDWIDTH\"\ntransaction.__options = {\"estimatedBandwidth\": 1}\nThe specific calculation logic of estimatedEnergy and estimatedBandwidth can be found in the last chapter of the \"\": \"How to convert resource share to amount?\"","metadata":{"loc":{"lines":{"from":574,"to":580}}}}],["2466",{"pageContent":"TronLink Integration\nSuggest Edits\nIntroduction\nTronLink, similar to MetaMask, is a bridge for allowing TRON DApps to run in the browser without having to deploy a TRON Full Node. If a user has TronLink already installed in the Chrome extension, then TronLink injects a version of TronWeb into every browser page. This allows for the web DApp to interact with the TRON network. Let's learn it with a simple example:\n\ndemo1","metadata":{"loc":{"lines":{"from":583,"to":588}}}}],["2467",{"pageContent":"demo1\n\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n    </head>\n    <body>\n    <button onclick=\"gettronweb()\">Can you get tronweb from tronlink?</button>\n    <script>\n        function gettronweb(){\n            if(window.tronWeb && window.tronWeb.defaultAddress.base58){\n                document.write(\"Yes, catch it:\",window.tronWeb.defaultAddress.base58)\n            }\n        }\n    </script>\n    </body>\n</html>\nOf course, tronweb has many functions waiting for you to use.\n\nSignature\nIn the process of completing the transaction, tronweb needs to let tronlink perform the signature. Here tronlink rewrites the signature. The signature process is completed in tronlink, and then the signed transaction is returned to tronweb for broadcasting. Let's learn it with a simple example:\n\ndemo2","metadata":{"loc":{"lines":{"from":588,"to":614}}}}],["2468",{"pageContent":"demo2\n\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n    </head>\n    <body>\n    <script>\n        var obj = setInterval(async ()=>{\n            if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\n                clearInterval(obj)\n                var tronweb = window.tronWeb\n                var tx = await tronweb.transactionBuilder.sendTrx('TN9RRaXkCFtTXRso2GdTZxSxxwufzxLQPP', 10, 'TTSFjEG3Lu9WkHdp4JrWYhbGP6K1REqnGQ')\n                var signedTx = await tronweb.trx.sign(tx)\n                var broastTx = await tronweb.trx.sendRawTransaction(signedTx)\n                console.log(broastTx)\n            }\n        }, 10)\n    </script>\n    </body>\n</html>\nWhen the code is executed to tronweb.trx.sign (tx), TronLink will pop up a window to confirm the signature.","metadata":{"loc":{"lines":{"from":614,"to":639}}}}],["2469",{"pageContent":"2474\nNow, I believe you have been able to complete TronWeb function calls in conjunction with TronLink.\n\nTronLink events\nTronLink currently supports sidechains and mainchains. Developers can detect the event message sent by TronLink in DAPP, what we can learn from this event message contain the sidechain or mainchain currently selected by TronLink, and which account is currently selected. Let's learn it with a simple example.\n\ndemo3","metadata":{"loc":{"lines":{"from":641,"to":647}}}}],["2470",{"pageContent":"demo3\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n<body>\n<script>\n    window.addEventListener('message', function (e) {\n        if (e.data.message && e.data.message.action == \"tabReply\") {\n            console.log(\"tabReply event\", e.data.message)\n            if (e.data.message.data.data.node.chain == '_'){\n                console.log(\"tronLink currently selects the main chain\")\n            }else{\n                console.log(\"tronLink currently selects the side chain\")\n            }\n        }\n\n        if (e.data.message && e.data.message.action == \"setAccount\") {\n            console.log(\"setAccount event\", e.data.message)\n            console.log(\"current address:\", e.data.message.data.address)","metadata":{"loc":{"lines":{"from":647,"to":671}}}}],["2471",{"pageContent":"}\n        if (e.data.message && e.data.message.action == \"setNode\") {\n            console.log(\"setNode event\", e.data.message)\n            if (e.data.message.data.node.chain == '_'){\n                console.log(\"tronLink currently selects the main chain\")\n            }else{\n                console.log(\"tronLink currently selects the side chain\")\n            }\n\n        }\n    })\n    var obj = setInterval(async ()=>{\n        if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\n            clearInterval(obj)\n            let tronweb = window.tronWeb\n\n        }\n    }, 10)\n\n</script>\n\n</body>\n</html>\nThe above code involves three events: tabReply, setAccount, and setNode. The following are the triggering scenarios of these events:","metadata":{"loc":{"lines":{"from":673,"to":696}}}}],["2472",{"pageContent":"}\n    }, 10)\n\n</script>\n\n</body>\n</html>\nThe above code involves three events: tabReply, setAccount, and setNode. The following are the triggering scenarios of these events:\n\nThe completing TronLink initialization(after page load)\ttabReply\nMain chain and side chain switching in TronLink:\tsetAccount、setNode\nSetting nodes in TronLink\tsetAccount、setNode\nBefore the DAPP page is loaded, you can judge the data.message.data.data.node.chain field of the tabReply event to determine whether TronLink chose the side chain or the main chain when the page was loaded. If it is '_', it means the main chain. , Otherwise it is the side chain, and the number of the side chain represented by chain, the number of each side chain is unique.","metadata":{"loc":{"lines":{"from":696,"to":708}}}}],["2473",{"pageContent":"After the DAPP page is loaded, you can judge the data.message.data.data.node.chain field of the setNode event to determine whether the user manually selected the side chain or the main chain in TronLink. If it is '_', it means the main chain , Otherwise it is the side chain, and the number of the side chain represented by chain, the number of each side chain is unique.\n\nWhen MainChain is selected, the node in the returned message event is the selected network.\n\n2480\nWhen DAppChain is selected, the node in the returned message event is the selected network.\n\n2492\n📘\nNote\n\n\nActually, when calling the functions, for the main chain and side chain, it can be called according to the method,because SunWeb inherits Tronweb.\n\nWhen the Shasta test network is selected, the node in the returned message event is the selected network.\n\n2492","metadata":{"loc":{"lines":{"from":710,"to":726}}}}],["2474",{"pageContent":"When the Shasta test network is selected, the node in the returned message event is the selected network.\n\n2492\n\nIntroduction\nSuggest Edits\nTronLink, similar to MetaMask, allows TRON DApp to run in the browser without deploying TRON FullNode. If the user has installed TronLink in the Chrome extension, then TronLink will inject tronWeb and tronLink objects into each browser page. This will allow the web DApp to interact with the TRON network.\n\nLet's look at it with a simple example.\n\n📘\nNote:\n\n\nThe demo in this article needs to rely on the development software or http server to run through the access side. Take the development software WebStorm as an example, click on the browser to visit the demo page.\n\n1493\nHTML","metadata":{"loc":{"lines":{"from":726,"to":743}}}}],["2475",{"pageContent":"1493\nHTML\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n<body>\n    <button onclick=\"getTronweb()\">Can you get tronweb from tronlink?</button>\n    <script>\n        function getTronweb(){\n            var obj = setInterval(async ()=>{\n                if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\n                    clearInterval(obj)\n                    document.write(\"Yes, catch it:\",window.tronWeb.defaultAddress.base58)\n                }\n            }, 10)\n        }\n\n    </script>\n</body>\n</html>\nPlease refer to documentation for other functions used by TronWeb.\n\nNew Variable Description\n📘\nNote:\n\n\nTronlink chrome v3.22.0 starts to support tronLink object injection, Tronlink APP Android and IOS versions will start to support tronLink object injection in v4.3.4.\n\nJSON","metadata":{"loc":{"lines":{"from":743,"to":778}}}}],["2476",{"pageContent":"Tronlink chrome v3.22.0 starts to support tronLink object injection, Tronlink APP Android and IOS versions will start to support tronLink object injection in v4.3.4.\n\nJSON\n\ninterface tronLinkParams{\n  ready: Bool; //Initialize to false, true after user authorization\n  request: (args: any): any => {};// The method of tuning plugins for dapp website\n  sunWeb: sunWeb;\n  tronWeb: tronWeb;\n}\n\nwindow.tronLink <tronLinkParams>;\n\n\n## Example\n\nwindow.tronLink = {\n  ready: true,\n  request: function(){}, // Plugin custom call entry method\n  sunWeb: sunWeb，\n  tronWeb: tronWeb;\n}\nUser Authorization\nRaise the authorization box so that users can authorize account information to the Dapp website\n\nJSON\n\ninterface requestAccountsResponse{\n  code: Number, // 200：ok 4000：in queue, no need to repeat commit， 4001：user rejected\n  message: String\n}","metadata":{"loc":{"lines":{"from":778,"to":808}}}}],["2477",{"pageContent":"JSON\n\ninterface requestAccountsResponse{\n  code: Number, // 200：ok 4000：in queue, no need to repeat commit， 4001：user rejected\n  message: String\n}\n\nconst res: requestAccountsResponse = await tronLink.request({method: 'tron_requestAccounts'})\ncode_Number\tExplain\n200\tUser acceptance of authorization\n4000\tIn the queue, no need to duplicate commits\n4001\tUser refusal to authorize\nSigning\nIn the process of completing a transaction, TronWeb needs to get TronLink to sign it. The signing process is done in TronLink, and then the signed transaction is returned to TronWeb for broadcast. Let's understand it by an example.\n\nHTML","metadata":{"loc":{"lines":{"from":808,"to":823}}}}],["2478",{"pageContent":"<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n    </head>\n    <body>\n    <script>\n        var obj = setInterval(async ()=>{\n            if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\n          //if (window.tronLink.tronWeb) \n                clearInterval(obj)\n                var tronweb = window.tronWeb\n                var tx = await tronweb.transactionBuilder.sendTrx('TN9RRaXkCFtTXRso2GdTZxSxxwufzxLQPP', 10, 'TTSFjEG3Lu9WkHdp4JrWYhbGP6K1REqnGQ')\n                var signedTx = await tronweb.trx.sign(tx)\n                var broastTx = await tronweb.trx.sendRawTransaction(signedTx)\n                console.log(broastTx)\n            }\n        }, 10)\n    </script>\n    </body>\n</html>\nWhen executing the code to tronweb.trx.sign(tx), TronLink will pop up a window to confirm the signature.","metadata":{"loc":{"lines":{"from":825,"to":849}}}}],["2479",{"pageContent":"Please refer to documentation for other functions used by TronWeb.","metadata":{"loc":{"lines":{"from":849,"to":849}}}}],["2480",{"pageContent":"Before you use a TRON wallet, please note:\n\n1. TRON wallets are developed and contributed by the community. TRON official website only display options for you to choose from.\n\n2.If you encounter any problem, you may contact community developers for help via the link of the wallet.\n\n3. It is your responsibility to choose a TRON wallet with caution and take measures to protect your TRX.\n\n4. If you need to manually enter FullNode and SolidityNode when using a TRON Android/iOS wallet, please select from available nodes>\n\nWallet\nIf you would like to list a wallet, please write to application@tron.network, and the TRON team will offer resources to promote your wallet.\nView standards and process >\n\nWallets on TRON:\nTronLink\n\nimToken\nLedger Wallet Hardware\n\nHuobi Wallet\nTrust Wallet\nCobo Wallet IOS/Android\n\nBitpie Wallet IOS/Android\n\nMath Wallet\nTokenPocket","metadata":{"loc":{"lines":{"from":1,"to":28}}}}],["2481",{"pageContent":"Wallets on TRON:\nTronLink\n\nimToken\nLedger Wallet Hardware\n\nHuobi Wallet\nTrust Wallet\nCobo Wallet IOS/Android\n\nBitpie Wallet IOS/Android\n\nMath Wallet\nTokenPocket\n\nKlever\nVision\nExodus\nAtomic Wallet\nBitkeep\nGuarda\nMoonstake Wallet\nAssure\nCoin Wallet\nNOW Wallet\nArctic Wallet\nTangem Wallet\nTrustee Wallet\nCwallet\nTRON Social Platform\nSupport\nPrivacy Policy\nFAQ\nBug Bounty Program\nWhistleblower Notice\nContact Us\n\npress@tron.network\nservice@tron.network\nCopyright © 2017-2023 TRON Network Limited. | All rights reserved","metadata":{"loc":{"lines":{"from":28,"to":67}}}}],["2482",{"pageContent":"What is Tronscan\nTronScan is the official explorer of the TRON public smart contracts blockchain. TronScan features a built-in web wallet for sending, receiving, and managing TRON tokens and dapp interactions across the network.\n\nTronScan covers metrics ranging from full node statistics to dapp interactions and smart contract triggers.\n\nWhat is TRONSCAN\n TRONSCAN Support\n4 years ago\nNot yet followed by anyone\nTRONSCAN is the first TRON-based blockchain explorer, allowing users to look up, confirm and validate transactions on TRON blockchain. Meanwhile, TRONSCAN not only has the basic features as a blockchain explorer, like looking up transactions, accounts, blocks, nodes, smart contracts and on-chain data, it also supports token-creation, contract deployment, voting, etc.","metadata":{"loc":{"lines":{"from":1,"to":10}}}}],["2483",{"pageContent":"TRON blockchain has a public ledger, from where TRONSCAN retrieve information and display them on our website. It is our mission to promote transparency of blockchains by retrieving and searching all transactions on TRON blockchain in the most transparent and accessible manner.\n\nHow to View TRON Addresses on TRONSCAN\n TRONSCAN Support\n1 year ago Updated\nNot yet followed by anyone\n \n\nUsers can search by transaction records, such as transfers, transaction Hash and token, on TRONSCAN. To search for a certain address, please copy and paste it in the search box at the top of the page and click Search.\n\nDetailed address information is as follows:\n\nAccount information:","metadata":{"loc":{"lines":{"from":12,"to":24}}}}],["2484",{"pageContent":"Detailed address information is as follows:\n\nAccount information:\n\nTransactions: total number of transactions, including smart contract triggering, TRX transfers, TRC10 transfers, asset freezing and votes, that are linked to the current account.\nTransfers: number of TRX transfers, TRC10 transfers and TRC20 transfers combined.\nUnwithdrawn voting reward: the share of SR rewards that is distributed to voters. Rewards for one voter = total SR rewards * reward distribution ratio * (votes cast by the voter/total votes).\nTotal balance: Sum of the value of all tokens in the account (including voting rights).\nTransfers:\n\nHash: hash is the unique identifier generated when executing an event. Hash is a unique value that can be used to track events.\nBlock: the block number of the block containing the transaction.\nAge: how long it has been since the transaction was confirmed.\nFrom: sender of the transaction.\nTo: receiver of the transaction.\nToken: name of the transferred token.\nTransactions:","metadata":{"loc":{"lines":{"from":24,"to":40}}}}],["2485",{"pageContent":"Contract type:\n mainly covering:\n\n1）TRANSFERCONTRACT （Transfer TRX）\n\n2）TRANSFERASSETCONTRACT（Transfer TRC10）\n\n3）FREEZEBALANCECONTRACT（TRX Staking）\n\n4）UNFREEZEBALANCECONTRACT（Unstake TRX）\n\n5）TRANSFERASSETCONTRACT（Trigger Smart Contracts）\n\n6）VOTEWITNESSCONTRACT（Vote）\n\n7）WITHDRAWBALANCECONTRACT（Claim Rewards）\n\n8）ACCOUNTPERMISSIONUPDATECONTRACT（Update Account Permission）\n\nHow to View an Account's Published Contracts\n TRONSCAN Support\n1 year ago Updated\nNot yet followed by anyone\nStep one: open TRONSCAN blockchain explorer （https://tronscan.org/）\n\nStep two: enter the account address and click on Search\n\nStep three: click on Contracts Published\n\nOn top of that, you can also view the following information on this page：\n\nToken Balances: this section displays the name, total amount, token type and balance of each token held by the address.\n\nTransfers:this section displays the hash value, status, result, block height, sending address and receiving address of each transfer under the address.","metadata":{"loc":{"lines":{"from":42,"to":75}}}}],["2486",{"pageContent":"Transfers:this section displays the hash value, status, result, block height, sending address and receiving address of each transfer under the address.\n\nTransactions:in addition to the basic information, users can also view the type of the contract called.\n\n\nHow to use TRONSCAN multi-signature feature\n TRONSCAN Support\n3 months ago Updated\nNot yet followed by anyone\nWIth multi-signature, one account can be jointly controlled by multiple users. To execute an action initiated by one of the controlling users, the weighted sum of signatures by some or all users on the access list must reach a certain threshold. \n\nStep 1: Open TRONSCAN and click Connect Wallet in the upper right corner.\n\nStep 2: Go to your account page and click Account. Scroll down to Access Setting.","metadata":{"loc":{"lines":{"from":75,"to":88}}}}],["2487",{"pageContent":"Step 1: Open TRONSCAN and click Connect Wallet in the upper right corner.\n\nStep 2: Go to your account page and click Account. Scroll down to Access Setting.\n\nTRONSCAN provides users with two permissions, namely owner permission and active permission. Owner permission has the highest authority. Addresses with account owner permission could initiate all actions towards the related account. Active permission provides a permission combination. For example, you can set up an active permission that only allows TRX transfers and stake assets. Addresses with account active permission could only initiate actions that are within the active permission.\n\nStep 3: Click “Edit Access” and name the active access in “Access Name” field.\n\nStep 4: Click “Add” under “Operate” field. In the pop-up window, check boxes to add accesses or un-check boxes to delete them, then click “Save”.","metadata":{"loc":{"lines":{"from":88,"to":96}}}}],["2488",{"pageContent":"Step 4: Click “Add” under “Operate” field. In the pop-up window, check boxes to add accesses or un-check boxes to delete them, then click “Save”.\n\nStep 5: In “Threshold” field, set the threshold value representing the total weights required to execute an operation. It can be any integer equal to or larger than 1.\n\nStep 6: In “Keys” field, enter the addresses you want to grant this active access to (5 addresses at most). Each address must be given a weight no larger than the threshold value, while total weights of all addresses combined must be larger than or equal to the threshold value. Transactions that require multi-signature are executed and recorded on the blockchain on the condition that addresses giving signed consent have a total weight greater than or equal to the threshold value.\n\nStep 7: After editing, please click “Save” to save your changes.","metadata":{"loc":{"lines":{"from":96,"to":102}}}}],["2489",{"pageContent":"Step 7: After editing, please click “Save” to save your changes.\n\n\nA tutorial on the labelling feature of TRONSCAN\n TRONSCAN Support\n3 months ago Updated\nNot yet followed by anyone\nThis feature allows you to label accounts with personal tags, making it easier to differentiate accounts.  \n\nStep 1: Open TRONSCAN, click “Sign in” on the top right.\n\nStep 2: After logging in, go to My Account and click Add.\n\nStep 3: Fill in Address, Tag and Note in the pop-up.\n\nStrp 4: Once successfully added, you can magage the tags in the tag list.","metadata":{"loc":{"lines":{"from":102,"to":117}}}}]]